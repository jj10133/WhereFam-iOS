export default "66777\n{\"version\":0,\"id\":\"eaae631136d2c64080dc788cf589d63adf7ca335e1b055bebdd348c957a19ccf\",\"main\":\"/app.js\",\"imports\":{},\"resolutions\":{\"/../node_modules/@hyperswarm/secret-stream/index.js\":{\"#package\":\"/../node_modules/@hyperswarm/secret-stream/package.json\",\"./lib/bridge\":\"/../node_modules/@hyperswarm/secret-stream/lib/bridge.js\",\"./lib/handshake\":\"/../node_modules/@hyperswarm/secret-stream/lib/handshake.js\",\"b4a\":\"/../node_modules/b4a/index.js\",\"hypercore-crypto\":\"/../node_modules/hypercore-crypto/index.js\",\"sodium-secretstream\":\"/../node_modules/sodium-secretstream/index.js\",\"sodium-universal\":\"/../node_modules/sodium-universal/index.js\",\"streamx\":\"/../node_modules/streamx/index.js\",\"timeout-refresh\":\"/../node_modules/timeout-refresh/index.js\",\"unslab\":\"/../node_modules/unslab/index.js\"},\"/../node_modules/@hyperswarm/secret-stream/lib/bridge.js\":{\"#package\":\"/../node_modules/@hyperswarm/secret-stream/package.json\",\"streamx\":\"/../node_modules/streamx/index.js\"},\"/../node_modules/@hyperswarm/secret-stream/lib/handshake.js\":{\"#package\":\"/../node_modules/@hyperswarm/secret-stream/package.json\",\"b4a\":\"/../node_modules/b4a/index.js\",\"noise-curve-ed\":\"/../node_modules/noise-curve-ed/index.js\",\"noise-handshake\":\"/../node_modules/noise-handshake/noise.js\",\"sodium-universal\":\"/../node_modules/sodium-universal/index.js\"},\"/../node_modules/@hyperswarm/secret-stream/package.json\":{},\"/../node_modules/b4a/index.js\":{\"#package\":\"/../node_modules/b4a/package.json\"},\"/../node_modules/b4a/package.json\":{},\"/../node_modules/bare-events/index.js\":{\"#package\":\"/../node_modules/bare-events/package.json\",\"./lib/errors\":\"/../node_modules/bare-events/lib/errors.js\"},\"/../node_modules/bare-events/lib/errors.js\":{\"#package\":\"/../node_modules/bare-events/package.json\"},\"/../node_modules/bare-events/package.json\":{},\"/../node_modules/bare-fs/binding.js\":{\"#package\":\"/../node_modules/bare-fs/package.json\",\".\":\"/../node_modules/bare-fs/prebuilds/android-arm64/bare-fs.bare\"},\"/../node_modules/bare-fs/index.js\":{\"#package\":\"/../node_modules/bare-fs/package.json\",\"./binding\":\"/../node_modules/bare-fs/binding.js\",\"bare-events\":\"/../node_modules/bare-events/index.js\",\"bare-path\":\"/../node_modules/bare-path/index.js\",\"bare-stream\":\"/../node_modules/bare-stream/index.js\"},\"/../node_modules/bare-fs/package.json\":{},\"/../node_modules/bare-fs/prebuilds/android-arm64/bare-fs.bare\":{\"#package\":\"/../node_modules/bare-fs/package.json\"},\"/../node_modules/bare-os/binding.js\":{\"#package\":\"/../node_modules/bare-os/package.json\",\".\":\"/../node_modules/bare-os/prebuilds/android-arm64/bare-os.bare\"},\"/../node_modules/bare-os/index.js\":{\"#package\":\"/../node_modules/bare-os/package.json\",\"./binding\":\"/../node_modules/bare-os/binding.js\",\"./lib/constants\":\"/../node_modules/bare-os/lib/constants.js\",\"./lib/errors\":\"/../node_modules/bare-os/lib/errors.js\"},\"/../node_modules/bare-os/lib/constants.js\":{\"#package\":\"/../node_modules/bare-os/package.json\",\"../binding\":\"/../node_modules/bare-os/binding.js\"},\"/../node_modules/bare-os/lib/errors.js\":{\"#package\":\"/../node_modules/bare-os/package.json\"},\"/../node_modules/bare-os/package.json\":{},\"/../node_modules/bare-os/prebuilds/android-arm64/bare-os.bare\":{\"#package\":\"/../node_modules/bare-os/package.json\"},\"/../node_modules/bare-path/index.js\":{\"#package\":\"/../node_modules/bare-path/package.json\",\"./lib/posix\":\"/../node_modules/bare-path/lib/posix.js\",\"./lib/win32\":\"/../node_modules/bare-path/lib/win32.js\"},\"/../node_modules/bare-path/lib/constants.js\":{\"#package\":\"/../node_modules/bare-path/package.json\"},\"/../node_modules/bare-path/lib/posix.js\":{\"#package\":\"/../node_modules/bare-path/package.json\",\"./constants\":\"/../node_modules/bare-path/lib/constants.js\",\"./shared\":\"/../node_modules/bare-path/lib/shared.js\",\"./win32\":\"/../node_modules/bare-path/lib/win32.js\",\"bare-os\":\"/../node_modules/bare-os/index.js\"},\"/../node_modules/bare-path/lib/shared.js\":{\"#package\":\"/../node_modules/bare-path/package.json\",\"./constants\":\"/../node_modules/bare-path/lib/constants.js\"},\"/../node_modules/bare-path/lib/win32.js\":{\"#package\":\"/../node_modules/bare-path/package.json\",\"./constants\":\"/../node_modules/bare-path/lib/constants.js\",\"./posix\":\"/../node_modules/bare-path/lib/posix.js\",\"./shared\":\"/../node_modules/bare-path/lib/shared.js\",\"bare-os\":\"/../node_modules/bare-os/index.js\"},\"/../node_modules/bare-path/package.json\":{},\"/../node_modules/bare-stream/index.js\":{\"#package\":\"/../node_modules/bare-stream/package.json\",\"streamx\":\"/../node_modules/streamx/index.js\"},\"/../node_modules/bare-stream/package.json\":{},\"/../node_modules/big-sparse-array/index.js\":{\"#package\":\"/../node_modules/big-sparse-array/package.json\"},\"/../node_modules/big-sparse-array/package.json\":{},\"/../node_modules/bits-to-bytes/index.js\":{\"#package\":\"/../node_modules/bits-to-bytes/package.json\",\"b4a\":\"/../node_modules/b4a/index.js\"},\"/../node_modules/bits-to-bytes/package.json\":{},\"/../node_modules/blind-relay/index.js\":{\"#package\":\"/../node_modules/blind-relay/package.json\",\"./lib/errors\":\"/../node_modules/blind-relay/lib/errors.js\",\"b4a\":\"/../node_modules/b4a/index.js\",\"bits-to-bytes\":\"/../node_modules/bits-to-bytes/index.js\",\"compact-encoding\":\"/../node_modules/compact-encoding/index.js\",\"compact-encoding-bitfield\":\"/../node_modules/compact-encoding-bitfield/index.js\",\"events\":\"/../node_modules/bare-events/index.js\",\"hypertrace\":\"/../node_modules/hypertrace/index.js\",\"protomux\":\"/../node_modules/protomux/index.js\",\"sodium-universal\":\"/../node_modules/sodium-universal/index.js\",\"streamx\":\"/../node_modules/streamx/index.js\"},\"/../node_modules/blind-relay/lib/errors.js\":{\"#package\":\"/../node_modules/blind-relay/package.json\"},\"/../node_modules/blind-relay/package.json\":{},\"/../node_modules/bogon/index.js\":{\"#package\":\"/../node_modules/bogon/package.json\",\"b4a\":\"/../node_modules/b4a/index.js\",\"compact-encoding\":\"/../node_modules/compact-encoding/index.js\",\"compact-encoding-net\":\"/../node_modules/compact-encoding-net/index.js\"},\"/../node_modules/bogon/package.json\":{},\"/../node_modules/codecs/index.js\":{\"#package\":\"/../node_modules/codecs/package.json\",\"b4a\":\"/../node_modules/b4a/index.js\"},\"/../node_modules/codecs/package.json\":{},\"/../node_modules/compact-encoding-bitfield/index.js\":{\"#package\":\"/../node_modules/compact-encoding-bitfield/package.json\",\"compact-encoding\":\"/../node_modules/compact-encoding/index.js\"},\"/../node_modules/compact-encoding-bitfield/package.json\":{},\"/../node_modules/compact-encoding-net/index.js\":{\"#package\":\"/../node_modules/compact-encoding-net/package.json\",\"compact-encoding\":\"/../node_modules/compact-encoding/index.js\"},\"/../node_modules/compact-encoding-net/package.json\":{},\"/../node_modules/compact-encoding/endian.js\":{\"#package\":\"/../node_modules/compact-encoding/package.json\"},\"/../node_modules/compact-encoding/index.js\":{\"#package\":\"/../node_modules/compact-encoding/package.json\",\"./endian\":\"/../node_modules/compact-encoding/endian.js\",\"./lexint\":\"/../node_modules/compact-encoding/lexint.js\",\"./raw\":\"/../node_modules/compact-encoding/raw.js\",\"b4a\":\"/../node_modules/b4a/index.js\"},\"/../node_modules/compact-encoding/lexint.js\":{\"#package\":\"/../node_modules/compact-encoding/package.json\"},\"/../node_modules/compact-encoding/package.json\":{},\"/../node_modules/compact-encoding/raw.js\":{\"#package\":\"/../node_modules/compact-encoding/package.json\",\"./endian\":\"/../node_modules/compact-encoding/endian.js\",\"b4a\":\"/../node_modules/b4a/index.js\"},\"/../node_modules/crc-native/binding.js\":{\"#package\":\"/../node_modules/crc-native/package.json\",\"node-gyp-build\":\"/../node_modules/node-gyp-build/index.js\"},\"/../node_modules/crc-native/index.js\":{\"#package\":\"/../node_modules/crc-native/package.json\",\"./binding\":\"/../node_modules/crc-native/binding.js\"},\"/../node_modules/crc-native/package.json\":{},\"/../node_modules/crc-universal/fallback.js\":{\"#package\":\"/../node_modules/crc-universal/package.json\",\"./lookup\":\"/../node_modules/crc-universal/lookup.js\"},\"/../node_modules/crc-universal/index.js\":{\"#package\":\"/../node_modules/crc-universal/package.json\",\"./fallback\":\"/../node_modules/crc-universal/fallback.js\",\"crc-native\":\"/../node_modules/crc-native/index.js\"},\"/../node_modules/crc-universal/lookup.js\":{\"#package\":\"/../node_modules/crc-universal/package.json\"},\"/../node_modules/crc-universal/package.json\":{},\"/../node_modules/debounceify/index.js\":{\"#package\":\"/../node_modules/debounceify/package.json\"},\"/../node_modules/debounceify/package.json\":{},\"/../node_modules/dht-rpc/index.js\":{\"#package\":\"/../node_modules/dht-rpc/package.json\",\"./lib/commands\":\"/../node_modules/dht-rpc/lib/commands.js\",\"./lib/errors\":\"/../node_modules/dht-rpc/lib/errors.js\",\"./lib/io\":\"/../node_modules/dht-rpc/lib/io.js\",\"./lib/peer\":\"/../node_modules/dht-rpc/lib/peer.js\",\"./lib/query\":\"/../node_modules/dht-rpc/lib/query.js\",\"./lib/session\":\"/../node_modules/dht-rpc/lib/session.js\",\"b4a\":\"/../node_modules/b4a/index.js\",\"compact-encoding\":\"/../node_modules/compact-encoding/index.js\",\"events\":\"/../node_modules/bare-events/index.js\",\"kademlia-routing-table\":\"/../node_modules/kademlia-routing-table/index.js\",\"nat-sampler\":\"/../node_modules/nat-sampler/index.js\",\"sodium-universal\":\"/../node_modules/sodium-universal/index.js\",\"time-ordered-set\":\"/../node_modules/time-ordered-set/index.js\",\"udx-native\":\"/../node_modules/udx-native/lib/udx.js\"},\"/../node_modules/dht-rpc/lib/commands.js\":{\"#package\":\"/../node_modules/dht-rpc/package.json\"},\"/../node_modules/dht-rpc/lib/errors.js\":{\"#package\":\"/../node_modules/dht-rpc/package.json\"},\"/../node_modules/dht-rpc/lib/io.js\":{\"#package\":\"/../node_modules/dht-rpc/package.json\",\"./errors\":\"/../node_modules/dht-rpc/lib/errors.js\",\"./peer\":\"/../node_modules/dht-rpc/lib/peer.js\",\"b4a\":\"/../node_modules/b4a/index.js\",\"compact-encoding\":\"/../node_modules/compact-encoding/index.js\",\"fast-fifo\":\"/../node_modules/fast-fifo/index.js\",\"sodium-universal\":\"/../node_modules/sodium-universal/index.js\"},\"/../node_modules/dht-rpc/lib/peer.js\":{\"#package\":\"/../node_modules/dht-rpc/package.json\",\"b4a\":\"/../node_modules/b4a/index.js\",\"compact-encoding\":\"/../node_modules/compact-encoding/index.js\",\"compact-encoding-net\":\"/../node_modules/compact-encoding-net/index.js\",\"sodium-universal\":\"/../node_modules/sodium-universal/index.js\"},\"/../node_modules/dht-rpc/lib/query.js\":{\"#package\":\"/../node_modules/dht-rpc/package.json\",\"./commands\":\"/../node_modules/dht-rpc/lib/commands.js\",\"./peer\":\"/../node_modules/dht-rpc/lib/peer.js\",\"b4a\":\"/../node_modules/b4a/index.js\",\"streamx\":\"/../node_modules/streamx/index.js\"},\"/../node_modules/dht-rpc/lib/session.js\":{\"#package\":\"/../node_modules/dht-rpc/package.json\"},\"/../node_modules/dht-rpc/package.json\":{},\"/../node_modules/fast-fifo/fixed-size.js\":{\"#package\":\"/../node_modules/fast-fifo/package.json\"},\"/../node_modules/fast-fifo/index.js\":{\"#package\":\"/../node_modules/fast-fifo/package.json\",\"./fixed-size\":\"/../node_modules/fast-fifo/fixed-size.js\"},\"/../node_modules/fast-fifo/package.json\":{},\"/../node_modules/flat-tree/index.js\":{\"#package\":\"/../node_modules/flat-tree/package.json\"},\"/../node_modules/flat-tree/package.json\":{},\"/../node_modules/fs-native-extensions/binding.js\":{\"#package\":\"/../node_modules/fs-native-extensions/package.json\",\"node-gyp-build\":\"/../node_modules/node-gyp-build/index.js\"},\"/../node_modules/fs-native-extensions/index.js\":{\"#package\":\"/../node_modules/fs-native-extensions/package.json\",\"./binding\":\"/../node_modules/fs-native-extensions/binding.js\",\"which-runtime\":\"/../node_modules/which-runtime/index.js\"},\"/../node_modules/fs-native-extensions/package.json\":{},\"/../node_modules/hyperbee/index.js\":{\"#package\":\"/../node_modules/hyperbee/package.json\",\"./iterators/diff\":\"/../node_modules/hyperbee/iterators/diff.js\",\"./iterators/history\":\"/../node_modules/hyperbee/iterators/history.js\",\"./iterators/range\":\"/../node_modules/hyperbee/iterators/range.js\",\"./lib/extension\":\"/../node_modules/hyperbee/lib/extension.js\",\"./lib/messages\":\"/../node_modules/hyperbee/lib/messages.js\",\"b4a\":\"/../node_modules/b4a/index.js\",\"codecs\":\"/../node_modules/codecs/index.js\",\"debounceify\":\"/../node_modules/debounceify/index.js\",\"hypercore-errors\":\"/../node_modules/hypercore-errors/index.js\",\"mutexify/promise\":\"/../node_modules/mutexify/promise.js\",\"rache\":\"/../node_modules/rache/index.js\",\"ready-resource\":\"/../node_modules/ready-resource/index.js\",\"safety-catch\":\"/../node_modules/safety-catch/index.js\",\"streamx\":\"/../node_modules/streamx/index.js\",\"unslab\":\"/../node_modules/unslab/index.js\"},\"/../node_modules/hyperbee/iterators/diff.js\":{\"#package\":\"/../node_modules/hyperbee/package.json\",\"b4a\":\"/../node_modules/b4a/index.js\"},\"/../node_modules/hyperbee/iterators/history.js\":{\"#package\":\"/../node_modules/hyperbee/package.json\"},\"/../node_modules/hyperbee/iterators/range.js\":{\"#package\":\"/../node_modules/hyperbee/package.json\",\"b4a\":\"/../node_modules/b4a/index.js\"},\"/../node_modules/hyperbee/lib/extension.js\":{\"#package\":\"/../node_modules/hyperbee/package.json\",\"./messages\":\"/../node_modules/hyperbee/lib/messages.js\"},\"/../node_modules/hyperbee/lib/messages.js\":{\"#package\":\"/../node_modules/hyperbee/package.json\",\"b4a\":\"/../node_modules/b4a/index.js\",\"protocol-buffers-encodings\":\"/../node_modules/protocol-buffers-encodings/index.js\"},\"/../node_modules/hyperbee/package.json\":{},\"/../node_modules/hypercore-crypto/index.js\":{\"#package\":\"/../node_modules/hypercore-crypto/package.json\",\"b4a\":\"/../node_modules/b4a/index.js\",\"compact-encoding\":\"/../node_modules/compact-encoding/index.js\",\"sodium-universal\":\"/../node_modules/sodium-universal/index.js\"},\"/../node_modules/hypercore-crypto/package.json\":{},\"/../node_modules/hypercore-errors/index.js\":{\"#package\":\"/../node_modules/hypercore-errors/package.json\"},\"/../node_modules/hypercore-errors/package.json\":{},\"/../node_modules/hypercore-id-encoding/index.js\":{\"#package\":\"/../node_modules/hypercore-id-encoding/package.json\",\"b4a\":\"/../node_modules/b4a/index.js\",\"z32\":\"/../node_modules/z32/index.js\"},\"/../node_modules/hypercore-id-encoding/package.json\":{},\"/../node_modules/hypercore/index.js\":{\"#package\":\"/../node_modules/hypercore/package.json\",\"./lib/batch\":\"/../node_modules/hypercore/lib/batch.js\",\"./lib/block-encryption\":\"/../node_modules/hypercore/lib/block-encryption.js\",\"./lib/core\":\"/../node_modules/hypercore/lib/core.js\",\"./lib/download\":\"/../node_modules/hypercore/lib/download.js\",\"./lib/info\":\"/../node_modules/hypercore/lib/info.js\",\"./lib/replicator\":\"/../node_modules/hypercore/lib/replicator.js\",\"./lib/streams\":\"/../node_modules/hypercore/lib/streams.js\",\"./lib/verifier\":\"/../node_modules/hypercore/lib/verifier.js\",\"@hyperswarm/secret-stream\":\"/../node_modules/@hyperswarm/secret-stream/index.js\",\"b4a\":\"/../node_modules/b4a/index.js\",\"compact-encoding\":\"/../node_modules/compact-encoding/index.js\",\"events\":\"/../node_modules/bare-events/index.js\",\"hypercore-crypto\":\"/../node_modules/hypercore-crypto/index.js\",\"hypercore-errors\":\"/../node_modules/hypercore-errors/index.js\",\"hypercore-id-encoding\":\"/../node_modules/hypercore-id-encoding/index.js\",\"is-options\":\"/../node_modules/is-options/index.js\",\"protomux\":\"/../node_modules/protomux/index.js\",\"random-access-file\":\"/../node_modules/random-access-file/index.js\",\"safety-catch\":\"/../node_modules/safety-catch/index.js\",\"unslab\":\"/../node_modules/unslab/index.js\",\"xache\":\"/../node_modules/xache/index.js\",\"z32\":\"/../node_modules/z32/index.js\"},\"/../node_modules/hypercore/lib/audit.js\":{\"#package\":\"/../node_modules/hypercore/package.json\",\"b4a\":\"/../node_modules/b4a/index.js\",\"compact-encoding\":\"/../node_modules/compact-encoding/index.js\",\"flat-tree\":\"/../node_modules/flat-tree/index.js\",\"hypercore-crypto\":\"/../node_modules/hypercore-crypto/index.js\"},\"/../node_modules/hypercore/lib/batch.js\":{\"#package\":\"/../node_modules/hypercore/package.json\",\"b4a\":\"/../node_modules/b4a/index.js\",\"compact-encoding\":\"/../node_modules/compact-encoding/index.js\",\"events\":\"/../node_modules/bare-events/index.js\",\"hypercore-errors\":\"/../node_modules/hypercore-errors/index.js\",\"safety-catch\":\"/../node_modules/safety-catch/index.js\"},\"/../node_modules/hypercore/lib/big-header.js\":{\"#package\":\"/../node_modules/hypercore/package.json\",\"./messages\":\"/../node_modules/hypercore/lib/messages.js\",\"compact-encoding\":\"/../node_modules/compact-encoding/index.js\"},\"/../node_modules/hypercore/lib/bitfield.js\":{\"#package\":\"/../node_modules/hypercore/package.json\",\"./compat\":\"/../node_modules/hypercore/lib/compat.js\",\"b4a\":\"/../node_modules/b4a/index.js\",\"big-sparse-array\":\"/../node_modules/big-sparse-array/index.js\"},\"/../node_modules/hypercore/lib/block-encryption.js\":{\"#package\":\"/../node_modules/hypercore/package.json\",\"./caps\":\"/../node_modules/hypercore/lib/caps.js\",\"b4a\":\"/../node_modules/b4a/index.js\",\"compact-encoding\":\"/../node_modules/compact-encoding/index.js\",\"sodium-universal\":\"/../node_modules/sodium-universal/index.js\"},\"/../node_modules/hypercore/lib/block-store.js\":{\"#package\":\"/../node_modules/hypercore/package.json\",\"b4a\":\"/../node_modules/b4a/index.js\",\"hypercore-errors\":\"/../node_modules/hypercore-errors/index.js\"},\"/../node_modules/hypercore/lib/caps.js\":{\"#package\":\"/../node_modules/hypercore/package.json\",\"b4a\":\"/../node_modules/b4a/index.js\",\"compact-encoding\":\"/../node_modules/compact-encoding/index.js\",\"hypercore-crypto\":\"/../node_modules/hypercore-crypto/index.js\",\"sodium-universal\":\"/../node_modules/sodium-universal/index.js\"},\"/../node_modules/hypercore/lib/compat.js\":{\"#package\":\"/../node_modules/hypercore/package.json\",\"quickbit-universal\":\"/../node_modules/quickbit-universal/index.js\",\"quickbit-universal/fallback\":\"/../node_modules/quickbit-universal/fallback.js\"},\"/../node_modules/hypercore/lib/core.js\":{\"#package\":\"/../node_modules/hypercore/package.json\",\"./audit\":\"/../node_modules/hypercore/lib/audit.js\",\"./big-header\":\"/../node_modules/hypercore/lib/big-header.js\",\"./bitfield\":\"/../node_modules/hypercore/lib/bitfield.js\",\"./block-store\":\"/../node_modules/hypercore/lib/block-store.js\",\"./info\":\"/../node_modules/hypercore/lib/info.js\",\"./merkle-tree\":\"/../node_modules/hypercore/lib/merkle-tree.js\",\"./messages\":\"/../node_modules/hypercore/lib/messages.js\",\"./mutex\":\"/../node_modules/hypercore/lib/mutex.js\",\"./oplog\":\"/../node_modules/hypercore/lib/oplog.js\",\"./remote-bitfield\":\"/../node_modules/hypercore/lib/remote-bitfield.js\",\"./verifier\":\"/../node_modules/hypercore/lib/verifier.js\",\"b4a\":\"/../node_modules/b4a/index.js\",\"hypercore-crypto\":\"/../node_modules/hypercore-crypto/index.js\",\"hypercore-errors\":\"/../node_modules/hypercore-errors/index.js\",\"unslab\":\"/../node_modules/unslab/index.js\"},\"/../node_modules/hypercore/lib/download.js\":{\"#package\":\"/../node_modules/hypercore/package.json\"},\"/../node_modules/hypercore/lib/hotswap-queue.js\":{\"#package\":\"/../node_modules/hypercore/package.json\"},\"/../node_modules/hypercore/lib/info.js\":{\"#package\":\"/../node_modules/hypercore/package.json\"},\"/../node_modules/hypercore/lib/merkle-tree.js\":{\"#package\":\"/../node_modules/hypercore/package.json\",\"./caps\":\"/../node_modules/hypercore/lib/caps.js\",\"b4a\":\"/../node_modules/b4a/index.js\",\"compact-encoding\":\"/../node_modules/compact-encoding/index.js\",\"flat-tree\":\"/../node_modules/flat-tree/index.js\",\"hypercore-crypto\":\"/../node_modules/hypercore-crypto/index.js\",\"hypercore-errors\":\"/../node_modules/hypercore-errors/index.js\",\"unslab\":\"/../node_modules/unslab/index.js\",\"xache\":\"/../node_modules/xache/index.js\"},\"/../node_modules/hypercore/lib/messages.js\":{\"#package\":\"/../node_modules/hypercore/package.json\",\"./caps\":\"/../node_modules/hypercore/lib/caps.js\",\"b4a\":\"/../node_modules/b4a/index.js\",\"compact-encoding\":\"/../node_modules/compact-encoding/index.js\",\"hypercore-errors\":\"/../node_modules/hypercore-errors/index.js\",\"unslab\":\"/../node_modules/unslab/index.js\"},\"/../node_modules/hypercore/lib/multisig.js\":{\"#package\":\"/../node_modules/hypercore/package.json\",\"./messages\":\"/../node_modules/hypercore/lib/messages.js\",\"b4a\":\"/../node_modules/b4a/index.js\",\"compact-encoding\":\"/../node_modules/compact-encoding/index.js\",\"flat-tree\":\"/../node_modules/flat-tree/index.js\"},\"/../node_modules/hypercore/lib/mutex.js\":{\"#package\":\"/../node_modules/hypercore/package.json\"},\"/../node_modules/hypercore/lib/oplog.js\":{\"#package\":\"/../node_modules/hypercore/package.json\",\"b4a\":\"/../node_modules/b4a/index.js\",\"compact-encoding\":\"/../node_modules/compact-encoding/index.js\",\"crc-universal\":\"/../node_modules/crc-universal/index.js\",\"hypercore-errors\":\"/../node_modules/hypercore-errors/index.js\"},\"/../node_modules/hypercore/lib/receiver-queue.js\":{\"#package\":\"/../node_modules/hypercore/package.json\",\"fast-fifo\":\"/../node_modules/fast-fifo/index.js\"},\"/../node_modules/hypercore/lib/remote-bitfield.js\":{\"#package\":\"/../node_modules/hypercore/package.json\",\"./compat\":\"/../node_modules/hypercore/lib/compat.js\",\"big-sparse-array\":\"/../node_modules/big-sparse-array/index.js\"},\"/../node_modules/hypercore/lib/replicator.js\":{\"#package\":\"/../node_modules/hypercore/package.json\",\"./caps\":\"/../node_modules/hypercore/lib/caps.js\",\"./hotswap-queue\":\"/../node_modules/hypercore/lib/hotswap-queue.js\",\"./messages\":\"/../node_modules/hypercore/lib/messages.js\",\"./receiver-queue\":\"/../node_modules/hypercore/lib/receiver-queue.js\",\"./remote-bitfield\":\"/../node_modules/hypercore/lib/remote-bitfield.js\",\"b4a\":\"/../node_modules/b4a/index.js\",\"flat-tree\":\"/../node_modules/flat-tree/index.js\",\"hypercore-errors\":\"/../node_modules/hypercore-errors/index.js\",\"random-array-iterator\":\"/../node_modules/random-array-iterator/index.js\",\"safety-catch\":\"/../node_modules/safety-catch/index.js\"},\"/../node_modules/hypercore/lib/streams.js\":{\"#package\":\"/../node_modules/hypercore/package.json\",\"streamx\":\"/../node_modules/streamx/index.js\"},\"/../node_modules/hypercore/lib/verifier.js\":{\"#package\":\"/../node_modules/hypercore/package.json\",\"./caps\":\"/../node_modules/hypercore/lib/caps.js\",\"./messages\":\"/../node_modules/hypercore/lib/messages.js\",\"./multisig\":\"/../node_modules/hypercore/lib/multisig.js\",\"b4a\":\"/../node_modules/b4a/index.js\",\"compact-encoding\":\"/../node_modules/compact-encoding/index.js\",\"flat-tree\":\"/../node_modules/flat-tree/index.js\",\"hypercore-crypto\":\"/../node_modules/hypercore-crypto/index.js\",\"hypercore-errors\":\"/../node_modules/hypercore-errors/index.js\",\"unslab\":\"/../node_modules/unslab/index.js\"},\"/../node_modules/hypercore/package.json\":{},\"/../node_modules/hyperdht/index.js\":{\"#package\":\"/../node_modules/hyperdht/package.json\",\"./lib/connect\":\"/../node_modules/hyperdht/lib/connect.js\",\"./lib/connection-pool\":\"/../node_modules/hyperdht/lib/connection-pool.js\",\"./lib/constants\":\"/../node_modules/hyperdht/lib/constants.js\",\"./lib/crypto\":\"/../node_modules/hyperdht/lib/crypto.js\",\"./lib/errors\":\"/../node_modules/hyperdht/lib/errors.js\",\"./lib/messages\":\"/../node_modules/hyperdht/lib/messages.js\",\"./lib/persistent\":\"/../node_modules/hyperdht/lib/persistent.js\",\"./lib/raw-stream-set\":\"/../node_modules/hyperdht/lib/raw-stream-set.js\",\"./lib/router\":\"/../node_modules/hyperdht/lib/router.js\",\"./lib/server\":\"/../node_modules/hyperdht/lib/server.js\",\"./lib/socket-pool\":\"/../node_modules/hyperdht/lib/socket-pool.js\",\"b4a\":\"/../node_modules/b4a/index.js\",\"compact-encoding\":\"/../node_modules/compact-encoding/index.js\",\"dht-rpc\":\"/../node_modules/dht-rpc/index.js\",\"hypercore-id-encoding\":\"/../node_modules/hypercore-id-encoding/index.js\",\"safety-catch\":\"/../node_modules/safety-catch/index.js\",\"sodium-universal\":\"/../node_modules/sodium-universal/index.js\"},\"/../node_modules/hyperdht/lib/announcer.js\":{\"#package\":\"/../node_modules/hyperdht/package.json\",\"./constants\":\"/../node_modules/hyperdht/lib/constants.js\",\"./encode\":\"/../node_modules/hyperdht/lib/encode.js\",\"./messages\":\"/../node_modules/hyperdht/lib/messages.js\",\"./persistent\":\"/../node_modules/hyperdht/lib/persistent.js\",\"./sleeper\":\"/../node_modules/hyperdht/lib/sleeper.js\",\"compact-encoding\":\"/../node_modules/compact-encoding/index.js\",\"safety-catch\":\"/../node_modules/safety-catch/index.js\",\"signal-promise\":\"/../node_modules/signal-promise/index.js\"},\"/../node_modules/hyperdht/lib/connect.js\":{\"#package\":\"/../node_modules/hyperdht/package.json\",\"./constants\":\"/../node_modules/hyperdht/lib/constants.js\",\"./crypto\":\"/../node_modules/hyperdht/lib/crypto.js\",\"./errors\":\"/../node_modules/hyperdht/lib/errors.js\",\"./holepuncher\":\"/../node_modules/hyperdht/lib/holepuncher.js\",\"./noise-wrap\":\"/../node_modules/hyperdht/lib/noise-wrap.js\",\"./secure-payload\":\"/../node_modules/hyperdht/lib/secure-payload.js\",\"./semaphore\":\"/../node_modules/hyperdht/lib/semaphore.js\",\"./sleeper\":\"/../node_modules/hyperdht/lib/sleeper.js\",\"@hyperswarm/secret-stream\":\"/../node_modules/@hyperswarm/secret-stream/index.js\",\"b4a\":\"/../node_modules/b4a/index.js\",\"blind-relay\":\"/../node_modules/blind-relay/index.js\",\"bogon\":\"/../node_modules/bogon/index.js\",\"safety-catch\":\"/../node_modules/safety-catch/index.js\",\"unslab\":\"/../node_modules/unslab/index.js\"},\"/../node_modules/hyperdht/lib/connection-pool.js\":{\"#package\":\"/../node_modules/hyperdht/package.json\",\"./errors\":\"/../node_modules/hyperdht/lib/errors.js\",\"b4a\":\"/../node_modules/b4a/index.js\",\"events\":\"/../node_modules/bare-events/index.js\"},\"/../node_modules/hyperdht/lib/constants.js\":{\"#package\":\"/../node_modules/hyperdht/package.json\",\"hypercore-crypto\":\"/../node_modules/hypercore-crypto/index.js\"},\"/../node_modules/hyperdht/lib/crypto.js\":{\"#package\":\"/../node_modules/hyperdht/package.json\",\"b4a\":\"/../node_modules/b4a/index.js\",\"sodium-universal\":\"/../node_modules/sodium-universal/index.js\"},\"/../node_modules/hyperdht/lib/encode.js\":{\"#package\":\"/../node_modules/hyperdht/package.json\",\"b4a\":\"/../node_modules/b4a/index.js\",\"compact-encoding\":\"/../node_modules/compact-encoding/index.js\"},\"/../node_modules/hyperdht/lib/errors.js\":{\"#package\":\"/../node_modules/hyperdht/package.json\"},\"/../node_modules/hyperdht/lib/holepuncher.js\":{\"#package\":\"/../node_modules/hyperdht/package.json\",\"./constants\":\"/../node_modules/hyperdht/lib/constants.js\",\"./nat\":\"/../node_modules/hyperdht/lib/nat.js\",\"./sleeper\":\"/../node_modules/hyperdht/lib/sleeper.js\",\"b4a\":\"/../node_modules/b4a/index.js\"},\"/../node_modules/hyperdht/lib/messages.js\":{\"#package\":\"/../node_modules/hyperdht/package.json\",\"compact-encoding\":\"/../node_modules/compact-encoding/index.js\",\"compact-encoding-net\":\"/../node_modules/compact-encoding-net/index.js\"},\"/../node_modules/hyperdht/lib/nat.js\":{\"#package\":\"/../node_modules/hyperdht/package.json\",\"../lib/constants\":\"/../node_modules/hyperdht/lib/constants.js\"},\"/../node_modules/hyperdht/lib/noise-wrap.js\":{\"#package\":\"/../node_modules/hyperdht/package.json\",\"./constants\":\"/../node_modules/hyperdht/lib/constants.js\",\"./errors\":\"/../node_modules/hyperdht/lib/errors.js\",\"./messages\":\"/../node_modules/hyperdht/lib/messages.js\",\"@hyperswarm/secret-stream\":\"/../node_modules/@hyperswarm/secret-stream/index.js\",\"b4a\":\"/../node_modules/b4a/index.js\",\"compact-encoding\":\"/../node_modules/compact-encoding/index.js\",\"noise-curve-ed\":\"/../node_modules/noise-curve-ed/index.js\",\"noise-handshake\":\"/../node_modules/noise-handshake/noise.js\",\"sodium-universal\":\"/../node_modules/sodium-universal/index.js\"},\"/../node_modules/hyperdht/lib/persistent.js\":{\"#package\":\"/../node_modules/hyperdht/package.json\",\"./constants\":\"/../node_modules/hyperdht/lib/constants.js\",\"./encode\":\"/../node_modules/hyperdht/lib/encode.js\",\"./messages\":\"/../node_modules/hyperdht/lib/messages.js\",\"b4a\":\"/../node_modules/b4a/index.js\",\"compact-encoding\":\"/../node_modules/compact-encoding/index.js\",\"record-cache\":\"/../node_modules/record-cache/index.js\",\"sodium-universal\":\"/../node_modules/sodium-universal/index.js\",\"unslab\":\"/../node_modules/unslab/index.js\",\"xache\":\"/../node_modules/xache/index.js\"},\"/../node_modules/hyperdht/lib/raw-stream-set.js\":{\"#package\":\"/../node_modules/hyperdht/package.json\"},\"/../node_modules/hyperdht/lib/router.js\":{\"#package\":\"/../node_modules/hyperdht/package.json\",\"./constants\":\"/../node_modules/hyperdht/lib/constants.js\",\"./errors\":\"/../node_modules/hyperdht/lib/errors.js\",\"./messages\":\"/../node_modules/hyperdht/lib/messages.js\",\"b4a\":\"/../node_modules/b4a/index.js\",\"compact-encoding\":\"/../node_modules/compact-encoding/index.js\",\"safety-catch\":\"/../node_modules/safety-catch/index.js\",\"xache\":\"/../node_modules/xache/index.js\"},\"/../node_modules/hyperdht/lib/secure-payload.js\":{\"#package\":\"/../node_modules/hyperdht/package.json\",\"./messages\":\"/../node_modules/hyperdht/lib/messages.js\",\"b4a\":\"/../node_modules/b4a/index.js\",\"sodium-universal\":\"/../node_modules/sodium-universal/index.js\"},\"/../node_modules/hyperdht/lib/semaphore.js\":{\"#package\":\"/../node_modules/hyperdht/package.json\"},\"/../node_modules/hyperdht/lib/server.js\":{\"#package\":\"/../node_modules/hyperdht/package.json\",\"./announcer\":\"/../node_modules/hyperdht/lib/announcer.js\",\"./constants\":\"/../node_modules/hyperdht/lib/constants.js\",\"./crypto\":\"/../node_modules/hyperdht/lib/crypto.js\",\"./errors\":\"/../node_modules/hyperdht/lib/errors.js\",\"./holepuncher\":\"/../node_modules/hyperdht/lib/holepuncher.js\",\"./noise-wrap\":\"/../node_modules/hyperdht/lib/noise-wrap.js\",\"./secure-payload\":\"/../node_modules/hyperdht/lib/secure-payload.js\",\"@hyperswarm/secret-stream\":\"/../node_modules/@hyperswarm/secret-stream/index.js\",\"b4a\":\"/../node_modules/b4a/index.js\",\"blind-relay\":\"/../node_modules/blind-relay/index.js\",\"bogon\":\"/../node_modules/bogon/index.js\",\"events\":\"/../node_modules/bare-events/index.js\",\"safety-catch\":\"/../node_modules/safety-catch/index.js\"},\"/../node_modules/hyperdht/lib/sleeper.js\":{\"#package\":\"/../node_modules/hyperdht/package.json\"},\"/../node_modules/hyperdht/lib/socket-pool.js\":{\"#package\":\"/../node_modules/hyperdht/package.json\",\"b4a\":\"/../node_modules/b4a/index.js\"},\"/../node_modules/hyperdht/package.json\":{},\"/../node_modules/hyperswarm/index.js\":{\"#package\":\"/../node_modules/hyperswarm/package.json\",\"./lib/connection-set\":\"/../node_modules/hyperswarm/lib/connection-set.js\",\"./lib/peer-discovery\":\"/../node_modules/hyperswarm/lib/peer-discovery.js\",\"./lib/peer-info\":\"/../node_modules/hyperswarm/lib/peer-info.js\",\"./lib/retry-timer\":\"/../node_modules/hyperswarm/lib/retry-timer.js\",\"b4a\":\"/../node_modules/b4a/index.js\",\"events\":\"/../node_modules/bare-events/index.js\",\"hyperdht\":\"/../node_modules/hyperdht/index.js\",\"shuffled-priority-queue\":\"/../node_modules/shuffled-priority-queue/index.js\",\"unslab\":\"/../node_modules/unslab/index.js\"},\"/../node_modules/hyperswarm/lib/bulk-timer.js\":{\"#package\":\"/../node_modules/hyperswarm/package.json\"},\"/../node_modules/hyperswarm/lib/connection-set.js\":{\"#package\":\"/../node_modules/hyperswarm/package.json\",\"b4a\":\"/../node_modules/b4a/index.js\"},\"/../node_modules/hyperswarm/lib/peer-discovery.js\":{\"#package\":\"/../node_modules/hyperswarm/package.json\",\"b4a\":\"/../node_modules/b4a/index.js\",\"safety-catch\":\"/../node_modules/safety-catch/index.js\"},\"/../node_modules/hyperswarm/lib/peer-info.js\":{\"#package\":\"/../node_modules/hyperswarm/package.json\",\"b4a\":\"/../node_modules/b4a/index.js\",\"events\":\"/../node_modules/bare-events/index.js\",\"unslab\":\"/../node_modules/unslab/index.js\"},\"/../node_modules/hyperswarm/lib/retry-timer.js\":{\"#package\":\"/../node_modules/hyperswarm/package.json\",\"./bulk-timer\":\"/../node_modules/hyperswarm/lib/bulk-timer.js\"},\"/../node_modules/hyperswarm/package.json\":{},\"/../node_modules/hypertrace/index.js\":{\"#package\":\"/../node_modules/hypertrace/package.json\"},\"/../node_modules/hypertrace/package.json\":{},\"/../node_modules/is-options/index.js\":{\"#package\":\"/../node_modules/is-options/package.json\",\"b4a\":\"/../node_modules/b4a/index.js\"},\"/../node_modules/is-options/package.json\":{},\"/../node_modules/kademlia-routing-table/index.js\":{\"#package\":\"/../node_modules/kademlia-routing-table/package.json\",\"events\":\"/../node_modules/bare-events/index.js\"},\"/../node_modules/kademlia-routing-table/package.json\":{},\"/../node_modules/mutexify/index.js\":{\"#package\":\"/../node_modules/mutexify/package.json\",\"queue-tick\":\"/../node_modules/queue-tick/process-next-tick.js\"},\"/../node_modules/mutexify/package.json\":{},\"/../node_modules/mutexify/promise.js\":{\"#package\":\"/../node_modules/mutexify/package.json\",\".\":\"/../node_modules/mutexify/index.js\"},\"/../node_modules/nanoassert/index.js\":{\"#package\":\"/../node_modules/nanoassert/package.json\"},\"/../node_modules/nanoassert/package.json\":{},\"/../node_modules/nat-sampler/index.js\":{\"#package\":\"/../node_modules/nat-sampler/package.json\"},\"/../node_modules/nat-sampler/package.json\":{},\"/../node_modules/node-gyp-build/index.js\":{\"#package\":\"/../node_modules/node-gyp-build/package.json\",\"./node-gyp-build.js\":\"/../node_modules/node-gyp-build/node-gyp-build.js\"},\"/../node_modules/node-gyp-build/node-gyp-build.js\":{\"#package\":\"/../node_modules/node-gyp-build/package.json\",\"fs\":\"builtin:fs\",\"os\":\"builtin:os\",\"path\":\"builtin:path\"},\"/../node_modules/node-gyp-build/package.json\":{},\"/../node_modules/noise-curve-ed/index.js\":{\"#package\":\"/../node_modules/noise-curve-ed/package.json\",\"b4a\":\"/../node_modules/b4a/index.js\",\"nanoassert\":\"/../node_modules/nanoassert/index.js\",\"sodium-universal\":\"/../node_modules/sodium-universal/index.js\"},\"/../node_modules/noise-curve-ed/package.json\":{},\"/../node_modules/noise-handshake/cipher.js\":{\"#package\":\"/../node_modules/noise-handshake/package.json\",\"b4a\":\"/../node_modules/b4a/index.js\",\"sodium-universal\":\"/../node_modules/sodium-universal/index.js\"},\"/../node_modules/noise-handshake/dh.js\":{\"#package\":\"/../node_modules/noise-handshake/package.json\",\"b4a\":\"/../node_modules/b4a/index.js\",\"nanoassert\":\"/../node_modules/nanoassert/index.js\",\"sodium-universal\":\"/../node_modules/sodium-universal/index.js\"},\"/../node_modules/noise-handshake/hkdf.js\":{\"#package\":\"/../node_modules/noise-handshake/package.json\",\"./hmac\":\"/../node_modules/noise-handshake/hmac.js\",\"b4a\":\"/../node_modules/b4a/index.js\",\"nanoassert\":\"/../node_modules/nanoassert/index.js\"},\"/../node_modules/noise-handshake/hmac.js\":{\"#package\":\"/../node_modules/noise-handshake/package.json\",\"b4a\":\"/../node_modules/b4a/index.js\",\"sodium-universal\":\"/../node_modules/sodium-universal/index.js\"},\"/../node_modules/noise-handshake/noise.js\":{\"#package\":\"/../node_modules/noise-handshake/package.json\",\"./hkdf\":\"/../node_modules/noise-handshake/hkdf.js\",\"./symmetric-state\":\"/../node_modules/noise-handshake/symmetric-state.js\",\"b4a\":\"/../node_modules/b4a/index.js\",\"nanoassert\":\"/../node_modules/nanoassert/index.js\"},\"/../node_modules/noise-handshake/package.json\":{},\"/../node_modules/noise-handshake/symmetric-state.js\":{\"#package\":\"/../node_modules/noise-handshake/package.json\",\"./cipher\":\"/../node_modules/noise-handshake/cipher.js\",\"./dh\":\"/../node_modules/noise-handshake/dh.js\",\"./hkdf\":\"/../node_modules/noise-handshake/hkdf.js\",\"b4a\":\"/../node_modules/b4a/index.js\",\"nanoassert\":\"/../node_modules/nanoassert/index.js\",\"sodium-universal\":\"/../node_modules/sodium-universal/index.js\"},\"/../node_modules/protocol-buffers-encodings/index.js\":{\"#package\":\"/../node_modules/protocol-buffers-encodings/package.json\",\"b4a\":\"/../node_modules/b4a/index.js\",\"signed-varint\":\"/../node_modules/signed-varint/index.js\",\"varint\":\"/../node_modules/varint/index.js\"},\"/../node_modules/protocol-buffers-encodings/package.json\":{},\"/../node_modules/protomux/index.js\":{\"#package\":\"/../node_modules/protomux/package.json\",\"b4a\":\"/../node_modules/b4a/index.js\",\"compact-encoding\":\"/../node_modules/compact-encoding/index.js\",\"queue-tick\":\"/../node_modules/queue-tick/process-next-tick.js\",\"safety-catch\":\"/../node_modules/safety-catch/index.js\",\"unslab\":\"/../node_modules/unslab/index.js\"},\"/../node_modules/protomux/package.json\":{},\"/../node_modules/queue-tick/package.json\":{},\"/../node_modules/queue-tick/process-next-tick.js\":{\"#package\":\"/../node_modules/queue-tick/package.json\",\"./queue-microtask\":\"/../node_modules/queue-tick/queue-microtask.js\"},\"/../node_modules/queue-tick/queue-microtask.js\":{\"#package\":\"/../node_modules/queue-tick/package.json\"},\"/../node_modules/quickbit-native/binding.js\":{\"#package\":\"/../node_modules/quickbit-native/package.json\",\"node-gyp-build\":\"/../node_modules/node-gyp-build/index.js\"},\"/../node_modules/quickbit-native/index.js\":{\"#package\":\"/../node_modules/quickbit-native/package.json\",\"./binding\":\"/../node_modules/quickbit-native/binding.js\",\"b4a\":\"/../node_modules/b4a/index.js\"},\"/../node_modules/quickbit-native/package.json\":{},\"/../node_modules/quickbit-universal/fallback.js\":{\"#package\":\"/../node_modules/quickbit-universal/package.json\",\"simdle-universal\":\"/../node_modules/simdle-universal/index.js\"},\"/../node_modules/quickbit-universal/index.js\":{\"#package\":\"/../node_modules/quickbit-universal/package.json\",\"./fallback\":\"/../node_modules/quickbit-universal/fallback.js\",\"quickbit-native\":\"/../node_modules/quickbit-native/index.js\"},\"/../node_modules/quickbit-universal/package.json\":{},\"/../node_modules/rache/index.js\":{\"#package\":\"/../node_modules/rache/package.json\"},\"/../node_modules/rache/package.json\":{},\"/../node_modules/random-access-file/index.js\":{\"#package\":\"/../node_modules/random-access-file/package.json\",\"fs\":\"/../node_modules/bare-fs/index.js\",\"fs-native-extensions\":\"/../node_modules/fs-native-extensions/index.js\",\"path\":\"/../node_modules/bare-path/index.js\",\"random-access-storage\":\"/../node_modules/random-access-storage/index.js\"},\"/../node_modules/random-access-file/package.json\":{},\"/../node_modules/random-access-storage/index.js\":{\"#package\":\"/../node_modules/random-access-storage/package.json\",\"events\":\"/../node_modules/bare-events/index.js\",\"queue-tick\":\"/../node_modules/queue-tick/process-next-tick.js\"},\"/../node_modules/random-access-storage/package.json\":{},\"/../node_modules/random-array-iterator/index.js\":{\"#package\":\"/../node_modules/random-array-iterator/package.json\"},\"/../node_modules/random-array-iterator/package.json\":{},\"/../node_modules/ready-resource/index.js\":{\"#package\":\"/../node_modules/ready-resource/package.json\",\"events\":\"/../node_modules/bare-events/index.js\"},\"/../node_modules/ready-resource/package.json\":{},\"/../node_modules/record-cache/index.js\":{\"#package\":\"/../node_modules/record-cache/package.json\",\"b4a\":\"/../node_modules/b4a/index.js\"},\"/../node_modules/record-cache/package.json\":{},\"/../node_modules/safety-catch/index.js\":{\"#package\":\"/../node_modules/safety-catch/package.json\"},\"/../node_modules/safety-catch/package.json\":{},\"/../node_modules/shuffled-priority-queue/index.js\":{\"#package\":\"/../node_modules/shuffled-priority-queue/package.json\",\"unordered-set\":\"/../node_modules/unordered-set/index.js\"},\"/../node_modules/shuffled-priority-queue/package.json\":{},\"/../node_modules/signal-promise/index.js\":{\"#package\":\"/../node_modules/signal-promise/package.json\"},\"/../node_modules/signal-promise/package.json\":{},\"/../node_modules/signed-varint/index.js\":{\"#package\":\"/../node_modules/signed-varint/package.json\",\"varint\":\"/../node_modules/varint/index.js\"},\"/../node_modules/signed-varint/package.json\":{},\"/../node_modules/simdle-native/binding.js\":{\"#package\":\"/../node_modules/simdle-native/package.json\",\"node-gyp-build\":\"/../node_modules/node-gyp-build/index.js\"},\"/../node_modules/simdle-native/index.js\":{\"#package\":\"/../node_modules/simdle-native/package.json\",\"./binding\":\"/../node_modules/simdle-native/binding.js\",\"b4a\":\"/../node_modules/b4a/index.js\"},\"/../node_modules/simdle-native/package.json\":{},\"/../node_modules/simdle-universal/fallback.js\":{\"#package\":\"/../node_modules/simdle-universal/package.json\",\"./scalar\":\"/../node_modules/simdle-universal/scalar.js\",\"b4a\":\"/../node_modules/b4a/index.js\"},\"/../node_modules/simdle-universal/index.js\":{\"#package\":\"/../node_modules/simdle-universal/package.json\",\"./fallback\":\"/../node_modules/simdle-universal/fallback.js\",\"simdle-native\":\"/../node_modules/simdle-native/index.js\"},\"/../node_modules/simdle-universal/package.json\":{},\"/../node_modules/simdle-universal/scalar.js\":{\"#package\":\"/../node_modules/simdle-universal/package.json\"},\"/../node_modules/sodium-native/index.js\":{\"#package\":\"/../node_modules/sodium-native/package.json\",\"node-gyp-build\":\"/../node_modules/node-gyp-build/index.js\"},\"/../node_modules/sodium-native/package.json\":{},\"/../node_modules/sodium-secretstream/index.js\":{\"#package\":\"/../node_modules/sodium-secretstream/package.json\",\"b4a\":\"/../node_modules/b4a/index.js\",\"sodium-universal\":\"/../node_modules/sodium-universal/index.js\"},\"/../node_modules/sodium-secretstream/package.json\":{},\"/../node_modules/sodium-universal/index.js\":{\"#package\":\"/../node_modules/sodium-universal/package.json\",\"sodium-native\":\"/../node_modules/sodium-native/index.js\"},\"/../node_modules/sodium-universal/package.json\":{},\"/../node_modules/streamx/index.js\":{\"#package\":\"/../node_modules/streamx/package.json\",\"events\":\"/../node_modules/bare-events/index.js\",\"fast-fifo\":\"/../node_modules/fast-fifo/index.js\",\"text-decoder\":\"/../node_modules/text-decoder/index.js\"},\"/../node_modules/streamx/package.json\":{},\"/../node_modules/text-decoder/index.js\":{\"#package\":\"/../node_modules/text-decoder/package.json\",\"./lib/pass-through-decoder\":\"/../node_modules/text-decoder/lib/pass-through-decoder.js\",\"./lib/utf8-decoder\":\"/../node_modules/text-decoder/lib/utf8-decoder.js\"},\"/../node_modules/text-decoder/lib/pass-through-decoder.js\":{\"#package\":\"/../node_modules/text-decoder/package.json\",\"b4a\":\"/../node_modules/b4a/index.js\"},\"/../node_modules/text-decoder/lib/utf8-decoder.js\":{\"#package\":\"/../node_modules/text-decoder/package.json\",\"b4a\":\"/../node_modules/b4a/index.js\"},\"/../node_modules/text-decoder/package.json\":{},\"/../node_modules/time-ordered-set/index.js\":{\"#package\":\"/../node_modules/time-ordered-set/package.json\"},\"/../node_modules/time-ordered-set/package.json\":{},\"/../node_modules/timeout-refresh/browser.js\":{\"#package\":\"/../node_modules/timeout-refresh/package.json\"},\"/../node_modules/timeout-refresh/index.js\":{\"#package\":\"/../node_modules/timeout-refresh/package.json\",\"./browser\":\"/../node_modules/timeout-refresh/browser.js\",\"./node\":\"/../node_modules/timeout-refresh/node.js\"},\"/../node_modules/timeout-refresh/node.js\":{\"#package\":\"/../node_modules/timeout-refresh/package.json\"},\"/../node_modules/timeout-refresh/package.json\":{},\"/../node_modules/udx-native/binding.js\":{\"#package\":\"/../node_modules/udx-native/package.json\",\"node-gyp-build\":\"/../node_modules/node-gyp-build/index.js\"},\"/../node_modules/udx-native/lib/ip.js\":{\"#package\":\"/../node_modules/udx-native/package.json\"},\"/../node_modules/udx-native/lib/network-interfaces.js\":{\"#package\":\"/../node_modules/udx-native/package.json\",\"../binding\":\"/../node_modules/udx-native/binding.js\",\"b4a\":\"/../node_modules/b4a/index.js\",\"events\":\"/../node_modules/bare-events/index.js\"},\"/../node_modules/udx-native/lib/socket.js\":{\"#package\":\"/../node_modules/udx-native/package.json\",\"../binding\":\"/../node_modules/udx-native/binding.js\",\"./ip\":\"/../node_modules/udx-native/lib/ip.js\",\"b4a\":\"/../node_modules/b4a/index.js\",\"events\":\"/../node_modules/bare-events/index.js\"},\"/../node_modules/udx-native/lib/stream.js\":{\"#package\":\"/../node_modules/udx-native/package.json\",\"../binding\":\"/../node_modules/udx-native/binding.js\",\"./ip\":\"/../node_modules/udx-native/lib/ip.js\",\"b4a\":\"/../node_modules/b4a/index.js\",\"streamx\":\"/../node_modules/streamx/index.js\"},\"/../node_modules/udx-native/lib/udx.js\":{\"#package\":\"/../node_modules/udx-native/package.json\",\"../binding\":\"/../node_modules/udx-native/binding.js\",\"./ip\":\"/../node_modules/udx-native/lib/ip.js\",\"./network-interfaces\":\"/../node_modules/udx-native/lib/network-interfaces.js\",\"./socket\":\"/../node_modules/udx-native/lib/socket.js\",\"./stream\":\"/../node_modules/udx-native/lib/stream.js\",\"b4a\":\"/../node_modules/b4a/index.js\"},\"/../node_modules/udx-native/package.json\":{},\"/../node_modules/unordered-set/index.js\":{\"#package\":\"/../node_modules/unordered-set/package.json\"},\"/../node_modules/unordered-set/package.json\":{},\"/../node_modules/unslab/index.js\":{\"#package\":\"/../node_modules/unslab/package.json\",\"b4a\":\"/../node_modules/b4a/index.js\"},\"/../node_modules/unslab/package.json\":{},\"/../node_modules/varint/decode.js\":{\"#package\":\"/../node_modules/varint/package.json\"},\"/../node_modules/varint/encode.js\":{\"#package\":\"/../node_modules/varint/package.json\"},\"/../node_modules/varint/index.js\":{\"#package\":\"/../node_modules/varint/package.json\",\"./decode.js\":\"/../node_modules/varint/decode.js\",\"./encode.js\":\"/../node_modules/varint/encode.js\",\"./length.js\":\"/../node_modules/varint/length.js\"},\"/../node_modules/varint/length.js\":{\"#package\":\"/../node_modules/varint/package.json\"},\"/../node_modules/varint/package.json\":{},\"/../node_modules/which-runtime/index.js\":{\"#package\":\"/../node_modules/which-runtime/package.json\"},\"/../node_modules/which-runtime/package.json\":{},\"/../node_modules/xache/index.js\":{\"#package\":\"/../node_modules/xache/package.json\"},\"/../node_modules/xache/package.json\":{},\"/../node_modules/z32/index.js\":{\"#package\":\"/../node_modules/z32/package.json\",\"b4a\":\"/../node_modules/b4a/index.js\"},\"/../node_modules/z32/package.json\":{},\"/../package.json\":{},\"/app.js\":{\"#package\":\"/../package.json\",\"b4a\":\"/../node_modules/b4a/index.js\",\"hyperbee\":\"/../node_modules/hyperbee/index.js\",\"hypercore\":\"/../node_modules/hypercore/index.js\",\"hyperswarm\":\"/../node_modules/hyperswarm/index.js\",\"sodium-native\":\"/../node_modules/sodium-native/index.js\"}},\"addons\":[\"/../node_modules/bare-fs/prebuilds/android-arm64/bare-fs.bare\",\"/../node_modules/bare-os/prebuilds/android-arm64/bare-os.bare\"],\"assets\":[],\"files\":{\"/../node_modules/@hyperswarm/secret-stream/index.js\":{\"offset\":0,\"length\":16646,\"mode\":420},\"/../node_modules/@hyperswarm/secret-stream/lib/bridge.js\":{\"offset\":16646,\"length\":1285,\"mode\":420},\"/../node_modules/@hyperswarm/secret-stream/lib/handshake.js\":{\"offset\":17931,\"length\":1959,\"mode\":420},\"/../node_modules/@hyperswarm/secret-stream/package.json\":{\"offset\":19890,\"length\":1032,\"mode\":420},\"/../node_modules/b4a/index.js\":{\"offset\":20922,\"length\":4092,\"mode\":420},\"/../node_modules/b4a/package.json\":{\"offset\":25014,\"length\":701,\"mode\":420},\"/../node_modules/bare-events/index.js\":{\"offset\":25715,\"length\":6999,\"mode\":420},\"/../node_modules/bare-events/lib/errors.js\":{\"offset\":32714,\"length\":711,\"mode\":420},\"/../node_modules/bare-events/package.json\":{\"offset\":33425,\"length\":944,\"mode\":420},\"/../node_modules/bare-fs/binding.js\":{\"offset\":34369,\"length\":33,\"mode\":420},\"/../node_modules/bare-fs/index.js\":{\"offset\":34402,\"length\":59807,\"mode\":420},\"/../node_modules/bare-fs/package.json\":{\"offset\":94209,\"length\":926,\"mode\":420},\"/../node_modules/bare-fs/prebuilds/android-arm64/bare-fs.bare\":{\"offset\":95135,\"length\":46296,\"mode\":420},\"/../node_modules/bare-os/binding.js\":{\"offset\":141431,\"length\":33,\"mode\":420},\"/../node_modules/bare-os/index.js\":{\"offset\":141464,\"length\":2141,\"mode\":420},\"/../node_modules/bare-os/lib/constants.js\":{\"offset\":143605,\"length\":113,\"mode\":420},\"/../node_modules/bare-os/lib/errors.js\":{\"offset\":143718,\"length\":479,\"mode\":420},\"/../node_modules/bare-os/package.json\":{\"offset\":144197,\"length\":1022,\"mode\":420},\"/../node_modules/bare-os/prebuilds/android-arm64/bare-os.bare\":{\"offset\":145219,\"length\":31456,\"mode\":420},\"/../node_modules/bare-path/index.js\":{\"offset\":176675,\"length\":306,\"mode\":420},\"/../node_modules/bare-path/lib/constants.js\":{\"offset\":176981,\"length\":247,\"mode\":420},\"/../node_modules/bare-path/lib/posix.js\":{\"offset\":177228,\"length\":5991,\"mode\":420},\"/../node_modules/bare-path/lib/shared.js\":{\"offset\":183219,\"length\":1888,\"mode\":420},\"/../node_modules/bare-path/lib/win32.js\":{\"offset\":185107,\"length\":13427,\"mode\":420},\"/../node_modules/bare-path/package.json\":{\"offset\":198534,\"length\":796,\"mode\":420},\"/../node_modules/bare-stream/index.js\":{\"offset\":199330,\"length\":7649,\"mode\":420},\"/../node_modules/bare-stream/package.json\":{\"offset\":206979,\"length\":1237,\"mode\":420},\"/../node_modules/big-sparse-array/index.js\":{\"offset\":208216,\"length\":2471,\"mode\":420},\"/../node_modules/big-sparse-array/package.json\":{\"offset\":210687,\"length\":636,\"mode\":420},\"/../node_modules/bits-to-bytes/index.js\":{\"offset\":211323,\"length\":3083,\"mode\":420},\"/../node_modules/bits-to-bytes/package.json\":{\"offset\":214406,\"length\":708,\"mode\":420},\"/../node_modules/blind-relay/index.js\":{\"offset\":215114,\"length\":11630,\"mode\":420},\"/../node_modules/blind-relay/lib/errors.js\":{\"offset\":226744,\"length\":1043,\"mode\":420},\"/../node_modules/blind-relay/package.json\":{\"offset\":227787,\"length\":1074,\"mode\":420},\"/../node_modules/bogon/index.js\":{\"offset\":228861,\"length\":3961,\"mode\":420},\"/../node_modules/bogon/package.json\":{\"offset\":232822,\"length\":657,\"mode\":420},\"/../node_modules/codecs/index.js\":{\"offset\":233479,\"length\":2416,\"mode\":420},\"/../node_modules/codecs/package.json\":{\"offset\":235895,\"length\":655,\"mode\":420},\"/../node_modules/compact-encoding-bitfield/index.js\":{\"offset\":236550,\"length\":1963,\"mode\":420},\"/../node_modules/compact-encoding-bitfield/package.json\":{\"offset\":238513,\"length\":827,\"mode\":420},\"/../node_modules/compact-encoding-net/index.js\":{\"offset\":239340,\"length\":4109,\"mode\":420},\"/../node_modules/compact-encoding-net/package.json\":{\"offset\":243449,\"length\":734,\"mode\":420},\"/../node_modules/compact-encoding/endian.js\":{\"offset\":244183,\"length\":103,\"mode\":420},\"/../node_modules/compact-encoding/index.js\":{\"offset\":244286,\"length\":19073,\"mode\":420},\"/../node_modules/compact-encoding/lexint.js\":{\"offset\":263359,\"length\":2824,\"mode\":420},\"/../node_modules/compact-encoding/package.json\":{\"offset\":266183,\"length\":713,\"mode\":420},\"/../node_modules/compact-encoding/raw.js\":{\"offset\":266896,\"length\":4118,\"mode\":420},\"/../node_modules/crc-native/binding.js\":{\"offset\":271014,\"length\":54,\"mode\":420},\"/../node_modules/crc-native/index.js\":{\"offset\":271068,\"length\":120,\"mode\":420},\"/../node_modules/crc-native/package.json\":{\"offset\":271188,\"length\":973,\"mode\":420},\"/../node_modules/crc-universal/fallback.js\":{\"offset\":272161,\"length\":2020,\"mode\":420},\"/../node_modules/crc-universal/index.js\":{\"offset\":274181,\"length\":257,\"mode\":420},\"/../node_modules/crc-universal/lookup.js\":{\"offset\":274438,\"length\":439,\"mode\":420},\"/../node_modules/crc-universal/package.json\":{\"offset\":274877,\"length\":816,\"mode\":420},\"/../node_modules/debounceify/index.js\":{\"offset\":275693,\"length\":585,\"mode\":420},\"/../node_modules/debounceify/package.json\":{\"offset\":276278,\"length\":567,\"mode\":420},\"/../node_modules/dht-rpc/index.js\":{\"offset\":276845,\"length\":24419,\"mode\":420},\"/../node_modules/dht-rpc/lib/commands.js\":{\"offset\":301264,\"length\":82,\"mode\":420},\"/../node_modules/dht-rpc/lib/errors.js\":{\"offset\":301346,\"length\":724,\"mode\":420},\"/../node_modules/dht-rpc/lib/io.js\":{\"offset\":302070,\"length\":15190,\"mode\":420},\"/../node_modules/dht-rpc/lib/peer.js\":{\"offset\":317260,\"length\":645,\"mode\":420},\"/../node_modules/dht-rpc/lib/query.js\":{\"offset\":317905,\"length\":9369,\"mode\":420},\"/../node_modules/dht-rpc/lib/session.js\":{\"offset\":327274,\"length\":1084,\"mode\":420},\"/../node_modules/dht-rpc/package.json\":{\"offset\":328358,\"length\":1067,\"mode\":420},\"/../node_modules/fast-fifo/fixed-size.js\":{\"offset\":329425,\"length\":875,\"mode\":420},\"/../node_modules/fast-fifo/index.js\":{\"offset\":330300,\"length\":972,\"mode\":420},\"/../node_modules/fast-fifo/package.json\":{\"offset\":331272,\"length\":682,\"mode\":420},\"/../node_modules/flat-tree/index.js\":{\"offset\":331954,\"length\":7590,\"mode\":420},\"/../node_modules/flat-tree/package.json\":{\"offset\":339544,\"length\":631,\"mode\":420},\"/../node_modules/fs-native-extensions/binding.js\":{\"offset\":340175,\"length\":54,\"mode\":420},\"/../node_modules/fs-native-extensions/index.js\":{\"offset\":340229,\"length\":4270,\"mode\":420},\"/../node_modules/fs-native-extensions/package.json\":{\"offset\":344499,\"length\":1569,\"mode\":420},\"/../node_modules/hyperbee/index.js\":{\"offset\":346068,\"length\":40901,\"mode\":420},\"/../node_modules/hyperbee/iterators/diff.js\":{\"offset\":386969,\"length\":5368,\"mode\":420},\"/../node_modules/hyperbee/iterators/history.js\":{\"offset\":392337,\"length\":1642,\"mode\":420},\"/../node_modules/hyperbee/iterators/range.js\":{\"offset\":393979,\"length\":4734,\"mode\":420},\"/../node_modules/hyperbee/lib/extension.js\":{\"offset\":398713,\"length\":3445,\"mode\":420},\"/../node_modules/hyperbee/lib/messages.js\":{\"offset\":402158,\"length\":28162,\"mode\":420},\"/../node_modules/hyperbee/package.json\":{\"offset\":430320,\"length\":1242,\"mode\":420},\"/../node_modules/hypercore-crypto/index.js\":{\"offset\":431562,\"length\":4820,\"mode\":420},\"/../node_modules/hypercore-crypto/package.json\":{\"offset\":436382,\"length\":771,\"mode\":420},\"/../node_modules/hypercore-errors/index.js\":{\"offset\":437153,\"length\":3862,\"mode\":420},\"/../node_modules/hypercore-errors/package.json\":{\"offset\":441015,\"length\":604,\"mode\":420},\"/../node_modules/hypercore-id-encoding/index.js\":{\"offset\":441619,\"length\":923,\"mode\":420},\"/../node_modules/hypercore-id-encoding/package.json\":{\"offset\":442542,\"length\":799,\"mode\":420},\"/../node_modules/hypercore/index.js\":{\"offset\":443341,\"length\":34150,\"mode\":420},\"/../node_modules/hypercore/lib/audit.js\":{\"offset\":477491,\"length\":3098,\"mode\":420},\"/../node_modules/hypercore/lib/batch.js\":{\"offset\":480589,\"length\":12366,\"mode\":420},\"/../node_modules/hypercore/lib/big-header.js\":{\"offset\":492955,\"length\":1270,\"mode\":420},\"/../node_modules/hypercore/lib/bitfield.js\":{\"offset\":494225,\"length\":11449,\"mode\":420},\"/../node_modules/hypercore/lib/block-encryption.js\":{\"offset\":505674,\"length\":2290,\"mode\":420},\"/../node_modules/hypercore/lib/block-store.js\":{\"offset\":507964,\"length\":1507,\"mode\":420},\"/../node_modules/hypercore/lib/caps.js\":{\"offset\":509471,\"length\":1515,\"mode\":420},\"/../node_modules/hypercore/lib/compat.js\":{\"offset\":510986,\"length\":477,\"mode\":420},\"/../node_modules/hypercore/lib/core.js\":{\"offset\":511463,\"length\":32348,\"mode\":420},\"/../node_modules/hypercore/lib/download.js\":{\"offset\":543811,\"length\":347,\"mode\":420},\"/../node_modules/hypercore/lib/hotswap-queue.js\":{\"offset\":544158,\"length\":1504,\"mode\":420},\"/../node_modules/hypercore/lib/info.js\":{\"offset\":545662,\"length\":1521,\"mode\":420},\"/../node_modules/hypercore/lib/merkle-tree.js\":{\"offset\":547183,\"length\":35420,\"mode\":420},\"/../node_modules/hypercore/lib/messages.js\":{\"offset\":582603,\"length\":26102,\"mode\":420},\"/../node_modules/hypercore/lib/multisig.js\":{\"offset\":608705,\"length\":2608,\"mode\":420},\"/../node_modules/hypercore/lib/mutex.js\":{\"offset\":611313,\"length\":927,\"mode\":420},\"/../node_modules/hypercore/lib/oplog.js\":{\"offset\":612240,\"length\":6328,\"mode\":420},\"/../node_modules/hypercore/lib/receiver-queue.js\":{\"offset\":618568,\"length\":1419,\"mode\":420},\"/../node_modules/hypercore/lib/remote-bitfield.js\":{\"offset\":619987,\"length\":8089,\"mode\":420},\"/../node_modules/hypercore/lib/replicator.js\":{\"offset\":628076,\"length\":70070,\"mode\":420},\"/../node_modules/hypercore/lib/streams.js\":{\"offset\":698146,\"length\":2857,\"mode\":420},\"/../node_modules/hypercore/lib/verifier.js\":{\"offset\":701003,\"length\":8768,\"mode\":420},\"/../node_modules/hypercore/package.json\":{\"offset\":709771,\"length\":2069,\"mode\":420},\"/../node_modules/hyperdht/index.js\":{\"offset\":711840,\"length\":14911,\"mode\":420},\"/../node_modules/hyperdht/lib/announcer.js\":{\"offset\":726751,\"length\":7252,\"mode\":420},\"/../node_modules/hyperdht/lib/connect.js\":{\"offset\":734003,\"length\":22662,\"mode\":420},\"/../node_modules/hyperdht/lib/connection-pool.js\":{\"offset\":756665,\"length\":3120,\"mode\":420},\"/../node_modules/hyperdht/lib/constants.js\":{\"offset\":759785,\"length\":1207,\"mode\":420},\"/../node_modules/hyperdht/lib/crypto.js\":{\"offset\":760992,\"length\":635,\"mode\":420},\"/../node_modules/hyperdht/lib/encode.js\":{\"offset\":761627,\"length\":447,\"mode\":420},\"/../node_modules/hyperdht/lib/errors.js\":{\"offset\":762074,\"length\":3713,\"mode\":420},\"/../node_modules/hyperdht/lib/holepuncher.js\":{\"offset\":765787,\"length\":10013,\"mode\":420},\"/../node_modules/hyperdht/lib/messages.js\":{\"offset\":775800,\"length\":10440,\"mode\":420},\"/../node_modules/hyperdht/lib/nat.js\":{\"offset\":786240,\"length\":4694,\"mode\":420},\"/../node_modules/hyperdht/lib/noise-wrap.js\":{\"offset\":790934,\"length\":1673,\"mode\":420},\"/../node_modules/hyperdht/lib/persistent.js\":{\"offset\":792607,\"length\":7857,\"mode\":420},\"/../node_modules/hyperdht/lib/raw-stream-set.js\":{\"offset\":800464,\"length\":1427,\"mode\":420},\"/../node_modules/hyperdht/lib/router.js\":{\"offset\":801891,\"length\":6411,\"mode\":420},\"/../node_modules/hyperdht/lib/secure-payload.js\":{\"offset\":808302,\"length\":1495,\"mode\":420},\"/../node_modules/hyperdht/lib/semaphore.js\":{\"offset\":809797,\"length\":995,\"mode\":420},\"/../node_modules/hyperdht/lib/server.js\":{\"offset\":810792,\"length\":19958,\"mode\":420},\"/../node_modules/hyperdht/lib/sleeper.js\":{\"offset\":830750,\"length\":693,\"mode\":420},\"/../node_modules/hyperdht/lib/socket-pool.js\":{\"offset\":831443,\"length\":4371,\"mode\":420},\"/../node_modules/hyperdht/package.json\":{\"offset\":835814,\"length\":1825,\"mode\":420},\"/../node_modules/hyperswarm/index.js\":{\"offset\":837639,\"length\":15627,\"mode\":420},\"/../node_modules/hyperswarm/lib/bulk-timer.js\":{\"offset\":853266,\"length\":732,\"mode\":420},\"/../node_modules/hyperswarm/lib/connection-set.js\":{\"offset\":853998,\"length\":775,\"mode\":420},\"/../node_modules/hyperswarm/lib/peer-discovery.js\":{\"offset\":854773,\"length\":7857,\"mode\":420},\"/../node_modules/hyperswarm/lib/peer-info.js\":{\"offset\":862630,\"length\":2623,\"mode\":420},\"/../node_modules/hyperswarm/lib/retry-timer.js\":{\"offset\":865253,\"length\":1821,\"mode\":420},\"/../node_modules/hyperswarm/package.json\":{\"offset\":867074,\"length\":1101,\"mode\":420},\"/../node_modules/hypertrace/index.js\":{\"offset\":868175,\"length\":3271,\"mode\":420},\"/../node_modules/hypertrace/package.json\":{\"offset\":871446,\"length\":386,\"mode\":420},\"/../node_modules/is-options/index.js\":{\"offset\":871832,\"length\":140,\"mode\":420},\"/../node_modules/is-options/package.json\":{\"offset\":871972,\"length\":605,\"mode\":420},\"/../node_modules/kademlia-routing-table/index.js\":{\"offset\":872577,\"length\":4145,\"mode\":420},\"/../node_modules/kademlia-routing-table/package.json\":{\"offset\":876722,\"length\":967,\"mode\":420},\"/../node_modules/mutexify/index.js\":{\"offset\":877689,\"length\":536,\"mode\":420},\"/../node_modules/mutexify/package.json\":{\"offset\":878225,\"length\":679,\"mode\":420},\"/../node_modules/mutexify/promise.js\":{\"offset\":878904,\"length\":324,\"mode\":420},\"/../node_modules/nanoassert/index.js\":{\"offset\":879228,\"length\":438,\"mode\":420},\"/../node_modules/nanoassert/package.json\":{\"offset\":879666,\"length\":647,\"mode\":420},\"/../node_modules/nat-sampler/index.js\":{\"offset\":880313,\"length\":1550,\"mode\":420},\"/../node_modules/nat-sampler/package.json\":{\"offset\":881863,\"length\":608,\"mode\":420},\"/../node_modules/node-gyp-build/index.js\":{\"offset\":882471,\"length\":390,\"mode\":420},\"/../node_modules/node-gyp-build/node-gyp-build.js\":{\"offset\":882861,\"length\":6078,\"mode\":420},\"/../node_modules/node-gyp-build/package.json\":{\"offset\":888939,\"length\":1004,\"mode\":420},\"/../node_modules/noise-curve-ed/index.js\":{\"offset\":889943,\"length\":1642,\"mode\":420},\"/../node_modules/noise-curve-ed/package.json\":{\"offset\":891585,\"length\":883,\"mode\":420},\"/../node_modules/noise-handshake/cipher.js\":{\"offset\":892468,\"length\":2533,\"mode\":420},\"/../node_modules/noise-handshake/dh.js\":{\"offset\":895001,\"length\":1439,\"mode\":420},\"/../node_modules/noise-handshake/hkdf.js\":{\"offset\":896440,\"length\":1305,\"mode\":420},\"/../node_modules/noise-handshake/hmac.js\":{\"offset\":897745,\"length\":1278,\"mode\":420},\"/../node_modules/noise-handshake/noise.js\":{\"offset\":899023,\"length\":6345,\"mode\":420},\"/../node_modules/noise-handshake/package.json\":{\"offset\":905368,\"length\":566,\"mode\":420},\"/../node_modules/noise-handshake/symmetric-state.js\":{\"offset\":905934,\"length\":2206,\"mode\":420},\"/../node_modules/protocol-buffers-encodings/index.js\":{\"offset\":908140,\"length\":6489,\"mode\":420},\"/../node_modules/protocol-buffers-encodings/package.json\":{\"offset\":914629,\"length\":719,\"mode\":420},\"/../node_modules/protomux/index.js\":{\"offset\":915348,\"length\":18996,\"mode\":420},\"/../node_modules/protomux/package.json\":{\"offset\":934344,\"length\":816,\"mode\":420},\"/../node_modules/queue-tick/package.json\":{\"offset\":935160,\"length\":669,\"mode\":420},\"/../node_modules/queue-tick/process-next-tick.js\":{\"offset\":935829,\"length\":160,\"mode\":420},\"/../node_modules/queue-tick/queue-microtask.js\":{\"offset\":935989,\"length\":108,\"mode\":420},\"/../node_modules/quickbit-native/binding.js\":{\"offset\":936097,\"length\":54,\"mode\":420},\"/../node_modules/quickbit-native/index.js\":{\"offset\":936151,\"length\":4123,\"mode\":420},\"/../node_modules/quickbit-native/package.json\":{\"offset\":940274,\"length\":1019,\"mode\":420},\"/../node_modules/quickbit-universal/fallback.js\":{\"offset\":941293,\"length\":10204,\"mode\":420},\"/../node_modules/quickbit-universal/index.js\":{\"offset\":951497,\"length\":442,\"mode\":420},\"/../node_modules/quickbit-universal/package.json\":{\"offset\":951939,\"length\":908,\"mode\":420},\"/../node_modules/rache/index.js\":{\"offset\":952847,\"length\":2463,\"mode\":420},\"/../node_modules/rache/package.json\":{\"offset\":955310,\"length\":602,\"mode\":420},\"/../node_modules/random-access-file/index.js\":{\"offset\":955912,\"length\":6089,\"mode\":420},\"/../node_modules/random-access-file/package.json\":{\"offset\":962001,\"length\":1091,\"mode\":420},\"/../node_modules/random-access-storage/index.js\":{\"offset\":963092,\"length\":7557,\"mode\":420},\"/../node_modules/random-access-storage/package.json\":{\"offset\":970649,\"length\":861,\"mode\":420},\"/../node_modules/random-array-iterator/index.js\":{\"offset\":971510,\"length\":1001,\"mode\":420},\"/../node_modules/random-array-iterator/package.json\":{\"offset\":972511,\"length\":700,\"mode\":420},\"/../node_modules/ready-resource/index.js\":{\"offset\":973211,\"length\":1091,\"mode\":420},\"/../node_modules/ready-resource/package.json\":{\"offset\":974302,\"length\":769,\"mode\":420},\"/../node_modules/record-cache/index.js\":{\"offset\":975071,\"length\":3668,\"mode\":420},\"/../node_modules/record-cache/package.json\":{\"offset\":978739,\"length\":612,\"mode\":420},\"/../node_modules/safety-catch/index.js\":{\"offset\":979351,\"length\":506,\"mode\":420},\"/../node_modules/safety-catch/package.json\":{\"offset\":979857,\"length\":547,\"mode\":420},\"/../node_modules/shuffled-priority-queue/index.js\":{\"offset\":980404,\"length\":2607,\"mode\":420},\"/../node_modules/shuffled-priority-queue/package.json\":{\"offset\":983011,\"length\":691,\"mode\":420},\"/../node_modules/signal-promise/index.js\":{\"offset\":983702,\"length\":1252,\"mode\":420},\"/../node_modules/signal-promise/package.json\":{\"offset\":984954,\"length\":503,\"mode\":420},\"/../node_modules/signed-varint/index.js\":{\"offset\":985457,\"length\":435,\"mode\":420},\"/../node_modules/signed-varint/package.json\":{\"offset\":985892,\"length\":523,\"mode\":420},\"/../node_modules/simdle-native/binding.js\":{\"offset\":986415,\"length\":54,\"mode\":420},\"/../node_modules/simdle-native/index.js\":{\"offset\":986469,\"length\":3203,\"mode\":420},\"/../node_modules/simdle-native/package.json\":{\"offset\":989672,\"length\":1009,\"mode\":420},\"/../node_modules/simdle-universal/fallback.js\":{\"offset\":990681,\"length\":5137,\"mode\":420},\"/../node_modules/simdle-universal/index.js\":{\"offset\":995818,\"length\":103,\"mode\":420},\"/../node_modules/simdle-universal/package.json\":{\"offset\":995921,\"length\":879,\"mode\":420},\"/../node_modules/simdle-universal/scalar.js\":{\"offset\":996800,\"length\":469,\"mode\":420},\"/../node_modules/sodium-native/index.js\":{\"offset\":997269,\"length\":54,\"mode\":420},\"/../node_modules/sodium-native/package.json\":{\"offset\":997323,\"length\":1094,\"mode\":420},\"/../node_modules/sodium-secretstream/index.js\":{\"offset\":998417,\"length\":2257,\"mode\":420},\"/../node_modules/sodium-secretstream/package.json\":{\"offset\":1000674,\"length\":657,\"mode\":420},\"/../node_modules/sodium-universal/index.js\":{\"offset\":1001331,\"length\":42,\"mode\":420},\"/../node_modules/sodium-universal/package.json\":{\"offset\":1001373,\"length\":1064,\"mode\":420},\"/../node_modules/streamx/index.js\":{\"offset\":1002437,\"length\":33174,\"mode\":420},\"/../node_modules/streamx/package.json\":{\"offset\":1035611,\"length\":912,\"mode\":420},\"/../node_modules/text-decoder/index.js\":{\"offset\":1036523,\"length\":1378,\"mode\":420},\"/../node_modules/text-decoder/lib/pass-through-decoder.js\":{\"offset\":1037901,\"length\":273,\"mode\":420},\"/../node_modules/text-decoder/lib/utf8-decoder.js\":{\"offset\":1038174,\"length\":2529,\"mode\":420},\"/../node_modules/text-decoder/package.json\":{\"offset\":1040703,\"length\":987,\"mode\":420},\"/../node_modules/time-ordered-set/index.js\":{\"offset\":1041690,\"length\":1444,\"mode\":420},\"/../node_modules/time-ordered-set/package.json\":{\"offset\":1043134,\"length\":666,\"mode\":420},\"/../node_modules/timeout-refresh/browser.js\":{\"offset\":1043800,\"length\":1098,\"mode\":420},\"/../node_modules/timeout-refresh/index.js\":{\"offset\":1044898,\"length\":184,\"mode\":420},\"/../node_modules/timeout-refresh/node.js\":{\"offset\":1045082,\"length\":928,\"mode\":420},\"/../node_modules/timeout-refresh/package.json\":{\"offset\":1046010,\"length\":619,\"mode\":420},\"/../node_modules/udx-native/binding.js\":{\"offset\":1046629,\"length\":54,\"mode\":420},\"/../node_modules/udx-native/lib/ip.js\":{\"offset\":1046683,\"length\":2179,\"mode\":420},\"/../node_modules/udx-native/lib/network-interfaces.js\":{\"offset\":1048862,\"length\":1335,\"mode\":420},\"/../node_modules/udx-native/lib/socket.js\":{\"offset\":1050197,\"length\":7445,\"mode\":420},\"/../node_modules/udx-native/lib/stream.js\":{\"offset\":1057642,\"length\":12546,\"mode\":420},\"/../node_modules/udx-native/lib/udx.js\":{\"offset\":1070188,\"length\":2842,\"mode\":420},\"/../node_modules/udx-native/package.json\":{\"offset\":1073030,\"length\":1469,\"mode\":420},\"/../node_modules/unordered-set/index.js\":{\"offset\":1074499,\"length\":677,\"mode\":420},\"/../node_modules/unordered-set/package.json\":{\"offset\":1075176,\"length\":654,\"mode\":420},\"/../node_modules/unslab/index.js\":{\"offset\":1075830,\"length\":913,\"mode\":420},\"/../node_modules/unslab/package.json\":{\"offset\":1076743,\"length\":613,\"mode\":420},\"/../node_modules/varint/decode.js\":{\"offset\":1077356,\"length\":508,\"mode\":420},\"/../node_modules/varint/encode.js\":{\"offset\":1077864,\"length\":452,\"mode\":420},\"/../node_modules/varint/index.js\":{\"offset\":1078316,\"length\":134,\"mode\":420},\"/../node_modules/varint/length.js\":{\"offset\":1078450,\"length\":471,\"mode\":420},\"/../node_modules/varint/package.json\":{\"offset\":1078921,\"length\":511,\"mode\":420},\"/../node_modules/which-runtime/index.js\":{\"offset\":1079432,\"length\":1222,\"mode\":420},\"/../node_modules/which-runtime/package.json\":{\"offset\":1080654,\"length\":602,\"mode\":420},\"/../node_modules/xache/index.js\":{\"offset\":1081256,\"length\":2378,\"mode\":420},\"/../node_modules/xache/package.json\":{\"offset\":1083634,\"length\":584,\"mode\":420},\"/../node_modules/z32/index.js\":{\"offset\":1084218,\"length\":2654,\"mode\":420},\"/../node_modules/z32/package.json\":{\"offset\":1086872,\"length\":701,\"mode\":420},\"/../package.json\":{\"offset\":1087573,\"length\":821,\"mode\":420},\"/app.js\":{\"offset\":1088394,\"length\":3201,\"mode\":420}}}\nconst { Pull, Push, HEADERBYTES, KEYBYTES, ABYTES } = require('sodium-secretstream')\nconst sodium = require('sodium-universal')\nconst crypto = require('hypercore-crypto')\nconst { Duplex, Writable, getStreamError } = require('streamx')\nconst b4a = require('b4a')\nconst Timeout = require('timeout-refresh')\nconst unslab = require('unslab')\nconst Bridge = require('./lib/bridge')\nconst Handshake = require('./lib/handshake')\n\nconst IDHEADERBYTES = HEADERBYTES + 32\nconst [NS_INITIATOR, NS_RESPONDER, NS_SEND] = crypto.namespace('hyperswarm/secret-stream', 3)\nconst MAX_ATOMIC_WRITE = 256 * 256 * 256 - 1\n\nmodule.exports = class NoiseSecretStream extends Duplex {\n  constructor (isInitiator, rawStream, opts = {}) {\n    super({ mapWritable: toBuffer })\n\n    if (typeof isInitiator !== 'boolean') {\n      throw new Error('isInitiator should be a boolean')\n    }\n\n    this.noiseStream = this\n    this.isInitiator = isInitiator\n    this.rawStream = null\n\n    this.publicKey = opts.publicKey || null\n    this.remotePublicKey = opts.remotePublicKey || null\n    this.handshakeHash = null\n    this.connected = false\n    this.keepAlive = opts.keepAlive || 0\n    this.timeout = 0\n    this.enableSend = opts.enableSend !== false\n\n    // pointer for upstream to set data here if they want\n    this.userData = null\n\n    let openedDone = null\n    this.opened = new Promise((resolve) => { openedDone = resolve })\n\n    this.rawBytesWritten = 0\n    this.rawBytesRead = 0\n\n    // metadata used by 'hyperdht'\n    this.relay = null\n    this.puncher = null\n\n    // unwrapped raw stream\n    this._rawStream = null\n\n    // handshake state\n    this._handshake = null\n    this._handshakePattern = opts.pattern || null\n    this._handshakeDone = null\n\n    // message parsing state\n    this._state = 0\n    this._len = 0\n    this._tmp = 1\n    this._message = null\n\n    this._openedDone = openedDone\n    this._startDone = null\n    this._drainDone = null\n    this._outgoingPlain = null\n    this._outgoingWrapped = null\n    this._utp = null\n    this._setup = true\n    this._ended = 2\n    this._encrypt = null\n    this._decrypt = null\n    this._timeoutTimer = null\n    this._keepAliveTimer = null\n    this._sendState = null\n\n    if (opts.autoStart !== false) this.start(rawStream, opts)\n\n    // wiggle it to trigger open immediately (TODO add streamx option for this)\n    this.resume()\n    this.pause()\n  }\n\n  static keyPair (seed) {\n    return Handshake.keyPair(seed)\n  }\n\n  static id (handshakeHash, isInitiator, id) {\n    return streamId(handshakeHash, isInitiator, id)\n  }\n\n  setTimeout (ms) {\n    if (!ms) ms = 0\n\n    this._clearTimeout()\n    this.timeout = ms\n\n    if (!ms || this.rawStream === null) return\n\n    this._timeoutTimer = Timeout.once(ms, destroyTimeout, this)\n    this._timeoutTimer.unref()\n  }\n\n  setKeepAlive (ms) {\n    if (!ms) ms = 0\n\n    this._clearKeepAlive()\n\n    this.keepAlive = ms\n\n    if (!ms || this.rawStream === null) return\n\n    this._keepAliveTimer = Timeout.on(ms, sendKeepAlive, this)\n    this._keepAliveTimer.unref()\n  }\n\n  sendKeepAlive () {\n    const empty = this.alloc(0)\n    this.write(empty)\n  }\n\n  start (rawStream, opts = {}) {\n    if (rawStream) {\n      this.rawStream = rawStream\n      this._rawStream = rawStream\n      if (typeof this.rawStream.setContentSize === 'function') {\n        this._utp = rawStream\n      }\n    } else {\n      this.rawStream = new Bridge(this)\n      this._rawStream = this.rawStream.reverse\n    }\n\n    this.rawStream.on('error', this._onrawerror.bind(this))\n    this.rawStream.on('close', this._onrawclose.bind(this))\n\n    this._startHandshake(opts.handshake, opts.keyPair || null)\n    this._continueOpen(null)\n\n    if (this.destroying) return\n\n    if (opts.data) this._onrawdata(opts.data)\n    if (opts.ended) this._onrawend()\n\n    if (this.keepAlive > 0 && this._keepAliveTimer === null) {\n      this.setKeepAlive(this.keepAlive)\n    }\n\n    if (this.timeout > 0 && this._timeoutTimer === null) {\n      this.setTimeout(this.timeout)\n    }\n  }\n\n  async flush () {\n    if ((await this.opened) === false) return false\n    if ((await Writable.drained(this)) === false) return false\n    if (this.destroying) return false\n\n    if (this.rawStream !== null && this.rawStream.flush) {\n      return await this.rawStream.flush()\n    }\n\n    return true\n  }\n\n  _continueOpen (err) {\n    if (err) this.destroy(err)\n    if (this._startDone === null) return\n    const done = this._startDone\n    this._startDone = null\n    this._open(done)\n  }\n\n  _onkeypairpromise (p) {\n    const self = this\n    const cont = this._continueOpen.bind(this)\n\n    p.then(onkeypair, cont)\n\n    function onkeypair (kp) {\n      self._onkeypair(kp)\n      cont(null)\n    }\n  }\n\n  _onkeypair (keyPair) {\n    const pattern = this._handshakePattern || 'XX'\n    const remotePublicKey = this.remotePublicKey\n\n    this._handshake = new Handshake(this.isInitiator, keyPair, remotePublicKey, pattern)\n    this.publicKey = this._handshake.keyPair.publicKey\n  }\n\n  _startHandshake (handshake, keyPair) {\n    if (handshake) {\n      const { tx, rx, hash, publicKey, remotePublicKey } = handshake\n      this._setupSecretStream(tx, rx, hash, publicKey, remotePublicKey)\n      return\n    }\n\n    if (!keyPair) keyPair = Handshake.keyPair()\n\n    if (typeof keyPair.then === 'function') {\n      this._onkeypairpromise(keyPair)\n    } else {\n      this._onkeypair(keyPair)\n    }\n  }\n\n  _onrawerror (err) {\n    this.destroy(err)\n  }\n\n  _onrawclose () {\n    if (this._ended !== 0) this.destroy()\n  }\n\n  _onrawdata (data) {\n    let offset = 0\n\n    if (this._timeoutTimer !== null) {\n      this._timeoutTimer.refresh()\n    }\n\n    do {\n      switch (this._state) {\n        case 0: {\n          while (this._tmp !== 0x1000000 && offset < data.byteLength) {\n            const v = data[offset++]\n            this._len += this._tmp * v\n            this._tmp *= 256\n          }\n\n          if (this._tmp === 0x1000000) {\n            this._tmp = 0\n            this._state = 1\n            const unprocessed = data.byteLength - offset\n            if (unprocessed < this._len && this._utp !== null) this._utp.setContentSize(this._len - unprocessed)\n          }\n\n          break\n        }\n\n        case 1: {\n          const missing = this._len - this._tmp\n          const end = missing + offset\n\n          if (this._message === null && end <= data.byteLength) {\n            this._message = data.subarray(offset, end)\n            offset += missing\n            this._incoming()\n            break\n          }\n\n          const unprocessed = data.byteLength - offset\n\n          if (this._message === null) {\n            this._message = b4a.allocUnsafe(this._len)\n          }\n\n          b4a.copy(data, this._message, this._tmp, offset)\n          this._tmp += unprocessed\n\n          if (end <= data.byteLength) {\n            offset += missing\n            this._incoming()\n          } else {\n            offset += unprocessed\n          }\n\n          break\n        }\n      }\n    } while (offset < data.byteLength && !this.destroying)\n  }\n\n  _onrawend () {\n    this._ended--\n    this.push(null)\n  }\n\n  _onrawdrain () {\n    const drain = this._drainDone\n    if (drain === null) return\n    this._drainDone = null\n    drain()\n  }\n\n  _read (cb) {\n    this.rawStream.resume()\n    cb(null)\n  }\n\n  _incoming () {\n    const message = this._message\n\n    this._state = 0\n    this._len = 0\n    this._tmp = 1\n    this._message = null\n\n    if (this._setup === true) {\n      if (this._handshake) {\n        this._onhandshakert(this._handshake.recv(message))\n      } else {\n        if (message.byteLength !== IDHEADERBYTES) {\n          this.destroy(new Error('Invalid header message received'))\n          return\n        }\n\n        const remoteId = message.subarray(0, 32)\n        const expectedId = streamId(this.handshakeHash, !this.isInitiator)\n        const header = message.subarray(32)\n\n        if (!b4a.equals(expectedId, remoteId)) {\n          this.destroy(new Error('Invalid header received'))\n          return\n        }\n\n        this._decrypt.init(header)\n        this._setup = false // setup is now done\n      }\n      return\n    }\n\n    if (message.byteLength < ABYTES) {\n      this.destroy(new Error('Invalid message received'))\n      return\n    }\n\n    this.rawBytesRead += message.byteLength\n\n    const plain = message.subarray(1, message.byteLength - ABYTES + 1)\n\n    try {\n      this._decrypt.next(message, plain)\n    } catch (err) {\n      this.destroy(err)\n      return\n    }\n\n    // If keep alive is selective, eat the empty buffers (ie assume the other side has it enabled also)\n    if (plain.byteLength === 0 && this.keepAlive !== 0) return\n\n    if (this.push(plain) === false) {\n      this.rawStream.pause()\n    }\n  }\n\n  _onhandshakert (h) {\n    if (this._handshakeDone === null) return\n\n    if (h !== null) {\n      if (h.data) this._rawStream.write(h.data)\n      if (!h.tx) return\n    }\n\n    const done = this._handshakeDone\n    const publicKey = this._handshake.keyPair.publicKey\n\n    this._handshakeDone = null\n    this._handshake = null\n\n    if (h === null) return done(new Error('Noise handshake failed'))\n\n    this._setupSecretStream(h.tx, h.rx, h.hash, publicKey, h.remotePublicKey)\n    this._resolveOpened(true)\n    done(null)\n  }\n\n  _setupSecretStream (tx, rx, handshakeHash, publicKey, remotePublicKey) {\n    const buf = b4a.allocUnsafeSlow(3 + IDHEADERBYTES)\n    writeUint24le(IDHEADERBYTES, buf)\n\n    this._encrypt = new Push(unslab(tx.subarray(0, KEYBYTES)), undefined, buf.subarray(3 + 32))\n    this._decrypt = new Pull(unslab(rx.subarray(0, KEYBYTES)))\n\n    this.publicKey = publicKey\n    this.remotePublicKey = remotePublicKey\n    this.handshakeHash = handshakeHash\n\n    const id = buf.subarray(3, 3 + 32)\n    streamId(handshakeHash, this.isInitiator, id)\n\n    // initialize secretbox state for unordered messages\n    this._setupSecretSend(handshakeHash)\n\n    this.emit('handshake')\n    // if rawStream is a bridge, also emit it there\n    if (this.rawStream !== this._rawStream) this.rawStream.emit('handshake')\n\n    if (this.destroying) return\n\n    this._rawStream.write(buf)\n  }\n\n  _setupSecretSend (handshakeHash) {\n    this._sendState = b4a.allocUnsafeSlow(32 + 32 + 8 + 8)\n    const encrypt = this._sendState.subarray(0, 32) // secrets\n    const decrypt = this._sendState.subarray(32, 64)\n    const counter = this._sendState.subarray(64, 72) // nonce\n    const initial = this._sendState.subarray(72)\n\n    const inputs = this.isInitiator\n      ? [[NS_INITIATOR, NS_SEND], [NS_RESPONDER, NS_SEND]]\n      : [[NS_RESPONDER, NS_SEND], [NS_INITIATOR, NS_SEND]]\n\n    sodium.crypto_generichash_batch(encrypt, inputs[0], handshakeHash)\n    sodium.crypto_generichash_batch(decrypt, inputs[1], handshakeHash)\n\n    sodium.randombytes_buf(initial)\n    counter.set(initial)\n  }\n\n  _open (cb) {\n    // no autostart or no handshake yet\n    if (this._rawStream === null || (this._handshake === null && this._encrypt === null)) {\n      this._startDone = cb\n      return\n    }\n\n    this._rawStream.on('data', this._onrawdata.bind(this))\n    this._rawStream.on('end', this._onrawend.bind(this))\n    this._rawStream.on('drain', this._onrawdrain.bind(this))\n\n    if (this.enableSend) this._rawStream.on('message', this._onmessage.bind(this))\n\n    if (this._encrypt !== null) {\n      this._resolveOpened(true)\n      return cb(null)\n    }\n\n    this._handshakeDone = cb\n\n    if (this.isInitiator) this._onhandshakert(this._handshake.send())\n  }\n\n  _predestroy () {\n    if (this.rawStream) {\n      const error = getStreamError(this)\n      this.rawStream.destroy(error)\n    }\n\n    if (this._startDone !== null) {\n      const done = this._startDone\n      this._startDone = null\n      done(new Error('Stream destroyed'))\n    }\n\n    if (this._handshakeDone !== null) {\n      const done = this._handshakeDone\n      this._handshakeDone = null\n      done(new Error('Stream destroyed'))\n    }\n\n    if (this._drainDone !== null) {\n      const done = this._drainDone\n      this._drainDone = null\n      done(new Error('Stream destroyed'))\n    }\n  }\n\n  _write (data, cb) {\n    let wrapped = this._outgoingWrapped\n\n    if (data !== this._outgoingPlain) {\n      wrapped = b4a.allocUnsafe(data.byteLength + 3 + ABYTES)\n      wrapped.set(data, 4)\n    } else {\n      this._outgoingWrapped = this._outgoingPlain = null\n    }\n\n    if (wrapped.byteLength - 3 > MAX_ATOMIC_WRITE) {\n      return cb(new Error('Message is too large for an atomic write. Max size is ' + MAX_ATOMIC_WRITE + ' bytes.'))\n    }\n    this.rawBytesWritten += wrapped.byteLength\n\n    writeUint24le(wrapped.byteLength - 3, wrapped)\n    // offset 4 so we can do it in-place\n    this._encrypt.next(wrapped.subarray(4, 4 + data.byteLength), wrapped.subarray(3))\n\n    if (this._keepAliveTimer !== null) this._keepAliveTimer.refresh()\n\n    if (this._rawStream.write(wrapped) === false) {\n      this._drainDone = cb\n    } else {\n      cb(null)\n    }\n  }\n\n  _final (cb) {\n    this._clearKeepAlive()\n    this._ended--\n    this._rawStream.end()\n    cb(null)\n  }\n\n  _resolveOpened (val) {\n    if (this._openedDone === null) return\n    const opened = this._openedDone\n    this._openedDone = null\n    opened(val)\n    if (!val) return\n    this.connected = true\n    this.emit('connect')\n  }\n\n  _clearTimeout () {\n    if (this._timeoutTimer === null) return\n    this._timeoutTimer.destroy()\n    this._timeoutTimer = null\n    this.timeout = 0\n  }\n\n  _clearKeepAlive () {\n    if (this._keepAliveTimer === null) return\n    this._keepAliveTimer.destroy()\n    this._keepAliveTimer = null\n    this.keepAlive = 0\n  }\n\n  _destroy (cb) {\n    this._clearKeepAlive()\n    this._clearTimeout()\n    this._resolveOpened(false)\n    cb(null)\n  }\n\n  _boxMessage (buffer) {\n    const MB = sodium.crypto_secretbox_MACBYTES // 16\n    const NB = sodium.crypto_secretbox_NONCEBYTES // 24\n\n    const counter = this._sendState.subarray(64, 72)\n    sodium.sodium_increment(counter)\n    if (b4a.equals(counter, this._sendState.subarray(72))) {\n      this.destroy(new Error('udp send nonce exchausted'))\n      return\n    }\n\n    const secret = this._sendState.subarray(0, 32)\n    const envelope = b4a.allocUnsafe(8 + MB + buffer.byteLength)\n    const nonce = envelope.subarray(0, NB)\n    const ciphertext = envelope.subarray(8)\n\n    b4a.fill(nonce, 0) // pad suffix\n    nonce.set(counter)\n\n    sodium.crypto_secretbox_easy(ciphertext, buffer, nonce, secret)\n    return envelope\n  }\n\n  send (buffer) {\n    if (!this._sendState) return\n    if (!this.rawStream?.send) return // udx-stream expected\n\n    const message = this._boxMessage(buffer)\n    return this.rawStream.send(message)\n  }\n\n  trySend (buffer) {\n    if (!this._sendState) return\n    if (!this.rawStream?.trySend) return // udx-stream expected\n\n    const message = this._boxMessage(buffer)\n    this.rawStream.trySend(message)\n  }\n\n  _onmessage (buffer) {\n    if (!this._sendState) return // messages before handshake are dropped\n\n    const MB = sodium.crypto_secretbox_MACBYTES // 16\n    const NB = sodium.crypto_secretbox_NONCEBYTES // 24\n\n    if (buffer.byteLength < NB) return // Invalid message\n\n    const nonce = b4a.allocUnsafe(NB)\n    b4a.fill(nonce, 0)\n    nonce.set(buffer.subarray(0, 8))\n\n    const secret = this._sendState.subarray(32, 64)\n    const ciphertext = buffer.subarray(8)\n    const plain = buffer.subarray(8, buffer.byteLength - MB)\n\n    if (ciphertext.byteLength < MB) return // invalid message\n\n    const success = sodium.crypto_secretbox_open_easy(plain, ciphertext, nonce, secret)\n\n    if (success) this.emit('message', plain)\n  }\n\n  alloc (len) {\n    const buf = b4a.allocUnsafe(len + 3 + ABYTES)\n    this._outgoingWrapped = buf\n    this._outgoingPlain = buf.subarray(4, buf.byteLength - ABYTES + 1)\n    return this._outgoingPlain\n  }\n\n  toJSON () {\n    return {\n      isInitiator: this.isInitiator,\n      publicKey: this.publicKey && b4a.toString(this.publicKey, 'hex'),\n      remotePublicKey: this.remotePublicKey && b4a.toString(this.remotePublicKey, 'hex'),\n      connected: this.connected,\n      destroying: this.destroying,\n      destroyed: this.destroyed,\n      rawStream: this.rawStream && this.rawStream.toJSON ? this.rawStream.toJSON() : null\n    }\n  }\n}\n\nfunction writeUint24le (n, buf) {\n  buf[0] = (n & 255)\n  buf[1] = (n >>> 8) & 255\n  buf[2] = (n >>> 16) & 255\n}\n\nfunction streamId (handshakeHash, isInitiator, out = b4a.allocUnsafe(32)) {\n  sodium.crypto_generichash(out, isInitiator ? NS_INITIATOR : NS_RESPONDER, handshakeHash)\n  return out\n}\n\nfunction toBuffer (data) {\n  return typeof data === 'string' ? b4a.from(data) : data\n}\n\nfunction destroyTimeout () {\n  this.destroy(new Error('Stream timed out'))\n}\n\nfunction sendKeepAlive () {\n  const empty = this.alloc(0)\n  this.write(empty)\n}\nconst { Duplex, Writable } = require('streamx')\n\nclass ReversePassThrough extends Duplex {\n  constructor (s) {\n    super()\n    this._stream = s\n    this._ondrain = null\n  }\n\n  _write (data, cb) {\n    if (this._stream.push(data) === false) {\n      this._stream._ondrain = cb\n    } else {\n      cb(null)\n    }\n  }\n\n  _final (cb) {\n    this._stream.push(null)\n    cb(null)\n  }\n\n  _read (cb) {\n    const ondrain = this._ondrain\n    this._ondrain = null\n    if (ondrain) ondrain()\n    cb(null)\n  }\n}\n\nmodule.exports = class Bridge extends Duplex {\n  constructor (noiseStream) {\n    super()\n\n    this.noiseStream = noiseStream\n\n    this._ondrain = null\n    this.reverse = new ReversePassThrough(this)\n  }\n\n  get publicKey () {\n    return this.noiseStream.publicKey\n  }\n\n  get remotePublicKey () {\n    return this.noiseStream.remotePublicKey\n  }\n\n  get handshakeHash () {\n    return this.noiseStream.handshakeHash\n  }\n\n  flush () {\n    return Writable.drained(this)\n  }\n\n  _read (cb) {\n    const ondrain = this._ondrain\n    this._ondrain = null\n    if (ondrain) ondrain()\n    cb(null)\n  }\n\n  _write (data, cb) {\n    if (this.reverse.push(data) === false) {\n      this.reverse._ondrain = cb\n    } else {\n      cb(null)\n    }\n  }\n\n  _final (cb) {\n    this.reverse.push(null)\n    cb(null)\n  }\n}\nconst sodium = require('sodium-universal')\nconst curve = require('noise-curve-ed')\nconst Noise = require('noise-handshake')\nconst b4a = require('b4a')\n\nconst EMPTY = b4a.alloc(0)\n\nmodule.exports = class Handshake {\n  constructor (isInitiator, keyPair, remotePublicKey, pattern) {\n    this.isInitiator = isInitiator\n    this.keyPair = keyPair\n    this.noise = new Noise(pattern, isInitiator, keyPair, { curve })\n    this.noise.initialise(EMPTY, remotePublicKey)\n    this.destroyed = false\n  }\n\n  static keyPair (seed) {\n    const publicKey = b4a.alloc(32)\n    const secretKey = b4a.alloc(64)\n    if (seed) sodium.crypto_sign_seed_keypair(publicKey, secretKey, seed)\n    else sodium.crypto_sign_keypair(publicKey, secretKey)\n    return { publicKey, secretKey }\n  }\n\n  recv (data) {\n    try {\n      this.noise.recv(data)\n      if (this.noise.complete) return this._return(null)\n      return this.send()\n    } catch {\n      this.destroy()\n      return null\n    }\n  }\n\n  // note that the data returned here is framed so we don't have to do an extra copy\n  // when sending it...\n  send () {\n    try {\n      const data = this.noise.send()\n      const wrap = b4a.allocUnsafe(data.byteLength + 3)\n\n      writeUint24le(data.byteLength, wrap)\n      wrap.set(data, 3)\n\n      return this._return(wrap)\n    } catch {\n      this.destroy()\n      return null\n    }\n  }\n\n  destroy () {\n    if (this.destroyed) return\n    this.destroyed = true\n  }\n\n  _return (data) {\n    const tx = this.noise.complete ? b4a.toBuffer(this.noise.tx) : null\n    const rx = this.noise.complete ? b4a.toBuffer(this.noise.rx) : null\n    const hash = this.noise.complete ? b4a.toBuffer(this.noise.hash) : null\n    const remotePublicKey = this.noise.complete ? b4a.toBuffer(this.noise.rs) : null\n\n    return {\n      data,\n      remotePublicKey,\n      hash,\n      tx,\n      rx\n    }\n  }\n}\n\nfunction writeUint24le (n, buf) {\n  buf[0] = (n & 255)\n  buf[1] = (n >>> 8) & 255\n  buf[2] = (n >>> 16) & 255\n}\n{\n  \"name\": \"@hyperswarm/secret-stream\",\n  \"version\": \"6.7.1\",\n  \"description\": \"Secret stream backed by Noise and libsodium's secretstream\",\n  \"main\": \"index.js\",\n  \"files\": [\n    \"index.js\",\n    \"lib/**.js\"\n  ],\n  \"dependencies\": {\n    \"b4a\": \"^1.1.0\",\n    \"hypercore-crypto\": \"^3.3.1\",\n    \"noise-curve-ed\": \"^2.0.1\",\n    \"noise-handshake\": \"^3.0.2\",\n    \"sodium-secretstream\": \"^1.1.0\",\n    \"sodium-universal\": \"^4.0.0\",\n    \"streamx\": \"^2.14.0\",\n    \"timeout-refresh\": \"^2.0.0\",\n    \"unslab\": \"^1.3.0\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^3.3.0\",\n    \"standard\": \"^17.1.0\",\n    \"udx-native\": \"^1.13.2\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && brittle test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/holepunchto/hyperswarm-secret-stream.git\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/hyperswarm-secret-stream/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/hyperswarm-secret-stream\"\n}\nfunction isBuffer (value) {\n  return Buffer.isBuffer(value) || value instanceof Uint8Array\n}\n\nfunction isEncoding (encoding) {\n  return Buffer.isEncoding(encoding)\n}\n\nfunction alloc (size, fill, encoding) {\n  return Buffer.alloc(size, fill, encoding)\n}\n\nfunction allocUnsafe (size) {\n  return Buffer.allocUnsafe(size)\n}\n\nfunction allocUnsafeSlow (size) {\n  return Buffer.allocUnsafeSlow(size)\n}\n\nfunction byteLength (string, encoding) {\n  return Buffer.byteLength(string, encoding)\n}\n\nfunction compare (a, b) {\n  return Buffer.compare(a, b)\n}\n\nfunction concat (buffers, totalLength) {\n  return Buffer.concat(buffers, totalLength)\n}\n\nfunction copy (source, target, targetStart, start, end) {\n  return toBuffer(source).copy(target, targetStart, start, end)\n}\n\nfunction equals (a, b) {\n  return toBuffer(a).equals(b)\n}\n\nfunction fill (buffer, value, offset, end, encoding) {\n  return toBuffer(buffer).fill(value, offset, end, encoding)\n}\n\nfunction from (value, encodingOrOffset, length) {\n  return Buffer.from(value, encodingOrOffset, length)\n}\n\nfunction includes (buffer, value, byteOffset, encoding) {\n  return toBuffer(buffer).includes(value, byteOffset, encoding)\n}\n\nfunction indexOf (buffer, value, byfeOffset, encoding) {\n  return toBuffer(buffer).indexOf(value, byfeOffset, encoding)\n}\n\nfunction lastIndexOf (buffer, value, byteOffset, encoding) {\n  return toBuffer(buffer).lastIndexOf(value, byteOffset, encoding)\n}\n\nfunction swap16 (buffer) {\n  return toBuffer(buffer).swap16()\n}\n\nfunction swap32 (buffer) {\n  return toBuffer(buffer).swap32()\n}\n\nfunction swap64 (buffer) {\n  return toBuffer(buffer).swap64()\n}\n\nfunction toBuffer (buffer) {\n  if (Buffer.isBuffer(buffer)) return buffer\n  return Buffer.from(buffer.buffer, buffer.byteOffset, buffer.byteLength)\n}\n\nfunction toString (buffer, encoding, start, end) {\n  return toBuffer(buffer).toString(encoding, start, end)\n}\n\nfunction write (buffer, string, offset, length, encoding) {\n  return toBuffer(buffer).write(string, offset, length, encoding)\n}\n\nfunction writeDoubleLE (buffer, value, offset) {\n  return toBuffer(buffer).writeDoubleLE(value, offset)\n}\n\nfunction writeFloatLE (buffer, value, offset) {\n  return toBuffer(buffer).writeFloatLE(value, offset)\n}\n\nfunction writeUInt32LE (buffer, value, offset) {\n  return toBuffer(buffer).writeUInt32LE(value, offset)\n}\n\nfunction writeInt32LE (buffer, value, offset) {\n  return toBuffer(buffer).writeInt32LE(value, offset)\n}\n\nfunction readDoubleLE (buffer, offset) {\n  return toBuffer(buffer).readDoubleLE(offset)\n}\n\nfunction readFloatLE (buffer, offset) {\n  return toBuffer(buffer).readFloatLE(offset)\n}\n\nfunction readUInt32LE (buffer, offset) {\n  return toBuffer(buffer).readUInt32LE(offset)\n}\n\nfunction readInt32LE (buffer, offset) {\n  return toBuffer(buffer).readInt32LE(offset)\n}\n\nfunction writeDoubleBE (buffer, value, offset) {\n  return toBuffer(buffer).writeDoubleBE(value, offset)\n}\n\nfunction writeFloatBE (buffer, value, offset) {\n  return toBuffer(buffer).writeFloatBE(value, offset)\n}\n\nfunction writeUInt32BE (buffer, value, offset) {\n  return toBuffer(buffer).writeUInt32BE(value, offset)\n}\n\nfunction writeInt32BE (buffer, value, offset) {\n  return toBuffer(buffer).writeInt32BE(value, offset)\n}\n\nfunction readDoubleBE (buffer, offset) {\n  return toBuffer(buffer).readDoubleBE(offset)\n}\n\nfunction readFloatBE (buffer, offset) {\n  return toBuffer(buffer).readFloatBE(offset)\n}\n\nfunction readUInt32BE (buffer, offset) {\n  return toBuffer(buffer).readUInt32BE(offset)\n}\n\nfunction readInt32BE (buffer, offset) {\n  return toBuffer(buffer).readInt32BE(offset)\n}\n\nmodule.exports = {\n  isBuffer,\n  isEncoding,\n  alloc,\n  allocUnsafe,\n  allocUnsafeSlow,\n  byteLength,\n  compare,\n  concat,\n  copy,\n  equals,\n  fill,\n  from,\n  includes,\n  indexOf,\n  lastIndexOf,\n  swap16,\n  swap32,\n  swap64,\n  toBuffer,\n  toString,\n  write,\n  writeDoubleLE,\n  writeFloatLE,\n  writeUInt32LE,\n  writeInt32LE,\n  readDoubleLE,\n  readFloatLE,\n  readUInt32LE,\n  readInt32LE,\n  writeDoubleBE,\n  writeFloatBE,\n  writeUInt32BE,\n  writeInt32BE,\n  readDoubleBE,\n  readFloatBE,\n  readUInt32BE,\n  readInt32BE\n\n}\n{\n  \"name\": \"b4a\",\n  \"version\": \"1.6.7\",\n  \"description\": \"Bridging the gap between buffers and typed arrays\",\n  \"main\": \"index.js\",\n  \"files\": [\n    \"browser.js\",\n    \"index.js\",\n    \"lib\"\n  ],\n  \"browser\": {\n    \"./index.js\": \"./browser.js\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && brittle test/*.mjs\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/holepunchto/b4a.git\"\n  },\n  \"author\": \"Holepunch\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/b4a/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/b4a#readme\",\n  \"devDependencies\": {\n    \"brittle\": \"^3.5.2\",\n    \"nanobench\": \"^3.0.0\",\n    \"standard\": \"^17.1.0\"\n  }\n}\nconst errors = require('./lib/errors')\n\nclass EventListener {\n  constructor() {\n    this.list = []\n    this.count = 0\n  }\n\n  append(ctx, name, fn, once) {\n    this.count++\n    ctx.emit('newListener', name, fn) // Emit BEFORE adding\n    this.list.push([fn, once])\n  }\n\n  prepend(ctx, name, fn, once) {\n    this.count++\n    ctx.emit('newListener', name, fn) // Emit BEFORE adding\n    this.list.unshift([fn, once])\n  }\n\n  remove(ctx, name, fn) {\n    for (let i = 0, n = this.list.length; i < n; i++) {\n      const l = this.list[i]\n\n      if (l[0] === fn) {\n        this.list.splice(i, 1)\n\n        if (this.count === 1) delete ctx._events[name]\n\n        ctx.emit('removeListener', name, fn) // Emit AFTER removing\n\n        this.count--\n        return\n      }\n    }\n  }\n\n  removeAll(ctx, name) {\n    const list = [...this.list]\n    this.list = []\n\n    if (this.count === list.length) delete ctx._events[name]\n\n    for (let i = list.length - 1; i >= 0; i--) {\n      ctx.emit('removeListener', name, list[i][0]) // Emit AFTER removing\n    }\n\n    this.count -= list.length\n  }\n\n  emit(ctx, name, ...args) {\n    const list = [...this.list]\n\n    for (let i = 0, n = list.length; i < n; i++) {\n      const l = list[i]\n\n      if (l[1] === true) this.remove(ctx, name, l[0])\n\n      l[0].call(ctx, ...args)\n    }\n\n    return list.length > 0\n  }\n}\n\nfunction appendListener(ctx, name, fn, once) {\n  const e = ctx._events[name] || (ctx._events[name] = new EventListener())\n  e.append(ctx, name, fn, once)\n  return ctx\n}\n\nfunction prependListener(ctx, name, fn, once) {\n  const e = ctx._events[name] || (ctx._events[name] = new EventListener())\n  e.prepend(ctx, name, fn, once)\n  return ctx\n}\n\nfunction removeListener(ctx, name, fn) {\n  const e = ctx._events[name]\n  if (e !== undefined) e.remove(ctx, name, fn)\n  return ctx\n}\n\nfunction throwUnhandledError(...args) {\n  let err\n\n  if (args.length > 0) err = args[0]\n\n  if (err instanceof Error === false) err = errors.UNHANDLED_ERROR(err)\n\n  if (Error.captureStackTrace) {\n    Error.captureStackTrace(err, exports.prototype.emit)\n  }\n\n  queueMicrotask(() => {\n    throw err\n  })\n}\n\nmodule.exports = exports = class EventEmitter {\n  constructor() {\n    this._events = Object.create(null)\n  }\n\n  addListener(name, fn) {\n    return appendListener(this, name, fn, false)\n  }\n\n  addOnceListener(name, fn) {\n    return appendListener(this, name, fn, true)\n  }\n\n  prependListener(name, fn) {\n    return prependListener(this, name, fn, false)\n  }\n\n  prependOnceListener(name, fn) {\n    return prependListener(this, name, fn, true)\n  }\n\n  removeListener(name, fn) {\n    return removeListener(this, name, fn)\n  }\n\n  on(name, fn) {\n    return appendListener(this, name, fn, false)\n  }\n\n  once(name, fn) {\n    return appendListener(this, name, fn, true)\n  }\n\n  off(name, fn) {\n    return removeListener(this, name, fn)\n  }\n\n  emit(name, ...args) {\n    if (name === 'error' && this._events.error === undefined) {\n      throwUnhandledError(...args)\n    }\n\n    const e = this._events[name]\n    return e === undefined ? false : e.emit(this, name, ...args)\n  }\n\n  listeners(name) {\n    const e = this._events[name]\n    return e === undefined ? [] : [...e.list]\n  }\n\n  listenerCount(name) {\n    const e = this._events[name]\n    return e === undefined ? 0 : e.list.length\n  }\n\n  getMaxListeners() {\n    return EventEmitter.defaultMaxListeners\n  }\n\n  setMaxListeners(n) {}\n\n  removeAllListeners(name) {\n    if (arguments.length === 0) {\n      for (const key of Reflect.ownKeys(this._events)) {\n        if (key === 'removeListener') continue\n        this.removeAllListeners(key)\n      }\n      this.removeAllListeners('removeListener')\n    } else {\n      const e = this._events[name]\n      if (e !== undefined) e.removeAll(this, name)\n    }\n    return this\n  }\n}\n\nexports.EventEmitter = exports\n\nexports.errors = errors\n\nexports.defaultMaxListeners = 10\n\nexports.on = function on(emitter, name, opts = {}) {\n  const { signal } = opts\n\n  if (signal && signal.aborted) {\n    throw errors.OPERATION_ABORTED(signal.reason)\n  }\n\n  let error = null\n  let done = false\n\n  const events = []\n  const promises = []\n\n  emitter.on(name, onevent)\n\n  if (name !== 'error') emitter.on('error', onerror)\n\n  if (signal) signal.addEventListener('abort', onabort)\n\n  return {\n    next() {\n      if (events.length) {\n        return Promise.resolve({ value: events.shift(), done: false })\n      }\n\n      if (error) {\n        const err = error\n\n        error = null\n\n        return Promise.reject(err)\n      }\n\n      if (done) return onclose()\n\n      return new Promise((resolve, reject) =>\n        promises.push({ resolve, reject })\n      )\n    },\n\n    return() {\n      return onclose()\n    },\n\n    throw(err) {\n      return onerror(err)\n    },\n\n    [Symbol.asyncIterator]() {\n      return this\n    }\n  }\n\n  function onevent(...args) {\n    if (promises.length) {\n      promises.shift().resolve({ value: args, done: false })\n    } else {\n      events.push(args)\n    }\n  }\n\n  function onerror(err) {\n    if (promises.length) {\n      promises.shift().reject(err)\n    } else {\n      error = err\n    }\n\n    return Promise.resolve({ done: true })\n  }\n\n  function onabort() {\n    onerror(errors.OPERATION_ABORTED(signal.reason))\n  }\n\n  function onclose() {\n    emitter.off(name, onevent)\n\n    if (name !== 'error') emitter.off('error', onerror)\n\n    if (signal) signal.removeEventListener('abort', onabort)\n\n    done = true\n\n    if (promises.length) promises.shift().resolve({ done: true })\n\n    return Promise.resolve({ done: true })\n  }\n}\n\nexports.once = function once(emitter, name, opts = {}) {\n  const { signal } = opts\n\n  if (signal && signal.aborted) {\n    throw errors.OPERATION_ABORTED(signal.reason)\n  }\n\n  return new Promise((resolve, reject) => {\n    if (name !== 'error') emitter.on('error', onerror)\n\n    if (signal) signal.addEventListener('abort', onabort)\n\n    emitter.once(name, (...args) => {\n      if (name !== 'error') emitter.off('error', onerror)\n\n      if (signal) signal.removeEventListener('abort', onabort)\n\n      resolve(args)\n    })\n\n    function onerror(err) {\n      emitter.off('error', onerror)\n\n      reject(err)\n    }\n\n    function onabort() {\n      signal.removeEventListener('abort', onabort)\n\n      onerror(errors.OPERATION_ABORTED(signal.reason))\n    }\n  })\n}\n\nexports.forward = function forward(from, to, names, opts = {}) {\n  if (typeof names === 'string') names = [names]\n\n  const { emit = to.emit.bind(to) } = opts\n\n  const listeners = names.map(\n    (name) =>\n      function onevent(...args) {\n        emit(name, ...args)\n      }\n  )\n\n  to.on('newListener', (name) => {\n    const i = names.indexOf(name)\n\n    if (i !== -1 && to.listenerCount(name) === 0) {\n      from.on(name, listeners[i])\n    }\n  }).on('removeListener', (name) => {\n    const i = names.indexOf(name)\n\n    if (i !== -1 && to.listenerCount(name) === 0) {\n      from.off(name, listeners[i])\n    }\n  })\n}\n\nexports.listenerCount = function listenerCount(emitter, name) {\n  return emitter.listenerCount(name)\n}\nmodule.exports = class EventEmitterError extends Error {\n  constructor(msg, code, fn = EventEmitterError, opts) {\n    super(`${code}: ${msg}`, opts)\n    this.code = code\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, fn)\n    }\n  }\n\n  get name() {\n    return 'EventEmitterError'\n  }\n\n  static OPERATION_ABORTED(cause, msg = 'Operation aborted') {\n    return new EventEmitterError(\n      msg,\n      'OPERATION_ABORTED',\n      EventEmitterError.OPERATION_ABORTED,\n      { cause }\n    )\n  }\n\n  static UNHANDLED_ERROR(cause, msg = 'Unhandled error') {\n    return new EventEmitterError(\n      msg,\n      'UNHANDLED_ERROR',\n      EventEmitterError.UNHANDLED_ERROR,\n      { cause }\n    )\n  }\n}\n{\n  \"name\": \"bare-events\",\n  \"version\": \"2.5.4\",\n  \"description\": \"Event emitters for JavaScript\",\n  \"exports\": {\n    \".\": {\n      \"types\": \"./index.d.ts\",\n      \"default\": \"./index.js\"\n    },\n    \"./package\": \"./package.json\",\n    \"./errors\": \"./lib/errors.js\"\n  },\n  \"files\": [\n    \"index.js\",\n    \"index.d.ts\",\n    \"lib\"\n  ],\n  \"scripts\": {\n    \"test\": \"npm run lint && npm run test:bare && npm run test:node\",\n    \"test:bare\": \"bare test.js\",\n    \"test:node\": \"node test.js\",\n    \"lint\": \"prettier . --check\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/holepunchto/bare-events.git\"\n  },\n  \"author\": \"Holepunch\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/bare-events/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/bare-events#readme\",\n  \"devDependencies\": {\n    \"brittle\": \"^3.3.2\",\n    \"prettier\": \"^3.4.2\",\n    \"prettier-config-standard\": \"^7.0.0\"\n  }\n}\nmodule.exports = require.addon()\n/* global Bare */\nconst EventEmitter = require('bare-events')\nconst path = require('bare-path')\nconst { Readable, Writable } = require('bare-stream')\nconst binding = require('./binding')\n\nconst isWindows = Bare.platform === 'win32'\n\nconst constants = (exports.constants = {\n  O_RDWR: binding.O_RDWR,\n  O_RDONLY: binding.O_RDONLY,\n  O_WRONLY: binding.O_WRONLY,\n  O_CREAT: binding.O_CREAT,\n  O_TRUNC: binding.O_TRUNC,\n  O_APPEND: binding.O_APPEND,\n\n  F_OK: binding.F_OK || 0,\n  R_OK: binding.R_OK || 0,\n  W_OK: binding.W_OK || 0,\n  X_OK: binding.X_OK || 0,\n\n  S_IFMT: binding.S_IFMT,\n  S_IFREG: binding.S_IFREG,\n  S_IFDIR: binding.S_IFDIR,\n  S_IFCHR: binding.S_IFCHR,\n  S_IFLNK: binding.S_IFLNK,\n  S_IFBLK: binding.S_IFBLK || 0,\n  S_IFIFO: binding.S_IFIFO || 0,\n  S_IFSOCK: binding.S_IFSOCK || 0,\n\n  S_IRUSR: binding.S_IRUSR || 0,\n  S_IWUSR: binding.S_IWUSR || 0,\n  S_IXUSR: binding.S_IXUSR || 0,\n  S_IRGRP: binding.S_IRGRP || 0,\n  S_IWGRP: binding.S_IWGRP || 0,\n  S_IXGRP: binding.S_IXGRP || 0,\n  S_IROTH: binding.S_IROTH || 0,\n  S_IWOTH: binding.S_IWOTH || 0,\n  S_IXOTH: binding.S_IXOTH || 0,\n\n  UV_DIRENT_UNKNOWN: binding.UV_DIRENT_UNKNOWN,\n  UV_DIRENT_FILE: binding.UV_DIRENT_FILE,\n  UV_DIRENT_DIR: binding.UV_DIRENT_DIR,\n  UV_DIRENT_LINK: binding.UV_DIRENT_LINK,\n  UV_DIRENT_FIFO: binding.UV_DIRENT_FIFO,\n  UV_DIRENT_SOCKET: binding.UV_DIRENT_SOCKET,\n  UV_DIRENT_CHAR: binding.UV_DIRENT_CHAR,\n  UV_DIRENT_BLOCK: binding.UV_DIRENT_BLOCK,\n\n  COPYFILE_EXCL: binding.UV_FS_COPYFILE_EXCL,\n  COPYFILE_FICLONE: binding.UV_FS_COPYFILE_FICLONE,\n  COPYFILE_FICLONE_FORCE: binding.UV_FS_COPYFILE_FICLONE_FORCE,\n  UV_FS_SYMLINK_DIR: binding.UV_FS_SYMLINK_DIR,\n  UV_FS_SYMLINK_JUNCTION: binding.UV_FS_SYMLINK_JUNCTION\n})\n\n// Lightly-modified from the Node FS internal utils.\nfunction flagsToNumber(flags) {\n  switch (flags) {\n    case 'r':\n      return constants.O_RDONLY\n    case 'rs': // Fall through.\n    case 'sr':\n      return constants.O_RDONLY | constants.O_SYNC\n    case 'r+':\n      return constants.O_RDWR\n    case 'rs+': // Fall through.\n    case 'sr+':\n      return constants.O_RDWR | constants.O_SYNC\n\n    case 'w':\n      return constants.O_TRUNC | constants.O_CREAT | constants.O_WRONLY\n    case 'wx': // Fall through.\n    case 'xw':\n      return (\n        constants.O_TRUNC |\n        constants.O_CREAT |\n        constants.O_WRONLY |\n        constants.O_EXCL\n      )\n\n    case 'w+':\n      return constants.O_TRUNC | constants.O_CREAT | constants.O_RDWR\n    case 'wx+': // Fall through.\n    case 'xw+':\n      return (\n        constants.O_TRUNC |\n        constants.O_CREAT |\n        constants.O_RDWR |\n        constants.O_EXCL\n      )\n\n    case 'a':\n      return constants.O_APPEND | constants.O_CREAT | constants.O_WRONLY\n    case 'ax': // Fall through.\n    case 'xa':\n      return (\n        constants.O_APPEND |\n        constants.O_CREAT |\n        constants.O_WRONLY |\n        constants.O_EXCL\n      )\n    case 'as': // Fall through.\n    case 'sa':\n      return (\n        constants.O_APPEND |\n        constants.O_CREAT |\n        constants.O_WRONLY |\n        constants.O_SYNC\n      )\n\n    case 'a+':\n      return constants.O_APPEND | constants.O_CREAT | constants.O_RDWR\n    case 'ax+': // Fall through.\n    case 'xa+':\n      return (\n        constants.O_APPEND |\n        constants.O_CREAT |\n        constants.O_RDWR |\n        constants.O_EXCL\n      )\n    case 'as+': // Fall through.\n    case 'sa+':\n      return (\n        constants.O_APPEND |\n        constants.O_CREAT |\n        constants.O_RDWR |\n        constants.O_SYNC\n      )\n  }\n\n  throw typeError('ERR_INVALID_ARG_VALUE', `Invalid value in flags: ${flags}`)\n}\n\nfunction modeToNumber(mode) {\n  mode = parseInt(mode, 8)\n  if (isNaN(mode))\n    throw typeError(\n      'ERR_INVALID_ARG_VALUE',\n      'Mode must be a number or octal string'\n    )\n  return mode\n}\n\nconst free = []\n\nfunction alloc() {\n  const req = { handle: null, callback: null }\n  req.handle = binding.init(req, onresponse)\n  return req\n}\n\nfunction getReq() {\n  return free.length ? free.pop() : alloc()\n}\n\nfunction onresponse(err, result) {\n  const req = this\n  const cb = req.callback\n  req.callback = null\n  free.push(req)\n  cb(err, result)\n}\n\nfunction open(filepath, flags, mode, cb) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof cb !== 'function') {\n    if (typeof flags === 'function') {\n      cb = flags\n      flags = 'r'\n      mode = 0o666\n    } else if (typeof mode === 'function') {\n      cb = mode\n      mode = 0o666\n    } else {\n      throw typeError(\n        'ERR_INVALID_ARG_TYPE',\n        'Callback must be a function. Received type ' +\n          typeof cb +\n          ' (' +\n          cb +\n          ')'\n      )\n    }\n  }\n\n  if (typeof flags === 'string') flags = flagsToNumber(flags)\n  if (typeof mode === 'string') mode = modeToNumber(mode)\n\n  const req = getReq()\n  req.callback = cb\n  binding.open(req.handle, filepath, flags, mode)\n}\n\nfunction openSync(filepath, flags = 'r', mode = 0o666) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof flags === 'string') flags = flagsToNumber(flags)\n  if (typeof mode === 'string') mode = modeToNumber(mode)\n\n  return binding.openSync(filepath, flags, mode)\n}\n\nfunction close(fd, cb = noop) {\n  if (typeof fd !== 'number') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'File descriptor must be a number. Received type ' +\n        typeof fd +\n        ' (' +\n        fd +\n        ')'\n    )\n  }\n\n  if (fd < 0 || fd > 0x7fffffff) {\n    throw typeError(\n      'ERR_OUT_OF_RANGE',\n      'File descriptor is out of range. It must be >= 0 && <= 2147483647. Received ' +\n        fd\n    )\n  }\n\n  if (typeof cb !== 'function') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Callback must be a function. Received type ' +\n        typeof cb +\n        ' (' +\n        cb +\n        ')'\n    )\n  }\n\n  const req = getReq()\n  req.callback = cb\n  binding.close(req.handle, fd)\n}\n\nfunction closeSync(fd) {\n  if (typeof fd !== 'number') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'File descriptor must be a number. Received type ' +\n        typeof fd +\n        ' (' +\n        fd +\n        ')'\n    )\n  }\n\n  if (fd < 0 || fd > 0x7fffffff) {\n    throw typeError(\n      'ERR_OUT_OF_RANGE',\n      'File descriptor is out of range. It must be >= 0 && <= 2147483647. Received ' +\n        fd\n    )\n  }\n\n  return binding.closeSync(fd)\n}\n\nfunction access(filepath, mode, cb) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof cb !== 'function') {\n    if (typeof mode === 'function') {\n      cb = mode\n      mode = constants.F_OK\n    } else {\n      throw typeError(\n        'ERR_INVALID_ARG_TYPE',\n        'Callback must be a function. Received type ' +\n          typeof cb +\n          ' (' +\n          cb +\n          ')'\n      )\n    }\n  }\n\n  const req = getReq()\n  req.callback = cb\n  binding.access(req.handle, filepath, mode)\n}\n\nfunction accessSync(filepath, mode = constants.F_OK) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  binding.accessSync(filepath, mode)\n}\n\nfunction exists(filepath, cb) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof cb !== 'function') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Callback must be a function. Received type ' +\n        typeof cb +\n        ' (' +\n        cb +\n        ')'\n    )\n  }\n\n  return access(filepath, (err) => cb(!!err))\n}\n\nfunction existsSync(filepath) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  try {\n    accessSync(filepath)\n    return true\n  } catch {\n    return false\n  }\n}\n\nfunction read(fd, buffer, offset, len, pos, cb) {\n  if (typeof fd !== 'number') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'File descriptor must be a number. Received type ' +\n        typeof fd +\n        ' (' +\n        fd +\n        ')'\n    )\n  }\n\n  if (fd < 0 || fd > 0x7fffffff) {\n    throw typeError(\n      'ERR_OUT_OF_RANGE',\n      'File descriptor is out of range. It must be >= 0 && <= 2147483647. Received ' +\n        fd\n    )\n  }\n\n  if (!Buffer.isBuffer(buffer) && !ArrayBuffer.isView(buffer)) {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Buffer must be a buffer. Received type ' +\n        typeof buffer +\n        ' (' +\n        buffer +\n        ')'\n    )\n  }\n\n  if (typeof cb !== 'function') {\n    if (typeof offset === 'function') {\n      cb = offset\n      offset = 0\n      len = buffer.byteLength\n      pos = -1\n    } else if (typeof len === 'function') {\n      cb = len\n      len = buffer.byteLength - offset\n      pos = -1\n    } else if (typeof pos === 'function') {\n      cb = pos\n      pos = -1\n    } else {\n      throw typeError(\n        'ERR_INVALID_ARG_TYPE',\n        'Callback must be a function. Received type ' +\n          typeof cb +\n          ' (' +\n          cb +\n          ')'\n      )\n    }\n  }\n\n  if (typeof pos !== 'number') pos = -1\n\n  const req = getReq()\n  req.callback = cb\n  binding.read(req.handle, fd, buffer, offset, len, pos)\n}\n\nfunction readSync(\n  fd,\n  buffer,\n  offset = 0,\n  len = buffer.byteLength - offset,\n  pos = -1\n) {\n  if (typeof fd !== 'number') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'File descriptor must be a number. Received type ' +\n        typeof fd +\n        ' (' +\n        fd +\n        ')'\n    )\n  }\n\n  if (fd < 0 || fd > 0x7fffffff) {\n    throw typeError(\n      'ERR_OUT_OF_RANGE',\n      'File descriptor is out of range. It must be >= 0 && <= 2147483647. Received ' +\n        fd\n    )\n  }\n\n  if (!Buffer.isBuffer(buffer) && !ArrayBuffer.isView(buffer)) {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Buffer must be a buffer. Received type ' +\n        typeof buffer +\n        ' (' +\n        buffer +\n        ')'\n    )\n  }\n\n  return binding.readSync(fd, buffer, offset, len, pos)\n}\n\nfunction readv(fd, buffers, pos, cb) {\n  if (typeof fd !== 'number') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'File descriptor must be a number. Received type ' +\n        typeof fd +\n        ' (' +\n        fd +\n        ')'\n    )\n  }\n\n  if (fd < 0 || fd > 0x7fffffff) {\n    throw typeError(\n      'ERR_OUT_OF_RANGE',\n      'File descriptor is out of range. It must be >= 0 && <= 2147483647. Received ' +\n        fd\n    )\n  }\n\n  if (typeof pos === 'function') {\n    cb = pos\n    pos = -1\n  } else if (typeof cb !== 'function') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Callback must be a function. Received type ' +\n        typeof cb +\n        ' (' +\n        cb +\n        ')'\n    )\n  }\n\n  if (typeof pos !== 'number') pos = -1\n\n  const req = getReq()\n  req.callback = cb\n  binding.readv(req.handle, fd, buffers, pos)\n}\n\nfunction write(fd, data, offset, len, pos, cb) {\n  if (typeof fd !== 'number') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'File descriptor must be a number. Received type ' +\n        typeof fd +\n        ' (' +\n        fd +\n        ')'\n    )\n  }\n\n  if (fd < 0 || fd > 0x7fffffff) {\n    throw typeError(\n      'ERR_OUT_OF_RANGE',\n      'File descriptor is out of range. It must be >= 0 && <= 2147483647. Received ' +\n        fd\n    )\n  }\n\n  if (\n    typeof data !== 'string' &&\n    !Buffer.isBuffer(data) &&\n    !ArrayBuffer.isView(data)\n  ) {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Data must be a string or buffer. Received type ' + typeof data\n    )\n  }\n\n  if (typeof data === 'string') {\n    let encoding = len\n    cb = pos\n    pos = offset\n\n    if (typeof cb !== 'function') {\n      if (typeof pos === 'function') {\n        cb = pos\n        pos = -1\n        encoding = 'utf8'\n      } else if (typeof encoding === 'function') {\n        cb = encoding\n        encoding = 'utf8'\n      } else {\n        throw typeError(\n          'ERR_INVALID_ARG_TYPE',\n          'Callback must be a function. Received type ' +\n            typeof cb +\n            ' (' +\n            cb +\n            ')'\n        )\n      }\n    }\n\n    if (typeof pos === 'string') {\n      encoding = pos\n      pos = -1\n    }\n\n    data = Buffer.from(data, encoding)\n    offset = 0\n    len = data.byteLength\n  } else if (typeof cb !== 'function') {\n    if (typeof offset === 'function') {\n      cb = offset\n      offset = 0\n      len = data.byteLength\n      pos = -1\n    } else if (typeof len === 'function') {\n      cb = len\n      len = data.byteLength - offset\n      pos = -1\n    } else if (typeof pos === 'function') {\n      cb = pos\n      pos = -1\n    } else {\n      throw typeError(\n        'ERR_INVALID_ARG_TYPE',\n        'Callback must be a function. Received type ' +\n          typeof cb +\n          ' (' +\n          cb +\n          ')'\n      )\n    }\n  }\n\n  if (typeof pos !== 'number') pos = -1\n\n  const req = getReq()\n  req.callback = cb\n  binding.write(req.handle, fd, data, offset, len, pos)\n}\n\nfunction writeSync(fd, data, offset = 0, len, pos) {\n  if (typeof fd !== 'number') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'File descriptor must be a number. Received type ' +\n        typeof fd +\n        ' (' +\n        fd +\n        ')'\n    )\n  }\n\n  if (fd < 0 || fd > 0x7fffffff) {\n    throw typeError(\n      'ERR_OUT_OF_RANGE',\n      'File descriptor is out of range. It must be >= 0 && <= 2147483647. Received ' +\n        fd\n    )\n  }\n\n  if (\n    typeof data !== 'string' &&\n    !Buffer.isBuffer(data) &&\n    !ArrayBuffer.isView(data)\n  ) {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Data must be a string or buffer. Received type ' + typeof data\n    )\n  }\n\n  if (typeof data === 'string') data = Buffer.from(data)\n\n  if (typeof len !== 'number') len = data.byteLength - offset\n\n  if (typeof pos !== 'number') pos = -1\n\n  return binding.writeSync(fd, data, offset, len, pos)\n}\n\nfunction writev(fd, buffers, pos, cb) {\n  if (typeof fd !== 'number') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'File descriptor must be a number. Received type ' +\n        typeof fd +\n        ' (' +\n        fd +\n        ')'\n    )\n  }\n\n  if (fd < 0 || fd > 0x7fffffff) {\n    throw typeError(\n      'ERR_OUT_OF_RANGE',\n      'File descriptor is out of range. It must be >= 0 && <= 2147483647. Received ' +\n        fd\n    )\n  }\n\n  if (typeof pos === 'function') {\n    cb = pos\n    pos = -1\n  } else if (typeof cb !== 'function') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Callback must be a function. Received type ' +\n        typeof cb +\n        ' (' +\n        cb +\n        ')'\n    )\n  }\n\n  if (typeof pos !== 'number') pos = -1\n\n  const req = getReq()\n  req.callback = cb\n  binding.writev(req.handle, fd, buffers, pos)\n}\n\nfunction stat(filepath, cb) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof cb !== 'function') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Callback must be a function. Received type ' +\n        typeof cb +\n        ' (' +\n        cb +\n        ')'\n    )\n  }\n\n  const data = new Array(Stats.length)\n\n  const req = getReq()\n\n  req.callback = function (err, _) {\n    if (err) cb(err, null)\n    else cb(null, new Stats(...data))\n  }\n\n  binding.stat(req.handle, filepath, data)\n}\n\nfunction statSync(filepath) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  return new Stats(...binding.statSync(filepath))\n}\n\nfunction lstat(filepath, cb) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof cb !== 'function') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Callback must be a function. Received type ' +\n        typeof cb +\n        ' (' +\n        cb +\n        ')'\n    )\n  }\n\n  const data = new Array(Stats.length)\n\n  const req = getReq()\n\n  req.callback = function (err, _) {\n    if (err) cb(err, null)\n    else cb(null, new Stats(...data))\n  }\n\n  binding.lstat(req.handle, filepath, data)\n}\n\nfunction lstatSync(filepath) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  return new Stats(...binding.lstatSync(filepath))\n}\n\nfunction fstat(fd, cb) {\n  if (typeof fd !== 'number') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'File descriptor must be a number. Received type ' +\n        typeof fd +\n        ' (' +\n        fd +\n        ')'\n    )\n  }\n\n  if (fd < 0 || fd > 0x7fffffff) {\n    throw typeError(\n      'ERR_OUT_OF_RANGE',\n      'File descriptor is out of range. It must be >= 0 && <= 2147483647. Received ' +\n        fd\n    )\n  }\n\n  if (typeof cb !== 'function') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Callback must be a function. Received type ' +\n        typeof cb +\n        ' (' +\n        cb +\n        ')'\n    )\n  }\n\n  const data = new Array(Stats.length)\n\n  const req = getReq()\n\n  req.callback = function (err, _) {\n    if (err) cb(err, null)\n    else cb(null, new Stats(...data))\n  }\n\n  binding.fstat(req.handle, fd, data)\n}\n\nfunction fstatSync(fd) {\n  if (typeof fd !== 'number') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'File descriptor must be a number. Received type ' +\n        typeof fd +\n        ' (' +\n        fd +\n        ')'\n    )\n  }\n\n  if (fd < 0 || fd > 0x7fffffff) {\n    throw typeError(\n      'ERR_OUT_OF_RANGE',\n      'File descriptor is out of range. It must be >= 0 && <= 2147483647. Received ' +\n        fd\n    )\n  }\n\n  return new Stats(...binding.fstatSync(fd))\n}\n\nfunction ftruncate(fd, len, cb) {\n  if (typeof fd !== 'number') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'File descriptor must be a number. Received type ' +\n        typeof fd +\n        ' (' +\n        fd +\n        ')'\n    )\n  }\n\n  if (fd < 0 || fd > 0x7fffffff) {\n    throw typeError(\n      'ERR_OUT_OF_RANGE',\n      'File descriptor is out of range. It must be >= 0 && <= 2147483647. Received ' +\n        fd\n    )\n  }\n\n  if (typeof len === 'function') {\n    cb = len\n    len = 0\n  } else if (typeof cb !== 'function') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Callback must be a function. Received type ' +\n        typeof cb +\n        ' (' +\n        cb +\n        ')'\n    )\n  }\n\n  const req = getReq()\n  req.callback = cb\n  binding.ftruncate(req.handle, fd, len)\n}\n\nfunction chmod(filepath, mode, cb) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof mode === 'string') mode = modeToNumber(mode)\n\n  const req = getReq()\n  req.callback = cb\n  binding.chmod(req.handle, filepath, mode)\n}\n\nfunction chmodSync(filepath, mode) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof mode === 'string') mode = modeToNumber(mode)\n\n  binding.chmodSync(filepath, mode)\n}\n\nfunction fchmod(fd, mode, cb) {\n  if (typeof fd !== 'number') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'File descriptor must be a number. Received type ' +\n        typeof fd +\n        ' (' +\n        fd +\n        ')'\n    )\n  }\n\n  if (fd < 0 || fd > 0x7fffffff) {\n    throw typeError(\n      'ERR_OUT_OF_RANGE',\n      'File descriptor is out of range. It must be >= 0 && <= 2147483647. Received ' +\n        fd\n    )\n  }\n\n  if (typeof mode === 'string') mode = modeToNumber(mode)\n\n  const req = getReq()\n  req.callback = cb\n  binding.fchmod(req.handle, fd, mode)\n}\n\nfunction fchmodSync(fd, mode) {\n  if (typeof fd !== 'number') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'File descriptor must be a number. Received type ' +\n        typeof fd +\n        ' (' +\n        fd +\n        ')'\n    )\n  }\n\n  if (fd < 0 || fd > 0x7fffffff) {\n    throw typeError(\n      'ERR_OUT_OF_RANGE',\n      'File descriptor is out of range. It must be >= 0 && <= 2147483647. Received ' +\n        fd\n    )\n  }\n\n  if (typeof mode === 'string') mode = modeToNumber(mode)\n\n  binding.fchmodSync(fd, mode)\n}\n\nfunction mkdirRecursive(filepath, mode, cb) {\n  mkdir(filepath, { mode }, function (err) {\n    if (err === null) return cb(null, 0, null)\n\n    if (err.code !== 'ENOENT') {\n      stat(filepath, function (e, st) {\n        if (e) return cb(e, e.errno, null)\n        if (st.isDirectory()) return cb(null, 0, null)\n        cb(err, err.errno, null)\n      })\n      return\n    }\n\n    while (filepath.endsWith(path.sep)) filepath = filepath.slice(0, -1)\n    const i = filepath.lastIndexOf(path.sep)\n    if (i <= 0) return cb(err, err.errno, null)\n\n    mkdirRecursive(filepath.slice(0, i), mode, function (err) {\n      if (err) return cb(err, err.errno, null)\n\n      mkdir(filepath, { mode }, function (err) {\n        if (err === null) return cb(null, 0, null)\n\n        stat(filepath, function (e, st) {\n          if (e) return cb(e, e.errno, null)\n          if (st.isDirectory()) return cb(null, 0, null)\n          cb(err, err.errno, null)\n        })\n      })\n    })\n  })\n}\n\nfunction mkdir(filepath, opts, cb) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof opts === 'function') {\n    cb = opts\n    opts = { mode: 0o777 }\n  } else if (typeof cb !== 'function') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Callback must be a function. Received type ' +\n        typeof cb +\n        ' (' +\n        cb +\n        ')'\n    )\n  }\n\n  if (typeof opts === 'number') opts = { mode: opts }\n  else if (!opts) opts = {}\n\n  const mode = typeof opts.mode === 'number' ? opts.mode : 0o777\n\n  if (opts.recursive)\n    return mkdirRecursive(filepath.replace(/\\//g, path.sep), mode, cb)\n\n  const req = getReq()\n  req.callback = cb\n  binding.mkdir(req.handle, filepath, mode)\n}\n\nfunction mkdirRecursiveSync(filepath, mode) {\n  try {\n    mkdirSync(filepath, { mode })\n  } catch (err) {\n    if (err.code !== 'ENOENT' && statSync(filepath).isDirectory()) {\n      return\n    }\n\n    while (filepath.endsWith(path.sep)) filepath = filepath.slice(0, -1)\n    const i = filepath.lastIndexOf(path.sep)\n    if (i <= 0) throw err\n\n    mkdirRecursiveSync(filepath.slice(0, i), { mode })\n\n    try {\n      mkdirSync(filepath, { mode })\n    } catch (err) {\n      if (statSync(filepath).isDirectory()) {\n        return\n      }\n\n      throw err\n    }\n  }\n}\n\nfunction mkdirSync(filepath, opts) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof opts === 'number') opts = { mode: opts }\n  else if (!opts) opts = {}\n\n  const mode = typeof opts.mode === 'number' ? opts.mode : 0o777\n\n  if (opts.recursive)\n    return mkdirRecursiveSync(filepath.replace(/\\//g, path.sep), mode)\n\n  binding.mkdirSync(filepath, mode)\n}\n\nfunction rmdir(filepath, cb) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof cb !== 'function') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Callback must be a function. Received type ' +\n        typeof cb +\n        ' (' +\n        cb +\n        ')'\n    )\n  }\n\n  const req = getReq()\n  req.callback = cb\n  binding.rmdir(req.handle, filepath)\n}\n\nfunction rmdirSync(filepath) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  binding.rmdirSync(filepath)\n}\n\nfunction rmRecursive(filepath, opts, cb) {\n  rmdir(filepath, function (err) {\n    if (err === null) return cb(null)\n\n    if (err.code !== 'ENOTEMPTY') return cb(err)\n\n    readdir(filepath, function (err, files) {\n      if (err) return cb(err)\n\n      if (files.length === 0) return rmdir(filepath, cb)\n\n      let missing = files.length\n      let done = false\n\n      for (const file of files) {\n        rm(filepath + path.sep + file, opts, function (err) {\n          if (done) return\n\n          if (err) {\n            done = true\n            return cb(err)\n          }\n\n          if (--missing === 0) rmdir(filepath, cb)\n        })\n      }\n    })\n  })\n}\n\nfunction rm(filepath, opts, cb) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof opts === 'function') {\n    cb = opts\n    opts = {}\n  } else if (typeof cb !== 'function') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Callback must be a function. Received type ' +\n        typeof cb +\n        ' (' +\n        cb +\n        ')'\n    )\n  }\n\n  if (!opts) opts = {}\n\n  lstat(filepath, function (err, st) {\n    if (err) {\n      return cb(err.code === 'ENOENT' && opts.force ? null : err)\n    }\n\n    if (st.isDirectory()) {\n      if (opts.recursive) return rmRecursive(filepath, opts, cb)\n\n      const err = new Error('is a directory')\n      err.code = 'EISDIR'\n      return cb(err)\n    }\n\n    unlink(filepath, cb)\n  })\n}\n\nfunction rmRecursiveSync(filepath, opts) {\n  try {\n    rmdirSync(filepath)\n  } catch (err) {\n    if (err.code !== 'ENOTEMPTY') throw err\n\n    const files = readdirSync(filepath)\n\n    for (const file of files) {\n      rmSync(filepath + path.sep + file, opts)\n    }\n\n    rmdirSync(filepath)\n  }\n}\n\nfunction rmSync(filepath, opts) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (!opts) opts = {}\n\n  try {\n    const st = lstatSync(filepath)\n\n    if (st.isDirectory()) {\n      if (opts.recursive) return rmRecursiveSync(filepath, opts)\n\n      const err = new Error('is a directory')\n      err.code = 'EISDIR'\n      throw err\n    }\n\n    unlinkSync(filepath)\n  } catch (err) {\n    if (err.code !== 'ENOENT' || !opts.force) throw err\n  }\n}\n\nfunction unlink(filepath, cb) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof cb !== 'function') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Callback must be a function. Received type ' +\n        typeof cb +\n        ' (' +\n        cb +\n        ')'\n    )\n  }\n\n  const req = getReq()\n  req.callback = cb\n  binding.unlink(req.handle, filepath)\n}\n\nfunction unlinkSync(filepath) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  binding.unlinkSync(filepath)\n}\n\nfunction rename(src, dst, cb) {\n  if (typeof src !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' + typeof src + ' (' + src + ')'\n    )\n  }\n\n  if (typeof dst !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' + typeof dst + ' (' + dst + ')'\n    )\n  }\n\n  if (typeof cb !== 'function') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Callback must be a function. Received type ' +\n        typeof cb +\n        ' (' +\n        cb +\n        ')'\n    )\n  }\n\n  const req = getReq()\n  req.callback = cb\n  binding.rename(req.handle, src, dst)\n}\n\nfunction renameSync(src, dst) {\n  if (typeof src !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' + typeof src + ' (' + src + ')'\n    )\n  }\n\n  if (typeof dst !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' + typeof dst + ' (' + dst + ')'\n    )\n  }\n\n  binding.renameSync(src, dst)\n}\n\nfunction copyFile(src, dst, mode, cb) {\n  if (typeof mode === 'function') {\n    cb = mode\n    mode = 0\n  }\n\n  if (typeof src !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' + typeof src + ' (' + src + ')'\n    )\n  }\n\n  if (typeof dst !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' + typeof dst + ' (' + dst + ')'\n    )\n  }\n\n  const req = getReq()\n  req.callback = cb\n  binding.copyfile(req.handle, src, dst, mode)\n}\n\nfunction copyFileSync(src, dst, mode = 0) {\n  if (typeof src !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' + typeof src + ' (' + src + ')'\n    )\n  }\n\n  if (typeof dst !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' + typeof dst + ' (' + dst + ')'\n    )\n  }\n\n  binding.copyfileSync(src, dst, mode)\n}\n\nfunction realpath(filepath, opts, cb) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof opts === 'function') {\n    cb = opts\n    opts = {}\n  } else if (typeof cb !== 'function') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Callback must be a function. Received type ' +\n        typeof cb +\n        ' (' +\n        cb +\n        ')'\n    )\n  }\n\n  if (typeof opts === 'string') opts = { encoding: opts }\n  else if (!opts) opts = {}\n\n  const { encoding = 'utf8' } = opts\n\n  const data = Buffer.allocUnsafe(binding.sizeofFSPath)\n\n  const req = getReq()\n\n  req.callback = function (err, _) {\n    if (err) return cb(err, null)\n    let path = data.subarray(0, data.indexOf(0))\n    if (encoding !== 'buffer') path = path.toString(encoding)\n    cb(null, path)\n  }\n\n  binding.realpath(req.handle, filepath, data)\n}\n\nfunction realpathSync(filepath, opts) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof opts === 'string') opts = { encoding: opts }\n  else if (!opts) opts = {}\n\n  const { encoding = 'utf8' } = opts\n\n  const data = Buffer.allocUnsafe(binding.sizeofFSPath)\n\n  binding.realpathSync(filepath, data)\n\n  filepath = data.subarray(0, data.indexOf(0))\n  if (encoding !== 'buffer') filepath = filepath.toString(encoding)\n  return filepath\n}\n\nfunction readlink(filepath, opts, cb) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof opts === 'function') {\n    cb = opts\n    opts = {}\n  } else if (typeof cb !== 'function') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Callback must be a function. Received type ' +\n        typeof cb +\n        ' (' +\n        cb +\n        ')'\n    )\n  }\n\n  if (typeof opts === 'string') opts = { encoding: opts }\n  else if (!opts) opts = {}\n\n  const { encoding = 'utf8' } = opts\n\n  const data = Buffer.allocUnsafe(binding.sizeofFSPath)\n\n  const req = getReq()\n\n  req.callback = function (err, _) {\n    if (err) return cb(err, null)\n    let path = data.subarray(0, data.indexOf(0))\n    if (encoding !== 'buffer') path = path.toString(encoding)\n    cb(null, path)\n  }\n\n  binding.readlink(req.handle, filepath, data)\n}\n\nfunction readlinkSync(filepath, opts) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof opts === 'string') opts = { encoding: opts }\n  else if (!opts) opts = {}\n\n  const { encoding = 'utf8' } = opts\n\n  const data = Buffer.allocUnsafe(binding.sizeofFSPath)\n\n  binding.readlinkSync(filepath, data)\n\n  filepath = data.subarray(0, data.indexOf(0))\n  if (encoding !== 'buffer') filepath = filepath.toString(encoding)\n  return filepath\n}\n\nfunction normalizeSymlinkTarget(target, type, filepath) {\n  if (isWindows) {\n    if (type === 'junction') target = path.resolve(filepath, '..', target)\n\n    if (path.isAbsolute(target)) return path.toNamespacedPath(target)\n\n    return target.replace(/\\//g, path.sep)\n  }\n\n  return target\n}\n\nfunction symlink(target, filepath, type, cb) {\n  if (typeof target !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Target must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof type === 'function') {\n    cb = type\n    type = null\n  } else if (typeof cb !== 'function') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Callback must be a function. Received type ' +\n        typeof cb +\n        ' (' +\n        cb +\n        ')'\n    )\n  }\n\n  if (typeof type === 'string') {\n    switch (type) {\n      case 'file':\n        type = 0\n        break\n      case 'dir':\n        type = constants.UV_FS_SYMLINK_DIR\n        break\n      case 'junction':\n        type = constants.UV_FS_SYMLINK_JUNCTION\n        break\n      default:\n        throw typeError(\n          'ERR_FS_INVALID_SYMLINK_TYPE',\n          'Symlink type must be one of \"dir\", \"file\", or \"junction\". Received \"' +\n            type +\n            '\"'\n        )\n    }\n  } else if (typeof type !== 'number') {\n    if (isWindows) {\n      target = path.resolve(filepath, '..', target)\n\n      stat(target, (err, st) => {\n        type =\n          err === null && st.isDirectory()\n            ? constants.UV_FS_SYMLINK_DIR\n            : constants.UV_FS_SYMLINK_JUNCTION\n\n        symlink(target, filepath, type, cb)\n      })\n\n      return\n    }\n\n    type = 0\n  }\n\n  const req = getReq()\n  req.callback = cb\n  binding.symlink(\n    req.handle,\n    normalizeSymlinkTarget(target),\n    path.toNamespacedPath(filepath),\n    type\n  )\n}\n\nfunction symlinkSync(target, filepath, type) {\n  if (typeof target !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Target must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof type === 'string') {\n    switch (type) {\n      case 'file':\n        type = 0\n        break\n      case 'dir':\n        type = constants.UV_FS_SYMLINK_DIR\n        break\n      case 'junction':\n        type = constants.UV_FS_SYMLINK_JUNCTION\n        break\n      default:\n        throw typeError(\n          'ERR_FS_INVALID_SYMLINK_TYPE',\n          'Symlink type must be one of \"dir\", \"file\", or \"junction\". Received \"' +\n            type +\n            '\"'\n        )\n    }\n  } else if (typeof type !== 'number') {\n    if (isWindows) {\n      target = path.resolve(filepath, '..', target)\n\n      type = statSync(target).isDirectory()\n        ? constants.UV_FS_SYMLINK_DIR\n        : constants.UV_FS_SYMLINK_JUNCTION\n    } else {\n      type = 0\n    }\n  }\n\n  binding.symlinkSync(\n    normalizeSymlinkTarget(target),\n    path.toNamespacedPath(filepath),\n    type\n  )\n}\n\nfunction opendir(filepath, opts, cb) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof opts === 'function') {\n    cb = opts\n    opts = {}\n  } else if (typeof cb !== 'function') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Callback must be a function. Received type ' +\n        typeof cb +\n        ' (' +\n        cb +\n        ')'\n    )\n  }\n\n  if (typeof opts === 'string') opts = { encoding: opts }\n  else if (!opts) opts = {}\n\n  const data = Buffer.allocUnsafe(binding.sizeofFSDir)\n\n  const req = getReq()\n\n  req.callback = function (err, _) {\n    if (err) return cb(err, null)\n    cb(null, new Dir(filepath, data, opts))\n  }\n\n  binding.opendir(req.handle, filepath, data)\n}\n\nfunction opendirSync(filepath, opts) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof opts === 'string') opts = { encoding: opts }\n  else if (!opts) opts = {}\n\n  const data = Buffer.allocUnsafe(binding.sizeofFSDir)\n  binding.opendirSync(filepath, data)\n  return new Dir(filepath, data, opts)\n}\n\nfunction readdir(filepath, opts, cb) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof opts === 'function') {\n    cb = opts\n    opts = {}\n  } else if (typeof cb !== 'function') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Callback must be a function. Received type ' +\n        typeof cb +\n        ' (' +\n        cb +\n        ')'\n    )\n  }\n\n  if (typeof opts === 'string') opts = { encoding: opts }\n  else if (!opts) opts = {}\n\n  const { withFileTypes = false } = opts\n\n  opendir(filepath, opts, async (err, dir) => {\n    if (err) return cb(err, null)\n    const result = []\n    for await (const entry of dir) {\n      result.push(withFileTypes ? entry : entry.name)\n    }\n    cb(null, result)\n  })\n}\n\nfunction readdirSync(filepath, opts) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof opts === 'string') opts = { encoding: opts }\n  else if (!opts) opts = {}\n\n  const { withFileTypes = false } = opts\n\n  const dir = opendirSync(filepath, opts)\n  const result = []\n\n  while (true) {\n    const entry = dir.readSync()\n    if (entry === null) break\n    result.push(withFileTypes ? entry : entry.name)\n  }\n\n  return result\n}\n\nfunction readFile(filepath, opts, cb) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof opts === 'function') {\n    cb = opts\n    opts = {}\n  } else if (typeof cb !== 'function') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Callback must be a function. Received type ' +\n        typeof cb +\n        ' (' +\n        cb +\n        ')'\n    )\n  }\n\n  if (typeof opts === 'string') opts = { encoding: opts }\n  else if (!opts) opts = {}\n\n  const { encoding = 'buffer' } = opts\n\n  open(filepath, opts.flag || 'r', function (err, fd) {\n    if (err) return cb(err)\n\n    fstat(fd, function (err, st) {\n      if (err) return closeAndError(err)\n\n      let buffer = Buffer.allocUnsafe(st.size)\n      let len = 0\n\n      read(fd, buffer, loop)\n\n      function loop(err, r) {\n        if (err) return closeAndError(err)\n        len += r\n        if (r === 0 || len === buffer.byteLength) return done()\n        read(fd, buffer.subarray(len), loop)\n      }\n\n      function done() {\n        if (len !== buffer.byteLength) buffer = buffer.subarray(0, len)\n        close(fd, function (err) {\n          if (err) return cb(err)\n          if (encoding !== 'buffer') buffer = buffer.toString(encoding)\n          cb(null, buffer)\n        })\n      }\n    })\n\n    function closeAndError(err) {\n      close(fd, function () {\n        cb(err)\n      })\n    }\n  })\n}\n\nfunction readFileSync(filepath, opts) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof opts === 'string') opts = { encoding: opts }\n  else if (!opts) opts = {}\n\n  const { encoding = 'buffer' } = opts\n\n  const fd = openSync(filepath, opts.flag || 'r')\n\n  try {\n    const st = fstatSync(fd)\n\n    let buffer = Buffer.allocUnsafe(st.size)\n    let len = 0\n\n    while (true) {\n      const r = readSync(fd, len ? buffer.subarray(len) : buffer)\n      len += r\n      if (r === 0 || len === buffer.byteLength) break\n    }\n\n    if (len !== buffer.byteLength) buffer = buffer.subarray(0, len)\n    if (encoding !== 'buffer') buffer = buffer.toString(encoding)\n    return buffer\n  } finally {\n    try {\n      closeSync(fd)\n    } catch {}\n  }\n}\n\nfunction writeFile(filepath, data, opts, cb) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (\n    typeof data !== 'string' &&\n    !Buffer.isBuffer(data) &&\n    !ArrayBuffer.isView(data)\n  ) {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Data must be a string or buffer. Received type ' + typeof data\n    )\n  }\n\n  if (typeof opts === 'function') {\n    cb = opts\n    opts = {}\n  } else if (typeof cb !== 'function') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Callback must be a function. Received type ' +\n        typeof cb +\n        ' (' +\n        cb +\n        ')'\n    )\n  }\n\n  if (typeof opts === 'string') opts = { encoding: opts }\n  else if (!opts) opts = {}\n\n  if (typeof data === 'string') data = Buffer.from(data, opts.encoding)\n\n  open(filepath, opts.flag || 'w', opts.mode || 0o666, function (err, fd) {\n    if (err) return cb(err)\n\n    write(fd, data, loop)\n\n    function loop(err, w) {\n      if (err) return closeAndError(err)\n      if (w === data.byteLength) return done()\n      write(fd, data.subarray(w), loop)\n    }\n\n    function done() {\n      close(fd, function (err) {\n        if (err) return cb(err)\n        return cb(null)\n      })\n    }\n\n    function closeAndError(err) {\n      close(fd, function () {\n        cb(err)\n      })\n    }\n  })\n}\n\nfunction writeFileSync(filepath, data, opts) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (\n    typeof data !== 'string' &&\n    !Buffer.isBuffer(data) &&\n    !ArrayBuffer.isView(data)\n  ) {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Data must be a string or buffer. Received type ' + typeof data\n    )\n  }\n\n  if (typeof opts === 'string') opts = { encoding: opts }\n  else if (!opts) opts = {}\n\n  if (typeof data === 'string') data = Buffer.from(data, opts.encoding)\n\n  const fd = openSync(filepath, opts.flag || 'w', opts.mode)\n\n  try {\n    let len = 0\n\n    while (true) {\n      len += writeSync(fd, len ? data.subarray(len) : data)\n      if (len === data.byteLength) break\n    }\n  } finally {\n    try {\n      closeSync(fd)\n    } catch {}\n  }\n}\n\nfunction appendFile(filepath, data, opts, cb) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (\n    typeof data !== 'string' &&\n    !Buffer.isBuffer(data) &&\n    !ArrayBuffer.isView(data)\n  ) {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Data must be a string or buffer. Received type ' + typeof data\n    )\n  }\n\n  if (typeof opts === 'function') {\n    cb = opts\n    opts = {}\n  } else if (typeof cb !== 'function') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Callback must be a function. Received type ' +\n        typeof cb +\n        ' (' +\n        cb +\n        ')'\n    )\n  }\n\n  if (typeof opts === 'string') opts = { encoding: opts }\n  else if (!opts) opts = {}\n\n  opts = { ...opts }\n\n  if (!opts.flags) opts.flag = 'a'\n\n  return writeFile(filepath, data, opts, cb)\n}\n\nfunction appendFileSync(filepath, data, opts) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (\n    typeof data !== 'string' &&\n    !Buffer.isBuffer(data) &&\n    !ArrayBuffer.isView(data)\n  ) {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Data must be a string or buffer. Received type ' + typeof data\n    )\n  }\n\n  if (typeof opts === 'string') opts = { encoding: opts }\n  else if (!opts) opts = {}\n\n  opts = { ...opts }\n\n  if (!opts.flags) opts.flag = 'a'\n\n  return writeFileSync(filepath, data, opts)\n}\n\nfunction watch(filepath, opts, cb) {\n  if (typeof filepath !== 'string') {\n    throw typeError(\n      'ERR_INVALID_ARG_TYPE',\n      'Path must be a string. Received type ' +\n        typeof filepath +\n        ' (' +\n        filepath +\n        ')'\n    )\n  }\n\n  if (typeof opts === 'function') {\n    cb = opts\n    opts = {}\n  }\n\n  if (typeof opts === 'string') opts = { encoding: opts }\n  else if (!opts) opts = {}\n\n  const watcher = new Watcher(filepath, opts)\n  if (cb) watcher.on('change', cb)\n  return watcher\n}\n\nclass Stats {\n  constructor(\n    dev,\n    mode,\n    nlink,\n    uid,\n    gid,\n    rdev,\n    blksize,\n    ino,\n    size,\n    blocks,\n    atimeMs,\n    mtimeMs,\n    ctimeMs,\n    birthtimeMs\n  ) {\n    this.dev = dev\n    this.mode = mode\n    this.nlink = nlink\n    this.uid = uid\n    this.gid = gid\n    this.rdev = rdev\n    this.blksize = blksize\n    this.ino = ino\n    this.size = size\n    this.blocks = blocks\n    this.atimeMs = atimeMs\n    this.mtimeMs = mtimeMs\n    this.ctimeMs = ctimeMs\n    this.birthtimeMs = birthtimeMs\n    this.atime = new Date(atimeMs)\n    this.mtime = new Date(mtimeMs)\n    this.ctime = new Date(ctimeMs)\n    this.birthtime = new Date(birthtimeMs)\n  }\n\n  isDirectory() {\n    return (this.mode & constants.S_IFMT) === constants.S_IFDIR\n  }\n\n  isFile() {\n    return (this.mode & constants.S_IFMT) === constants.S_IFREG\n  }\n\n  isBlockDevice() {\n    return (this.mode & constants.S_IFMT) === constants.S_IFBLK\n  }\n\n  isCharacterDevice() {\n    return (this.mode & constants.S_IFCHR) === constants.S_IFCHR\n  }\n\n  isFIFO() {\n    return (this.mode & constants.S_IFMT) === constants.S_IFIFO\n  }\n\n  isSymbolicLink() {\n    return (this.mode & constants.S_IFMT) === constants.S_IFLNK\n  }\n\n  isSocket() {\n    return (this.mode & constants.S_IFMT) === constants.S_IFSOCK\n  }\n}\n\nclass Dir {\n  constructor(path, handle, opts = {}) {\n    const { encoding = 'utf8', bufferSize = 32 } = opts\n\n    this._handle = handle\n    this._dirents = Buffer.allocUnsafe(binding.sizeofFSDirent * bufferSize)\n    this._encoding = encoding\n    this._buffer = []\n    this._ended = false\n\n    this.path = path\n  }\n\n  read(cb) {\n    if (!cb) return promisify(this.read.bind(this))\n\n    if (this._buffer.length)\n      return queueMicrotask(() => cb(null, this._buffer.shift()))\n    if (this._ended) return queueMicrotask(() => cb(null, null))\n\n    const data = []\n    const req = getReq()\n\n    req.callback = (err, _) => {\n      if (err) return cb(err, null)\n      if (data.length === 0) this._ended = true\n      else {\n        for (const entry of data) {\n          let name = Buffer.from(entry.name)\n          if (this._encoding !== 'buffer') name = name.toString(this._encoding)\n          this._buffer.push(new Dirent(this.path, name, entry.type))\n        }\n      }\n\n      if (this._ended) return cb(null, null)\n      cb(null, this._buffer.shift())\n    }\n\n    binding.readdir(req.handle, this._handle, this._dirents, data)\n  }\n\n  readSync() {\n    if (this._buffer.length) return this._buffer.shift()\n    if (this._ended) return null\n\n    const data = []\n\n    binding.readdirSync(this._handle, this._dirents, data)\n\n    if (data.length === 0) this._ended = true\n    else {\n      for (const entry of data) {\n        let name = Buffer.from(entry.name)\n        if (this._encoding !== 'buffer') name = name.toString(this._encoding)\n        this._buffer.push(new Dirent(this.path, name, entry.type))\n      }\n    }\n\n    if (this._ended) return null\n    return this._buffer.shift()\n  }\n\n  close(cb) {\n    if (!cb) return promisify(this.close.bind(this))\n\n    const req = getReq()\n\n    req.callback = (err, _) => {\n      this._handle = null\n      cb(err)\n    }\n\n    binding.closedir(req.handle, this._handle)\n  }\n\n  closeSync() {\n    binding.closedirSync(this._handle)\n    this._handle = null\n  }\n\n  [Symbol.iterator]() {\n    return {\n      next: () => {\n        if (this._buffer.length) {\n          return { done: false, value: this._buffer.shift() }\n        }\n\n        if (this._ended) {\n          return { done: true }\n        }\n\n        const entry = this.readSync()\n\n        if (entry) {\n          return { done: false, value: entry }\n        }\n\n        this.closeSync()\n\n        return { done: true }\n      }\n    }\n  }\n\n  [Symbol.asyncIterator]() {\n    return {\n      next: () =>\n        new Promise((resolve, reject) => {\n          if (this._buffer.length) {\n            return resolve({ done: false, value: this._buffer.shift() })\n          }\n\n          if (this._ended) {\n            return resolve({ done: true })\n          }\n\n          this.read((err, entry) => {\n            if (err) return reject(err)\n\n            if (entry) {\n              return resolve({ done: false, value: entry })\n            }\n\n            this.close((err) => (err ? reject(err) : resolve({ done: true })))\n          })\n        })\n    }\n  }\n}\n\nclass Dirent {\n  constructor(path, name, type) {\n    this.type = type\n    this.path = path\n    this.name = name\n  }\n\n  isFile() {\n    return this.type === constants.UV_DIRENT_FILE\n  }\n\n  isDirectory() {\n    return this.type === constants.UV_DIRENT_DIR\n  }\n\n  isSymbolicLink() {\n    return this.type === constants.UV_DIRENT_LINK\n  }\n\n  isFIFO() {\n    return this.type === constants.UV_DIRENT_FIFO\n  }\n\n  isSocket() {\n    return this.type === constants.UV_DIRENT_SOCKET\n  }\n\n  isCharacterDevice() {\n    return this.type === constants.UV_DIRENT_CHAR\n  }\n\n  isBlockDevice() {\n    return this.type === constants.UV_DIRENT_BLOCK\n  }\n}\n\nclass FileWriteStream extends Writable {\n  constructor(path, opts = {}) {\n    super({ map })\n\n    this.path = path\n    this.fd = 0\n    this.flags = opts.flags || 'w'\n    this.mode = opts.mode || 0o666\n  }\n\n  _open(cb) {\n    open(this.path, this.flags, this.mode, (err, fd) => {\n      if (err) return cb(err)\n      this.fd = fd\n      cb(null)\n    })\n  }\n\n  _writev(batch, cb) {\n    writev(\n      this.fd,\n      batch.map(({ chunk }) => chunk),\n      cb\n    )\n  }\n\n  _destroy(err, cb) {\n    if (!this.fd) return cb(err)\n    close(this.fd, () => cb(err))\n  }\n}\n\nclass FileReadStream extends Readable {\n  constructor(path, opts = {}) {\n    super()\n\n    this.path = path\n    this.fd = 0\n\n    this._offset = opts.start || 0\n    this._missing = 0\n\n    if (opts.length) {\n      this._missing = opts.length\n    } else if (typeof opts.end === 'number') {\n      this._missing = opts.end - this._offset + 1\n    } else {\n      this._missing = -1\n    }\n  }\n\n  _open(cb) {\n    open(this.path, constants.O_RDONLY, (err, fd) => {\n      if (err) return cb(err)\n\n      const onerror = (err) => close(fd, () => cb(err))\n\n      fstat(fd, (err, st) => {\n        if (err) return onerror(err)\n        if (!st.isFile())\n          return onerror(new Error(this.path + ' is not a file'))\n\n        this.fd = fd\n        if (this._missing === -1) this._missing = st.size\n\n        if (st.size < this._offset) {\n          this._offset = st.size\n          this._missing = 0\n          return cb(null)\n        }\n        if (st.size < this._offset + this._missing) {\n          this._missing = st.size - this._offset\n          return cb(null)\n        }\n\n        cb(null)\n      })\n    })\n  }\n\n  _read(size) {\n    if (!this._missing) {\n      this.push(null)\n      return\n    }\n\n    const data = Buffer.allocUnsafe(Math.min(this._missing, size))\n\n    read(this.fd, data, 0, data.byteLength, this._offset, (err, read) => {\n      if (err) return this.destroy(err)\n\n      if (!read) {\n        this.push(null)\n        return\n      }\n\n      if (this._missing < read) read = this._missing\n      this.push(data.subarray(0, read))\n      this._missing -= read\n      this._offset += read\n      if (!this._missing) this.push(null)\n    })\n  }\n\n  _destroy(err, cb) {\n    if (!this.fd) return cb(err)\n    close(this.fd, () => cb(err))\n  }\n}\n\nclass Watcher extends EventEmitter {\n  constructor(path, opts) {\n    const { persistent = true, recursive = false, encoding = 'utf8' } = opts\n\n    super()\n\n    this._closed = false\n    this._encoding = encoding\n    this._handle = binding.watcherInit(\n      path,\n      recursive,\n      this,\n      this._onevent,\n      this._onclose\n    )\n\n    if (!persistent) this.unref()\n  }\n\n  _onevent(err, events, filename) {\n    if (err) {\n      this.close()\n      this.emit('error', err)\n    } else {\n      const path =\n        this._encoding === 'buffer'\n          ? Buffer.from(filename)\n          : Buffer.from(filename).toString(this._encoding)\n\n      if (events & binding.UV_RENAME) {\n        this.emit('change', 'rename', path)\n      }\n\n      if (events & binding.UV_CHANGE) {\n        this.emit('change', 'change', path)\n      }\n    }\n  }\n\n  _onclose() {\n    this._handle = null\n\n    this.emit('close')\n  }\n\n  close() {\n    if (this._closed) return\n    this._closed = true\n\n    binding.watcherClose(this._handle)\n  }\n\n  ref() {\n    if (this._handle) binding.watcherRef(this._handle)\n    return this\n  }\n\n  unref() {\n    if (this._handle) binding.watcherUnref(this._handle)\n    return this\n  }\n\n  [Symbol.asyncIterator]() {\n    const buffer = []\n    let done = false\n    let error = null\n    let next = null\n\n    this.on('change', (eventType, filename) => {\n      if (next) {\n        next.resolve({ done: false, value: { eventType, filename } })\n        next = null\n      } else {\n        buffer.push({ eventType, filename })\n      }\n    })\n      .on('error', (err) => {\n        done = true\n        error = err\n\n        if (next) {\n          next.reject(error)\n          next = null\n        }\n      })\n      .on('close', () => {\n        done = true\n\n        if (next) {\n          next.resolve({ done })\n          next = null\n        }\n      })\n\n    return {\n      next: () =>\n        new Promise((resolve, reject) => {\n          if (error) return reject(error)\n\n          if (buffer.length)\n            return resolve({ done: false, value: buffer.shift() })\n\n          if (done) return resolve({ done })\n\n          next = { resolve, reject }\n        })\n    }\n  }\n}\n\nexports.promises = {}\n\nfunction typeError(code, message) {\n  const error = new TypeError(message)\n  error.code = code\n  return error\n}\n\nfunction noop() {}\n\nexports.access = access\nexports.appendFile = appendFile\nexports.chmod = chmod\nexports.close = close\nexports.copyFile = copyFile\nexports.exists = exists\nexports.fchmod = fchmod\nexports.fstat = fstat\nexports.ftruncate = ftruncate\nexports.lstat = lstat\nexports.mkdir = mkdir\nexports.open = open\nexports.opendir = opendir\nexports.read = read\nexports.readFile = readFile\nexports.readdir = readdir\nexports.readlink = readlink\nexports.readv = readv\nexports.realpath = realpath\nexports.rename = rename\nexports.rm = rm\nexports.rmdir = rmdir\nexports.stat = stat\nexports.symlink = symlink\nexports.unlink = unlink\nexports.watch = watch\nexports.write = write\nexports.writeFile = writeFile\nexports.writev = writev\n\nexports.accessSync = accessSync\nexports.appendFileSync = appendFileSync\nexports.chmodSync = chmodSync\nexports.closeSync = closeSync\nexports.copyFileSync = copyFileSync\nexports.existsSync = existsSync\nexports.fchmodSync = fchmodSync\nexports.fstatSync = fstatSync\nexports.lstatSync = lstatSync\nexports.mkdirSync = mkdirSync\nexports.openSync = openSync\nexports.opendirSync = opendirSync\nexports.readFileSync = readFileSync\nexports.readSync = readSync\nexports.readdirSync = readdirSync\nexports.readlinkSync = readlinkSync\nexports.realpathSync = realpathSync\nexports.renameSync = renameSync\nexports.rmSync = rmSync\nexports.rmdirSync = rmdirSync\nexports.statSync = statSync\nexports.symlinkSync = symlinkSync\nexports.unlinkSync = unlinkSync\nexports.writeFileSync = writeFileSync\nexports.writeSync = writeSync\n\nexports.promises.access = promisify(access)\nexports.promises.appendFile = promisify(appendFile)\nexports.promises.chmod = promisify(chmod)\nexports.promises.copyFile = promisify(copyFile)\nexports.promises.lstat = promisify(lstat)\nexports.promises.mkdir = promisify(mkdir)\nexports.promises.opendir = promisify(opendir)\nexports.promises.readFile = promisify(readFile)\nexports.promises.readdir = promisify(readdir)\nexports.promises.readlink = promisify(readlink)\nexports.promises.realpath = promisify(realpath)\nexports.promises.rename = promisify(rename)\nexports.promises.rm = promisify(rm)\nexports.promises.rmdir = promisify(rmdir)\nexports.promises.stat = promisify(stat)\nexports.promises.symlink = promisify(symlink)\nexports.promises.unlink = promisify(unlink)\nexports.promises.writeFile = promisify(writeFile)\n\nexports.promises.watch = watch // Already async iterable\n\nexports.Stats = Stats\nexports.Dir = Dir\nexports.Dirent = Dirent\nexports.Watcher = Watcher\n\nexports.ReadStream = FileReadStream\nexports.createReadStream = function createReadStream(path, opts) {\n  return new FileReadStream(path, opts)\n}\n\nexports.WriteStream = FileWriteStream\nexports.createWriteStream = function createWriteStream(path, opts) {\n  return new FileWriteStream(path, opts)\n}\n\nfunction promisify(fn) {\n  return function (...args) {\n    return new Promise((resolve, reject) => {\n      fn(...args, function (err, res) {\n        if (err) return reject(err)\n        resolve(res)\n      })\n    })\n  }\n}\n\nfunction map(data) {\n  return typeof data === 'string' ? Buffer.from(data) : data\n}\n{\n  \"name\": \"bare-fs\",\n  \"version\": \"4.0.1\",\n  \"description\": \"Native file system for Javascript\",\n  \"main\": \"index.js\",\n  \"files\": [\n    \"index.js\",\n    \"promises.js\",\n    \"binding.c\",\n    \"binding.js\",\n    \"CMakeLists.txt\",\n    \"prebuilds\"\n  ],\n  \"addon\": true,\n  \"scripts\": {\n    \"test\": \"prettier . --check && bare test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/holepunchto/bare-fs.git\"\n  },\n  \"author\": \"Holepunch\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/bare-fs/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/bare-fs#readme\",\n  \"engines\": {\n    \"bare\": \">=1.7.0\"\n  },\n  \"dependencies\": {\n    \"bare-events\": \"^2.0.0\",\n    \"bare-path\": \"^3.0.0\",\n    \"bare-stream\": \"^2.0.0\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^3.1.1\",\n    \"cmake-bare\": \"^1.1.7\",\n    \"prettier\": \"^3.4.1\",\n    \"prettier-config-standard\": \"^7.0.0\"\n  }\n}\nELF\u0002\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000�\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000@\u0000\u0000\u0000\u0000\u0000\u0000\u0000خ\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000@\u00008\u0000\t\u0000@\u0000\u0018\u0000\u0016\u0000\u0006\u0000\u0000\u0000\u0004\u0000\u0000\u0000@\u0000\u0000\u0000\u0000\u0000\u0000\u0000@\u0000\u0000\u0000\u0000\u0000\u0000\u0000@\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0001\u0000\u0000\u0000\u0000\u0000\u0000�\u0001\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000+\u0000\u0000\u0000\u0000\u0000\u0000\u0000+\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0000+\u0000\u0000\u0000\u0000\u0000\u0000\u0000;\u0000\u0000\u0000\u0000\u0000\u0000\u0000;\u0000\u0000\u0000\u0000\u0000\u00000]\u0000\u0000\u0000\u0000\u0000\u00000]\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0006\u0000\u0000\u00000�\u0000\u0000\u0000\u0000\u0000\u00000�\u0000\u0000\u0000\u0000\u0000\u00000�\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0004\u0000\u0000\u0000\u0000\u0000\u0000�\u0007\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0006\u0000\u0000\u0000H�\u0000\u0000\u0000\u0000\u0000\u0000H�\u0000\u0000\u0000\u0000\u0000\u0000H�\u0000\u0000\u0000\u0000\u0000\u0000�\u0001\u0000\u0000\u0000\u0000\u0000\u0000�\u0001\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000R�td\u0004\u0000\u0000\u00000�\u0000\u0000\u0000\u0000\u0000\u00000�\u0000\u0000\u0000\u0000\u0000\u00000�\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0004\u0000\u0000\u0000\u0000\u0000\u0000�\u0007\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000P�td\u0004\u0000\u0000\u0000�\u001a\u0000\u0000\u0000\u0000\u0000\u0000�\u001a\u0000\u0000\u0000\u0000\u0000\u0000�\u001a\u0000\u0000\u0000\u0000\u0000\u0000$\u0002\u0000\u0000\u0000\u0000\u0000\u0000$\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000Q�td\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0004\u0000\u0000\u00008\u0002\u0000\u0000\u0000\u0000\u0000\u00008\u0002\u0000\u0000\u0000\u0000\u0000\u00008\u0002\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000�\u0000\u0000\u0000\u0001\u0000\u0000\u0000Android\u0000\u001f\u0000\u0000\u0000r27c\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000012479018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0003\u0000\u0000\u0000GNU\u0000�����Bo|H�/�q�JZ��h\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001d\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000G\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000X\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000n\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000b\u0001\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000$\u0001\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00007\u0001\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000G\u0001\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000R\u0001\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000b\u0001\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000n\u0001\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000z\u0001\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0001\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0001\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0001\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0001\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0001\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0001\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0001\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0001\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\t\u0002\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001d\u0002\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000$\u0002\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00003\u0002\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00008\u0002\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000D\u0002\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000T\u0002\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000`\u0002\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000m\u0002\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000z\u0002\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0002\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0002\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0002\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0002\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0002\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0002\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0002\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0002\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0002\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\f\u0003\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001b\u0003\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000#\u0003\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00002\u0003\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000@\u0003\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000N\u0003\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\\\u0003\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000m\u0003\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000t\u0003\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000{\u0003\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0003\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0003\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0003\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0003\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0003\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0003\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0003\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0003\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0003\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0007\u0004\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000,\u0004\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000A\u0004\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000X\u0004\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0004\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000z\u0004\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0004\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0004\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000/\u0000\u0000\u0000\u0012\u0000\r\u0000`;\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0013\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0002\u0000\u0002\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0002\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0002\u0000\u0001\u0000\u0002\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0002\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0002\u0000\u0002\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000�\u0004\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000c\r\u0005\u0000\u0000\u0000\u0002\u0000�\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000K\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001a\u0000\u0000\u0000\u0000 \u0000\u0001\u0000\u0000\u0000\u0000K\u0000\u0000\u0000M�\u0017a\u0000__cxa_finalize\u0000__cxa_atexit\u0000__register_atfork\u0000bare_register_module_v0\u0000js_create_uint32\u0000js_set_named_property\u0000js_create_function\u0000__stack_chk_fail\u0000js_get_callback_info\u0000js_create_arraybuffer\u0000js_create_reference\u0000js_add_deferred_teardown_callback\u0000js_get_arraybuffer_info\u0000js_get_value_string_utf8\u0000js_get_value_int32\u0000js_get_env_loop\u0000uv_fs_open\u0000js_create_int32\u0000uv_err_name\u0000uv_strerror\u0000js_throw_error\u0000uv_fs_req_cleanup\u0000js_get_value_uint32\u0000uv_fs_close\u0000uv_fs_access\u0000js_get_typedarray_info\u0000js_get_value_int64\u0000uv_buf_init\u0000uv_fs_read\u0000js_get_array_length\u0000malloc\u0000js_get_element\u0000free\u0000uv_fs_write\u0000uv_fs_ftruncate\u0000uv_fs_chmod\u0000uv_fs_fchmod\u0000uv_fs_rename\u0000uv_fs_copyfile\u0000uv_fs_mkdir\u0000uv_fs_rmdir\u0000uv_fs_stat\u0000js_create_array_with_length\u0000js_create_int64\u0000js_set_element\u0000uv_fs_lstat\u0000uv_fs_fstat\u0000uv_fs_unlink\u0000uv_fs_realpath\u0000strncpy\u0000uv_fs_readlink\u0000uv_fs_symlink\u0000uv_fs_opendir\u0000uv_fs_readdir\u0000js_create_object\u0000strlen\u0000memcpy\u0000uv_fs_closedir\u0000js_get_value_bool\u0000uv_fs_event_init\u0000uv_fs_event_start\u0000uv_fs_event_stop\u0000uv_close\u0000uv_ref\u0000uv_unref\u0000uv_cancel\u0000js_delete_reference\u0000js_finish_deferred_teardown_callback\u0000js_open_handle_scope\u0000js_get_reference_value\u0000js_get_null\u0000js_create_string_utf8\u0000js_create_error\u0000js_call_function\u0000js_close_handle_scope\u0000libc.so\u0000LIBC\u0000libm.so\u0000libdl.so\u0000bare-fs@4.bare\u0000\u0000\u00000�\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0004\u0000\u0000\u0000\u0000\u0000\u00000�\u0000\u0000\u0000\u0000\u0000\u00008�\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0018;\u0000\u0000\u0000\u0000\u0000\u0000@�\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000;\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000��\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b�\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0010�\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0018�\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 �\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000\u0007\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000(�\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00000�\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000\t\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00008�\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000\n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000@�\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000\u000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000H�\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000\f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000P�\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000\r\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000X�\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000\u000e\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000`�\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000\u000f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000h�\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000\u0011\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000x�\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000��\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000\u0013\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000��\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000\u0014\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000��\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000\u0015\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000��\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000\u0016\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000��\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000\u0017\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000��\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000��\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000\u0019\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000��\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000\u001a\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000��\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000\u001b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000Ȫ\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000\u001c\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000Ъ\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000\u001d\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000ت\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000\u001e\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000\u001f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000 \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000!\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000��\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000\"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000#\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b�\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000$\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0010�\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000%\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0018�\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000&\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 �\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000'\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000(�\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000(\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00000�\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000)\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00008�\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000*\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000@�\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000+\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000H�\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000,\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000P�\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000-\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000X�\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000.\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000`�\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000/\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000h�\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u00000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u00001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000x�\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u00002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000��\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u00003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000��\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u00004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000��\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u00005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000��\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u00006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000��\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u00007\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000��\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u00008\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000��\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u00009\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000��\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000:\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000��\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000;\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000ȫ\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000<\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000Ы\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000=\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000ث\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000>\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000?\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000A\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000��\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000B\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000C\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b�\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000D\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0010�\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000E\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0018�\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000F\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 �\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000G\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000(�\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000H\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00000�\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000I\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00008�\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000J\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000chmod\u0000S_IFMT\u0000S_IFBLK\u0000S_IROTH\u0000S_IXOTH\u0000UV_DIRENT_FIFO\u0000UV_FS_SYMLINK_DIR\u0000sizeofFSDir\u0000lstatSync\u0000O_CREAT\u0000W_OK\u0000S_IWGRP\u0000S_IXGRP\u0000UV_FS_COPYFILE_FICLONE\u0000closedir\u0000open\u0000O_APPEND\u0000S_IFSOCK\u0000rename\u0000statSync\u0000write\u0000copyfileSync\u0000fstatSync\u0000realpath\u0000watcherClose\u0000watcherUnref\u0000copyfile\u0000unlink\u0000readlinkSync\u0000S_IFCHR\u0000S_IRGRP\u0000sizeofFSDirent\u0000R_OK\u0000UV_DIRENT_DIR\u0000openSync\u0000renameSync\u0000S_IXUSR\u0000read\u0000writev\u0000rmdirSync\u0000fstat\u0000close\u0000UV_CHANGE\u0000accessSync\u0000readlink\u0000UV_DIRENT_FILE\u0000UV_DIRENT_CHAR\u0000UV_RENAME\u0000ftruncate\u0000S_IRUSR\u0000UV_DIRENT_UNKNOWN\u0000UV_FS_COPYFILE_FICLONE_FORCE\u0000init\u0000readv\u0000writeSync\u0000mkdir\u0000S_IFIFO\u0000closedirSync\u0000X_OK\u0000chmodSync\u0000rmdir\u0000readdir\u0000access\u0000F_OK\u0000S_IFREG\u0000sizeofFSPath\u0000O_RDWR\u0000S_IWUSR\u0000UV_DIRENT_BLOCK\u0000opendir\u0000closeSync\u0000fchmodSync\u0000symlink\u0000UV_DIRENT_LINK\u0000readdirSync\u0000S_IWOTH\u0000name\u0000watcherInit\u0000S_IFDIR\u0000UV_DIRENT_SOCKET\u0000type\u0000readSync\u0000stat\u0000symlinkSync\u0000S_IFLNK\u0000UV_FS_COPYFILE_EXCL\u0000unlinkSync\u0000realpathSync\u0000O_WRONLY\u0000O_TRUNC\u0000lstat\u0000watcherRef\u0000UV_FS_SYMLINK_JUNCTION\u0000O_RDONLY\u0000fchmod\u0000mkdirSync\u0000opendirSync\u0000\u0000\u0000\u0000\u0001\u001b\u0003;$\u0002\u0000\u0000C\u0000\u0000\u00000 \u0000\u0000<\u0002\u0000\u0000@ \u0000\u0000P\u0002\u0000\u0000H \u0000\u0000d\u0002\u0000\u0000P \u0000\u0000x\u0002\u0000\u0000d \u0000\u0000�\u0002\u0000\u0000� \u0000\u0000�\u0002\u0000\u0000� \u0000\u0000�\u0002\u0000\u0000�3\u0000\u0000�\u0002\u0000\u0000h4\u0000\u0000 \u0003\u0000\u0000\\5\u0000\u0000T\u0003\u0000\u0000x6\u0000\u0000�\u0003\u0000\u000007\u0000\u0000�\u0003\u0000\u0000\u00008\u0000\u0000�\u0003\u0000\u0000�8\u0000\u0000(\u0004\u0000\u0000�9\u0000\u0000`\u0004\u0000\u00004;\u0000\u0000�\u0004\u0000\u0000�<\u0000\u0000�\u0004\u0000\u0000\u0000>\u0000\u0000\b\u0005\u0000\u0000\\?\u0000\u0000<\u0005\u0000\u0000�@\u0000\u0000p\u0005\u0000\u0000(B\u0000\u0000�\u0005\u0000\u0000�B\u0000\u0000�\u0005\u0000\u0000�C\u0000\u0000\u0014\u0006\u0000\u0000�D\u0000\u0000L\u0006\u0000\u0000�E\u0000\u0000|\u0006\u0000\u0000pF\u0000\u0000�\u0006\u0000\u0000`G\u0000\u0000�\u0006\u0000\u0000dH\u0000\u0000 \u0007\u0000\u0000lI\u0000\u0000T\u0007\u0000\u0000�J\u0000\u0000�\u0007\u0000\u0000hK\u0000\u0000�\u0007\u0000\u0000\\L\u0000\u0000�\u0007\u0000\u0000(M\u0000\u0000,\b\u0000\u0000\bN\u0000\u0000d\b\u0000\u0000�N\u0000\u0000�\b\u0000\u0000\u0014R\u0000\u0000�\b\u0000\u0000�R\u0000\u0000\f\t\u0000\u0000 V\u0000\u0000L\t\u0000\u0000�V\u0000\u0000|\t\u0000\u0000\bZ\u0000\u0000�\t\u0000\u0000�Z\u0000\u0000�\t\u0000\u0000�[\u0000\u0000(\n\u0000\u0000�\\\u0000\u0000\\\n\u0000\u0000�]\u0000\u0000�\n\u0000\u0000�^\u0000\u0000�\n\u0000\u0000�_\u0000\u0000\u0000\u000b\u0000\u0000�`\u0000\u00004\u000b\u0000\u0000�a\u0000\u0000l\u000b\u0000\u0000�b\u0000\u0000�\u000b\u0000\u0000�c\u0000\u0000�\u000b\u0000\u0000\be\u0000\u0000\f\f\u0000\u0000�f\u0000\u0000T\f\u0000\u0000�g\u0000\u0000�\f\u0000\u0000�h\u0000\u0000�\f\u0000\u0000(j\u0000\u0000�\f\u0000\u0000�j\u0000\u0000(\r\u0000\u00008k\u0000\u0000X\r\u0000\u0000�k\u0000\u0000�\r\u0000\u0000@l\u0000\u0000�\r\u0000\u0000�m\u0000\u0000\u0010\u000e\u0000\u0000�p\u0000\u0000h\u000e\u0000\u0000\u001cr\u0000\u0000�\u000e\u0000\u0000<s\u0000\u0000�\u000e\u0000\u0000Xt\u0000\u0000@\u000f\u0000\u00008v\u0000\u0000�\u000f\u0000\u0000�w\u0000\u0000�\u000f\u0000\u0000�w\u0000\u0000�\u000f\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001zR\u0000\u0001|\u001e\u0001\u001b\f\u001f\u0000\u0010\u0000\u0000\u0000\u0018\u0000\u0000\u0000�\u001d\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0000\u0000\u0000,\u0000\u0000\u0000�\u001d\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0000\u0000\u0000@\u0000\u0000\u0000�\u001d\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0000\u0000\u0000T\u0000\u0000\u0000�\u001d\u0000\u0000\u0014\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0000\u0000\u0000h\u0000\u0000\u0000�\u001d\u0000\u0000\u001c\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\u0000\u0000|\u0000\u0000\u0000�\u001d\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00004\u0000\u0000\u0000�\u0000\u0000\u0000�\u001d\u0000\u0000\u0010\u0013\u0000\u0000\u0000D\u000e@P\f\u001d0�\u0002�\u0004�\u0006�\b�\n�\f\n\u0003�\u0012\f\u001f@P\u000e\u0000������D\u000b\u0000\u0000,\u0000\u0000\u0000�\u0000\u0000\u0000�0\u0000\u0000�\u0000\u0000\u0000\u0000D\u000ePL\f\u001d �\u0002�\u0004�\u0006�\b\n\u0002�\f\u001fPL\u000e\u0000����D\u000b\u00000\u0000\u0000\u0000�\u0000\u0000\u0000@1\u0000\u0000�\u0000\u0000\u0000\u0000D\u000e0L\f\u001d0�\u0002�\u0004�\b�\n�\f\n\u0002�\f\u001f0L\u000e\u0000�����D\u000b\u0000\u00004\u0000\u0000\u00000\u0001\u0000\u0000\u00002\u0000\u0000\u001c\u0001\u0000\u0000\u0000D\u000e0L\f\u001d0�\u0002�\u0004�\u0006�\b�\n�\f\n\u0002�\f\u001f0L\u000e\u0000������D\u000b\u0000\u0000\u0000,\u0000\u0000\u0000h\u0001\u0000\u0000�2\u0000\u0000�\u0000\u0000\u0000\u0000D\u000e`L\f\u001d �\u0002�\u0004�\u0006�\b\n\u0002�\f\u001f`L\u000e\u0000����D\u000b\u00004\u0000\u0000\u0000�\u0001\u0000\u0000l3\u0000\u0000�\u0000\u0000\u0000\u0000D\u000e0L\f\u001d0�\u0002�\u0004�\u0006�\b�\n�\f\n\u0002�\f\u001f0L\u000e\u0000������D\u000b\u0000\u0000\u00000\u0000\u0000\u0000�\u0001\u0000\u0000\u00044\u0000\u0000�\u0000\u0000\u0000\u0000D\u000e0L\f\u001d0�\u0002�\u0004�\b�\n�\f\n\u0002�\f\u001f0L\u000e\u0000�����D\u000b\u0000\u00004\u0000\u0000\u0000\u0004\u0002\u0000\u0000�4\u0000\u0000�\u0000\u0000\u0000\u0000D\u000e0L\f\u001d0�\u0002�\u0004�\u0006�\b�\n�\f\n\u0002�\f\u001f0L\u000e\u0000������D\u000b\u0000\u0000\u00000\u0000\u0000\u0000<\u0002\u0000\u0000p5\u0000\u0000\\\u0001\u0000\u0000\u0000D\u000e�\u0001L\f\u001d �\u0002�\u0004�\u0006�\b\n\u00038\u0001\f\u001f�\u0001L\u000e\u0000����D\u000b\u0000\u00000\u0000\u0000\u0000p\u0002\u0000\u0000�6\u0000\u0000T\u0001\u0000\u0000\u0000D\u000e0L\f\u001d0�\u0002�\u0004�\b�\n�\f\n\u00030\u0001\f\u001f0L\u000e\u0000�����D\u000b\u0000<\u0000\u0000\u0000�\u0002\u0000\u0000�7\u0000\u0000x\u0001\u0000\u0000\u0000D\u000e�\u0001T\f\u001d@�\u0002�\u0004�\u0006�\b�\n�\f�\u000e�\u0010\n\u0003D\u0001\f\u001f�\u0001T\u000e\u0000��������D\u000b\u0000\u00000\u0000\u0000\u0000�\u0002\u0000\u0000�8\u0000\u0000\\\u0001\u0000\u0000\u0000D\u000e�\u0001L\f\u001d �\u0002�\u0004�\u0006�\b\n\u00038\u0001\f\u001f�\u0001L\u000e\u0000����D\u000b\u0000\u00000\u0000\u0000\u0000\u0018\u0003\u0000\u0000\u0018:\u0000\u0000T\u0001\u0000\u0000\u0000D\u000e0L\f\u001d0�\u0002�\u0004�\b�\n�\f\n\u00030\u0001\f\u001f0L\u000e\u0000�����D\u000b\u0000<\u0000\u0000\u0000L\u0003\u0000\u00008;\u0000\u0000x\u0001\u0000\u0000\u0000D\u000e�\u0001T\f\u001d@�\u0002�\u0004�\u0006�\b�\n�\f�\u000e�\u0010\n\u0003D\u0001\f\u001f�\u0001T\u000e\u0000��������D\u000b\u0000\u0000,\u0000\u0000\u0000�\u0003\u0000\u0000p<\u0000\u0000�\u0000\u0000\u0000\u0000D\u000epL\f\u001d �\u0002�\u0004�\u0006�\b\n\u0002�\f\u001fpL\u000e\u0000����D\u000b\u00000\u0000\u0000\u0000�\u0003\u0000\u0000\b=\u0000\u0000�\u0000\u0000\u0000\u0000D\u000e0L\f\u001d0�\u0002�\u0004�\b�\n�\f\n\u0002�\f\u001f0L\u000e\u0000�����D\u000b\u0000\u00004\u0000\u0000\u0000�\u0003\u0000\u0000�=\u0000\u0000�\u0000\u0000\u0000\u0000D\u000e0L\f\u001d0�\u0002�\u0004�\u0006�\b�\n�\f\n\u0002�\f\u001f0L\u000e\u0000������D\u000b\u0000\u0000\u0000,\u0000\u0000\u0000(\u0004\u0000\u0000t>\u0000\u0000�\u0000\u0000\u0000\u0000D\u000e`L\f\u001d �\u0002�\u0004�\u0006�\b\n\u0002�\f\u001f`L\u000e\u0000����D\u000b\u00004\u0000\u0000\u0000X\u0004\u0000\u0000\f?\u0000\u0000�\u0000\u0000\u0000\u0000D\u000e0L\f\u001d0�\u0002�\u0004�\u0006�\b�\n�\f\n\u0002�\f\u001f0L\u000e\u0000������D\u000b\u0000\u0000\u00000\u0000\u0000\u0000�\u0004\u0000\u0000�?\u0000\u0000�\u0000\u0000\u0000\u0000D\u000e0L\f\u001d0�\u0002�\u0004�\b�\n�\f\n\u0002�\f\u001f0L\u000e\u0000�����D\u000b\u0000\u00004\u0000\u0000\u0000�\u0004\u0000\u0000p@\u0000\u0000\u0004\u0001\u0000\u0000\u0000D\u000e0L\f\u001d0�\u0002�\u0004�\u0006�\b�\n�\f\n\u0002�\f\u001f0L\u000e\u0000������D\u000b\u0000\u0000\u00000\u0000\u0000\u0000�\u0004\u0000\u0000<A\u0000\u0000\b\u0001\u0000\u0000\u0000D\u000e0L\f\u001d0�\u0002�\u0004�\b�\n�\f\n\u0002�\f\u001f0L\u000e\u0000�����D\u000b\u0000\u00004\u0000\u0000\u00000\u0005\u0000\u0000\u0010B\u0000\u0000\u0018\u0001\u0000\u0000\u0000D\u000e0L\f\u001d0�\u0002�\u0004�\u0006�\b�\n�\f\n\u0002�\f\u001f0L\u000e\u0000������D\u000b\u0000\u0000\u00000\u0000\u0000\u0000h\u0005\u0000\u0000�B\u0000\u0000�\u0000\u0000\u0000\u0000D\u000e0L\f\u001d0�\u0002�\u0004�\b�\n�\f\n\u0002�\f\u001f0L\u000e\u0000�����D\u000b\u0000\u00004\u0000\u0000\u0000�\u0005\u0000\u0000�C\u0000\u0000�\u0000\u0000\u0000\u0000D\u000e0L\f\u001d0�\u0002�\u0004�\u0006�\b�\n�\f\n\u0002�\f\u001f0L\u000e\u0000������D\u000b\u0000\u0000\u00000\u0000\u0000\u0000�\u0005\u0000\u0000\\D\u0000\u0000�\u0000\u0000\u0000\u0000D\u000e0L\f\u001d0�\u0002�\u0004�\b�\n�\f\n\u0002�\f\u001f0L\u000e\u0000�����D\u000b\u0000\u00004\u0000\u0000\u0000\b\u0006\u0000\u0000�D\u0000\u0000�\u0000\u0000\u0000\u0000D\u000e0L\f\u001d0�\u0002�\u0004�\u0006�\b�\n�\f\n\u0002�\f\u001f0L\u000e\u0000������D\u000b\u0000\u0000\u00000\u0000\u0000\u0000@\u0006\u0000\u0000�E\u0000\u0000�\u0000\u0000\u0000\u0000D\u000e0L\f\u001d0�\u0002�\u0004�\b�\n�\f\n\u0002�\f\u001f0L\u000e\u0000�����D\u000b\u0000\u0000<\u0000\u0000\u0000t\u0006\u0000\u0000LF\u0000\u0000(\u0003\u0000\u0000\u0000D\u000e@P\f\u001d0�\u0002�\u0004�\u0006�\b�\n�\f\u0005H\u000e\u0005I\u0010\n\u0003�\u0002\f\u001f@P\u000e\u0000������\u0006H\u0006ID\u000b0\u0000\u0000\u0000�\u0006\u0000\u00004I\u0000\u0000�\u0000\u0000\u0000\u0000D\u000e0L\f\u001d0�\u0002�\u0004�\b�\n�\f\n\u0002�\f\u001f0L\u000e\u0000�����D\u000b\u0000\u0000<\u0000\u0000\u0000�\u0006\u0000\u0000�I\u0000\u0000(\u0003\u0000\u0000\u0000D\u000e@P\f\u001d0�\u0002�\u0004�\u0006�\b�\n�\f\u0005H\u000e\u0005I\u0010\n\u0003�\u0002\f\u001f@P\u000e\u0000������\u0006H\u0006ID\u000b,\u0000\u0000\u0000(\u0007\u0000\u0000�L\u0000\u0000�\u0000\u0000\u0000\u0000D\u000e`L\f\u001d �\u0002�\u0004�\u0006�\b\n\u0002�\f\u001f`L\u000e\u0000����D\u000b\u0000<\u0000\u0000\u0000X\u0007\u0000\u0000lM\u0000\u0000\u0018\u0003\u0000\u0000\u0000D\u000e@P\f\u001d0�\u0002�\u0004�\u0006�\b�\n�\f\u0005H\u000e\u0005I\u0010\n\u0003�\u0002\f\u001f@P\u000e\u0000������\u0006H\u0006ID\u000b0\u0000\u0000\u0000�\u0007\u0000\u0000DP\u0000\u0000�\u0000\u0000\u0000\u0000D\u000e0L\f\u001d0�\u0002�\u0004�\b�\n�\f\n\u0002�\f\u001f0L\u000e\u0000�����D\u000b\u0000\u00004\u0000\u0000\u0000�\u0007\u0000\u0000�P\u0000\u0000�\u0000\u0000\u0000\u0000D\u000e0L\f\u001d0�\u0002�\u0004�\u0006�\b�\n�\f\n\u0002�\f\u001f0L\u000e\u0000������D\u000b\u0000\u0000\u00000\u0000\u0000\u0000\u0004\b\u0000\u0000�Q\u0000\u0000�\u0000\u0000\u0000\u0000D\u000e0L\f\u001d0�\u0002�\u0004�\b�\n�\f\n\u0002�\f\u001f0L\u000e\u0000�����D\u000b\u0000\u00004\u0000\u0000\u00008\b\u0000\u00004R\u0000\u0000(\u0001\u0000\u0000\u0000D\u000e0L\f\u001d0�\u0002�\u0004�\u0006�\b�\n�\f\n\u0002�\f\u001f0L\u000e\u0000������D\u000b\u0000\u0000\u00000\u0000\u0000\u0000p\b\u0000\u0000$S\u0000\u0000�\u0000\u0000\u0000\u0000D\u000e0L\f\u001d0�\u0002�\u0004�\b�\n�\f\n\u0002�\f\u001f0L\u000e\u0000�����D\u000b\u0000\u00004\u0000\u0000\u0000�\b\u0000\u0000�S\u0000\u0000(\u0001\u0000\u0000\u0000D\u000e0L\f\u001d0�\u0002�\u0004�\u0006�\b�\n�\f\n\u0002�\f\u001f0L\u000e\u0000������D\u000b\u0000\u0000\u00000\u0000\u0000\u0000�\b\u0000\u0000�T\u0000\u0000\b\u0001\u0000\u0000\u0000D\u000e0L\f\u001d0�\u0002�\u0004�\b�\n�\f\n\u0002�\f\u001f0L\u000e\u0000�����D\u000b\u0000\u00004\u0000\u0000\u0000\u0010\t\u0000\u0000�U\u0000\u0000\u0018\u0001\u0000\u0000\u0000D\u000e0L\f\u001d0�\u0002�\u0004�\u0006�\b�\n�\f\n\u0002�\f\u001f0L\u000e\u0000������D\u000b\u0000\u0000\u00000\u0000\u0000\u0000H\t\u0000\u0000xV\u0000\u0000�\u0000\u0000\u0000\u0000D\u000e0L\f\u001d0�\u0002�\u0004�\b�\n�\f\n\u0002�\f\u001f0L\u000e\u0000�����D\u000b\u0000\u00004\u0000\u0000\u0000|\t\u0000\u0000(W\u0000\u0000$\u0001\u0000\u0000\u0000D\u000e0L\f\u001d0�\u0002�\u0004�\u0006�\b�\n�\f\n\u0002�\f\u001f0L\u000e\u0000������D\u000b\u0000\u0000\u00000\u0000\u0000\u0000�\t\u0000\u0000\u0014X\u0000\u0000\u0014\u0001\u0000\u0000\u0000D\u000e�\u0001L\f\u001d �\u0002�\u0004�\u0006�\b\n\u0002�\f\u001f�\u0001L\u000e\u0000����D\u000b\u0000\u0000\u0000D\u0000\u0000\u0000�\t\u0000\u0000�X\u0000\u0000�\u0001\u0000\u0000\u0000D\u000e`X\f\u001d`�\u0002�\u0004�\u0006�\b�\n�\f�\u000e�\u0010�\u0012�\u0014�\u0016�\u0018\n\u0003�\u0001\f\u001f`X\u000e\u0000������������D\u000b,\u0000\u0000\u00000\n\u0000\u0000�Z\u0000\u0000�\u0000\u0000\u0000\u0000D\u000e`L\f\u001d �\u0002�\u0004�\u0006�\b\n\u0002�\f\u001f`L\u000e\u0000����D\u000b\u00004\u0000\u0000\u0000`\n\u0000\u00008[\u0000\u0000�\u0000\u0000\u0000\u0000D\u000e0L\f\u001d0�\u0002�\u0004�\u0006�\b�\n�\f\n\u0002�\f\u001f0L\u000e\u0000������D\u000b\u0000\u0000\u00008\u0000\u0000\u0000�\n\u0000\u0000�[\u0000\u0000�\u0001\u0000\u0000\u0000D\u000e@P\f\u001d@�\u0002�\u0004�\u0006�\b�\f�\u000e�\u0010\n\u0003X\u0001\f\u001f@P\u000e\u0000�������D\u000b\u0000\u0000\u0000,\u0000\u0000\u0000�\n\u0000\u0000(]\u0000\u0000�\u0000\u0000\u0000\u0000D\u000e@L\f\u001d �\u0002�\u0004�\u0006�\b\n\u0002l\f\u001f@L\u000e\u0000����D\u000b\u0000,\u0000\u0000\u0000\u0004\u000b\u0000\u0000�]\u0000\u0000�\u0000\u0000\u0000\u0000D\u000e@L\f\u001d �\u0002�\u0004�\u0006�\b\n\u0002\\\f\u001f@L\u000e\u0000����D\u000b\u0000,\u0000\u0000\u00004\u000b\u0000\u0000�]\u0000\u0000�\u0000\u0000\u0000\u0000D\u000e@L\f\u001d �\u0002�\u0004�\u0006�\b\n\u0002\\\f\u001f@L\u000e\u0000����D\u000b\u0000<\u0000\u0000\u0000d\u000b\u0000\u0000(^\u0000\u0000�\u0000\u0000\u0000\u0000D\u000e0L\f\u001d0�\u0002�\u0004�\b�\n�\f\nX\f\u001f0L\u000e\u0000�����D\u000b\u0002@\f\u001f0L\u000e\u0000�����\u0000\u0000D\u0000\u0000\u0000�\u000b\u0000\u0000p^\u0000\u0000�\u0001\u0000\u0000\u0000D\u000epP\f\u001d0�\u0002�\u0004�\u0006�\b�\n�\f\n\u0002l\f\u001fpP\u000e\u0000������D\u000b\n\u0002�\f\u001fpP\u000e\u0000������D\u000b\u0000\u0000T\u0000\u0000\u0000�\u000b\u0000\u0000�_\u0000\u0000$\u0003\u0000\u0000\u0000D\u000e`T\f\u001d0�\u0002�\u0004�\u0006�\b�\n�\f\u0005H\u000e\u0005I\u0010\n\u0002h\f\u001f`T\u000e\u0000������\u0006H\u0006ID\u000b\n\u0003p\u0002\f\u001f`T\u000e\u0000������\u0006H\u0006ID\u000b\u0000\u0000\u0000D\u0000\u0000\u0000D\f\u0000\u0000�b\u0000\u0000 \u0001\u0000\u0000\u0000D\u000ePP\f\u001d0�\u0002�\u0004�\u0006�\b�\n�\f\n\u0002h\f\u001fPP\u000e\u0000������D\u000b\n\u0002x\f\u001fPP\u000e\u0000������D\u000b\u0000\u0000D\u0000\u0000\u0000�\f\u0000\u0000dc\u0000\u0000 \u0001\u0000\u0000\u0000D\u000ePP\f\u001d0�\u0002�\u0004�\u0006�\b�\n�\f\n\u0002h\f\u001fPP\u000e\u0000������D\u000b\n\u0002x\f\u001fPP\u000e\u0000������D\u000b\u0000\u0000D\u0000\u0000\u0000�\f\u0000\u0000<d\u0000\u0000\u001c\u0001\u0000\u0000\u0000D\u000ePP\f\u001d0�\u0002�\u0004�\u0006�\b�\n�\f\n\u0002h\f\u001fPP\u000e\u0000������D\u000b\n\u0002t\f\u001fPP\u000e\u0000������D\u000b\u0000\u0000`\u0000\u0000\u0000\u001c\r\u0000\u0000\u0010e\u0000\u0000�\u0001\u0000\u0000\u0000D\u000e�\u0001\\\f\u001d`�\u0002�\u0004�\u0006�\b�\n�\f�\u000e�\u0010�\u0012�\u0014�\u0016�\u0018\n\u0002h\f\u001f�\u0001\\\u000e\u0000������������D\u000b\n\u0003\u0014\u0001\f\u001f�\u0001\\\u000e\u0000������������D\u000b\u0000\u0000<\u0000\u0000\u0000�\r\u0000\u0000�f\u0000\u0000t\u0001\u0000\u0000\u0000D\u000e�\u0001T\f\u001d@�\u0002�\u0004�\u0006�\b�\n�\f�\u000e�\u0010\n\u0003@\u0001\f\u001f�\u0001T\u000e\u0000��������D\u000b\u0000\u0000\u0010\u0000\u0000\u0000�\r\u0000\u0000�g\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u00000\u0000\u0000\u0000�\r\u0000\u0000�g\u0000\u0000�\u0000\u0000\u0000\u0000D\u000ePP\f\u001d0�\u0002�\u0004�\b�\n�\f\n\u0002�\f\u001fPP\u000e\u0000�����D\u000b\u0000\u0000\u0000\u0000\u0000\u0000_$\u0003�\u001f \u0003�@i\u0003\u0010!\u0016\u0000\u0014_$\u0003��\u0003_�_$\u0003����\u0017_$\u0003�`\u0000\u0000��\u0003\u0000�\u0000\u0002\u001f��\u0003_�_$\u0003��\u0003\u0000�\u001f \u0003�\u0000��\u0010\u001f \u0003�Bg\u0003\u0010\u0015\u0016\u0000\u0014_$\u0003�\u001f \u0003��f\u0003\u0010\u0015\u0016\u0000\u0014�\u0003\u0001��{\u0001��W\u0002��O\u0003��C\u0000�V�;��\u0003\u0001��\u0003\u0000��\u0016@�\u0001\u0001�R�\u0003\u0000��\u0007\u0000�\f\u0016\u0000��\u0003@�\u001f \u0003Ղ��P�\u0003\u0014��\u0003\u0013�\n\u0016\u0000��\u0003\u0000��\u0003\u0014�\u0001\u0002�R\u0002\u0016\u0000��\u0003@�����B� ��\u0003\u0014��\u0003\u0013�\u0000\u0016\u0000��\u0003\u0000��\u0003\u0014�!\u0000�R�\u0015\u0000��\u0003@�����B�%��\u0003\u0014��\u0003\u0013��\u0015\u0000����еr$�\u001f \u0003�C�\u0000\u0010�\u0003\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f��\u0015\u0000��\u0003@��\u0003\u0014��\u0003\u0013��\u0003\u0015��\u0015\u0000����е�\u001e�\u001f \u0003գ�\u0000\u0010�\u0003\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f��\u0015\u0000��\u0003@��\u0003\u0014��\u0003\u0013��\u0003\u0015��\u0015\u0000����е^!�\u001f \u0003�c�\u0000\u0010�\u0003\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f��\u0015\u0000��\u0003@��\u0003\u0014��\u0003\u0013��\u0003\u0015��\u0015\u0000����е>\"�\u001f \u0003�c�\u0000\u0010�\u0003\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f��\u0015\u0000��\u0003@��\u0003\u0014��\u0003\u0013��\u0003\u0015��\u0015\u0000����е�&�\u001f \u0003�C�\u0000\u0010�\u0003\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f��\u0015\u0000��\u0003@��\u0003\u0014��\u0003\u0013��\u0003\u0015��\u0015\u0000����е�%�\u001f \u0003��\u0000\u0010�\u0003\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f��\u0015\u0000��\u0003@��\u0003\u0014��\u0003\u0013��\u0003\u0015��\u0015\u0000����е~\"�\u001f \u0003�#�\u0000\u0010�\u0003\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f��\u0015\u0000��\u0003@��\u0003\u0014��\u0003\u0013��\u0003\u0015��\u0015\u0000����е�!�\u001f \u0003��\u0000\u0010�\u0003\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f��\u0015\u0000��\u0003@��\u0003\u0014��\u0003\u0013��\u0003\u0015�~\u0015\u0000����е�(�\u001f \u0003���\u0000\u0010�\u0003\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f�x\u0015\u0000��\u0003@��\u0003\u0014��\u0003\u0013��\u0003\u0015�o\u0015\u0000����е�$�\u001f \u0003գ�\u0000\u0010�\u0003\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f�i\u0015\u0000��\u0003@��\u0003\u0014��\u0003\u0013��\u0003\u0015�`\u0015\u0000����е\"\u001f�\u001f \u0003Ճ�\u0000\u0010�\u0003\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f�Z\u0015\u0000��\u0003@��\u0003\u0014��\u0003\u0013��\u0003\u0015�Q\u0015\u0000����е�$�\u001f \u0003Ճ�\u0000\u0010�\u0003\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f�K\u0015\u0000��\u0003@��\u0003\u0014��\u0003\u0013��\u0003\u0015�B\u0015\u0000����е�!�\u001f \u0003�C�\u0000\u0010�\u0003\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f�<\u0015\u0000��\u0003@��\u0003\u0014��\u0003\u0013��\u0003\u0015�3\u0015\u0000����еn#�\u001f \u0003�#�\u0000\u0010�\u0003\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f�-\u0015\u0000��\u0003@��\u0003\u0014��\u0003\u0013��\u0003\u0015�$\u0015\u0000����е\"\u001c�\u001f \u0003Ճ�\u0000\u0010�\u0003\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f�\u001e\u0015\u0000��\u0003@��\u0003\u0014��\u0003\u0013��\u0003\u0015�\u0015\u0015\u0000����еF%�\u001f \u0003���\u0000\u0010�\u0003\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f�\u000f\u0015\u0000��\u0003@��\u0003\u0014��\u0003\u0013��\u0003\u0015�\u0006\u0015\u0000����е�*�\u001f \u0003Ճ�\u0000\u0010�\u0003\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f�\u0000\u0015\u0000��\u0003@��\u0003\u0014��\u0003\u0013��\u0003\u0015��\u0014\u0000����е�&�\u001f \u0003��\u0002\u0001\u0010�\u0003\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f��\u0014\u0000��\u0003@��\u0003\u0014��\u0003\u0013��\u0003\u0015��\u0014\u0000�������\u001e�\u001f \u0003�\u0003\b\u0001\u0010�\u0003\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f��\u0014\u0000��\u0003@��\u0003\u0014��\u0003\u0013��\u0003\u0015��\u0014\u0000�������!�\u001f \u0003գ\r\u0001\u0010�\u0003\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f��\u0014\u0000��\u0003@��\u0003\u0014��\u0003\u0013��\u0003\u0015��\u0014\u0000������\" �\u001f \u0003��\u0013\u0001\u0010�\u0003\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f��\u0014\u0000��\u0003@��\u0003\u0014��\u0003\u0013��\u0003\u0015��\u0014\u0000������:\u001f�\u001f \u0003�C\u001a\u0001\u0010�\u0003\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f��\u0014\u0000��\u0003@��\u0003\u0014��\u0003\u0013��\u0003\u0015��\u0014\u0000�������$�\u001f \u0003�#!\u0001\u0010�\u0003\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f��\u0014\u0000��\u0003@��\u0003\u0014��\u0003\u0013��\u0003\u0015��\u0014\u0000�������*�\u001f \u0003�c&\u0001\u0010�\u0003\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f��\u0014\u0000��\u0003@��\u0003\u0014��\u0003\u0013��\u0003\u0015��\u0014\u0000������n%�\u001f \u0003�#,\u0001\u0010�\u0003\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f��\u0014\u0000��\u0003@��\u0003\u0014��\u0003\u0013��\u0003\u0015�\u0014\u0000�������!�\u001f \u0003գ0\u0001\u0010�\u0003\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f�y\u0014\u0000��\u0003@��\u0003\u0014��\u0003\u0013��\u0003\u0015�p\u0014\u0000�������(�\u001f \u0003��5\u0001\u0010�\u0003\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f�j\u0014\u0000��\u0003@��\u0003\u0014��\u0003\u0013��\u0003\u0015�a\u0014\u0000�������\u001e�\u001f \u0003�\u0003;\u0001\u0010�\u0003\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f�[\u0014\u0000��\u0003@��\u0003\u0014��\u0003\u0013��\u0003\u0015�R\u0014\u0000�������)�\u001f \u0003�cR\u0001\u0010�\u0003\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f�L\u0014\u0000��\u0003@��\u0003\u0014��\u0003\u0013��\u0003\u0015�C\u0014\u0000������j\u001d�\u001f \u0003գW\u0001\u0010�\u0003\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f�=\u0014\u0000��\u0003@��\u0003\u0014��\u0003\u0013��\u0003\u0015�4\u0014\u0000������&\"�\u001f \u0003�\u0003o\u0001\u0010�\u0003\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f�.\u0014\u0000��\u0003@��\u0003\u0014��\u0003\u0013��\u0003\u0015�%\u0014\u0000������n\u001f�\u001f \u0003գs\u0001\u0010�\u0003\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f�\u001f\u0014\u0000��\u0003@��\u0003\u0014��\u0003\u0013��\u0003\u0015�\u0016\u0014\u0000������F �\u001f \u0003Ճ�\u0001\u0010�\u0003\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f�\u0010\u0014\u0000��\u0003@��\u0003\u0014��\u0003\u0013��\u0003\u0015�\u0007\u0014\u0000������Z)�\u001f \u0003�\u0003�\u0001\u0010�\u0003\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f�\u0001\u0014\u0000��\u0003@��\u0003\u0014��\u0003\u0013��\u0003\u0015��\u0013\u0000�������\u001f�\u001f \u0003�#�\u0001\u0010�\u0003\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f��\u0013\u0000��\u0003@��\u0003\u0014��\u0003\u0013��\u0003\u0015��\u0013\u0000�������)�\u001f \u0003�c�\u0001\u0010�\u0003\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f��\u0013\u0000��\u0003@��\u0003\u0014��\u0003\u0013��\u0003\u0015��\u0013\u0000�������\"�\u001f \u0003�à\u0001\u0010�\u0003\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f��\u0013\u0000��\u0003@��\u0003\u0014��\u0003\u0013��\u0003\u0015��\u0013\u0000������b �\u001f \u0003�\u0003�\u0001\u0010�\u0003\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f��\u0013\u0000��\u0003@��\u0003\u0014��\u0003\u0013��\u0003\u0015��\u0013\u0000������\u001a'�\u001f \u0003�c�\u0001\u0010�\u0003\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f��\u0013\u0000��\u0003@��\u0003\u0014��\u0003\u0013��\u0003\u0015��\u0013\u0000�������(�\u001f \u0003�ó\u0001\u0010�\u0003\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f��\u0013\u0000��\u0003@��\u0003\u0014��\u0003\u0013��\u0003\u0015��\u0013\u0000�������&�\u001f \u0003գ�\u0001\u0010�\u0003\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f��\u0013\u0000��\u0003@��\u0003\u0014��\u0003\u0013��\u0003\u0015��\u0013\u0000������\u0006+�\u001f \u0003��\u0001\u0010�\u0003\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f��\u0013\u0000��\u0003@��\u0003\u0014��\u0003\u0013��\u0003\u0015��\u0013\u0000�������%�\u001f \u0003�#�\u0001\u0010�\u0003\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f�z\u0013\u0000��\u0003@��\u0003\u0014��\u0003\u0013��\u0003\u0015�q\u0013\u0000������v'�\u001f \u0003���\u0001\u0010�\u0003\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f�k\u0013\u0000��\u0003@��\u0003\u0014��\u0003\u0013��\u0003\u0015�b\u0013\u0000������b\u001e�\u001f \u0003գ�\u0001\u0010�\u0003\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f�\\\u0013\u0000��\u0003@��\u0003\u0014��\u0003\u0013��\u0003\u0015�S\u0013\u0000�������$�\u001f \u0003�\u0003�\u0001\u0010�\u0003\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f�M\u0013\u0000��\u0003@��\u0003\u0014��\u0003\u0013��\u0003\u0015�D\u0013\u0000�������'�\u001f \u0003�#�\u0001\u0010�\u0003\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f�>\u0013\u0000��\u0003@��\u0003\u0014��\u0003\u0013��\u0003\u0015�5\u0013\u0000�������\u001f�\u001f \u0003�c�\u0001\u0010�\u0003\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f�/\u0013\u0000��\u0003@��\u0003\u0014��\u0003\u0013��\u0003\u0015�&\u0013\u0000������\u0016*�\u001f \u0003�\u0003�\u0001\u0010�\u0003\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f� \u0013\u0000��\u0003@��\u0003\u0014��\u0003\u0013��\u0003\u0015�\u0017\u0013\u0000�������\u001f�\u001f \u0003�#�\u0001\u0010�\u0003\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f�\u0011\u0013\u0000��\u0003@��\u0003\u0014��\u0003\u0013��\u0003\u0015�\b\u0013\u0000��\u0003\u0000��\u0003\u0014�A\u0000�R\u0000\u0013\u0000��\u0003@�����B(&��\u0003\u0014��\u0003\u0013��\u0012\u0000��\u0003\u0000��\u0003\u0014��\u0003\u001f*�\u0012\u0000��\u0003@�����B�*��\u0003\u0014��\u0003\u0013��\u0012\u0000��\u0003\u0000��\u0003\u0014�!\u0000�R�\u0012\u0000��\u0003@�����B�)��\u0003\u0014��\u0003\u0013��\u0012\u0000��\u0003\u0000��\u0003\u0014�\u0001\b�R�\u0012\u0000��\u0003@�����B�\u001d��\u0003\u0014��\u0003\u0013��\u0012\u0000��\u0003\u0000��\u0003\u0014�\u0001@�R�\u0012\u0000��\u0003@�����B�)��\u0003\u0014��\u0003\u0013��\u0012\u0000��\u0003\u0000��\u0003\u0014�\u0001��R�\u0012\u0000��\u0003@�����B�\u001e��\u0003\u0014��\u0003\u0013��\u0012\u0000��\u0003\u0000��\u0003\u0014��\u0003\u001f*�\u0012\u0000��\u0003@�����B�%��\u0003\u0014��\u0003\u0013��\u0012\u0000��\u0003\u0000��\u0003\u0014��\u0000�R�\u0012\u0000��\u0003@�����B\u0010!��\u0003\u0014��\u0003\u0013��\u0012\u0000��\u0003\u0000��\u0003\u0014�A\u0000�R�\u0012\u0000��\u0003@�����B�\u001d��\u0003\u0014��\u0003\u0013��\u0012\u0000��\u0003\u0000��\u0003\u0014�!\u0000�R�\u0012\u0000��\u0003@�����B0%��\u0003\u0014��\u0003\u0013��\u0012\u0000��\u0003\u0000��\u0003\u0014�\u0001\u0000�R�\u0012\u0000��\u0003@�����B8\u001c��\u0003\u0014��\u0003\u0013��\u0012\u0000��\u0003\u0000��\u0003\u0014�\u0001\u0000�R�\u0012\u0000��\u0003@�����B�%��\u0003\u0014��\u0003\u0013��\u0012\u0000��\u0003\u0000��\u0003\u0014�\u0001\u0000�R�\u0012\u0000��\u0003@�����B\b(��\u0003\u0014��\u0003\u0013��\u0012\u0000��\u0003\u0000��\u0003\u0014�\u0001\u0000�R~\u0012\u0000��\u0003@�����B� ��\u0003\u0014��\u0003\u0013�|\u0012\u0000��\u0003\u0000��\u0003\u0014�\u0001\u0000�Rt\u0012\u0000��\u0003@�����B�(��\u0003\u0014��\u0003\u0013�r\u0012\u0000��\u0003\u0000��\u0003\u0014�\u0001\u0000�Rj\u0012\u0000��\u0003@�����BT\u001c��\u0003\u0014��\u0003\u0013�h\u0012\u0000��\u0003\u0000��\u0003\u0014�\u0001\u0000�R`\u0012\u0000��\u0003@�����B�$��\u0003\u0014��\u0003\u0013�^\u0012\u0000��\u0003\u0000��\u0003\u0014�\u0001\u0000�RV\u0012\u0000��\u0003@�����B�\u001e��\u0003\u0014��\u0003\u0013�T\u0012\u0000��\u0003\u0000��\u0003\u0014�\u0001 �RL\u0012\u0000��\u0003@�����B�#��\u0003\u0014��\u0003\u0013�J\u0012\u0000��\u0003\u0000��\u0003\u0014�\u0001\u0010�RB\u0012\u0000��\u0003@�����BD&��\u0003\u0014��\u0003\u0013�@\u0012\u0000��\u0003\u0000��\u0003\u0014�\u0001\b�R8\u0012\u0000��\u0003@�����B�!��\u0003\u0014��\u0003\u0013�6\u0012\u0000��\u0003\u0000��\u0003\u0014�\u0001\u0004�R.\u0012\u0000��\u0003@�����B� ��\u0003\u0014��\u0003\u0013�,\u0012\u0000��\u0003\u0000��\u0003\u0014�\u0001\u0002�R$\u0012\u0000��\u0003@�����B�\u001d��\u0003\u0014��\u0003\u0013�\"\u0012\u0000��\u0003\u0000��\u0003\u0014�\u0001\u0001�R\u001a\u0012\u0000��\u0003@�����B�\u001d��\u0003\u0014��\u0003\u0013�\u0018\u0012\u0000��\u0003\u0000��\u0003\u0014��\u0000�R\u0010\u0012\u0000��\u0003@�����Bt\u001c��\u0003\u0014��\u0003\u0013�\u000e\u0012\u0000��\u0003\u0000��\u0003\u0014�A\u0000�R\u0006\u0012\u0000��\u0003@�����B�'��\u0003\u0014��\u0003\u0013�\u0004\u0012\u0000��\u0003\u0000��\u0003\u0014�!\u0000�R�\u0011\u0000��\u0003@�����B�\u001c��\u0003\u0014��\u0003\u0013��\u0011\u0000��\u0003\u0000��\u0003\u0014��\u0003\u001f*�\u0011\u0000��\u0003@�����B�#��\u0003\u0014��\u0003\u0013��\u0011\u0000��\u0003\u0000��\u0003\u0014�!\u0000�R�\u0011\u0000��\u0003@�����B�\"��\u0003\u0014��\u0003\u0013��\u0011\u0000��\u0003\u0000��\u0003\u0014�A\u0000�R�\u0011\u0000��\u0003@�����B$!��\u0003\u0014��\u0003\u0013��\u0011\u0000��\u0003\u0000��\u0003\u0014�a\u0000�R�\u0011\u0000��\u0003@�����B8'��\u0003\u0014��\u0003\u0013��\u0011\u0000��\u0003\u0000��\u0003\u0014��\u0000�R�\u0011\u0000��\u0003@�����B�\u001c��\u0003\u0014��\u0003\u0013��\u0011\u0000��\u0003\u0000��\u0003\u0014��\u0000�R�\u0011\u0000��\u0003@�����B((��\u0003\u0014��\u0003\u0013��\u0011\u0000��\u0003\u0000��\u0003\u0014��\u0000�R�\u0011\u0000��\u0003@�����B\b#��\u0003\u0014��\u0003\u0013��\u0011\u0000��\u0003\u0000��\u0003\u0014��\u0000�R�\u0011\u0000��\u0003@�����Bd&��\u0003\u0014��\u0003\u0013��\u0011\u0000��\u0003\u0000��\u0003\u0014�!\u0000�R�\u0011\u0000��\u0003@�����B\b)��\u0003\u0014��\u0003\u0013��\u0011\u0000��\u0003\u0000��\u0003\u0014�A\u0000�R�\u0011\u0000��\u0003@�����B\u0004\u001e��\u0003\u0014��\u0003\u0013��\u0011\u0000��\u0003\u0000��\u0003\u0014��\u0000�R�\u0011\u0000��\u0003@�����B�#��\u0003\u0014��\u0003\u0013��\u0011\u0000��\u0003\u0000��\u0003\u0014�!\u0000�R�\u0011\u0000��\u0003@�����B�\u001c��\u0003\u0014��\u0003\u0013��\u0011\u0000��\u0003\u0000��\u0003\u0014�A\u0000�Rz\u0011\u0000��\u0003@�����B@*��\u0003\u0014��\u0003\u0013�x\u0011\u0000��\u0003\u0000��\u0003\u0014�!\u0000�Rp\u0011\u0000��\u0003@�����BD#��\u0003\u0014��\u0003\u0013�n\u0011\u0000��\u0003\u0000��\u0003\u0014�A\u0000�Rf\u0011\u0000��\u0003@�����BT\"��\u0003\u0014��\u0003\u0013�d\u0011\u0000��\u0016@��\u0007@�\u001f\u0001\t��\u0000\u0000T�\u0003\u0013��OC��WB��{A��\u0003\u0001��\u0003_�a\u0011\u0000��C\u0001��{\u0003��O\u0004���\u0000�T�;�I\u0000�R�C\u0000��\u0016@��c\u0000��\u0003\u001f��\u0003\u001f��\u0003\u0000���\u001f��\u000b\u0000�V\u0011\u0000��\u0003\u0000��#\u0000��\u0003\u0013�\u0001=�RU\u0011\u0000��\u0003@��\u000f@��\u0003\u0013�\"\u0000�R\u0003\u0001\u0007�\u0013�\u0000�\u001f�\u0003yQ\u0011\u0000��\u0003@��\u0013@��\u0003\u0013�\"\u0000�R\u0003!\u0007�K\u0011\u0000��\u0003@�\u001f \u0003�A�\u0001\u0010�\u0003\u0013�C�\u0007�I\u0011\u0000��\u0007@��\u0016@���_�\u001f\u0001\t�\u0000\u0000T�OD��{C��C\u0001��\u0003_�/\u0011\u0000��{���\u000b\u0000��O\u0002��\u0003\u0000��\u0007@��C\u0001�T�;Չ\u0000�R�c\u0000��\u0016@���\u0000��\u0003\u001f��\u0003\u001f��\u0003\u0000���\u001f��\u000f\u0000�\"\u0011\u0000���]��C\u0000��\u0003\u0013��\u0003\u001f�-\u0011\u0000��\u000b@��\u0003^�)\u0000�R�\u0000��\u0003\u0013�#\u0000�R�\u0003\u001f�\ta\u00079(\u0011\u0000���^��3\u0000��\u0003\u0013�(\u0011\u0000��\u0003_��#\u0000��\u0003\u0013�$\u0011\u0000��\u0003\u0000��\u0003\u0013�%\u0011\u0000��\u000fA)�\u0003@��\u000b@�\u001f \u0003�\u0005�\u0001\u0010�\u0000�\"\u0011\u0000��\u0016@���_�\u001f\u0001\t�\u0001\u0001\u0000T�\u0003\u001f��\u0007@��C\u0001��OB��\u000b@��{è�\u0003_��\u0010\u0000��{���W\u0001��O\u0002��\u0003\u0000��\u0007@��\u0003\b�U�;�i\u0000�R�c\u0000��\u0016@���\u0000��\u0003\u001f��\u0003\u001f��\u0003\u0000���\u001f��\u000f\u0000��\u0010\u0000��\u0003^��\u0007��\u0003\u0013�#\u0000�R�\u0003\u001f��\u0010\u0000���^��S\u0000��\u0003\u0013��\u0010\u0000��\u0003_��C\u0000��\u0003\u0013��\u0010\u0000��#\u0000��\u0003\u0013��\u0010\u0000��\u000fB)�\u0007@��\u0000��\u0007��\u0003\u001f��\u0010\u0000��?@��\u0003\u0000��\u0000���\u0003\u0000��\u0003\u0013��\u0010\u0000�\u000b\u0000\u0000\u0014�\u0003\u0001*�\u0010\u0000��{@��\u0003\u0000��\u0003\b*�\u0010\u0000��\u0003\u0000��\u0003\u0013��\u0003\u0014��\u0010\u0000���\u0000��\u0010\u0000��\u0003@��\u0016@���_�\u001f\u0001\t��\u0000\u0000T�\u0007@��\u0003\b��OB��WA��{è�\u0003_֫\u0010\u0000���\u0001��{\u0004��O\u0005��\u0003\u0001�T�;�I\u0000�R�\u0000��\u0016@��c\u0000��\u0003\u001f��\u0003\u001f��\u0003\u0000���\u001f��\u0013\u0000��\u0010\u0000���^��c\u0000��\u0003\u0013��\u0003\u001f��\u0010\u0000��\u000f@��\u0003_�)\u0000�R�S\u0000��\u0003\u0013�\ta\u00079�\u0010\u0000��#\u0000��\u0003\u0013��\u0010\u0000��\u0007@��\u000f@�\u001f \u0003�#�\u0001\u0010�\u0017@��\u0010\u0000��\u0016@���_�\u001f\u0001\t��\u0000\u0000T�\u0003\u001f��OE��{D���\u0001��\u0003_�}\u0010\u0000��{���W\u0001��O\u0002��\u0003\u0000���\u0007�U�;�)\u0000�R�C\u0000��\u0016@��C\u0000��\u0003\u001f��\u0003\u001f��\u0003\u0000���\u001f��\u000b\u0000�q\u0010\u0000��\u0003_��3\u0000��\u0003\u0013��\u0010\u0000��\u0003\u0000��\u0003\u0013��\u0010\u0000��\u0003@��\u000f@��c\u0000��\u0003\u001f��\u0010\u0000��;@�@\u0001���\u0010\u0000��s@��\u0003\u0000��\u0003\b*�\u0010\u0000��\u0003\u0000��\u0003\u0013��\u0003\u0014��\u0010\u0000��c\u0000��\u0010\u0000��\u0016@���_�\u001f\u0001\t��\u0000\u0000T�\u0003\u001f���\u0007��OB��WA��{è�\u0003_�I\u0010\u0000��{���\u000b\u0000��O\u0002��\u0003\u0000��\u0007@��C\u0001�T�;�i\u0000�R�\u0000��\u0016@���\u0000��\u0003\u001f��\u0003\u001f��\u0003\u0000���\u001f��\u0013\u0000�<\u0010\u0000��\u0003^��c\u0000��\u0003\u0013��\u0003\u001f�G\u0010\u0000��\u000f@���^�)\u0000�R�\u0000��\u0003\u0013�#\u0000�R�\u0003\u001f�\ta\u00079B\u0010\u0000��\u0003_��S\u0000��\u0003\u0013�B\u0010\u0000��#\u0000��\u0003\u0013�C\u0010\u0000��\u0007@��\u000f@�\u001f \u0003��\u0001\u0010�\u0017@��\u0000�`\u0010\u0000��\u0016@���_�\u001f\u0001\t�\u0001\u0001\u0000T�\u0003\u001f��\u0007@��C\u0001��OB��\u000b@��{è�\u0003_�\u0010\u0010\u0000��{���W\u0001��O\u0002��\u0003\u0000��\u0007@���\u0007�U�;�I\u0000�R�C\u0000��\u0016@��c\u0000��\u0003\u001f��\u0003\u001f��\u0003\u0000���\u001f��\u000b\u0000�\u0003\u0010\u0000���^��_\u0007��\u0003\u0013�#\u0000�R�\u0003\u001f�\u0011\u0010\u0000��\u0003_��3\u0000��\u0003\u0013�\u0011\u0010\u0000��\u0003\u0000��\u0003\u0013�\u0012\u0010\u0000��\u0003@��\u000f@��c\u0000��_\u0007��\u0003\u001f�0\u0010\u0000��;@�@\u0001��\u0015\u0010\u0000��s@��\u0003\u0000��\u0003\b*\u0015\u0010\u0000��\u0003\u0000��\u0003\u0013��\u0003\u0014�\u0015\u0010\u0000��c\u0000�\u0017\u0010\u0000��\u0016@���_�\u001f\u0001\t�\u0001\u0001\u0000T�\u0003\u001f��\u0007@���\u0007��OB��WA��{è�\u0003_��\u000f\u0000���\u0002��{\t��O\n��C\u0002�T�;��\u0000�R�\u0003\u0001ш\u0016@���\u0000��\u0003\u001f��\u0003\u001f��\u0003\u0000���\u001f��\u0003\u001c��\u000f\u0000���\\��#\u0001��\u0003\u0013��\u0003\u001f��\u000f\u0000��'@��\u0003]�)\u0000�R�\u0013\u0001��\u0003\u0013�\ta\u00079�\u000f\u0000���]���\u0000���\u0000��\u0003\u0013��\u0003\u001f��\u0003\u001f��\u0003\u001f��\u000f\u0000��\u0003^��\u0000��\u0003\u0013��\u000f\u0000���^��\u0000��\u0003\u0013��\u000f\u0000��/@��\u001b@�?\u0001\b�\t\u0001\u0000T�+@�J\u0001\b\u000b?\u0001\n�\u0000\u0000T(\u0001\bK�+\u0000�\u0002\u0000\u0000\u0014�+\u0000��\u0003_��\u0000��\u0003\u0013��\u000f\u0000��c\u0000��\u0003\u0013��\u000f\u0000��'E)�\u001f@�\u0000\u0001\t��\u000f\u0000��A�\u001f \u0003�Ɗ\u0001\u0010�'@��G@���\u0000��#\u0000�$\u0000�R�\u0003\b��\u0003\t��\u000f\u0000��\u0016@���_�\u001f\u0001\t��\u0000\u0000T�\u0003\u001f��OJ��{I���\u0002��\u0003_�|\u000f\u0000��{���\u000b\u0000��O\u0002��\u0003\u0000��\u0003\t�T�;թ\u0000�R�C\u0001��\u0016@���\u0000��\u0003\u001f��\u0003\u001f��\u0003\u0000���\u001f��+\u0000�p\u000f\u0000��\u0003]��3\u0001��\u0003\u0013��\u000f\u0000���]��\u0003\u0001���\u0000��\u0003\u0013��\u0003\u001f��\u0003\u001f��\u0003\u001f��\u000f\u0000��\u0003^���\u0000��\u0003\u0013��\u000f\u0000���^���\u0000��\u0003\u0013��\u000f\u0000��7@��\u001f@�?\u0001\b�\t\u0001\u0000T�3@�J\u0001\b\u000b?\u0001\n�\u0000\u0000T(\u0001\bK�3\u0000�\u0002\u0000\u0000\u0014�3\u0000��\u0003_��\u0000��\u0003\u0013��\u000f\u0000��\u0000��\u0003\u0013�e\u000f\u0000��'F)�#@�\u0000\u0001\t��\u000f\u0000��\u0017B��C\u0000��O@��\u0007\u0001��c\u0001�$\u0000�R�\u0003\u001f��\u0003\b��\u000f\u0000��@��#\u0000��\u0003\u0013�\\\u000f\u0000��c\u0001�j\u000f\u0000��\u0007@��\u0016@���_�\u001f\u0001\t��\u0000\u0000T�\u0003\t��OB��\u000b@��{è�\u0003_�'\u000f\u0000���\u0002��{\u0006��_\u0007��W\b��O\t���\u0001�X�;Չ\u0000�R��\u0000�\b\u0017@���\u0000��\u0003\u001f��\u0003\u001f��\u0003\u0000���\u001f��\u001b\u0000�\u001a\u000f\u0000���]��\u0000��\u0003\u0013��\u0003\u001f�%\u000f\u0000��\u0017@��\u0003^�)\u0000�R�\u0000��\u0003\u0013�\ta\u00079F\u000f\u0000���~��C\u0000��\u0003\u0013�R\u000f\u0000��\u0017@��\u0003\u0013��\u0003\u0014�\"\u0000�R\u0003A\u0007�\f\u000f\u0000��#\u0000��\u0003\u0013�\u001d\u000f\u0000��\u0013\u0000��\u0003\u0013��\u0003\u0014�Q\u000f\u0000��\u0007@���|�R\u000f\u0000��\u0003\u0000��\u0002\u00004�\u0003\u001f��\u0003\u0015��c\u0000��\u0003\u0013��\u0003\u0014��\u0003\u0016*M\u000f\u0000��\u000f@��\"\u0000��\u0003\u0013��\u0003\u001f��\u0003\u0017��\u0003\u001f��\u0003\u001f�-\u000f\u0000��\u0007@��\u0006\u0000��B\u0000��\u0002\u0004����T\u0002\u0000\u0000\u0014�\u0003\u001f*��@�\u001f \u0003�ft\u0001\u0010�\u0017@��'@��\u0003\u0015�+\u000f\u0000��\u0003\u0015�9\u000f\u0000�\b\u0017@���_�\u001f\u0001\t�\u0001\u0001\u0000T�\u0003\u001f��OI��WH��_G��{F���\u0002��\u0003_��\u000e\u0000���\u0002��{\t��O\n��C\u0002�T�;��\u0000�R�\u0003\u0001ш\u0016@���\u0000��\u0003\u001f��\u0003\u001f��\u0003\u0000���\u001f��\u0003\u001c��\u000e\u0000���\\��#\u0001��\u0003\u0013��\u0003\u001f��\u000e\u0000��'@��\u0003]�)\u0000�R�\u0013\u0001��\u0003\u0013�\ta\u00079�\u000e\u0000���]���\u0000���\u0000��\u0003\u0013��\u0003\u001f��\u0003\u001f��\u0003\u001f��\u000e\u0000��\u0003^��\u0000��\u0003\u0013��\u000e\u0000���^��\u0000��\u0003\u0013��\u000e\u0000��/@��\u001b@�?\u0001\b�\t\u0001\u0000T�+@�J\u0001\b\u000b?\u0001\n�\u0000\u0000T(\u0001\bK�+\u0000�\u0002\u0000\u0000\u0014�+\u0000��\u0003_��\u0000��\u0003\u0013��\u000e\u0000��c\u0000��\u0003\u0013��\u000e\u0000��'E)�\u001f@�\u0000\u0001\t��\u000e\u0000��A�\u001f \u0003Նi\u0001\u0010�'@��G@���\u0000��#\u0000�$\u0000�R�\u0003\b��\u0003\t��\u000e\u0000��\u0016@���_�\u001f\u0001\t��\u0000\u0000T�\u0003\u001f��OJ��{I���\u0002��\u0003_�r\u000e\u0000��{���\u000b\u0000��O\u0002��\u0003\u0000��\u0003\t�T�;թ\u0000�R�C\u0001��\u0016@���\u0000��\u0003\u001f��\u0003\u001f��\u0003\u0000���\u001f��+\u0000�f\u000e\u0000��\u0003]��3\u0001��\u0003\u0013��\u000e\u0000���]��\u0003\u0001���\u0000��\u0003\u0013��\u0003\u001f��\u0003\u001f��\u0003\u001f��\u000e\u0000��\u0003^���\u0000��\u0003\u0013��\u000e\u0000���^���\u0000��\u0003\u0013��\u000e\u0000��7@��\u001f@�?\u0001\b�\t\u0001\u0000T�3@�J\u0001\b\u000b?\u0001\n�\u0000\u0000T(\u0001\bK�3\u0000�\u0002\u0000\u0000\u0014�3\u0000��\u0003_��\u0000��\u0003\u0013��\u000e\u0000��\u0000��\u0003\u0013�[\u000e\u0000��'F)�#@�\u0000\u0001\t��\u000e\u0000��\u0017B��C\u0000��O@��\u0007\u0001��c\u0001�$\u0000�R�\u0003\u001f��\u0003\b��\u000e\u0000��@��#\u0000��\u0003\u0013�R\u000e\u0000��c\u0001�`\u000e\u0000��\u0007@��\u0016@���_�\u001f\u0001\t��\u0000\u0000T�\u0003\t��OB��\u000b@��{è�\u0003_�\u001d\u000e\u0000���\u0002��{\u0006��_\u0007��W\b��O\t���\u0001�X�;Չ\u0000�R��\u0000�\b\u0017@���\u0000��\u0003\u001f��\u0003\u001f��\u0003\u0000���\u001f��\u001b\u0000�\u0010\u000e\u0000���]��\u0000��\u0003\u0013��\u0003\u001f�\u001b\u000e\u0000��\u0017@��\u0003^�)\u0000�R�\u0000��\u0003\u0013�\ta\u00079<\u000e\u0000���~��C\u0000��\u0003\u0013�H\u000e\u0000��\u0017@��\u0003\u0013��\u0003\u0014�\"\u0000�R\u0003A\u0007�\u0002\u000e\u0000��#\u0000��\u0003\u0013�\u0013\u000e\u0000��\u0013\u0000��\u0003\u0013��\u0003\u0014�G\u000e\u0000��\u0007@���|�H\u000e\u0000��\u0003\u0000��\u0002\u00004�\u0003\u001f��\u0003\u0015��c\u0000��\u0003\u0013��\u0003\u0014��\u0003\u0016*C\u000e\u0000��\u000f@��\"\u0000��\u0003\u0013��\u0003\u001f��\u0003\u0017��\u0003\u001f��\u0003\u001f�#\u000e\u0000��\u0007@��\u0006\u0000��B\u0000��\u0002\u0004����T\u0002\u0000\u0000\u0014�\u0003\u001f*��@�\u001f \u0003�&S\u0001\u0010�\u0017@��'@��\u0003\u0015�5\u000e\u0000��\u0003\u0015�/\u000e\u0000�\b\u0017@���_�\u001f\u0001\t�\u0001\u0001\u0000T�\u0003\u001f��OI��WH��_G��{F���\u0002��\u0003_ֿ\r\u0000���\u0001��{\u0005��O\u0006��C\u0001�T�;�i\u0000�R�\u0000��\u0016@���\u0000��\u0003\u001f��\u0003\u001f��\u0003\u0000���\u001f��\u0017\u0000��\r\u0000��\u0003^��\u0000��\u0003\u0013��\u0003\u001f��\r\u0000��\u0013@���^�)\u0000�R�s\u0000��\u0003\u0013�\ta\u00079�\r\u0000��\u0003_��C\u0000��\u0003\u0013��\r\u0000��#\u0000��\u0003\u0013��\r\u0000���@�\u001f \u0003�DL\u0001\u0010�\u0013@��\u001f@�\u0003\u000e\u0000��\u0016@���_�\u001f\u0001\t��\u0000\u0000T�\u0003\u001f��OF��{E���\u0001��\u0003_֍\r\u0000��{���\u000b\u0000��O\u0002��\u0003\u0000��\u0007@��C\u0001�T�;�i\u0000�R�\u0000��\u0016@���\u0000��\u0003\u001f��\u0003\u001f��\u0003\u0000���\u001f��\u0013\u0000��\r\u0000��\u0003^��c\u0000��\u0003\u0013��\u0003\u001f��\r\u0000��\u000f@���^�)\u0000�R�\u0000��\u0003\u0013�#\u0000�R�\u0003\u001f�\ta\u00079�\r\u0000��\u0003_��S\u0000��\u0003\u0013��\r\u0000��#\u0000��\u0003\u0013��\r\u0000��\u0007@��\u000f@�\u001f \u0003�dE\u0001\u0010�\u0017@��\u0000��\r\u0000��\u0016@���_�\u001f\u0001\t�\u0001\u0001\u0000T�\u0003\u001f��\u0007@��C\u0001��OB��\u000b@��{è�\u0003_�T\r\u0000��{���W\u0001��O\u0002��\u0003\u0000��\u0007@���\u0007�U�;�I\u0000�R�C\u0000��\u0016@��c\u0000��\u0003\u001f��\u0003\u001f��\u0003\u0000���\u001f��\u000b\u0000�G\r\u0000���^��_\u0007��\u0003\u0013�#\u0000�R�\u0003\u001f�U\r\u0000��\u0003_��3\u0000��\u0003\u0013�U\r\u0000��\u0003\u0000��\u0003\u0013�V\r\u0000��\u0003@��\u000f@��c\u0000��_\u0007��\u0003\u001f��\r\u0000��;@�@\u0001��Y\r\u0000��s@��\u0003\u0000��\u0003\b*Y\r\u0000��\u0003\u0000��\u0003\u0013��\u0003\u0014�Y\r\u0000��c\u0000�[\r\u0000��\u0016@���_�\u001f\u0001\t�\u0001\u0001\u0000T�\u0003\u001f��\u0007@���\u0007��OB��WA��{è�\u0003_�\u0017\r\u0000���\u0001��{\u0004��O\u0005��\u0003\u0001�T�;�i\u0000�R�c\u0000��\u0016@��\u0000��\u0003\u001f��\u0003\u001f��\u0003\u0000���\u001f��\u000f\u0000�\f\r\u0000��\u0013@��C\u0000��\u0003\u0013��\u0003\u001f�\u0017\r\u0000��\u000b@��\u0017@�)\u0000�R�3\u0000��\u0003\u0013�\ta\u000798\r\u0000��\u001b@��#\u0000��\u0003\u0013�\u0014\r\u0000��\u0003\u0000��\u0003\u0013�\u0015\r\u0000��\u000bA)�\u0003@��\u000b@�\u001f \u0003�\u00047\u0001\u0010c\r\u0000��\u0016@���_�\u001f\u0001\t��\u0000\u0000T�\u0003\u001f��OE��{D���\u0001��\u0003_��\f\u0000��{���W\u0001��O\u0002��\u0003\u0000���\u0007�U�;�I\u0000�R�c\u0000��\u0016@��c\u0000��\u0003\u001f��\u0003\u001f��\u0003\u0000���\u001f��\u000f\u0000��\f\u0000���^��S\u0000��\u0003\u0013�\r\r\u0000��\u0003_��C\u0000��\u0003\u0013��\f\u0000��#\u0000��\u0003\u0013��\f\u0000��\u000bB)�\u0007@��\u0000��\u0003\u001f�9\r\u0000��?@�@\u0001���\f\u0000��{@��\u0003\u0000��\u0003\b*�\f\u0000��\u0003\u0000��\u0003\u0013��\u0003\u0014��\f\u0000���\u0000��\f\u0000��\u0016@���_�\u001f\u0001\t��\u0000\u0000T�\u0003\u001f���\u0007��OB��WA��{è�\u0003_֭\f\u0000��{���\u000b\u0000��O\u0002��\u0003\u0000��\u000b@��\u0003\u0001�T�;�i\u0000�R�C\u0000��\u0016@���\u0000��\u0003\u001f��\u0003\u001f��\u0003\u0000���\u001f��\u000b\u0000��\f\u0000��\u0003^��#\u0000��\u0003\u0013��\u0003\u001f��\f\u0000��\u0007@���^��\u0007@�)\u0000�RB|\u0000��\u0003\u0013�#\u0000�R�\u0003\u001f�\ta\u00079�\f\u0000��\u0003_��{\u0000��\u0003\u0013�#\u0000�R�\u0003\u001f��\f\u0000��\u0003\u0000��\u0003\u0013��\f\u0000��\u0007@��\u0007@�\u001f \u0003�\u0004)\u0001\u0010B|\u0000��{\u0000��\f\u0000��\u0016@���_�\u001f\u0001\t�\u0001\u0001\u0000T�\u0003\u001f��\u000b@��\u0003\u0001��OB��\u000b@��{è�\u0003_�q\f\u0000��{���W\u0001��O\u0002��\u0003\u0000��\u000b@���\u0007�U�;�I\u0000�R�C\u0000��\u0016@��c\u0000��\u0003\u001f��\u0003\u001f��\u0003\u0000���\u001f��\u000b\u0000�d\f\u0000���^��\u0007@��\u0003\u0013�B\\\u0007�#\u0000�R�\u0003\u001f�q\f\u0000��\u0003_��[\u0007��\u0003\u0013�#\u0000�R�\u0003\u001f�k\f\u0000��#\u0000��\u0003\u0013�p\f\u0000��\u0007@��\u0007@��c\u0000�B\\\u0007��[\u0007��\u0003\u001f��\f\u0000��;@�@\u0001��r\f\u0000��s@��\u0003\u0000��\u0003\b*r\f\u0000��\u0003\u0000��\u0003\u0013��\u0003\u0014�r\f\u0000��c\u0000�t\f\u0000��\u0016@���_�\u001f\u0001\t�\u0001\u0001\u0000T�\u0003\u001f��\u000b@���\u0007��OB��WA��{è�\u0003_�0\f\u0000��{���\u000b\u0000��O\u0002��\u0003\u0000��\u000b@��C\u0001�T�;Չ\u0000�R�c\u0000��\u0016@���\u0000��\u0003\u001f��\u0003\u001f��\u0003\u0000���\u001f��\u000f\u0000�#\f\u0000���]��C\u0000��\u0003\u0013��\u0003\u001f�.\f\u0000��\u000b@��\u0003^��\u0007@�)\u0000�RB�\u0000��\u0003\u0013�#\u0000�R�\u0003\u001f�\ta\u00079(\f\u0000���^��\u0000��\u0003\u0013�#\u0000�R�\u0003\u001f�\"\f\u0000��\u0003_��3\u0000��\u0003\u0013�\"\f\u0000��\u0003\u0000��\u0003\u0013�#\f\u0000��\u0003@��\u000b@��\u0007@��\u000f@�\u001f \u0003ե\u0018\u0001\u0010B�\u0000��\u0000�v\f\u0000��\u0016@���_�\u001f\u0001\t�\u0001\u0001\u0000T�\u0003\u001f��\u000b@��C\u0001��OB��\u000b@��{è�\u0003_��\u000b\u0000��{���W\u0001��O\u0002��\u0003\u0000��\u000b@��\u0003\b�U�;�i\u0000�R�c\u0000��\u0016@���\u0000��\u0003\u001f��\u0003\u001f��\u0003\u0000���\u001f��\u000f\u0000��\u000b\u0000��\u0003^��\u0007@��\u0003\u0013�B|\u0007�#\u0000�R�\u0003\u001f��\u000b\u0000���^��{\u0007��\u0003\u0013�#\u0000�R�\u0003\u001f��\u000b\u0000��\u0003_��S\u0000��\u0003\u0013��\u000b\u0000��#\u0000��\u0003\u0013��\u000b\u0000��\u0007@��\u0017@��\u0007@��\u0000�B|\u0007��{\u0007��\u0003\u001f�=\f\u0000��?@�@\u0001���\u000b\u0000��{@��\u0003\u0000��\u0003\b*�\u000b\u0000��\u0003\u0000��\u0003\u0013��\u0003\u0014��\u000b\u0000���\u0000��\u000b\u0000��\u0016@���_�\u001f\u0001\t�\u0001\u0001\u0000T�\u0003\u001f��\u000b@��\u0003\b��OB��WA��{è�\u0003_֨\u000b\u0000��{���\u000b\u0000��O\u0002��\u0003\u0000��\u0007@��C\u0001�T�;�i\u0000�R�\u0000��\u0016@���\u0000��\u0003\u001f��\u0003\u001f��\u0003\u0000���\u001f��\u0013\u0000��\u000b\u0000��\u0003^��c\u0000��\u0003\u0013��\u0003\u001f��\u000b\u0000��\u000f@���^�)\u0000�R�\u0000��\u0003\u0013�#\u0000�R�\u0003\u001f�\ta\u00079�\u000b\u0000��\u0003_��S\u0000��\u0003\u0013��\u000b\u0000��#\u0000��\u0003\u0013��\u000b\u0000��\u0007@��\u000f@�\u001f \u0003��\b\u0001\u0010�\u0017@��\u0000��\u000b\u0000��\u0016@���_�\u001f\u0001\t�\u0001\u0001\u0000T�\u0003\u001f��\u0007@��C\u0001��OB��\u000b@��{è�\u0003_�o\u000b\u0000��{���W\u0001��O\u0002��\u0003\u0000��\u0007@���\u0007�U�;�I\u0000�R�C\u0000��\u0016@��c\u0000��\u0003\u001f��\u0003\u001f��\u0003\u0000���\u001f��\u000b\u0000�b\u000b\u0000���^��_\u0007��\u0003\u0013�#\u0000�R�\u0003\u001f�p\u000b\u0000��\u0003_��3\u0000��\u0003\u0013�p\u000b\u0000��\u0003\u0000��\u0003\u0013�q\u000b\u0000��\u0003@��\u000f@��c\u0000��_\u0007��\u0003\u001f��\u000b\u0000��;@�@\u0001��t\u000b\u0000��s@��\u0003\u0000��\u0003\b*t\u000b\u0000��\u0003\u0000��\u0003\u0013��\u0003\u0014�t\u000b\u0000��c\u0000�v\u000b\u0000��\u0016@���_�\u001f\u0001\t�\u0001\u0001\u0000T�\u0003\u001f��\u0007@���\u0007��OB��WA��{è�\u0003_�2\u000b\u0000��{���\u000b\u0000��O\u0002��\u0003\u0000��\u0007@��\u0003\u0001�T�;�I\u0000�R�c\u0000��\u0016@��c\u0000��\u0003\u001f��\u0003\u001f��\u0003\u0000���\u001f��\u000f\u0000�%\u000b\u0000���^��C\u0000��\u0003\u0013��\u0003\u001f�0\u000b\u0000��\u000b@��\u0003_�)\u0000�R�\u0000��\u0003\u0013�#\u0000�R�\u0003\u001f�\ta\u00079+\u000b\u0000��#\u0000��\u0003\u0013�0\u000b\u0000���@�\u001f \u0003գ�\u0000\u0010�\u0000��\u000b\u0000��\u0016@���_�\u001f\u0001\t�\u0001\u0001\u0000T�\u0003\u001f��\u0007@��\u0003\u0001��OB��\u000b@��{è�\u0003_��\n\u0000��{���W\u0001��O\u0002��\u0003\u0000��\u0007@���\u0007�U�;�)\u0000�R�#\u0000��\u0016@��C\u0000��\u0003\u001f��\u0003\u001f��\u0003\u0000���\u001f��\u0007\u0000��\n\u0000��\u0003_��?\u0007��\u0003\u0013�#\u0000�R�\u0003\u001f�\u0000\u000b\u0000��\u0003\u0000��\u0003\u0013�\u0005\u000b\u0000��\u0003@��C\u0000��?\u0007��\u0003\u001f�d\u000b\u0000��7@�@\u0001��\t\u000b\u0000��k@��\u0003\u0000��\u0003\b*\t\u000b\u0000��\u0003\u0000��\u0003\u0013��\u0003\u0014�\t\u000b\u0000��C\u0000�\u000b\u000b\u0000��\u0016@���_�\u001f\u0001\t�\u0001\u0001\u0000T�\u0003\u001f��\u0007@���\u0007��OB��WA��{è�\u0003_��\n\u0000��{���\u000b\u0000��O\u0002��\u0003\u0000��\u0007@��\u0003\u0001�T�;�i\u0000�R�C\u0000��\u0016@���\u0000��\u0003\u001f��\u0003\u001f��\u0003\u0000���\u001f��\u000b\u0000��\n\u0000��\u0003^��#\u0000��\u0003\u0013��\u0003\u001f��\n\u0000��\u0007@���^�)\u0000�R�\u0000��\u0003\u0013�#\u0000�R�\u0003\u001f�\ta\u00079�\n\u0000��\u0007@��\u0003_��\u0003\u0013�\"\u0000�R\u0003A\u0007��\n\u0000��\u0003\u0000��\u0003\u0013��\n\u0000��\u0007@�\u001f \u0003�C�\u0000\u0010�\u0000�\"\u000b\u0000��\u0016@���_�\u001f\u0001\t�\u0001\u0001\u0000T�\u0003\u001f��\u0007@��\u0003\u0001��OB��\u000b@��{è�\u0003_֎\n\u0000��#�m�{\u0001��W\u0002��O\u0003��C\u0000��\u0007@���\u0007�U�;�)\u0000�R�c\u0000��\u0016@���\u0000��\u0003\u001f��\u0003\u001f��\u0003\u0000���\u001e��\u000f\u0000��\n\u0000��\u0003^��\u0007��\u0003\u0013�#\u0000�R�\u0003\u001f��\n\u0000��C\u0000��\u0003\u0013��\n\u0000��\u000b@��\u0000��\u0007��\u0003\u001f��\n\u0000��?@��\u0007\u0000�\u0000\u0012���#\u0000��\u0003\u0013��\u0001�R�\n\u0000��K@��\u0003\u0000��\u0003\u0013��\n\u0000��\u0007@��\u0003\u0013��\u0003\u001f*�\n\u0000��O@��\u0003\u0000��\u0003\u0013��\n\u0000��\u0007@��\u0003\u0013�\"\u0000�R�\n\u0000��S@��\u0003\u0000��\u0003\u0013��\n\u0000��\u0007@��\u0003\u0013�B\u0000�R�\n\u0000��W@��\u0003\u0000��\u0003\u0013��\n\u0000��\u0007@��\u0003\u0013�b\u0000�R�\n\u0000��[@��\u0003\u0000��\u0003\u0013��\n\u0000��\u0007@��\u0003\u0013��\u0000�R�\n\u0000��_@��\u0003\u0000��\u0003\u0013��\n\u0000��\u0007@��\u0003\u0013��\u0000�R�\n\u0000��k@��\u0003\u0000��\u0003\u0013��\n\u0000��\u0007@��\u0003\u0013��\u0000�R�\n\u0000��c@��\u0003\u0000��\u0003\u0013��\n\u0000��\u0007@��\u0003\u0013��\u0000�R�\n\u0000��g@��\u0003\u0000��\u0003\u0013��\n\u0000��\u0007@��\u0003\u0013�\u0002\u0001�R�\n\u0000��o@��\u0003\u0000��\u0003\u0013��\n\u0000��\u0007@��\u0003\u0013�\"\u0001�R�\n\u0000��\u0003Om\b����%���\u0003\u0000��\u0003\u0013�\b\u0001g�\b\u0000��\u0000�a^!�a^�\u0011��\t\u0001g�\u0000\u0018h\u001e \u0000I\u001f\u0001\u0000x��\n\u0000��\u0007@��\u0003\u0013�B\u0001�R�\n\u0000��\u0003Pm�\u0003\u0000��\u0003\u0013�\u0000�a^!�a^\u0000\u0018h\u001e \u0000I\u001f\u0001\u0000x��\n\u0000��\u0007@��\u0003\u0013�b\u0001�R�\n\u0000��\u0003Qm�\u0003\u0000��\u0003\u0013�\u0000�a^!�a^\u0000\u0018h\u001e \u0000I\u001f\u0001\u0000x�~\n\u0000��\u0007@��\u0003\u0013��\u0001�R~\n\u0000��\u0003Rm�\u0003\u0000��\u0003\u0013�\u0000�a^!�a^\u0000\u0018h\u001e \u0000I\u001f\u0001\u0000x�q\n\u0000��\u0007@��\u0003\u0013��\u0001�Rq\n\u0000�\n\u0000\u0000\u0014\u0007\n\u0000��{@��\u0003\u0000��\u0003\b*\u0007\n\u0000��\u0003\u0000��\u0003\u0013��\u0003\u0014�\u0007\n\u0000���\u0000�\t\n\u0000��\u0007@��\u0016@���^�\u001f\u0001\t�\u0001\u0001\u0000T�\u0007@���\u0007��OC��WB��{A��#�l�\u0003_��\t\u0000��{���\u000b\u0000��O\u0002��\u0003\u0000��\u0007@��\u0003\u0001�T�;�i\u0000�R�C\u0000��\u0016@���\u0000��\u0003\u001f��\u0003\u001f��\u0003\u0000���\u001f��\u000b\u0000��\t\u0000��\u0003^��#\u0000��\u0003\u0013��\u0003\u001f��\t\u0000��\u0007@���^�)\u0000�R�\u0000��\u0003\u0013�#\u0000�R�\u0003\u001f�\ta\u00079�\t\u0000��\u0007@��\u0003_��\u0003\u0013�\"\u0000�R\u0003A\u0007��\t\u0000��\u0003\u0000��\u0003\u0013��\t\u0000��\u0007@�\u001f \u0003���\u0000\u0010�\u0000�/\n\u0000��\u0016@���_�\u001f\u0001\t�\u0001\u0001\u0000T�\u0003\u001f��\u0007@��\u0003\u0001��OB��\u000b@��{è�\u0003_֋\t\u0000��#�m�{\u0001��W\u0002��O\u0003��C\u0000��\u0007@���\u0007�U�;�)\u0000�R�c\u0000��\u0016@���\u0000��\u0003\u001f��\u0003\u001f��\u0003\u0000���\u001e��\u000f\u0000�}\t\u0000��\u0003^��\u0007��\u0003\u0013�#\u0000�R�\u0003\u001f��\t\u0000��C\u0000��\u0003\u0013��\t\u0000��\u000b@��\u0000��\u0007��\u0003\u001f�\u0003\n\u0000��?@��\u0007\u0000�\u0000\u0012���#\u0000��\u0003\u0013��\u0001�R�\t\u0000��K@��\u0003\u0000��\u0003\u0013��\t\u0000��\u0007@��\u0003\u0013��\u0003\u001f*�\t\u0000��O@��\u0003\u0000��\u0003\u0013��\t\u0000��\u0007@��\u0003\u0013�\"\u0000�R�\t\u0000��S@��\u0003\u0000��\u0003\u0013��\t\u0000��\u0007@��\u0003\u0013�B\u0000�R�\t\u0000��W@��\u0003\u0000��\u0003\u0013��\t\u0000��\u0007@��\u0003\u0013�b\u0000�R�\t\u0000��[@��\u0003\u0000��\u0003\u0013��\t\u0000��\u0007@��\u0003\u0013��\u0000�R�\t\u0000��_@��\u0003\u0000��\u0003\u0013��\t\u0000��\u0007@��\u0003\u0013��\u0000�R�\t\u0000��k@��\u0003\u0000��\u0003\u0013��\t\u0000��\u0007@��\u0003\u0013��\u0000�R�\t\u0000��c@��\u0003\u0000��\u0003\u0013��\t\u0000��\u0007@��\u0003\u0013��\u0000�R�\t\u0000��g@��\u0003\u0000��\u0003\u0013��\t\u0000��\u0007@��\u0003\u0013�\u0002\u0001�R�\t\u0000��o@��\u0003\u0000��\u0003\u0013��\t\u0000��\u0007@��\u0003\u0013�\"\u0001�R�\t\u0000��\u0003Om\b����%���\u0003\u0000��\u0003\u0013�\b\u0001g�\b\u0000��\u0000�a^!�a^�\u0011��\t\u0001g�\u0000\u0018h\u001e \u0000I\u001f\u0001\u0000x��\t\u0000��\u0007@��\u0003\u0013�B\u0001�R�\t\u0000��\u0003Pm�\u0003\u0000��\u0003\u0013�\u0000�a^!�a^\u0000\u0018h\u001e \u0000I\u001f\u0001\u0000x��\t\u0000��\u0007@��\u0003\u0013�b\u0001�R�\t\u0000��\u0003Qm�\u0003\u0000��\u0003\u0013�\u0000�a^!�a^\u0000\u0018h\u001e \u0000I\u001f\u0001\u0000x�{\t\u0000��\u0007@��\u0003\u0013��\u0001�R{\t\u0000��\u0003Rm�\u0003\u0000��\u0003\u0013�\u0000�a^!�a^\u0000\u0018h\u001e \u0000I\u001f\u0001\u0000x�n\t\u0000��\u0007@��\u0003\u0013��\u0001�Rn\t\u0000�\n\u0000\u0000\u0014\u0004\t\u0000��{@��\u0003\u0000��\u0003\b*\u0004\t\u0000��\u0003\u0000��\u0003\u0013��\u0003\u0014�\u0004\t\u0000���\u0000�\u0006\t\u0000��\u0007@��\u0016@���^�\u001f\u0001\t�\u0001\u0001\u0000T�\u0007@���\u0007��OC��WB��{A��#�l�\u0003_��\b\u0000���\u0001��{\u0004��O\u0005��\u0003\u0001�T�;�i\u0000�R�c\u0000��\u0016@��\u0000��\u0003\u001f��\u0003\u001f��\u0003\u0000���\u001f��\u000f\u0000��\b\u0000��\u0013@��C\u0000��\u0003\u0013��\u0003\u001f��\b\u0000��\u000b@��\u0017@�)\u0000�R�3\u0000��\u0003\u0013�\ta\u00079�\b\u0000��\u000b@��\u001b@��\u0003\u0013�\"\u0000�R\u0003A\u0007��\b\u0000��\u0003\u0000��\u0003\u0013��\b\u0000��\u0003@��\u000b@�\u001f \u0003��\u0000\u0010�\u000f@�3\t\u0000��\u0016@���_�\u001f\u0001\t��\u0000\u0000T�\u0003\u001f��OE��{D���\u0001��\u0003_֍\b\u0000��#�m�{\u0001��W\u0002��O\u0003��C\u0000���\u0007�U�;�)\u0000�R�\u0000��\u0016@���\u0000��\u0003\u001f��\u0003\u001f��\u0003\u0000���\u001e��\u0013\u0000��\b\u0000��\u0003^��s\u0000��\u0003\u0013��\b\u0000��C\u0000��\u0003\u0013��\b\u0000��\u000b@��\u001f@��\u0000��\u0003\u001f�\f\t\u0000��C@��\u0007\u0000�\u0000\u0012���#\u0000��\u0003\u0013��\u0001�R�\b\u0000��O@��\u0003\u0000��\u0003\u0013��\b\u0000��\u0007@��\u0003\u0013��\u0003\u001f*�\b\u0000��S@��\u0003\u0000��\u0003\u0013��\b\u0000��\u0007@��\u0003\u0013�\"\u0000�R�\b\u0000��W@��\u0003\u0000��\u0003\u0013��\b\u0000��\u0007@��\u0003\u0013�B\u0000�R�\b\u0000��[@��\u0003\u0000��\u0003\u0013��\b\u0000��\u0007@��\u0003\u0013�b\u0000�R�\b\u0000��_@��\u0003\u0000��\u0003\u0013��\b\u0000��\u0007@��\u0003\u0013��\u0000�R�\b\u0000��c@��\u0003\u0000��\u0003\u0013��\b\u0000��\u0007@��\u0003\u0013��\u0000�R�\b\u0000��o@��\u0003\u0000��\u0003\u0013��\b\u0000��\u0007@��\u0003\u0013��\u0000�R�\b\u0000��g@��\u0003\u0000��\u0003\u0013��\b\u0000��\u0007@��\u0003\u0013��\u0000�R�\b\u0000��k@��\u0003\u0000��\u0003\u0013��\b\u0000��\u0007@��\u0003\u0013�\u0002\u0001�R�\b\u0000��s@��\u0003\u0000��\u0003\u0013��\b\u0000��\u0007@��\u0003\u0013�\"\u0001�R�\b\u0000��Om\b����%���\u0003\u0000��\u0003\u0013�\b\u0001g�\b\u0000��\u0000�a^!�a^�\u0011��\t\u0001g�\u0000\u0018h\u001e \u0000I\u001f\u0001\u0000x��\b\u0000��\u0007@��\u0003\u0013�B\u0001�R�\b\u0000��Pm�\u0003\u0000��\u0003\u0013�\u0000�a^!�a^\u0000\u0018h\u001e \u0000I\u001f\u0001\u0000x��\b\u0000��\u0007@��\u0003\u0013�b\u0001�R�\b\u0000��Qm�\u0003\u0000��\u0003\u0013�\u0000�a^!�a^\u0000\u0018h\u001e \u0000I\u001f\u0001\u0000x��\b\u0000��\u0007@��\u0003\u0013��\u0001�R�\b\u0000��Rm�\u0003\u0000��\u0003\u0013�\u0000�a^!�a^\u0000\u0018h\u001e \u0000I\u001f\u0001\u0000x�s\b\u0000��\u0007@��\u0003\u0013��\u0001�Rs\b\u0000�\n\u0000\u0000\u0014\t\b\u0000��@��\u0003\u0000��\u0003\b*\t\b\u0000��\u0003\u0000��\u0003\u0013��\u0003\u0014�\t\b\u0000��\u0000�\u000b\b\u0000��\u0007@��\u0016@���^�\u001f\u0001\t��\u0000\u0000T��\u0007��OC��WB��{A��#�l�\u0003_��\u0007\u0000��{���\u000b\u0000��O\u0002��\u0003\u0000��\u0007@��\u0003\u0001�T�;�I\u0000�R�c\u0000��\u0016@��c\u0000��\u0003\u001f��\u0003\u001f��\u0003\u0000���\u001f��\u000f\u0000��\u0007\u0000���^��C\u0000��\u0003\u0013��\u0003\u001f��\u0007\u0000��\u000b@��\u0003_�)\u0000�R�\u0000��\u0003\u0013�#\u0000�R�\u0003\u001f�\ta\u00079�\u0007\u0000��#\u0000��\u0003\u0013��\u0007\u0000���@�\u001f \u0003�C�\u0000\u0010�\u0000�@\b\u0000��\u0016@���_�\u001f\u0001\t�\u0001\u0001\u0000T�\u0003\u001f��\u0007@��\u0003\u0001��OB��\u000b@��{è�\u0003_֔\u0007\u0000��{���W\u0001��O\u0002��\u0003\u0000��\u0007@���\u0007�U�;�)\u0000�R�#\u0000��\u0016@��C\u0000��\u0003\u001f��\u0003\u001f��\u0003\u0000���\u001f��\u0007\u0000��\u0007\u0000��\u0003_��?\u0007��\u0003\u0013�#\u0000�R�\u0003\u001f��\u0007\u0000��\u0003\u0000��\u0003\u0013��\u0007\u0000��\u0003@��C\u0000��?\u0007��\u0003\u001f�\u0015\b\u0000��7@�@\u0001���\u0007\u0000��k@��\u0003\u0000��\u0003\b*�\u0007\u0000��\u0003\u0000��\u0003\u0013��\u0003\u0014��\u0007\u0000��C\u0000��\u0007\u0000��\u0016@���_�\u001f\u0001\t�\u0001\u0001\u0000T�\u0003\u001f��\u0007@���\u0007��OB��WA��{è�\u0003_�\\\u0007\u0000��{���\u000b\u0000��O\u0002��\u0003\u0000��\u0007@��\u0003\u0001�T�;�i\u0000�R�C\u0000��\u0016@���\u0000��\u0003\u001f��\u0003\u001f��\u0003\u0000���\u001f��\u000b\u0000�O\u0007\u0000��\u0003^��#\u0000��\u0003\u0013��\u0003\u001f�Z\u0007\u0000��\u0007@���^�)\u0000�R�\u0000��\u0003\u0013�#\u0000�R�\u0003\u001f�\ta\u00079U\u0007\u0000��\u0007@��\u0003_��\u0003\u0013�\"\u0000�R\u0003A\u0007�C\u0007\u0000��\u0003\u0000��\u0003\u0013�T\u0007\u0000��\u0007@�\u001f \u0003�\u0003�\u0000\u0010�\u0000��\u0007\u0000��\u0016@���_�\u001f\u0001\t�\u0001\u0001\u0000T�\u0003\u001f��\u0007@��\u0003\u0001��OB��\u000b@��{è�\u0003_�#\u0007\u0000��{���W\u0001��O\u0002��\u0003\u0000��\u0007@���\u0007�U�;�I\u0000�R�C\u0000��\u0016@��c\u0000��\u0003\u001f��\u0003\u001f��\u0003\u0000���\u001f��\u000b\u0000�\u0016\u0007\u0000���^��_\u0007��\u0003\u0013�#\u0000�R�\u0003\u001f�$\u0007\u0000��#\u0000��\u0003\u0013�)\u0007\u0000��\u0007@��c\u0000��_\u0007��\u0003\u001f��\u0007\u0000��;@�@\u0003���\u0003_��\u0003\u0000��\u0003\u0013��\u0003\u001f��\u0003\u001f��\u0003\u001f��\u0003\u001f�B\u0007\u0000��?@��\u0003@�\"\u0000�R�\u0007\u0000��c\u0000�,\u0007\u0000��\u0016@���_�\u001f\u0001\t��\u0002\u0000T�\u0003\u001f��\u0007@���\u0007��OB��WA��{è�\u0003_�\u0014\u0007\u0000��s@��\u0003\u0000��\u0003\b*\u0014\u0007\u0000��\u0003\u0000��\u0003\u0013��\u0003\u0014�\u0014\u0007\u0000��c\u0000�\u0016\u0007\u0000��\u0016@���_�\u001f\u0001\t�`��T�\u0006\u0000��{���\u000b\u0000��O\u0002��\u0003\u0000��\u0007@��\u0003\u0001�T�;�i\u0000�R�C\u0000��\u0016@���\u0000��\u0003\u001f��\u0003\u001f��\u0003\u0000���\u001f��\u000b\u0000��\u0006\u0000��\u0003^��#\u0000��\u0003\u0013��\u0003\u001f��\u0006\u0000��\u0007@���^�)\u0000�R�\u0000��\u0003\u0013�#\u0000�R�\u0003\u001f�\ta\u00079�\u0006\u0000��\u0007@��\u0003_��\u0003\u0013�\"\u0000�R\u0003A\u0007��\u0006\u0000��\u0003\u0000��\u0003\u0013��\u0006\u0000��\u0007@�\u001f \u0003գ�\u0000\u0010�\u0000�X\u0007\u0000��\u0016@���_�\u001f\u0001\t�\u0001\u0001\u0000T�\u0003\u001f��\u0007@��\u0003\u0001��OB��\u000b@��{è�\u0003_֠\u0006\u0000��{���W\u0001��O\u0002��\u0003\u0000��\u0007@���\u0007�U�;�I\u0000�R�C\u0000��\u0016@��c\u0000��\u0003\u001f��\u0003\u001f��\u0003\u0000���\u001f��\u000b\u0000��\u0006\u0000���^��_\u0007��\u0003\u0013�#\u0000�R�\u0003\u001f��\u0006\u0000��#\u0000��\u0003\u0013��\u0006\u0000��\u0007@��c\u0000��_\u0007��\u0003\u001f�-\u0007\u0000��;@�@\u0003���\u0003_��\u0003\u0000��\u0003\u0013��\u0003\u001f��\u0003\u001f��\u0003\u001f��\u0003\u001f��\u0006\u0000��?@��\u0003@�\"\u0000�R\u001b\u0007\u0000��c\u0000��\u0006\u0000��\u0016@���_�\u001f\u0001\t��\u0002\u0000T�\u0003\u001f��\u0007@���\u0007��OB��WA��{è�\u0003_֑\u0006\u0000��s@��\u0003\u0000��\u0003\b*�\u0006\u0000��\u0003\u0000��\u0003\u0013��\u0003\u0014��\u0006\u0000��c\u0000��\u0006\u0000��\u0016@���_�\u001f\u0001\t�`��TV\u0006\u0000��{���\u000b\u0000��O\u0002��\u0003\u0000��\u000b@��C\u0001�T�;Չ\u0000�R�c\u0000��\u0016@���\u0000��\u0003\u001f��\u0003\u001f��\u0003\u0000���\u001f��\u000f\u0000�I\u0006\u0000���]��C\u0000��\u0003\u0013��\u0003\u001f�T\u0006\u0000��\u000b@��\u0003^��\u0007@�)\u0000�RB�\u0000��\u0003\u0013�#\u0000�R�\u0003\u001f�\ta\u00079N\u0006\u0000���^��\u0000��\u0003\u0013�#\u0000�R�\u0003\u001f�H\u0006\u0000��\u0003_��3\u0000��\u0003\u0013�H\u0006\u0000��\u0003\u0000��\u0003\u0013�I\u0006\u0000��\u0003@��\u000b@��\u0007@��\u000f@�\u001f \u0003�e]\u0000\u0010B�\u0000��\u0000��\u0006\u0000��\u0016@���_�\u001f\u0001\t�\u0001\u0001\u0000T�\u0003\u001f��\u000b@��C\u0001��OB��\u000b@��{è�\u0003_�\u0014\u0006\u0000��{���W\u0001��O\u0002��\u0003\u0000��\u000b@��\u0003\b�U�;�i\u0000�R�c\u0000��\u0016@���\u0000��\u0003\u001f��\u0003\u001f��\u0003\u0000���\u001f��\u000f\u0000�\u0007\u0006\u0000��\u0003^��\u0007@��\u0003\u0013�B|\u0007�#\u0000�R�\u0003\u001f�\u0014\u0006\u0000���^��{\u0007��\u0003\u0013�#\u0000�R�\u0003\u001f�\u000e\u0006\u0000��\u0003_��S\u0000��\u0003\u0013�\u000e\u0006\u0000��#\u0000��\u0003\u0013�\u000f\u0006\u0000��\u0007@��\u0017@��\u0007@��\u0000�B|\u0007��{\u0007��\u0003\u001f��\u0006\u0000��?@�@\u0001��\u0010\u0006\u0000��{@��\u0003\u0000��\u0003\b*\u0010\u0006\u0000��\u0003\u0000��\u0003\u0013��\u0003\u0014�\u0010\u0006\u0000���\u0000�\u0012\u0006\u0000��\u0016@���_�\u001f\u0001\t�\u0001\u0001\u0000T�\u0003\u001f��\u000b@��\u0003\b��OB��WA��{è�\u0003_��\u0005\u0000��{���\u000b\u0000��O\u0002��\u0003\u0000��\u0007@��\u0003\u0001�T�;�i\u0000�R�C\u0000��\u0016@���\u0000��\u0003\u001f��\u0003\u001f��\u0003\u0000���\u001f��\u000b\u0000��\u0005\u0000��\u0003^��#\u0000��\u0003\u0013��\u0003\u001f��\u0005\u0000��\u0007@���^�)\u0000�R�\u0000��\u0003\u0013�#\u0000�R�\u0003\u001f�\ta\u00079�\u0005\u0000��\u0007@��\u0003_��\u0003\u0013�\"\u0000�R\u0003A\u0007��\u0005\u0000��\u0003\u0000��\u0003\u0013��\u0005\u0000��\u0007@�\u001f \u0003�C�\u0000\u0010�\u0000�U\u0006\u0000��\u0016@���_�\u001f\u0001\t�\u0001\u0001\u0000T�\u0003\u001f��\u0007@��\u0003\u0001��OB��\u000b@��{è�\u0003_֕\u0005\u0000��{���W\u0001��O\u0002��\u0003\u0000��\u0007@���\u0007�U�;�I\u0000�R�C\u0000��\u0016@��c\u0000��\u0003\u001f��\u0003\u001f��\u0003\u0000���\u001f��\u000b\u0000��\u0005\u0000���^��_\u0007��\u0003\u0013�#\u0000�R�\u0003\u001f��\u0005\u0000��#\u0000��\u0003\u0013��\u0005\u0000��\u0007@��c\u0000��_\u0007��\u0003\u001f�*\u0006\u0000��;@� \u0003���\u0003_��\u0003\u0000��\u0003\u0013��\u0003\u001f��\u0003\u001f��\u0003\u001f��\u0003\u001f��\u0005\u0000��?@��\u0003@�(\u0001\u0000��c\u0000��\u0005\u0000��\u0016@���_�\u001f\u0001\t��\u0002\u0000T�\u0003\u001f��\u0007@���\u0007��OB��WA��{è�\u0003_և\u0005\u0000��s@��\u0003\u0000��\u0003\b*�\u0005\u0000��\u0003\u0000��\u0003\u0013��\u0003\u0014��\u0005\u0000��c\u0000��\u0005\u0000��\u0016@���_�\u001f\u0001\t�`��TL\u0005\u0000��\u0003\u0002��{\u0006��O\u0007���\u0001�T�;Չ\u0000�R��\u0000��\u0016@���\u0000��\u0003\u001f��\u0003\u001f��\u0003\u0000���\u001f��\u001b\u0000�A\u0005\u0000���]��\u0000��\u0003\u0013��\u0003\u001f�L\u0005\u0000��\u0017@��\u0003^�)\u0000�R�\u0000��\u0003\u0013��\u0003\u001f��\u0003\u001f��\u0003\u001f��\u0003\u001f�\ta\u00079u\u0005\u0000���^��c\u0000��C\u0000��\u0003\u0013��\u0003\u001f��\u0003\u001f��\u0003\u001f�m\u0005\u0000��\u0017@��\u0003_��\u0003\u0013�\"\u0000�R\u0003A\u0007�+\u0005\u0000��#\u0000��\u0003\u0013�<\u0005\u0000��A�\u001f \u0003��|\u0000\u0010\b\u0001@�\t\u0001\u0000��@��\u0007B�\b�D�\"\u0001@�H\u0004\u0000��\u0005\u0000��\u0016@���_�\u001f\u0001\t��\u0000\u0000T�\u0003\u001f��OG��{F��\u0003\u0002��\u0003_�\u0007\u0005\u0000��{���o\u0001��g\u0002��_\u0003��W\u0004��O\u0005��\u0003\u0000���\b�Y�;�i\u0000�R�#\u0001�(\u0017@���\u0000��\u0003\u001f��\u0003\u001f��\u0003\u0000��\u0003\u001f��'\u0000��\u0004\u0000���]��\u0003\u0001��\u0003\u0013��\u0003\u001f��\u0003\u001f��\u0003\u001f��\u0003\u001f�4\u0005\u0000��\u0003^���\u0000���\u0000��\u0003\u0013��\u0003\u001f��\u0003\u001f��\u0003\u001f�,\u0005\u0000��\u0000��\u0003\u0013�\u0001\u0005\u0000��C��C\u0001��\u0003\u001f�\b\u0001@�\t\u0001\u0000��B��#@�\"\u0001@�\b�D�H\u0004\u0000��\u0005\u0000��W@�4\u0006��T\u0007\u0000��[@��\u0003\u001f��\u0003\u001f�������'������n(�h\u0003@��\u0000��\u0003\u0013�\u001c\u0001\u001a��\u0005\u0000���^��\u0013@��\u0003\u0013��\u0003\u0015*V\u0005\u0000��\u0003@��\u0005\u0000��\u0003\u0000��C\u0000��c\u0000��\u0003\u0013��\u0003\u0018��\u0004\u0000��\u000b@��\u0003@��\u0003\u0018�z\u0005\u0000��A��\u0003\u0013��\u0003\u0016��\u0004\u0000��\u000b@��#\u0000��\u0003\u0013��\u0004\u0000��\u0013@��\u0007@��\u0003\u0013��\u0003\u0017��\u0004\u0000��\u0006\u0000�ZC\u0000��\u0002\u0015�A��T\u000b\u0000\u0000\u0014�\u0003\u0014*�\u0004\u0000��@��\u0003\u0000��\u0003\b*�\u0004\u0000��\u0003\u0000��\u0003\u0013��\u0003\u0014��\u0004\u0000��C\u0001��\u0004\u0000�(\u0017@��\u0003_�\u001f\u0001\t�A\u0001\u0000T�\u0003\u001f���\b��OE��WD��_C��gB��oA��{ƨ�\u0003_֊\u0004\u0000���\u0001��{\u0004��O\u0005��\u0003\u0001�T�;�I\u0000�R�\u0000��\u0016@��c\u0000��\u0003\u001f��\u0003\u001f��\u0003\u0000���\u001f��\u0013\u0000�\u0004\u0000���^��c\u0000��\u0003\u0013��\u0003\u001f��\u0004\u0000��\u000f@��\u0003_�)\u0000�R�C\u0000��\u0003\u0013��\u0003\u001f��\u0003\u001f��\u0003\u001f��\u0003\u001f�\ta\u00079�\u0004\u0000��#\u0000��\u0003\u0013��\u0004\u0000��@�\u001f \u0003գ%\u0000\u0010�\u000f@�\u0002\u0001@�*\u0005\u0000��\u0016@���_�\u001f\u0001\t��\u0000\u0000T�\u0003\u001f��OE��{D���\u0001��\u0003_�X\u0004\u0000��{���W\u0001��O\u0002��\u0003\u0000���\u0007�U�;�)\u0000�R�C\u0000��\u0016@��C\u0000��\u0003\u001f��\u0003\u001f��\u0003\u0000���\u001f��\u000b\u0000�L\u0004\u0000��\u0003_��#\u0000��\u0003\u0013��\u0003\u001f��\u0003\u001f��\u0003\u001f��\u0003\u001f��\u0004\u0000��\u0003\u0000��\u0003\u0013�]\u0004\u0000��#@��c\u0000��\u0003\u001f�\u0002\u0001@�\u0000\u0005\u0000��;@�@\u0001��a\u0004\u0000��s@��\u0003\u0000��\u0003\b*a\u0004\u0000��\u0003\u0000��\u0003\u0013��\u0003\u0014�a\u0004\u0000��c\u0000�c\u0004\u0000��\u0016@���_�\u001f\u0001\t��\u0000\u0000T�\u0003\u001f���\u0007��OB��WA��{è�\u0003_� \u0004\u0000��{���\u000b\u0000��W\u0002��O\u0003��\u0003\u0000��\u0007@���\u0001�V�;թ\u0000�R�\u0000��\u0016@���\u0000��\u0003\u001f��\u0003\u001f��\u0003\u0000���\u001f��\u0013\u0000�\u0012\u0004\u0000��\u0003]��\u0000��\u0003\u0013�#\u0000�R�\u0003\u001f� \u0004\u0000���]��s\u0000��\u0003\u0013��\u0004\u0000��#\u0000��C\u0000��\u0003\u0013�\u0001\u0017�R\u0007\u0004\u0000��\u0003\u0000��\u0003\u0013�\u001c\u0004\u0000��\u0007@��\u0004\u0000��\u0004�7�s@9�\u0007@�\u001f \u0003�ag\u0000\u0010�\u0000�\u0003u\u001eS�\u0004\u0000��\u0003�7�\u0007@�\u001f \u0003�!r\u0000\u0010�\u0003\u0013�C�\u0002�SD\u0000�_�\u00029�\u0003\u0000��\u0007@��\u0003^��\u0003\u0013�\"\u0000�R\u0003A\u0002��\u0003\u0000��\u0007@���^��\u0003\u0013�\"\u0000�R\u0003a\u0002��\u0003\u0000��\u0007@��\u0003_��\u0003\u0013�\"\u0000�R\u0003�\u0002��\u0003\u0000��\u000b@�\u000b\u0000\u0000\u0014�\u0003\u0000*�\u0003\u0000��\u0003\u0000��\u0003\u0014*\u0000\u0004\u0000��\u0003\u0000��\u0003\u0013��\u0003\u0015�\u0000\u0004\u0000��\u0003\u001f��\u0016@���_�\u001f\u0001\t�\u0001\u0001\u0000T�\u0007@���\u0001��OC��\u000b@��WB��{Ĩ�\u0003_ֿ\u0003\u0000��\u0003\u0001��{\u0002��O\u0003���\u0000�T�;�)\u0000�R�#\u0000��\u0016@��C\u0000��\u0003\u001f��\u0003\u001f��\u0003\u0000���\u001f��\u0007\u0000��\u0003\u0000��\u000b@��\u0003\u0000��\u0003\u0013��\u0003\u001f��\u0003\u0000��\u0003@��\u0004\u0000��\u0003@�\u001f \u0003��i\u0000\u0010�\u0004\u0000��\u0016@���_�\u001f\u0001\t��\u0000\u0000T�\u0003\u001f��OC��{B��\u0003\u0001��\u0003_֛\u0003\u0000��\u0003\u0001��{\u0002��O\u0003���\u0000�T�;�)\u0000�R�#\u0000��\u0016@��C\u0000��\u0003\u001f��\u0003\u001f��\u0003\u0000���\u001f��\u0007\u0000��\u0003\u0000��\u000b@��\u0003\u0000��\u0003\u0013��\u0003\u001f��\u0003\u0000��\u0003@�e\u0004\u0000��\u0016@���_�\u001f\u0001\t��\u0000\u0000T�\u0003\u001f��OC��{B��\u0003\u0001��\u0003_�{\u0003\u0000��\u0003\u0001��{\u0002��O\u0003���\u0000�T�;�)\u0000�R�#\u0000��\u0016@��C\u0000��\u0003\u001f��\u0003\u001f��\u0003\u0000���\u001f��\u0007\u0000�p\u0003\u0000��\u000b@��\u0003\u0000��\u0003\u0013��\u0003\u001f�{\u0003\u0000��\u0003@�I\u0004\u0000��\u0016@���_�\u001f\u0001\t��\u0000\u0000T�\u0003\u001f��OC��{B��\u0003\u0001��\u0003_�[\u0003\u0000��{���\u000b\u0000��O\u0002��\u0003\u0000�(`G9�\u0003\u0001�)\u0000�R)d\u00079�\u0000\u00004�\u0003\u0013��OB��\u000b@��{è5\u0004\u0000\u0014u�@�t�@��\u0003\u0013��\u0003\u0000�a�@��\u0000\u0000��\u0003\u0015�1\u0004\u0000��\u0000�a�@��\u0003\u0015�-\u0004\u0000�a�@��\u0003\u0015�*\u0004\u0000��\u0003\u0014��OB��\u000b@��{è)\u0004\u0000\u0014��\u0001��{\u0004��W\u0005��O\u0006��\u0003\u0001�V�;��\u0003\u0000��\u0016@���\u001f�\bdG9\u0014�@�\u001f`\u00079(\u0003\u00004u�@��\u0003\u0013�a\u0003\u0000�a�@��\u0000\u0000��\u0003\u0014�\u0011\u0004\u0000��\u0000�a�@��\u0003\u0014�\r\u0004\u0000�a�@��\u0003\u0014�\n\u0004\u0000��\u0016@���_�\u001f\u0001\t��\b\u0000T�\u0003\u0015��OF��WE��{D���\u0001�\u0004\u0004\u0000\u0014�\u0000��\u0003\u0014�\u0005\u0004\u0000�a�@��c\u0000��\u0003\u0014�\u0005\u0004\u0000�a�@��C\u0000��\u0003\u0014�\u0001\u0004\u0000�`.@��\u0000���c\u0000��\u0003\u0014�\u0000\u0004\u0000�\u0012\u0000\u0000\u0014.\u0003\u0000��\u0003\u0000��#\u0000��\u0003\u0014�\u0002\u0000���\u0003\u0000�`Z@�+\u0003\u0000��\u0003\u0000��\u0003\u0000��\u0003\u0014�\u0002\u0000���\u0003\u0000��\u0007@��c\u0000��\u0003\u0014��\u0003\u0000�aZ@��c\u0000��\u0003\u0014�\u0002!\u0000�\u0015\u0003\u0000��\u0003\u0013�#\u0003\u0000�a�@��\u0000\u0000��\u0003\u0014��\u0003\u0000��\u0000��\u0007A��c\u0000�`�@�C\u0000�R�\u0003\u001f��\u0003\u0000�`�@��\u0013@��\u0003\u0000��\u0016@���_�\u001f\u0001\t��\u0000\u0000T�OF��WE��{D���\u0001��\u0003_��\u0002\u0000���\u0001��#\u0002m�{\u0003��W\u0004��O\u0005���\u0000�V�;��\u0003\u0000��\u0016@��\u000f\u0000�\bdG9\u0014�@�H\u0003\u00004u�@��\u0003\u0013��\u0002\u0000�a�@��\u0000\u0000��\u0003\u0014��\u0003\u0000��\u0000�a�@��\u0003\u0014��\u0003\u0000�a�@��\u0003\u0014��\u0003\u0000��\u0016@��\u000f@�\u001f\u0001\t�A\u0015\u0000T�\u0003\u0015��OE��WD��{C��#Bm��\u0001��\u0003\u0000\u0014h.@��\u0012\u0000��C\u0000��\u0003\u0014��\u0003\u0000�a�@��#\u0000��\u0003\u0014��\u0003\u0000�a:@��\u0003\u0000��\u0003\u0014�0\u0003\u0000��\u0007@��\u0003\u0014��\u0003\u001f*0\u0003\u0000�a>@��\u0003\u0000��\u0003\u0014�(\u0003\u0000��\u0007@��\u0003\u0014�\"\u0000�R(\u0003\u0000�aB@��\u0003\u0000��\u0003\u0014� \u0003\u0000��\u0007@��\u0003\u0014�B\u0000�R \u0003\u0000�aF@��\u0003\u0000��\u0003\u0014�\u0018\u0003\u0000��\u0007@��\u0003\u0014�b\u0000�R\u0018\u0003\u0000�aJ@��\u0003\u0000��\u0003\u0014�\u0010\u0003\u0000��\u0007@��\u0003\u0014��\u0000�R\u0010\u0003\u0000�aN@��\u0003\u0000��\u0003\u0014�\b\u0003\u0000��\u0007@��\u0003\u0014��\u0000�R\b\u0003\u0000�aZ@��\u0003\u0000��\u0003\u0014�\u0000\u0003\u0000��\u0007@��\u0003\u0014��\u0000�R\u0000\u0003\u0000�aR@��\u0003\u0000��\u0003\u0014��\u0002\u0000��\u0007@��\u0003\u0014��\u0000�R�\u0002\u0000�aV@��\u0003\u0000��\u0003\u0014��\u0002\u0000��\u0007@��\u0003\u0014�\u0002\u0001�R�\u0002\u0000�a^@��\u0003\u0000��\u0003\u0014��\u0002\u0000��\u0007@��\u0003\u0014�\"\u0001�R�\u0002\u0000�a\u0002Mm\b����%���\u0003\u0000��\u0003\u0014�\b\u0001g�\b\u0000��\u0000�a^!�a^�\u0011��\t\u0001g�\u0000\u0018h\u001e \u0000I\u001f\u0001\u0000x��\u0002\u0000��\u0007@��\u0003\u0014�B\u0001�R�\u0002\u0000�a\u0002Nm�\u0003\u0000��\u0003\u0014�\u0000�a^!�a^\u0000\u0018h\u001e \u0000I\u001f\u0001\u0000x��\u0002\u0000��\u0007@��\u0003\u0014�b\u0001�R�\u0002\u0000�a\u0002Om�\u0003\u0000��\u0003\u0014�\u0000�a^!�a^\u0000\u0018h\u001e \u0000I\u001f\u0001\u0000x��\u0002\u0000��\u0007@��\u0003\u0014��\u0001�R�\u0002\u0000�a\u0002Pm�\u0003\u0000��\u0003\u0014�\u0000�a^!�a^\u0000\u0018h\u001e \u0000I\u001f\u0001\u0000x��\u0002\u0000��\u0007@��\u0003\u0014��\u0001�R�\u0002\u0000�`�@��\u000b@�#\u0003\u0000��\u0003\u0013������\u0016@��\u000f@�\u001f\u0001\t��\u0000\u0000T�OE��WD��{C��#Bm��\u0001��\u0003_�\n\u0002\u0000��C\u0001��{\u0002��W\u0003��O\u0004���\u0000�V�;��\u0003\u0000��\u0016@���\u001f�\bdG9\u0014�@�(\u0003\u00004u�@��\u0003\u0013�3\u0002\u0000�a�@��\u0000\u0000��\u0003\u0014��\u0002\u0000��\u0000�a�@��\u0003\u0014��\u0002\u0000�a�@��\u0003\u0014��\u0002\u0000��\u0016@���_�\u001f\u0001\t�A\u0005\u0000T�\u0003\u0015��OD��WC��{B��C\u0001��\u0002\u0000\u0014h.@��\u0002\u0000��C\u0000��\u0003\u0014��\u0002\u0000�a�@��#\u0000��\u0003\u0014��\u0002\u0000��\u0007@��\u0003\u0000��\u0003\u0014��\u0003\u001f��\u0003\u001f��\u0003\u001f��\u0003\u001f�\u001d\u0002\u0000�a2@��\u0003@�\"\u0000�Ry\u0002\u0000�`�@��\u000b@��\u0002\u0000��\u0003\u0013������\u0016@���_�\u001f\u0001\t��\u0000\u0000T�OD��WC��{B��C\u0001��\u0003_��\u0001\u0000��C\u0001��{\u0002��W\u0003��O\u0004���\u0000�V�;��\u0003\u0000��\u0016@���\u001f�\bdG9\u0014�@�(\u0003\u00004u�@��\u0003\u0013��\u0001\u0000�a�@��\u0000\u0000��\u0003\u0014��\u0002\u0000��\u0000�a�@��\u0003\u0014��\u0002\u0000�a�@��\u0003\u0014��\u0002\u0000��\u0016@���_�\u001f\u0001\t�A\u0005\u0000T�\u0003\u0015��OD��WC��{B��C\u0001��\u0002\u0000\u0014h.@��\u0002\u0000��C\u0000��\u0003\u0014��\u0002\u0000�a�@��#\u0000��\u0003\u0014��\u0002\u0000��\u0007@��\u0003\u0000��\u0003\u0014��\u0003\u001f��\u0003\u001f��\u0003\u001f��\u0003\u001f��\u0001\u0000�a2@��\u0003@�\"\u0000�R1\u0002\u0000�`�@��\u000b@��\u0002\u0000��\u0003\u0013�L����\u0016@���_�\u001f\u0001\t��\u0000\u0000T�OD��WC��{B��C\u0001��\u0003_�z\u0001\u0000��C\u0001��{\u0002��W\u0003��O\u0004���\u0000�V�;��\u0003\u0000��\u0016@���\u001f�\bdG9\u0014�@�(\u0003\u00004u�@��\u0003\u0013��\u0001\u0000�a�@��\u0000\u0000��\u0003\u0014�S\u0002\u0000��\u0000�a�@��\u0003\u0014�O\u0002\u0000�a�@��\u0003\u0014�L\u0002\u0000��\u0016@���_�\u001f\u0001\t�!\u0005\u0000T�\u0003\u0015��OD��WC��{B��C\u0001�F\u0002\u0000\u0014h.@��\u0002\u0000��C\u0000��\u0003\u0014�E\u0002\u0000�a�@��#\u0000��\u0003\u0014�E\u0002\u0000��\u0007@��\u0003\u0000��\u0003\u0014��\u0003\u001f��\u0003\u001f��\u0003\u001f��\u0003\u001f��\u0001\u0000�h2@��\u0003@�`�@�(\u0001\u0000��\u000b@�K\u0002\u0000��\u0003\u0013�\u0005����\u0016@���_�\u001f\u0001\t��\u0000\u0000T�OD��WC��{B��C\u0001��\u0003_�3\u0001\u0000���\u0002��{\u0004��o\u0005��g\u0006��_\u0007��W\b��O\t��\u0003\u0001�V�;��\u0003\u0000��\u0016@���\u001f�\bdG9\u0014�@��\u0003\u00004u�@��\u0003\u0013�Y\u0001\u0000�a�@��\u0000\u0000��\u0003\u0014�\t\u0002\u0000��\u0000�a�@��\u0003\u0014�\u0005\u0002\u0000�a�@��\u0003\u0014�\u0002\u0002\u0000��\u0016@���_�\u001f\u0001\t��\n\u0000T�\u0003\u0015��OI��WH��_G��gF��oE��{D���\u0002��\u0001\u0000\u0014h.@�\u001f\u0005\u0000�\u0007\u0000T�C\u0000��\u0003\u0014��\u0003\u0000��\u0001\u0000�a�@��c\u0000��\u0003\u0014��\u0001\u0000�z.@��\u0005\u0000�|2@��\u0003\u001f��\u0003\u001f�������'������n(��\u0003@��\u0000��\u0003\u0014�\u0019\u0001\u001b��\u0001\u0000���^��\u0013@��\u0003\u0014��\u0003\u0015*\u0001\u0000� \u0003@��\u0001\u0000��\u0003\u0000��C\u0000��c\u0000��\u0003\u0014��\u0003\u0018��\u0000\u0000��\u000b@�!\u0003@��\u0003\u0018��\u0001\u0000��A��\u0003\u0014��\u0003\u0016��\u0000\u0000�!\u000b@��#\u0000��\u0003\u0014��\u0000\u0000��\u0013@��\u0007@��\u0003\u0014��\u0003\u0017��\u0000\u0000��\u0006\u0000�{C\u0000�_\u0003\u0015�A��T`�@��\u0003_��\u0001\u0000��\u0003@��\u0003\u0013������\u0016@���_�\u001f\u0001\t�!\u0001\u0000T�OI��WH��_G��gF��oE��{D���\u0002��\u0003_ֻ\u0000\u0000��C\u0002��{\u0005��_\u0006��W\u0007��O\b��C\u0001�X�;��\u0003\u0000��\u0003\u0001�\b\u0017@��\u0000��\u0003\u0003*�\u0003\u0002*��\u001f�\u0013D@��\u0003\u0013��\u0001\u0000��J@��\u0000��\u0003\u0013��\u0001\u0000��N@��c\u0000��\u0003\u0013��\u0001\u0000��\u0002�7��\u0000��\u0003\u0013���\u0000љ\u0001\u0000��\"\u0000��\u0003\u0013��\u0003\u0016*�\u0000\u0000��\u0003\u0014�W\u0001\u0000��\u0003\u0000��C\u0000��B\u0000��\u0003\u0013��\u0003\u0015��\u0000\u0000��\u000b@��\u0003\u0014��\u0003\u0015�Q\u0001\u0000�\u001b\u0000\u0000\u0014�\u0003\u0015*�\u0000\u0000��\u0003\u0000��C\u0000��\u0003\u0013�\u0002\u0000���\u0001\u0000��\u0003\u0015*�\u0000\u0000��\u0003\u0000��#\u0000��\u0003\u0013�\u0002\u0000��~\u0001\u0000��@���\u0000��\u0003\u0013���\u0000�}\u0001\u0000��\"\u0000��\u0003\u0013��\u0003\u001f*�\u0000\u0000��B\u0000��\u0003\u0013�n\u0001\u0000��A���\u0000��\u0003\u0013�c\u0000�R�\u0003\u001f�t\u0001\u0000��\u0017@��\u0003\u0013�u\u0001\u0000�\b\u0017@���_�\u001f\u0001\t��\u0000\u0000T�OH��WG��_F��{E��C\u0002��\u0003_�^\u0000\u0000��\u0003\u0001�\u001f \u0003Ձ\u0000\u0000\u0010(\u0000�R\b�\u000294\u0001\u0000\u0014�C\u0001��{\u0002��\u001b\u0000��O\u0004���\u0000�U�;��\u0003\u0000��\u0016@���\u001f�\b�B9\u0014D@��\u0002\u00005�C\u0000��\u0003\u0014�=\u0001\u0000�aJ@��#\u0000��\u0003\u0014�=\u0001\u0000�aR@��\u0003\u0000��\u0003\u0014�9\u0001\u0000��\u0007@��\u0003\u0014��\u0003\u001f��\u0003\u001f��\u0003\u001f�C\u0001\u0000��\u000b@��\u0003\u0014�D\u0001\u0000�`V@�&\u0001\u0000�aN@��\u0003\u0014�\u001f\u0001\u0000�aR@��\u0003\u0014�\u001c\u0001\u0000�aJ@��\u0003\u0014�\u0019\u0001\u0000��\u0016@���_�\u001f\u0001\t��\u0000\u0000T�OD��\u001b@��{B��C\u0001��\u0003_�#\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�{��\u0010\u0000\u0000�\u0011�D�\u0010�'� \u0002\u001f�\u001f \u0003�\u001f \u0003�\u001f \u0003�\u0010\u0000\u0000�\u0011�D�\u0010�'� \u0002\u001f�\u0010\u0000\u0000�\u0011�D�\u0010�'� \u0002\u001f�\u0010\u0000\u0000�\u0011\u0002E�\u0010\u0002(� \u0002\u001f�\u0010\u0000\u0000�\u0011\u0006E�\u0010\"(� \u0002\u001f�\u0010\u0000\u0000�\u0011\nE�\u0010B(� \u0002\u001f�\u0010\u0000\u0000�\u0011\u000eE�\u0010b(� \u0002\u001f�\u0010\u0000\u0000�\u0011\u0012E�\u0010�(� \u0002\u001f�\u0010\u0000\u0000�\u0011\u0016E�\u0010�(� \u0002\u001f�\u0010\u0000\u0000�\u0011\u001aE�\u0010�(� \u0002\u001f�\u0010\u0000\u0000�\u0011\u001eE�\u0010�(� \u0002\u001f�\u0010\u0000\u0000�\u0011\"E�\u0010\u0002)� \u0002\u001f�\u0010\u0000\u0000�\u0011&E�\u0010\")� \u0002\u001f�\u0010\u0000\u0000�\u0011*E�\u0010B)� \u0002\u001f�\u0010\u0000\u0000�\u0011.E�\u0010b)� \u0002\u001f�\u0010\u0000\u0000�\u00112E�\u0010�)� \u0002\u001f�\u0010\u0000\u0000�\u00116E�\u0010�)� \u0002\u001f�\u0010\u0000\u0000�\u0011:E�\u0010�)� \u0002\u001f�\u0010\u0000\u0000�\u0011>E�\u0010�)� \u0002\u001f�\u0010\u0000\u0000�\u0011BE�\u0010\u0002*� \u0002\u001f�\u0010\u0000\u0000�\u0011FE�\u0010\"*� \u0002\u001f�\u0010\u0000\u0000�\u0011JE�\u0010B*� \u0002\u001f�\u0010\u0000\u0000�\u0011NE�\u0010b*� \u0002\u001f�\u0010\u0000\u0000�\u0011RE�\u0010�*� \u0002\u001f�\u0010\u0000\u0000�\u0011VE�\u0010�*� \u0002\u001f�\u0010\u0000\u0000�\u0011ZE�\u0010�*� \u0002\u001f�\u0010\u0000\u0000�\u0011^E�\u0010�*� \u0002\u001f�\u0010\u0000\u0000�\u0011bE�\u0010\u0002+� \u0002\u001f�\u0010\u0000\u0000�\u0011fE�\u0010\"+� \u0002\u001f�\u0010\u0000\u0000�\u0011jE�\u0010B+� \u0002\u001f�\u0010\u0000\u0000�\u0011nE�\u0010b+� \u0002\u001f�\u0010\u0000\u0000�\u0011rE�\u0010�+� \u0002\u001f�\u0010\u0000\u0000�\u0011vE�\u0010�+� \u0002\u001f�\u0010\u0000\u0000�\u0011zE�\u0010�+� \u0002\u001f�\u0010\u0000\u0000�\u0011~E�\u0010�+� \u0002\u001f�\u0010\u0000\u0000�\u0011�E�\u0010\u0002,� \u0002\u001f�\u0010\u0000\u0000�\u0011�E�\u0010\",� \u0002\u001f�\u0010\u0000\u0000�\u0011�E�\u0010B,� \u0002\u001f�\u0010\u0000\u0000�\u0011�E�\u0010b,� \u0002\u001f�\u0010\u0000\u0000�\u0011�E�\u0010�,� \u0002\u001f�\u0010\u0000\u0000�\u0011�E�\u0010�,� \u0002\u001f�\u0010\u0000\u0000�\u0011�E�\u0010�,� \u0002\u001f�\u0010\u0000\u0000�\u0011�E�\u0010�,� \u0002\u001f�\u0010\u0000\u0000�\u0011�E�\u0010\u0002-� \u0002\u001f�\u0010\u0000\u0000�\u0011�E�\u0010\"-� \u0002\u001f�\u0010\u0000\u0000�\u0011�E�\u0010B-� \u0002\u001f�\u0010\u0000\u0000�\u0011�E�\u0010b-� \u0002\u001f�\u0010\u0000\u0000�\u0011�E�\u0010�-� \u0002\u001f�\u0010\u0000\u0000�\u0011�E�\u0010�-� \u0002\u001f�\u0010\u0000\u0000�\u0011�E�\u0010�-� \u0002\u001f�\u0010\u0000\u0000�\u0011�E�\u0010�-� \u0002\u001f�\u0010\u0000\u0000�\u0011�E�\u0010\u0002.� \u0002\u001f�\u0010\u0000\u0000�\u0011�E�\u0010\".� \u0002\u001f�\u0010\u0000\u0000�\u0011�E�\u0010B.� \u0002\u001f�\u0010\u0000\u0000�\u0011�E�\u0010b.� \u0002\u001f�\u0010\u0000\u0000�\u0011�E�\u0010�.� \u0002\u001f�\u0010\u0000\u0000�\u0011�E�\u0010�.� \u0002\u001f�\u0010\u0000\u0000�\u0011�E�\u0010�.� \u0002\u001f�\u0010\u0000\u0000�\u0011�E�\u0010�.� \u0002\u001f�\u0010\u0000\u0000�\u0011�E�\u0010\u0002/� \u0002\u001f�\u0010\u0000\u0000�\u0011�E�\u0010\"/� \u0002\u001f�\u0010\u0000\u0000�\u0011�E�\u0010B/� \u0002\u001f�\u0010\u0000\u0000�\u0011�E�\u0010b/� \u0002\u001f�\u0010\u0000\u0000�\u0011�E�\u0010�/� \u0002\u001f�\u0010\u0000\u0000�\u0011�E�\u0010�/� \u0002\u001f�\u0010\u0000\u0000�\u0011�E�\u0010�/� \u0002\u001f�\u0010\u0000\u0000�\u0011�E�\u0010�/� \u0002\u001f�\u0010\u0000\u0000�\u0011\u0002F�\u0010\u00020� \u0002\u001f�\u0010\u0000\u0000�\u0011\u0006F�\u0010\"0� \u0002\u001f�\u0010\u0000\u0000�\u0011\nF�\u0010B0� \u0002\u001f�\u0010\u0000\u0000�\u0011\u000eF�\u0010b0� \u0002\u001f�\u0010\u0000\u0000�\u0011\u0012F�\u0010�0� \u0002\u001f�\u0010\u0000\u0000�\u0011\u0016F�\u0010�0� \u0002\u001f�\u0010\u0000\u0000�\u0011\u001aF�\u0010�0� \u0002\u001f�\u0010\u0000\u0000�\u0011\u001eF�\u0010�0� \u0002\u001f�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u000e\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u001e\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000���o\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0007\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u000f\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000H\u0000\u0000\u0000\u0000\u0000\u0000\u0000\t\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000���o\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0017\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0018\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000ة\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0007\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\n\u0000\u0000\u0000\u0000\u0000\u0000\n\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0004\u0000\u0000\u0000\u0000\u0000\u0000���o\u0000\u0000\u0000\u0000�\n\u0000\u0000\u0000\u0000\u0000\u0000\u001a\u0000\u0000\u0000\u0000\u0000\u0000\u00008�\u0000\u0000\u0000\u0000\u0000\u0000\u001c\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000���o\u0000\u0000\u0000\u0000\u0018\n\u0000\u0000\u0000\u0000\u0000\u0000���o\u0000\u0000\u0000\u0000�\n\u0000\u0000\u0000\u0000\u0000\u0000���o\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000\u0000Linker: LLD 18.0.3\u0000Android (12470979, +pgo, +bolt, +lto, +mlgo, based on r522817c) clang version 18.0.3 (https://android.googlesource.com/toolchain/llvm-project d8003a456d14a3deb8054cdaa529ffbf02d9b262)\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0004\u0000��\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000f\u0000\u0000\u0000\u0002\u0000\r\u0000\u0000;\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001c\u0000\u0000\u0000\u0000\u0000\r\u0000\u0000;\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000!\u0000\u0000\u0000\u0002\u0000\r\u0000\u0018;\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u00003\u0000\u0000\u0000\u0000\u0000\u000f\u00000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00008\u0000\u0000\u0000\u0000\u0000\u0010\u00008�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000=\u0000\u0000\u0000\u0000\u0000\u0010\u0000@�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000B\u0000\u0000\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000G\u0000\u0000\u0000\u0000\u0000\f\u0000�\u001c\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000L\u0000\u0000\u0000\u0001\u0000\u0001\u00008\u0002\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000_\u0000\u0000\u0000\u0000\u0000\u0001\u00008\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0000\u0000\u0000\u0000\u0000\u0001\u0000L\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000n\u0000\u0000\u0000\u0000\u0000\u0001\u0000D\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000x\u0000\u0000\u0000\u0000\u0000\u0001\u0000�\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0001\u0000P\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0001\u0000�\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0006\u0000\u0000\u0001\u0002\u000f\u00000�\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0006\u0000\u0000\u0002\u0002\r\u0000\u0010;\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0006\u0000\u0000\u0002\u0002\r\u0000 ;\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0006\u0000\u0000\u0002\u0002\r\u00004;\u0000\u0000\u0000\u0000\u0000\u0000\u001c\u0000\u0000\u0000\u0000\u0000\u0000\u0000\t\u0007\u0000\u0000\u0002\u0002\r\u0000P;\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0004\u0000��\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\r\u0000`;\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0002\u0000\r\u0000pN\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0002\u0000\r\u00008O\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0002\u0000\r\u0000,P\u0000\u0000\u0000\u0000\u0000\u0000\u001c\u0001\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0002\u0000\r\u0000HQ\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0002\u0000\r\u0000\u0000R\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0002\u0000\r\u0000�R\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\t\u0001\u0000\u0000\u0002\u0000\r\u0000�S\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001d\u0001\u0000\u0000\u0002\u0000\r\u0000�T\u0000\u0000\u0000\u0000\u0000\u0000\\\u0001\u0000\u0000\u0000\u0000\u0000\u0000*\u0001\u0000\u0000\u0002\u0000\r\u0000\u0004V\u0000\u0000\u0000\u0000\u0000\u0000T\u0001\u0000\u0000\u0000\u0000\u0000\u0000<\u0001\u0000\u0000\u0002\u0000\r\u0000XW\u0000\u0000\u0000\u0000\u0000\u0000x\u0001\u0000\u0000\u0000\u0000\u0000\u0000J\u0001\u0000\u0000\u0002\u0000\r\u0000�X\u0000\u0000\u0000\u0000\u0000\u0000\\\u0001\u0000\u0000\u0000\u0000\u0000\u0000X\u0001\u0000\u0000\u0002\u0000\r\u0000,Z\u0000\u0000\u0000\u0000\u0000\u0000T\u0001\u0000\u0000\u0000\u0000\u0000\u0000k\u0001\u0000\u0000\u0002\u0000\r\u0000�[\u0000\u0000\u0000\u0000\u0000\u0000x\u0001\u0000\u0000\u0000\u0000\u0000\u0000z\u0001\u0000\u0000\u0002\u0000\r\u0000�\\\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0001\u0000\u0000\u0002\u0000\r\u0000�]\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0001\u0000\u0000\u0002\u0000\r\u0000�^\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0001\u0000\u0000\u0002\u0000\r\u0000�_\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0001\u0000\u0000\u0002\u0000\r\u0000``\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0001\u0000\u0000\u0002\u0000\r\u0000@a\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0001\u0000\u0000\u0002\u0000\r\u00000b\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0001\u0000\u0000\u0000\u0000\u0000\u0000�\u0001\u0000\u0000\u0002\u0000\r\u00004c\u0000\u0000\u0000\u0000\u0000\u0000\b\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0002\u0000\u0000\u0002\u0000\r\u0000<d\u0000\u0000\u0000\u0000\u0000\u0000\u0018\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u001a\u0002\u0000\u0000\u0002\u0000\r\u0000Te\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000(\u0002\u0000\u0000\u0002\u0000\r\u00008f\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000;\u0002\u0000\u0000\u0002\u0000\r\u0000,g\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000I\u0002\u0000\u0000\u0002\u0000\r\u0000�g\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\\\u0002\u0000\u0000\u0002\u0000\r\u0000�h\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000i\u0002\u0000\u0000\u0002\u0000\r\u0000�i\u0000\u0000\u0000\u0000\u0000\u0000(\u0003\u0000\u0000\u0000\u0000\u0000\u0000{\u0002\u0000\u0000\u0002\u0000\r\u0000�l\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0002\u0000\u0000\u0002\u0000\r\u0000�m\u0000\u0000\u0000\u0000\u0000\u0000(\u0003\u0000\u0000\u0000\u0000\u0000\u0000�\u0002\u0000\u0000\u0002\u0000\r\u0000�p\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0002\u0000\u0000\u0002\u0000\r\u0000�q\u0000\u0000\u0000\u0000\u0000\u0000\u0018\u0003\u0000\u0000\u0000\u0000\u0000\u0000�\u0002\u0000\u0000\u0002\u0000\r\u0000�t\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0002\u0000\u0000\u0002\u0000\r\u0000�u\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0002\u0000\u0000\u0002\u0000\r\u0000�v\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0002\u0000\u0000\u0002\u0000\r\u0000hw\u0000\u0000\u0000\u0000\u0000\u0000(\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0007\u0003\u0000\u0000\u0002\u0000\r\u0000�x\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0018\u0003\u0000\u0000\u0002\u0000\r\u0000ty\u0000\u0000\u0000\u0000\u0000\u0000(\u0001\u0000\u0000\u0000\u0000\u0000\u0000.\u0003\u0000\u0000\u0002\u0000\r\u0000�z\u0000\u0000\u0000\u0000\u0000\u0000\b\u0001\u0000\u0000\u0000\u0000\u0000\u0000>\u0003\u0000\u0000\u0002\u0000\r\u0000�{\u0000\u0000\u0000\u0000\u0000\u0000\u0018\u0001\u0000\u0000\u0000\u0000\u0000\u0000S\u0003\u0000\u0000\u0002\u0000\r\u0000�|\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000c\u0003\u0000\u0000\u0002\u0000\r\u0000�}\u0000\u0000\u0000\u0000\u0000\u0000$\u0001\u0000\u0000\u0000\u0000\u0000\u0000x\u0003\u0000\u0000\u0002\u0000\r\u0000�~\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0001\u0000\u0000\u0000\u0000\u0000\u0000�\u0003\u0000\u0000\u0002\u0000\r\u0000�\u0000\u0000\u0000\u0000\u0000\u0000�\u0001\u0000\u0000\u0000\u0000\u0000\u0000�\u0003\u0000\u0000\u0002\u0000\r\u0000́\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0003\u0000\u0000\u0002\u0000\r\u0000��\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0003\u0000\u0000\u0002\u0000\r\u0000t�\u0000\u0000\u0000\u0000\u0000\u0000�\u0001\u0000\u0000\u0000\u0000\u0000\u0000�\u0003\u0000\u0000\u0002\u0000\r\u0000��\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0003\u0000\u0000\u0002\u0000\r\u0000��\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0004\u0000\u0000\u0002\u0000\r\u0000\b�\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0019\u0004\u0000\u0000\u0000\u0000\r\u0000pN\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001e\u0004\u0000\u0000\u0002\u0000\r\u0000��\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u00003\u0004\u0000\u0000\u0000\u0000\r\u00008O\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00008\u0004\u0000\u0000\u0002\u0000\r\u0000\u0010�\u0000\u0000\u0000\u0000\u0000\u0000�\u0001\u0000\u0000\u0000\u0000\u0000\u0000M\u0004\u0000\u0000\u0000\u0000\r\u0000,P\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000R\u0004\u0000\u0000\u0000\u0000\r\u0000HQ\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000W\u0004\u0000\u0000\u0000\u0000\r\u0000\u0000R\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\\\u0004\u0000\u0000\u0000\u0000\r\u0000�R\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000a\u0004\u0000\u0000\u0000\u0000\r\u0000�S\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000f\u0004\u0000\u0000\u0000\u0000\r\u0000�T\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000k\u0004\u0000\u0000\u0000\u0000\r\u0000\u0004V\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000p\u0004\u0000\u0000\u0000\u0000\r\u0000XW\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000v\u0004\u0000\u0000\u0000\u0000\r\u0000�X\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0004\u0000\u0000\u0000\u0000\r\u0000,Z\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0004\u0000\u0000\u0000\u0000\r\u0000�[\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0004\u0000\u0000\u0000\u0000\r\u0000�\\\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0004\u0000\u0000\u0000\u0000\r\u0000�]\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0004\u0000\u0000\u0000\u0000\r\u0000�^\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0004\u0000\u0000\u0000\u0000\r\u0000�_\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0004\u0000\u0000\u0000\u0000\r\u0000``\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0004\u0000\u0000\u0000\u0000\r\u0000@a\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0004\u0000\u0000\u0000\u0000\r\u00000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0004\u0000\u0000\u0000\u0000\r\u00004c\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0004\u0000\u0000\u0000\u0000\r\u0000<d\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0004\u0000\u0000\u0000\u0000\r\u0000Te\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0004\u0000\u0000\u0000\u0000\r\u00008f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0004\u0000\u0000\u0000\u0000\r\u0000,g\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0004\u0000\u0000\u0000\u0000\r\u0000�g\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0004\u0000\u0000\u0000\u0000\r\u0000�h\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0004\u0000\u0000\u0002\u0000\r\u0000��\u0000\u0000\u0000\u0000\u0000\u0000$\u0003\u0000\u0000\u0000\u0000\u0000\u0000�\u0004\u0000\u0000\u0000\u0000\r\u0000�i\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0004\u0000\u0000\u0000\u0000\r\u0000�l\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0005\u0000\u0000\u0000\u0000\r\u0000�m\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0005\u0000\u0000\u0000\u0000\r\u0000�p\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000e\u0005\u0000\u0000\u0000\u0000\r\u0000�q\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0005\u0000\u0000\u0000\u0000\r\u0000�t\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001a\u0005\u0000\u0000\u0000\u0000\r\u0000�u\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0005\u0000\u0000\u0000\u0000\r\u0000�v\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000&\u0005\u0000\u0000\u0002\u0000\r\u0000̋\u0000\u0000\u0000\u0000\u0000\u0000 \u0001\u0000\u0000\u0000\u0000\u0000\u0000D\u0005\u0000\u0000\u0000\u0000\r\u0000hw\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0005\u0000\u0000\u0000\u0000\r\u0000�x\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000P\u0005\u0000\u0000\u0002\u0000\r\u0000�\u0000\u0000\u0000\u0000\u0000\u0000 \u0001\u0000\u0000\u0000\u0000\u0000\u0000n\u0005\u0000\u0000\u0000\u0000\r\u0000ty\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000t\u0005\u0000\u0000\u0000\u0000\r\u0000�z\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000z\u0005\u0000\u0000\u0000\u0000\r\u0000�{\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0005\u0000\u0000\u0000\u0000\r\u0000�|\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0005\u0000\u0000\u0002\u0000\r\u0000\f�\u0000\u0000\u0000\u0000\u0000\u0000\u001c\u0001\u0000\u0000\u0000\u0000\u0000\u0000�\u0005\u0000\u0000\u0000\u0000\r\u0000�}\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0005\u0000\u0000\u0000\u0000\r\u0000�~\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0005\u0000\u0000\u0002\u0000\r\u0000(�\u0000\u0000\u0000\u0000\u0000\u0000�\u0001\u0000\u0000\u0000\u0000\u0000\u0000�\u0005\u0000\u0000\u0000\u0000\r\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0005\u0000\u0000\u0000\u0000\r\u0000́\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0005\u0000\u0000\u0000\u0000\r\u0000��\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0005\u0000\u0000\u0000\u0000\r\u0000t�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0005\u0000\u0000\u0002\u0000\r\u0000\b�\u0000\u0000\u0000\u0000\u0000\u0000t\u0001\u0000\u0000\u0000\u0000\u0000\u0000�\u0005\u0000\u0000\u0002\u0000\r\u0000|�\u0000\u0000\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001b\u0006\u0000\u0000\u0000\u0000\r\u0000��\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000!\u0006\u0000\u0000\u0002\u0000\r\u0000��\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000;\u0006\u0000\u0000\u0000\u0000\r\u0000��\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000A\u0006\u0000\u0000\u0000\u0000\r\u0000\b�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000G\u0006\u0000\u0000\u0000\u0000\r\u0000��\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000M\u0006\u0000\u0000\u0000\u0000\r\u0000\u0010�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000S\u0006\u0000\u0000\u0000\u0000\r\u0000��\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000Y\u0006\u0000\u0000\u0000\u0000\r\u0000̋\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000_\u0006\u0000\u0000\u0000\u0000\r\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000e\u0006\u0000\u0000\u0000\u0000\r\u0000\f�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000k\u0006\u0000\u0000\u0000\u0000\r\u0000(�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000q\u0006\u0000\u0000\u0000\u0000\r\u0000\b�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000w\u0006\u0000\u0000\u0000\u0000\r\u0000|�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000}\u0006\u0000\u0000\u0000\u0000\r\u0000��\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0006\u0000\u0000\u0000\u0000\n\u0000N\u0017\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0006\u0000\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0006\u0000\u0000\u0000\u0000\f\u0000�\u001c\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0006\u0000\u0000\u0001\u0000\f\u0000�\u001c\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0006\u0000\u0000\u0000\u0000\f\u0000�\u001c\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u000b\u0000\u0000\u0000\u0002\u0011\u0000H�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0006\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0006\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0018\u0007\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000*\u0007\u0000\u0000\u0012\u0000\r\u0000`;\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0013\u0000\u0000\u0000\u0000\u0000\u0000B\u0007\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000S\u0007\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000i\u0007\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0007\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0007\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0007\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0007\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0007\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0007\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006\b\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001f\b\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00002\b\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000B\b\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000M\b\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000]\b\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000i\b\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000u\b\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\b\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\b\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\b\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\b\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\b\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\b\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\b\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\b\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\t\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0018\t\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001f\t\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000.\t\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00003\t\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000?\t\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000O\t\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000[\t\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000h\t\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000u\t\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\t\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\t\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\t\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\t\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\t\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\t\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\t\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\t\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\t\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0007\n\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0016\n\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001e\n\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000-\n\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000;\n\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000I\n\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000W\n\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000h\n\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000o\n\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000v\n\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\n\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\n\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\n\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\n\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\n\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\n\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\n\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\n\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\n\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u000b\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000'\u000b\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000<\u000b\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000S\u000b\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000_\u000b\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000u\u000b\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u000b\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u000b\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000.note.android.ident\u0000.note.gnu.build-id\u0000.dynsym\u0000.gnu.version\u0000.gnu.version_r\u0000.gnu.hash\u0000.dynstr\u0000.rela.dyn\u0000.rela.plt\u0000.rodata\u0000.eh_frame_hdr\u0000.eh_frame\u0000.text\u0000.plt\u0000.data.rel.ro\u0000.fini_array\u0000.dynamic\u0000.got.plt\u0000.relro_padding\u0000.comment\u0000.symtab\u0000.shstrtab\u0000.strtab\u0000\u0000crtbegin_so.c\u0000__on_dlclose\u0000$x.1\u0000__on_dlclose_late\u0000$d.2\u0000$d.3\u0000$d.4\u0000$d.5\u0000$d.6\u0000note_android_ident\u0000$d.0\u0000note_data\u0000note_name\u0000note_end\u0000ndk_version\u0000ndk_build_number\u0000binding.c\u0000$x.0\u0000bare_fs_init\u0000bare_fs_open\u0000bare_fs_open_sync\u0000bare_fs_close\u0000bare_fs_close_sync\u0000bare_fs_access\u0000bare_fs_access_sync\u0000bare_fs_read\u0000bare_fs_read_sync\u0000bare_fs_readv\u0000bare_fs_write\u0000bare_fs_write_sync\u0000bare_fs_writev\u0000bare_fs_ftruncate\u0000bare_fs_chmod\u0000bare_fs_chmod_sync\u0000bare_fs_fchmod\u0000bare_fs_fchmod_sync\u0000bare_fs_rename\u0000bare_fs_rename_sync\u0000bare_fs_copyfile\u0000bare_fs_copyfile_sync\u0000bare_fs_mkdir\u0000bare_fs_mkdir_sync\u0000bare_fs_rmdir\u0000bare_fs_rmdir_sync\u0000bare_fs_stat\u0000bare_fs_stat_sync\u0000bare_fs_lstat\u0000bare_fs_lstat_sync\u0000bare_fs_fstat\u0000bare_fs_fstat_sync\u0000bare_fs_unlink\u0000bare_fs_unlink_sync\u0000bare_fs_realpath\u0000bare_fs_realpath_sync\u0000bare_fs_readlink\u0000bare_fs_readlink_sync\u0000bare_fs_symlink\u0000bare_fs_symlink_sync\u0000bare_fs_opendir\u0000bare_fs_opendir_sync\u0000bare_fs_readdir\u0000bare_fs_readdir_sync\u0000bare_fs_closedir\u0000bare_fs_closedir_sync\u0000bare_fs_watcher_init\u0000bare_fs_watcher_close\u0000bare_fs_watcher_ref\u0000bare_fs_watcher_unref\u0000$x.1\u0000bare_fs__on_teardown\u0000$x.2\u0000bare_fs__on_response\u0000$x.3\u0000$x.4\u0000$x.5\u0000$x.6\u0000$x.7\u0000$x.8\u0000$x.9\u0000$x.10\u0000$x.11\u0000$x.12\u0000$x.13\u0000$x.14\u0000$x.15\u0000$x.16\u0000$x.17\u0000$x.18\u0000$x.19\u0000$x.20\u0000$x.21\u0000$x.22\u0000$x.23\u0000$x.24\u0000$x.25\u0000$x.26\u0000$x.27\u0000bare_fs__on_stat_response\u0000$x.28\u0000$x.29\u0000$x.30\u0000$x.31\u0000$x.32\u0000$x.33\u0000$x.34\u0000$x.35\u0000bare_fs__on_realpath_response\u0000$x.36\u0000$x.37\u0000bare_fs__on_readlink_response\u0000$x.38\u0000$x.39\u0000$x.40\u0000$x.41\u0000bare_fs__on_opendir_response\u0000$x.42\u0000$x.43\u0000bare_fs__on_readdir_response\u0000$x.44\u0000$x.45\u0000$x.46\u0000$x.47\u0000bare_fs__on_watcher_event\u0000bare_fs__on_watcher_teardown\u0000$x.48\u0000bare_fs__on_watcher_close\u0000$x.49\u0000$x.50\u0000$x.51\u0000$x.52\u0000$x.53\u0000$x.54\u0000$x.55\u0000$x.56\u0000$x.57\u0000$x.58\u0000$x.59\u0000$x.60\u0000$d.61\u0000$d.62\u0000$d.63\u0000__FRAME_END__\u0000$d.1\u0000__dso_handle\u0000__cxa_finalize\u0000__emutls_unregister_key\u0000__atexit_handler_wrapper\u0000atexit\u0000__cxa_atexit\u0000pthread_atfork\u0000__register_atfork\u0000bare_register_module_v0\u0000js_create_uint32\u0000js_set_named_property\u0000js_create_function\u0000__stack_chk_fail\u0000js_get_callback_info\u0000js_create_arraybuffer\u0000js_create_reference\u0000js_add_deferred_teardown_callback\u0000js_get_arraybuffer_info\u0000js_get_value_string_utf8\u0000js_get_value_int32\u0000js_get_env_loop\u0000uv_fs_open\u0000js_create_int32\u0000uv_err_name\u0000uv_strerror\u0000js_throw_error\u0000uv_fs_req_cleanup\u0000js_get_value_uint32\u0000uv_fs_close\u0000uv_fs_access\u0000js_get_typedarray_info\u0000js_get_value_int64\u0000uv_buf_init\u0000uv_fs_read\u0000js_get_array_length\u0000malloc\u0000js_get_element\u0000free\u0000uv_fs_write\u0000uv_fs_ftruncate\u0000uv_fs_chmod\u0000uv_fs_fchmod\u0000uv_fs_rename\u0000uv_fs_copyfile\u0000uv_fs_mkdir\u0000uv_fs_rmdir\u0000uv_fs_stat\u0000js_create_array_with_length\u0000js_create_int64\u0000js_set_element\u0000uv_fs_lstat\u0000uv_fs_fstat\u0000uv_fs_unlink\u0000uv_fs_realpath\u0000strncpy\u0000uv_fs_readlink\u0000uv_fs_symlink\u0000uv_fs_opendir\u0000uv_fs_readdir\u0000js_create_object\u0000strlen\u0000memcpy\u0000uv_fs_closedir\u0000js_get_value_bool\u0000uv_fs_event_init\u0000uv_fs_event_start\u0000uv_fs_event_stop\u0000uv_close\u0000uv_ref\u0000uv_unref\u0000uv_cancel\u0000js_delete_reference\u0000js_finish_deferred_teardown_callback\u0000js_open_handle_scope\u0000js_get_reference_value\u0000js_get_null\u0000js_create_string_utf8\u0000js_create_error\u0000js_call_function\u0000js_close_handle_scope\u0000_DYNAMIC\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0007\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u00008\u0002\u0000\u0000\u0000\u0000\u0000\u00008\u0002\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0007\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0002\u0000\u0000\u0000\u0000\u0000\u0000�\u0002\u0000\u0000\u0000\u0000\u0000\u0000$\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000(\u0000\u0000\u0000\u000b\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0002\u0000\u0000\u0000\u0000\u0000\u0000�\u0002\u0000\u0000\u0000\u0000\u0000\u0000 \u0007\u0000\u0000\u0000\u0000\u0000\u0000\u0007\u0000\u0000\u0000\u0001\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u00000\u0000\u0000\u0000���o\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0018\n\u0000\u0000\u0000\u0000\u0000\u0000\u0018\n\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000=\u0000\u0000\u0000���o\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\n\u0000\u0000\u0000\u0000\u0000\u0000�\n\u0000\u0000\u0000\u0000\u0000\u0000 \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0007\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000L\u0000\u0000\u0000���o\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\n\u0000\u0000\u0000\u0000\u0000\u0000�\n\u0000\u0000\u0000\u0000\u0000\u0000 \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000V\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\n\u0000\u0000\u0000\u0000\u0000\u0000�\n\u0000\u0000\u0000\u0000\u0000\u0000�\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000^\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u000f\u0000\u0000\u0000\u0000\u0000\u0000�\u000f\u0000\u0000\u0000\u0000\u0000\u0000H\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000h\u0000\u0000\u0000\u0004\u0000\u0000\u0000B\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0018\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0018\u0010\u0000\u0000\u0000\u0000\u0000\u0000�\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0012\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000r\u0000\u0000\u0000\u0001\u0000\u0000\u00002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0017\u0000\u0000\u0000\u0000\u0000\u0000\b\u0017\u0000\u0000\u0000\u0000\u0000\u0000�\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000z\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u001a\u0000\u0000\u0000\u0000\u0000\u0000�\u001a\u0000\u0000\u0000\u0000\u0000\u0000$\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u001c\u0000\u0000\u0000\u0000\u0000\u0000�\u001c\u0000\u0000\u0000\u0000\u0000\u0000\b\u000e\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000;\u0000\u0000\u0000\u0000\u0000\u0000\u0000+\u0000\u0000\u0000\u0000\u0000\u0000hX\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000p�\u0000\u0000\u0000\u0000\u0000\u0000�\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u00000�\u0000\u0000\u0000\u0000\u0000\u00000�\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u000f\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u00008�\u0000\u0000\u0000\u0000\u0000\u00008�\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000H�\u0000\u0000\u0000\u0000\u0000\u0000H�\u0000\u0000\u0000\u0000\u0000\u0000�\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0007\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000ة\u0000\u0000\u0000\u0000\u0000\u0000؉\u0000\u0000\u0000\u0000\u0000\u0000h\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\b\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000@�\u0000\u0000\u0000\u0000\u0000\u0000@�\u0000\u0000\u0000\u0000\u0000\u0000�\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0001\u0000\u0000\u00000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000@�\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0010�\u0000\u0000\u0000\u0000\u0000\u0000\u0018\u0015\u0000\u0000\u0000\u0000\u0000\u0000\u0017\u0000\u0000\u0000�\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000(�\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\"�\u0000\u0000\u0000\u0000\u0000\u0000�\u000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000module.exports = require.addon()\nconst binding = require('./binding')\nconst errors = require('./lib/errors')\nconst constants = require('./lib/constants')\n\nexports.constants = constants\n\nexports.EOL = binding.platform === 'win32' ? '\\r\\n' : '\\n'\n\nexports.platform = function platform() {\n  return binding.platform\n}\n\nexports.arch = function arch() {\n  return binding.arch\n}\n\nexports.type = binding.type\nexports.version = binding.version\nexports.release = binding.release\nexports.machine = binding.machine\nexports.execPath = binding.execPath\nexports.pid = binding.pid\nexports.ppid = binding.ppid\nexports.cwd = binding.cwd\nexports.chdir = binding.chdir\nexports.tmpdir = binding.tmpdir\nexports.homedir = binding.homedir\nexports.hostname = binding.hostname\n\nexports.kill = function kill(pid, signal = constants.signals.SIGTERM) {\n  if (typeof signal === 'string') {\n    if (signal in constants.signals === false) {\n      throw errors.UNKNOWN_SIGNAL('Unknown signal: ' + signal)\n    }\n\n    signal = constants.signals[signal]\n  }\n\n  binding.kill(pid, signal)\n}\n\nexports.endianness = function endianness() {\n  return binding.isLittleEndian ? 'LE' : 'BE'\n}\n\nexports.availableParallelism = binding.availableParallelism\n\nexports.cpuUsage = function cpuUsage(previous) {\n  const current = binding.cpuUsage()\n\n  if (previous) {\n    return {\n      user: current.user - previous.user,\n      system: current.system - previous.system\n    }\n  }\n\n  return current\n}\n\nexports.resourceUsage = binding.resourceUsage\nexports.memoryUsage = binding.memoryUsage\nexports.freemem = binding.freemem\nexports.totalmem = binding.totalmem\nexports.uptime = binding.uptime\nexports.loadavg = binding.loadavg\nexports.cpus = binding.cpus\n\nexports.getProcessTitle = binding.getProcessTitle\n\nexports.setProcessTitle = function setProcessTitle(title) {\n  if (typeof title !== 'string') title = title.toString()\n\n  if (title.length >= 256) {\n    throw errors.TITLE_OVERFLOW('Process title is too long')\n  }\n\n  binding.setProcessTitle(title)\n}\n\nexports.getEnvKeys = binding.getEnvKeys\nexports.getEnv = binding.getEnv\nexports.hasEnv = binding.hasEnv\nexports.setEnv = binding.setEnv\nexports.unsetEnv = binding.unsetEnv\nconst binding = require('../binding')\n\nmodule.exports = {\n  signals: binding.signals,\n  errnos: binding.errnos\n}\nmodule.exports = class OSError extends Error {\n  constructor(msg, code, fn = OSError) {\n    super(`${code}: ${msg}`)\n    this.code = code\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, fn)\n    }\n  }\n\n  get name() {\n    return 'OSError'\n  }\n\n  static UNKNOWN_SIGNAL(msg) {\n    return new OSError(msg, 'UNKNOWN_SIGNAL', OSError.UNKNOWN_SIGNAL)\n  }\n\n  static TITLE_OVERFLOW(msg) {\n    return new OSError(msg, 'TITLE_OVERFLOW', OSError.TITLE_OVERFLOW)\n  }\n}\n{\n  \"name\": \"bare-os\",\n  \"version\": \"3.4.0\",\n  \"description\": \"Operating system utilities for Javascript\",\n  \"exports\": {\n    \".\": {\n      \"types\": \"./index.d.ts\",\n      \"default\": \"./index.js\"\n    },\n    \"./package\": \"./package.json\",\n    \"./constants\": \"./lib/constants.js\",\n    \"./errors\": \"./lib/errors.js\"\n  },\n  \"files\": [\n    \"index.js\",\n    \"index.d.ts\",\n    \"binding.c\",\n    \"binding.js\",\n    \"CMakeLists.txt\",\n    \"lib\",\n    \"prebuilds\"\n  ],\n  \"addon\": true,\n  \"scripts\": {\n    \"test\": \"prettier . --check && bare test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/holepunchto/bare-os.git\"\n  },\n  \"author\": \"Holepunch\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/bare-os/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/bare-os#readme\",\n  \"engines\": {\n    \"bare\": \">=1.6.0\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^3.1.1\",\n    \"cmake-bare\": \"^1.1.6\",\n    \"prettier\": \"^3.4.2\",\n    \"prettier-config-standard\": \"^7.0.0\"\n  }\n}\nELF\u0002\u0001\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000�\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000@\u0000\u0000\u0000\u0000\u0000\u0000\u0000�t\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000@\u00008\u0000\t\u0000@\u0000\u0019\u0000\u0017\u0000\u0006\u0000\u0000\u0000\u0004\u0000\u0000\u0000@\u0000\u0000\u0000\u0000\u0000\u0000\u0000@\u0000\u0000\u0000\u0000\u0000\u0000\u0000@\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0001\u0000\u0000\u0000\u0000\u0000\u0000�\u0001\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000`X\u0000\u0000\u0000\u0000\u0000\u0000`X\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0006\u0000\u0000\u0000`X\u0000\u0000\u0000\u0000\u0000\u0000`h\u0000\u0000\u0000\u0000\u0000\u0000`h\u0000\u0000\u0000\u0000\u0000\u0000�\u0003\u0000\u0000\u0000\u0000\u0000\u0000�\u0007\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0006\u0000\u0000\u0000\b\\\u0000\u0000\u0000\u0000\u0000\u0000\b|\u0000\u0000\u0000\u0000\u0000\u0000\b|\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000<\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0006\u0000\u0000\u0000xX\u0000\u0000\u0000\u0000\u0000\u0000xh\u0000\u0000\u0000\u0000\u0000\u0000xh\u0000\u0000\u0000\u0000\u0000\u0000�\u0001\u0000\u0000\u0000\u0000\u0000\u0000�\u0001\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000R�td\u0004\u0000\u0000\u0000`X\u0000\u0000\u0000\u0000\u0000\u0000`h\u0000\u0000\u0000\u0000\u0000\u0000`h\u0000\u0000\u0000\u0000\u0000\u0000�\u0003\u0000\u0000\u0000\u0000\u0000\u0000�\u0007\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000P�td\u0004\u0000\u0000\u0000H\u001a\u0000\u0000\u0000\u0000\u0000\u0000H\u001a\u0000\u0000\u0000\u0000\u0000\u0000H\u001a\u0000\u0000\u0000\u0000\u0000\u00004\u0001\u0000\u0000\u0000\u0000\u0000\u00004\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000Q�td\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0004\u0000\u0000\u00008\u0002\u0000\u0000\u0000\u0000\u0000\u00008\u0002\u0000\u0000\u0000\u0000\u0000\u00008\u0002\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000�\u0000\u0000\u0000\u0001\u0000\u0000\u0000Android\u0000\u001c\u0000\u0000\u0000r27c\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000012479018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0003\u0000\u0000\u0000GNU\u0000�@�h��j4�\u0017�\u0011z�\u0015�C؅N\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001d\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000G\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000O\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000e\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000{\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0007\u0001\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0013\u0001\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\"\u0001\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000-\u0001\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000:\u0001\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000H\u0001\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000O\u0001\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0001\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000}\u0001\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0001\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0001\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0001\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0001\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0001\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0001\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0001\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0001\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0005\u0002\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001c\u0002\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00003\u0002\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000F\u0002\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000Z\u0002\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0002\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000u\u0002\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0002\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0002\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0002\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0002\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0002\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0002\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0002\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\t\u0003\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001e\u0003\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00003\u0003\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000D\u0003\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000R\u0003\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000e\u0003\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000x\u0003\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0003\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0003\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0003\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0003\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0003\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0003\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0003\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000/\u0000\u0000\u0000\u0012\u0000\r\u0000�\"\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0002\u0000\u0002\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0002\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0002\u0000\u0001\u0000\u0001\u0000\u0002\u0000\u0002\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0001\u0000\u0000\u0000\u0001\u0000\u0001\u0000�\u0003\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000c\r\u0005\u0000\u0000\u0000\u0002\u0000�\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000>\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u001a\u0000\u0000\u0000\u0000 \u0000\u0001\u0000\u0000\u0000\u0000>\u0000\u0000\u0000M�\u0017a\u0000__cxa_finalize\u0000__cxa_atexit\u0000__register_atfork\u0000bare_register_module_v0\u0000uv_once\u0000js_create_string_utf8\u0000js_set_named_property\u0000js_create_function\u0000js_get_boolean\u0000js_create_object\u0000js_create_uint32\u0000js_create_int32\u0000__stack_chk_fail\u0000uv_rwlock_init\u0000uv_os_uname\u0000uv_err_name\u0000uv_strerror\u0000js_throw_error\u0000uv_exepath\u0000uv_os_getpid\u0000uv_os_getppid\u0000uv_cwd\u0000js_get_callback_info\u0000js_get_value_string_utf8\u0000uv_chdir\u0000uv_os_tmpdir\u0000uv_os_homedir\u0000uv_os_gethostname\u0000js_get_value_uint32\u0000uv_kill\u0000uv_available_parallelism\u0000js_create_int64\u0000uv_getrusage\u0000js_get_heap_statistics\u0000uv_resident_set_memory\u0000uv_get_free_memory\u0000uv_get_total_memory\u0000uv_uptime\u0000js_create_double\u0000js_create_arraybuffer\u0000js_create_typedarray\u0000uv_loadavg\u0000uv_cpu_info\u0000js_create_array_with_length\u0000js_set_element\u0000js_get_named_property\u0000uv_free_cpu_info\u0000uv_get_process_title\u0000uv_set_process_title\u0000uv_rwlock_rdlock\u0000uv_os_environ\u0000uv_rwlock_rdunlock\u0000uv_os_free_environ\u0000malloc\u0000uv_os_getenv\u0000js_get_undefined\u0000realloc\u0000free\u0000uv_rwlock_wrlock\u0000uv_os_setenv\u0000uv_rwlock_wrunlock\u0000uv_os_unsetenv\u0000libc.so\u0000LIBC\u0000libm.so\u0000libdl.so\u0000bare-os@3.bare\u0000\u0000`h\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0004\u0000\u0000\u0000\u0000\u0000\u0000`h\u0000\u0000\u0000\u0000\u0000\u0000hh\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0004\u0000\u0000\u0000\u0000\u0000\u0000�\"\u0000\u0000\u0000\u0000\u0000\u0000ph\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0004\u0000\u0000\u0000\u0000\u0000\u0000x\"\u0000\u0000\u0000\u0000\u0000\u0000 j\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000(j\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00000j\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00008j\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000@j\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000Hj\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000Pj\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000\u0007\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000Xj\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000`j\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000\t\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000hj\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000\n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000pj\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000\u000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000xj\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000\f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�j\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000\r\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�j\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000\u000e\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�j\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000\u000f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�j\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�j\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000\u0011\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�j\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�j\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000\u0013\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�j\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000\u0014\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�j\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000\u0015\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�j\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000\u0016\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�j\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000\u0017\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�j\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�j\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000\u0019\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�j\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000\u001a\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�j\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000\u001b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�j\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000\u001c\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000k\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000\u001d\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\bk\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000\u001e\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0010k\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000\u001f\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0018k\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000 \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 k\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000!\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000(k\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000\"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00000k\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000#\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00008k\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000$\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000@k\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000%\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000Hk\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000&\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000Pk\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000'\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000Xk\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000(\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000`k\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000)\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000hk\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000*\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000pk\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000+\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000xk\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000,\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�k\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000-\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�k\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000.\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�k\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000/\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�k\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u00000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�k\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u00001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�k\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u00002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�k\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u00003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�k\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u00004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�k\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u00005\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�k\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u00006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�k\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u00007\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�k\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u00008\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�k\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u00009\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�k\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000:\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�k\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000;\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�k\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000<\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000l\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0004\u0000\u0000=\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000memoryUsage\u0000errnos\u0000SIGKILL\u0000EFAULT\u0000times\u0000EOVERFLOW\u0000EAFNOSUPPORT\u0000EFBIG\u0000ENETDOWN\u0000ENETUNREACH\u0000ENOENT\u0000ENOSPC\u0000EPERM\u0000EREMOTEIO\u0000kill\u0000SIGINT\u0000SIGPIPE\u0000EMFILE\u0000ENOBUFS\u0000ENOTDIR\u0000EPIPE\u0000heapUsed\u0000SIGXCPU\u0000userCPUTime\u0000sys\u0000idle\u0000irq\u0000platform\u0000SIGIO\u0000ERANGE\u0000ESHUTDOWN\u0000swappedOut\u0000SIGQUIT\u0000SIGWINCH\u0000ENOPROTOOPT\u0000external\u0000setProcessTitle\u0000getEnvKeys\u0000setEnv\u0000SIGILL\u0000SIGTRAP\u0000SIGFPE\u0000EAI_SERVICE\u0000ECANCELED\u0000ENFILE\u0000EMLINK\u0000maxRSS\u0000EAI_AGAIN\u0000EIO\u0000ETXTBSY\u0000speed\u0000arch\u0000chdir\u0000hostname\u0000resourceUsage\u0000uptime\u0000EADDRINUSE\u0000ENOTSOCK\u0000majorPageFault\u0000voluntaryContextSwitches\u0000heapTotal\u0000cpus\u0000getProcessTitle\u0000EADDRNOTAVAIL\u0000EAI_BADFLAGS\u0000EAI_FAMILY\u0000EBUSY\u0000EINTR\u0000EOF\u0000ENOTTY\u0000user\u0000ppid\u0000SIGUSR1\u0000SIGPROF\u0000SIGSYS\u0000EAI_MEMORY\u0000EAI_NODATA\u0000EISDIR\u0000ENOSYS\u0000EPROTO\u0000ESRCH\u0000fsWrite\u0000EBADF\u0000EMSGSIZE\u0000signalsCount\u0000arm64\u0000SIGSTKFLT\u0000SIGPWR\u0000ECONNRESET\u0000EROFS\u0000version\u0000getEnv\u0000SIGPOLL\u0000EAI_NONAME\u0000EDESTADDRREQ\u0000ENAMETOOLONG\u0000ENODEV\u0000ENXIO\u0000pid\u0000availableParallelism\u0000isLittleEndian\u0000SIGURG\u0000EAI_PROTOCOL\u0000minorPageFault\u0000fsRead\u0000nice\u0000totalmem\u0000SIGSTOP\u0000EAI_SOCKTYPE\u0000EALREADY\u0000ELOOP\u0000EILSEQ\u0000execPath\u0000SIGTERM\u0000SIGTTOU\u0000ENOTEMPTY\u0000EHOSTDOWN\u0000unsharedStackSize\u0000EHOSTUNREACH\u0000ETIMEDOUT\u0000ipcReceived\u0000cwd\u0000tmpdir\u0000SIGALRM\u0000E2BIG\u0000sharedMemorySize\u0000release\u0000SIGUNUSED\u0000EUNATCH\u0000rss\u0000ENOMEM\u0000EPROTOTYPE\u0000android\u0000unsetEnv\u0000SIGSEGV\u0000EAI_ADDRFAMILY\u0000ECONNREFUSED\u0000EINVAL\u0000EFTYPE\u0000SIGCONT\u0000ENOTCONN\u0000ENOTSUP\u0000ESPIPE\u0000UNKNOWN\u0000model\u0000type\u0000machine\u0000cpuUsage\u0000signals\u0000SIGBUS\u0000EAI_CANCELED\u0000EAI_OVERFLOW\u0000ENONET\u0000EXDEV\u0000unsharedDataSize\u0000homedir\u0000EAI_BADHINTS\u0000ENODATA\u0000systemCPUTime\u0000SIGUSR2\u0000SIGTSTP\u0000ECHARSET\u0000system\u0000SIGIOT\u0000SIGCHLD\u0000SIGVTALRM\u0000ECONNABORTED\u0000SIGHUP\u0000SIGTTIN\u0000SIGXFSZ\u0000EPROTONOSUPPORT\u0000involuntaryContextSwitches\u0000loadavg\u0000hasEnv\u0000EACCES\u0000EAGAIN\u0000EISCONN\u0000freemem\u0000SIGABRT\u0000EAI_FAIL\u0000EEXIST\u0000ESOCKTNOSUPPORT\u0000ipcSent\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000������������������������\u0001\u001b\u0003;4\u0001\u0000\u0000%\u0000\u0000\u00000\b\u0000\u0000L\u0001\u0000\u0000@\b\u0000\u0000`\u0001\u0000\u0000H\b\u0000\u0000t\u0001\u0000\u0000P\b\u0000\u0000�\u0001\u0000\u0000d\b\u0000\u0000�\u0001\u0000\u0000�\b\u0000\u0000�\u0001\u0000\u0000�\b\u0000\u0000�\u0001\u0000\u0000�\b\u0000\u0000�\u0001\u0000\u00008!\u0000\u0000\u0018\u0002\u0000\u0000D!\u0000\u0000,\u0002\u0000\u0000�!\u0000\u0000d\u0002\u0000\u0000�\"\u0000\u0000�\u0002\u0000\u0000t#\u0000\u0000�\u0002\u0000\u00000$\u0000\u0000\f\u0003\u0000\u0000�$\u0000\u0000D\u0003\u0000\u0000`%\u0000\u0000t\u0003\u0000\u0000�%\u0000\u0000�\u0003\u0000\u0000�&\u0000\u0000�\u0003\u0000\u0000T'\u0000\u0000\u0014\u0004\u0000\u0000 (\u0000\u0000L\u0004\u0000\u0000�(\u0000\u0000�\u0004\u0000\u0000�)\u0000\u0000�\u0004\u0000\u0000d*\u0000\u0000�\u0004\u0000\u0000�*\u0000\u0000$\u0005\u0000\u0000�+\u0000\u0000\\\u0005\u0000\u0000h.\u0000\u0000�\u0005\u0000\u0000�/\u0000\u0000�\u0005\u0000\u0000�/\u0000\u0000�\u0005\u0000\u0000L0\u0000\u0000$\u0006\u0000\u0000�0\u0000\u0000T\u0006\u0000\u0000(1\u0000\u0000�\u0006\u0000\u0000�3\u0000\u0000�\u0006\u0000\u0000L4\u0000\u0000\f\u0007\u0000\u0000�4\u0000\u0000@\u0007\u0000\u0000�5\u0000\u0000x\u0007\u0000\u0000�7\u0000\u0000�\u0007\u0000\u0000\u00109\u0000\u0000�\u0007\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001zR\u0000\u0001|\u001e\u0001\u001b\f\u001f\u0000\u0010\u0000\u0000\u0000\u0018\u0000\u0000\u0000�\u0006\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0000\u0000\u0000,\u0000\u0000\u0000�\u0006\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0000\u0000\u0000@\u0000\u0000\u0000�\u0006\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0000\u0000\u0000T\u0000\u0000\u0000�\u0006\u0000\u0000\u0014\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0000\u0000\u0000h\u0000\u0000\u0000�\u0006\u0000\u0000\u001c\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\u0000\u0000|\u0000\u0000\u0000�\u0006\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0000\u0000\u0000�\u0000\u0000\u0000�\u0006\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u00008\u0000\u0000\u0000�\u0000\u0000\u0000�\u0006\u0000\u0000�\u0018\u0000\u0000\u0000D\u000epT\f\u001d@�\u0002�\u0004�\u0006�\b�\f�\u000e�\u0010\n\u0003p\u0018\f\u001fpT\u000e\u0000�������D\u000b\u0000\u0000\u0000\u0010\u0000\u0000\u0000�\u0000\u0000\u0000\u0018\u001f\u0000\u0000\f\u0000\u0000\u0000\u0000\u0000\u0000\u00004\u0000\u0000\u0000�\u0000\u0000\u0000\u0010\u001f\u0000\u0000�\u0000\u0000\u0000\u0000D\u000e@P\f\u001d@�\u0002�\u0004�\u0006�\b�\f�\u000e�\u0010\n\u0002T\f\u001f@P\u000e\u0000�������D\u000b4\u0000\u0000\u00000\u0001\u0000\u0000�\u001f\u0000\u0000�\u0000\u0000\u0000\u0000D\u000e@P\f\u001d@�\u0002�\u0004�\u0006�\b�\f�\u000e�\u0010\n\u0002X\f\u001f@P\u000e\u0000�������D\u000b4\u0000\u0000\u0000h\u0001\u0000\u0000\u0014 \u0000\u0000�\u0000\u0000\u0000\u0000D\u000e@P\f\u001d@�\u0002�\u0004�\u0006�\b�\f�\u000e�\u0010\n\u0002X\f\u001f@P\u000e\u0000�������D\u000b4\u0000\u0000\u0000�\u0001\u0000\u0000� \u0000\u0000�\u0000\u0000\u0000\u0000D\u000e@P\f\u001d@�\u0002�\u0004�\u0006�\b�\f�\u000e�\u0010\n\u0002X\f\u001f@P\u000e\u0000�������D\u000b4\u0000\u0000\u0000�\u0001\u0000\u0000\u001c!\u0000\u0000�\u0000\u0000\u0000\u0000D\u000e@P\f\u001d@�\u0002�\u0004�\u0006�\b�\f�\u000e�\u0010\n\u0002h\f\u001f@P\u000e\u0000�������D\u000b,\u0000\u0000\u0000\u0010\u0002\u0000\u0000�!\u0000\u0000d\u0000\u0000\u0000\u0000D\u000e0L\f\u001d �\u0002�\u0004�\u0006�\b\n\u0002@\f\u001f0L\u000e\u0000����D\u000b\u0000,\u0000\u0000\u0000@\u0002\u0000\u0000�!\u0000\u0000d\u0000\u0000\u0000\u0000D\u000e0L\f\u001d �\u0002�\u0004�\u0006�\b\n\u0002@\f\u001f0L\u000e\u0000����D\u000b\u00004\u0000\u0000\u0000p\u0002\u0000\u0000\u0018\"\u0000\u0000�\u0000\u0000\u0000\u0000D\u000e@P\f\u001d@�\u0002�\u0004�\u0006�\b�\f�\u000e�\u0010\n\u0002h\f\u001f@P\u000e\u0000�������D\u000b4\u0000\u0000\u0000�\u0002\u0000\u0000�\"\u0000\u0000�\u0000\u0000\u0000\u0000D\u000e@P\f\u001d@�\u0002�\u0004�\u0006�\b�\f�\u000e�\u0010\n\u0002�\f\u001f@P\u000e\u0000�������D\u000b4\u0000\u0000\u0000�\u0002\u0000\u00008#\u0000\u0000�\u0000\u0000\u0000\u0000D\u000e@P\f\u001d@�\u0002�\u0004�\u0006�\b�\f�\u000e�\u0010\n\u0002h\f\u001f@P\u000e\u0000�������D\u000b4\u0000\u0000\u0000\u0018\u0003\u0000\u0000�#\u0000\u0000�\u0000\u0000\u0000\u0000D\u000e@P\f\u001d@�\u0002�\u0004�\u0006�\b�\f�\u000e�\u0010\n\u0002h\f\u001f@P\u000e\u0000�������D\u000b4\u0000\u0000\u0000P\u0003\u0000\u0000`$\u0000\u0000�\u0000\u0000\u0000\u0000D\u000e�\u0001P\f\u001d0�\u0002�\u0004�\u0006�\b�\n�\f\n\u0002X\f\u001f�\u0001P\u000e\u0000������D\u000b\u00004\u0000\u0000\u0000�\u0003\u0000\u0000�$\u0000\u0000�\u0000\u0000\u0000\u0000D\u000e`P\f\u001d0�\u0002�\u0004�\u0006�\b�\n�\f\n\u0002�\f\u001f`P\u000e\u0000������D\u000b\u0000\u0000\u0000,\u0000\u0000\u0000�\u0003\u0000\u0000h%\u0000\u0000\\\u0000\u0000\u0000\u0000D\u000e0L\f\u001d �\u0002�\u0004�\u0006�\b\nx\f\u001f0L\u000e\u0000����D\u000b\u0000\u00004\u0000\u0000\u0000�\u0003\u0000\u0000�%\u0000\u0000�\u0000\u0000\u0000\u0000D\u000e�\u0001P\f\u001d �\u0002�\u0004�\u0006�\b\u0005H\f\n\u0002�\f\u001f�\u0001P\u000e\u0000����\u0006HD\u000b\u0000\u00004\u0000\u0000\u0000(\u0004\u0000\u00004&\u0000\u0000�\u0002\u0000\u0000\u0000D\u000e�\u0001P\f\u001d �\u0002�\u0004�\u0006�\b\u0005H\f\n\u0003�\u0002\f\u001f�\u0001P\u000e\u0000����\u0006HD\u000b\u0000,\u0000\u0000\u0000`\u0004\u0000\u0000�(\u0000\u0000,\u0001\u0000\u0000\u0000D\u000epL\f\u001d �\u0002�\u0004�\u0006�\b\n\u0003\b\u0001\f\u001fpL\u000e\u0000����D\u000b,\u0000\u0000\u0000�\u0004\u0000\u0000�)\u0000\u0000\\\u0000\u0000\u0000\u0000D\u000e0L\f\u001d �\u0002�\u0004�\u0006�\b\nx\f\u001f0L\u000e\u0000����D\u000b\u0000\u0000,\u0000\u0000\u0000�\u0004\u0000\u0000�)\u0000\u0000\\\u0000\u0000\u0000\u0000D\u000e0L\f\u001d �\u0002�\u0004�\u0006�\b\nx\f\u001f0L\u000e\u0000����D\u000b\u0000\u0000,\u0000\u0000\u0000�\u0004\u0000\u0000 *\u0000\u0000`\u0000\u0000\u0000\u0000D\u000e@L\f\u001d �\u0002�\u0004�\u0006�\b\n|\f\u001f@L\u000e\u0000����D\u000b\u0000\u0000,\u0000\u0000\u0000 \u0005\u0000\u0000P*\u0000\u0000|\u0000\u0000\u0000\u0000D\u000e@L\f\u001d �\u0002�\u0004�\u0006�\b\n\u0002X\f\u001f@L\u000e\u0000����D\u000b\u0000H\u0000\u0000\u0000P\u0005\u0000\u0000�*\u0000\u0000p\u0002\u0000\u0000\u0000D\u000e�\u0001\\\f\u001d`�\u0002�\u0004�\u0006�\b�\n�\f�\u000e�\u0010�\u0012�\u0014�\u0016�\u0018\n\u0003,\u0002\f\u001f�\u0001\\\u000e\u0000������������D\u000b\u0000\u00008\u0000\u0000\u0000�\u0005\u0000\u0000�,\u0000\u0000�\u0000\u0000\u0000\u0000D\u000e�\u0002T\f\u001d@�\u0002�\u0004�\u0006�\b�\f�\u000e�\u0010\n\u0002H\f\u001f�\u0002T\u000e\u0000�������D\u000b\u0000\u00000\u0000\u0000\u0000�\u0005\u0000\u00008-\u0000\u0000�\u0000\u0000\u0000\u0000D\u000e�\u0002P\f\u001d0�\u0002�\u0004�\b�\n�\f\n\u0002`\f\u001f�\u0002P\u000e\u0000�����D\u000b4\u0000\u0000\u0000\f\u0006\u0000\u0000�-\u0000\u0000\u001c\u0001\u0000\u0000\u0000D\u000e`P\f\u001d0�\u0002�\u0004�\u0006�\b�\n�\f\n\u0002�\f\u001f`P\u000e\u0000������D\u000b\u0000\u0000\u00008\u0000\u0000\u0000D\u0006\u0000\u0000t.\u0000\u0000�\u0001\u0000\u0000\u0000D\u000epT\f\u001d@�\u0002�\u0004�\u0006�\b�\f�\u000e�\u0010\n\u00030\u0001\f\u001fpT\u000e\u0000�������D\u000b\u0000\u0000\u00008\u0000\u0000\u0000�\u0006\u0000\u0000�/\u0000\u0000d\u0001\u0000\u0000\u0000D\u000epT\f\u001d@�\u0002�\u0004�\u0006�\b�\n�\f�\u000e�\u0010\n\u00030\u0001\f\u001fpT\u000e\u0000��������D\u000b8\u0000\u0000\u0000�\u0006\u0000\u0000\u00181\u0000\u0000\u0010\u0001\u0000\u0000\u0000D\u000e`T\f\u001d@�\u0002�\u0004�\u0006�\b�\f�\u000e�\u0010\n\u0002�\f\u001f`T\u000e\u0000�������D\u000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000_$\u0003�\u001f \u0003�\u0000/\u0002\u0010�\f\u0000\u0014_$\u0003��\u0003_�_$\u0003����\u0017_$\u0003�`\u0000\u0000��\u0003\u0000�\u0000\u0002\u001f��\u0003_�_$\u0003��\u0003\u0000�\u001f \u0003�\u0000��\u0010\u001f \u0003�\u0002-\u0002\u0010w\f\u0000\u0014_$\u0003�\u001f \u0003Ճ,\u0002\u0010w\f\u0000\u0014\u0001\u0000\u0000\u0014��\u0001��{\u0003��#\u0000��W\u0005��O\u0006���\u0000�W�;��\u0003\u0001��\u0003\u0000��\u0016@�\u001f \u0003�\u0000�\u0002\u0010\u001f \u0003Ձ�\u0000\u0010��\u001f�j\f\u0000�\u001f \u0003�A��P�C\u0000��\u0003\u0014�\u0002\u0000��h\f\u0000��\u0003_�����B,\u0012��\u0003\u0014��\u0003\u0013�f\f\u0000�����!H\u001a��C\u0000��\u0003\u0014�\u0002\u0000��\\\f\u0000��\u0003_�����Bl\u0015��\u0003\u0014��\u0003\u0013�Z\f\u0000������\"�\u001f \u0003�#�\u0000\u0010�C\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f�T\f\u0000��\u0003_��\u0003\u0014��\u0003\u0013��\u0003\u0015�K\f\u0000������\u001a�\u001f \u0003�\u0003�\u0000\u0010�C\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f�E\f\u0000��\u0003_��\u0003\u0014��\u0003\u0013��\u0003\u0015�<\f\u0000�����j �\u001f \u0003�\u0003�\u0000\u0010�C\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f�6\f\u0000��\u0003_��\u0003\u0014��\u0003\u0013��\u0003\u0015�-\f\u0000�����\u0002#�\u001f \u0003�\u0003�\u0000\u0010�C\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f�'\f\u0000��\u0003_��\u0003\u0014��\u0003\u0013��\u0003\u0015�\u001e\f\u0000�����:\u001e�\u001f \u0003�\u0003�\u0000\u0010�C\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f�\u0018\f\u0000��\u0003_��\u0003\u0014��\u0003\u0013��\u0003\u0015�\u000f\f\u0000�����\u000e\u001c�\u001f \u0003Ճ�\u0000\u0010�C\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f�\t\f\u0000��\u0003_��\u0003\u0014��\u0003\u0013��\u0003\u0015�\u0000\f\u0000�����\u0018�\u001f \u0003���\u0000\u0010�C\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f��\u000b\u0000��\u0003_��\u0003\u0014��\u0003\u0013��\u0003\u0015��\u000b\u0000������\u001f�\u001f \u0003�\u0003�\u0000\u0010�C\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f��\u000b\u0000��\u0003_��\u0003\u0014��\u0003\u0013��\u0003\u0015��\u000b\u0000�����\u0015�\u001f \u0003Ճ�\u0000\u0010�C\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f��\u000b\u0000��\u0003_��\u0003\u0014��\u0003\u0013��\u0003\u0015��\u000b\u0000������\u001f�\u001f \u0003���\u0000\u0010�C\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f��\u000b\u0000��\u0003_��\u0003\u0014��\u0003\u0013��\u0003\u0015��\u000b\u0000�����b$�\u001f \u0003�C�\u0000\u0010�C\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f��\u000b\u0000��\u0003_��\u0003\u0014��\u0003\u0013��\u0003\u0015��\u000b\u0000�����\u0015�\u001f \u0003���\u0000\u0010�C\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f��\u000b\u0000��\u0003_��\u0003\u0014��\u0003\u0013��\u0003\u0015��\u000b\u0000������\u0010�\u001f \u0003���\u0000\u0010�C\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f��\u000b\u0000��\u0003_��\u0003\u0014��\u0003\u0013��\u0003\u0015��\u000b\u0000�����\u001e\u001c�\u001f \u0003���\u0000\u0010�C\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f��\u000b\u0000��\u0003_��\u0003\u0014��\u0003\u0013��\u0003\u0015��\u000b\u0000�����\"#�\u001f \u0003���\u0000\u0010�C\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f��\u000b\u0000��\u0003_��\u0003\u0014��\u0003\u0013��\u0003\u0015�y\u000b\u0000�����\u0015�\u001f \u0003գ�\u0000\u0010�C\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f�s\u000b\u0000��\u0003_��\u0003\u0014��\u0003\u0013��\u0003\u0015�j\u000b\u0000������\u000e�\u001f \u0003�C\u000b\u0001\u0010�C\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f�d\u000b\u0000��\u0003_��\u0003\u0014��\u0003\u0013��\u0003\u0015�[\u000b\u0000������'�\u001f \u0003��\u0012\u0001\u0010�C\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f�U\u000b\u0000��\u0003_��\u0003\u0014��\u0003\u0013��\u0003\u0015�L\u000b\u0000�����j\u001d�\u001f \u0003��\u0013\u0001\u0010�C\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f�F\u000b\u0000��\u0003_��\u0003\u0014��\u0003\u0013��\u0003\u0015�=\u000b\u0000������\u0015�\u001f \u0003��\u0014\u0001\u0010�C\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f�7\u000b\u0000��\u0003_��\u0003\u0014��\u0003\u0013��\u0003\u0015�.\u000b\u0000�����.'�\u001f \u0003��\u0015\u0001\u0010�C\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f�(\u000b\u0000��\u0003_��\u0003\u0014��\u0003\u0013��\u0003\u0015�\u001f\u000b\u0000�����*\u0017�\u001f \u0003��\u0017\u0001\u0010�C\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f�\u0019\u000b\u0000��\u0003_��\u0003\u0014��\u0003\u0013��\u0003\u0015�\u0010\u000b\u0000�����>\u0017�\u001f \u0003Ճ)\u0001\u0010�C\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f�\n\u000b\u0000��\u0003_��\u0003\u0014��\u0003\u0013��\u0003\u0015�\u0001\u000b\u0000�����r\u0013�\u001f \u0003�C-\u0001\u0010�C\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f��\n\u0000��\u0003_��\u0003\u0014��\u0003\u0013��\u0003\u0015��\n\u0000�����\u0013�\u001f \u0003��/\u0001\u0010�C\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f��\n\u0000��\u0003_��\u0003\u0014��\u0003\u0013��\u0003\u0015��\n\u0000�����\n\u001b�\u001f \u0003��6\u0001\u0010�C\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u0016��\u0003\u001f��\n\u0000��\u0003_��\u0003\u0014��\u0003\u0013��\u0003\u0015��\n\u0000�����N'��C\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u0016��\u0003\u001f��\n\u0000��\u0003_��\u0003\u0014��\u0003\u0013��\u0003\u0015��\n\u0000������\u0013�\u001f \u0003��@\u0001\u0010�C\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f��\n\u0000��\u0003_��\u0003\u0014��\u0003\u0013��\u0003\u0015��\n\u0000�����J!�\u001f \u0003�\u0003J\u0001\u0010�C\u0000��\u0003\u0014��\u0003\u0015�\u0002\u0000���\u0003\u001f��\n\u0000��\u0003_��\u0003\u0014��\u0003\u0013��\u0003\u0015��\n\u0000��C\u0000��\u0003\u0014�!\u0000�R�\n\u0000��\u0003_�����Bp\u001c��\u0003\u0014��\u0003\u0013��\n\u0000��c\u0000��\u0003\u0014��\n\u0000��\u000f@�����BD#��\u0003\u0014��\u0003\u0013��\n\u0000��C\u0000��\u0003\u0014�!\u0000�R�\n\u0000��\u0007A�����B$&��\u0003\u0014��\n\u0000��C\u0000��\u0003\u0014�A\u0000�R�\n\u0000��\u0007A�����B�\u0010��\u0003\u0014��\n\u0000��C\u0000��\u0003\u0014�a\u0000�R�\n\u0000��\u0007A�����B�\u0012��\u0003\u0014�y\n\u0000��C\u0000��\u0003\u0014��\u0000�R�\n\u0000��\u0007A�����B�\u0013��\u0003\u0014�p\n\u0000��C\u0000��\u0003\u0014��\u0000�R|\n\u0000��\u0007A�����B\u0014\u0014��\u0003\u0014�g\n\u0000��C\u0000��\u0003\u0014��\u0000�Rs\n\u0000��\u0007A�����B�'��\u0003\u0014�^\n\u0000��C\u0000��\u0003\u0014��\u0000�Rj\n\u0000��\u0007A�����B�%��\u0003\u0014�U\n\u0000��C\u0000��\u0003\u0014��\u0000�Ra\n\u0000��\u0007A�����Bd#��\u0003\u0014�L\n\u0000��C\u0000��\u0003\u0014�\u0001\u0001�RX\n\u0000��\u0007A�����B4\u0014��\u0003\u0014�C\n\u0000��C\u0000��\u0003\u0014�!\u0001�RO\n\u0000��\u0007A�����B,\u000f��\u0003\u0014�:\n\u0000��C\u0000��\u0003\u0014�A\u0001�RF\n\u0000��\u0007A�����B�\u0018��\u0003\u0014�1\n\u0000��C\u0000��\u0003\u0014�a\u0001�R=\n\u0000��\u0007A�����Bl!��\u0003\u0014�(\n\u0000��C\u0000��\u0003\u0014��\u0001�R4\n\u0000��\u0007A�����B\f%��\u0003\u0014�\u001f\n\u0000��C\u0000��\u0003\u0014��\u0001�R+\n\u0000��\u0007A�����B�\u0010��\u0003\u0014�\u0016\n\u0000��C\u0000��\u0003\u0014��\u0001�R\"\n\u0000��\u0007A�����B�\u001f��\u0003\u0014�\r\n\u0000��C\u0000��\u0003\u0014��\u0001�R\u0019\n\u0000��\u0007A�����B\\\u001e��\u0003\u0014�\u0004\n\u0000��C\u0000��\u0003\u0014�!\u0002�R\u0010\n\u0000��\u0007A�����B�%��\u0003\u0014��\t\u0000��C\u0000��\u0003\u0014�\u0001\u0002�R\u0007\n\u0000��\u0007A�����B`\u001a��\u0003\u0014��\t\u0000��C\u0000��\u0003\u0014�A\u0002�R�\t\u0000��\u0007A�����B4\"��\u0003\u0014��\t\u0000��C\u0000��\u0003\u0014�a\u0002�R�\t\u0000��\u0007A�����B�\u001d��\u0003\u0014��\t\u0000��C\u0000��\u0003\u0014��\u0002�R�\t\u0000��\u0007A�����B,%��\u0003\u0014��\t\u0000��C\u0000��\u0003\u0014��\u0002�R�\t\u0000��\u0007A�����B@&��\u0003\u0014��\t\u0000��C\u0000��\u0003\u0014��\u0002�R�\t\u0000��\u0007A�����B|\u001e��\u0003\u0014��\t\u0000��C\u0000��\u0003\u0014��\u0002�R�\t\u0000��\u0007A�����B�\u001c��\u0003\u0014��\t\u0000��C\u0000��\u0003\u0014�\u0001\u0003�R�\t\u0000��\u0007A�����B�\u0011��\u0003\u0014��\t\u0000��C\u0000��\u0003\u0014�!\u0003�R�\t\u0000��\u0007A�����B`&��\u0003\u0014��\t\u0000��C\u0000��\u0003\u0014�A\u0003�R�\t\u0000��\u0007A�����B�%��\u0003\u0014��\t\u0000��C\u0000��\u0003\u0014�a\u0003�R�\t\u0000��\u0007A�����B�\u0018��\u0003\u0014��\t\u0000��C\u0000��\u0003\u0014��\u0003�R�\t\u0000��\u0007A�����B�\u0012��\u0003\u0014��\t\u0000��C\u0000��\u0003\u0014��\u0003�R�\t\u0000��\u0007A�����BP\u0012��\u0003\u0014��\t\u0000��C\u0000��\u0003\u0014��\u0003�R�\t\u0000��\u0007A�����B$\u001b��\u0003\u0014�}\t\u0000��C\u0000��\u0003\u0014��\u0003�R�\t\u0000��\u0007A�����B�\u001a��\u0003\u0014�t\t\u0000��C\u0000��\u0003\u0014��\u0003�R�\t\u0000��\u0007A�����B�\u0018��\u0003\u0014�k\t\u0000��C\u0000��\u0003\u0014��\u0003�Rw\t\u0000��\u0007A�����B� ��\u0003\u0014�b\t\u0000��C\u0000��\u0003\u0014�k\t\u0000��\u000b@�����B\u0010\u000f��\u0003\u0014��\u0003\u0013�Y\t\u0000��#\u0000��\u0003\u0014��\u0000�\u0012i\t\u0000��@�����B\f ��\u0003\u0014�P\t\u0000��#\u0000��\u0003\u0014��\u0001�\u0012`\t\u0000��@�����Bh'��\u0003\u0014�G\t\u0000��#\u0000��\u0003\u0014�!\f�\u0012W\t\u0000��@�����B\u0010\u0016��\u0003\u0014�>\t\u0000��#\u0000��\u0003\u0014�A\f�\u0012N\t\u0000��@�����B|\u0017��\u0003\u0014�5\t\u0000��#\u0000��\u0003\u0014�\u0001\f�\u0012E\t\u0000��@�����B�\u000f��\u0003\u0014�,\t\u0000��#\u0000��\u0003\u0014�A\u0001�\u0012<\t\u0000��@�����B�'��\u0003\u0014�#\t\u0000��#\u0000��\u0003\u0014��v�\u00123\t\u0000��@�����B�!��\u0003\u0014�\u001a\t\u0000��#\u0000��\u0003\u0014�\u0001w�\u0012*\t\u0000��@�����B�\u0014��\u0003\u0014�\u0011\t\u0000��#\u0000��\u0003\u0014�!w�\u0012!\t\u0000��@�����B�\u0017��\u0003\u0014�\b\t\u0000��#\u0000��\u0003\u0014��x�\u0012\u0018\t\u0000��@�����B�$��\u0003\u0014��\b\u0000��#\u0000��\u0003\u0014�Aw�\u0012\u000f\t\u0000��@�����B�#��\u0003\u0014��\b\u0000��#\u0000��\u0003\u0014�aw�\u0012\u0006\t\u0000��@�����B\u0000(��\u0003\u0014��\b\u0000��#\u0000��\u0003\u0014��w�\u0012�\b\u0000��@�����B�\u0017��\u0003\u0014��\b\u0000��#\u0000��\u0003\u0014��w�\u0012�\b\u0000��@�����B�\u0018��\u0003\u0014��\b\u0000��#\u0000��\u0003\u0014��w�\u0012�\b\u0000��@�����B \u0019��\u0003\u0014��\b\u0000��#\u0000��\u0003\u0014��w�\u0012�\b\u0000��@�����BD\u001b��\u0003\u0014��\b\u0000��#\u0000��\u0003\u0014�\u0001x�\u0012�\b\u0000��@�����B�#��\u0003\u0014��\b\u0000��#\u0000��\u0003\u0014��x�\u0012�\b\u0000��@�����B�\u001c��\u0003\u0014��\b\u0000��#\u0000��\u0003\u0014�!x�\u0012�\b\u0000��@�����BP\u0014��\u0003\u0014��\b\u0000��#\u0000��\u0003\u0014�Ax�\u0012�\b\u0000��@�����B�\u001d��\u0003\u0014��\b\u0000��#\u0000��\u0003\u0014�!\u000e�\u0012�\b\u0000��@�����B�\u001d��\u0003\u0014��\b\u0000��#\u0000��\u0003\u0014�\u0001\u0001�\u0012�\b\u0000��@�����B�\u0019��\u0003\u0014��\b\u0000��#\u0000��\u0003\u0014��\u0001�\u0012�\b\u0000��@�����B\u0014\u0018��\u0003\u0014��\b\u0000��#\u0000��\u0003\u0014��\u000f�\u0012�\b\u0000��@�����B�\u0014��\u0003\u0014��\b\u0000��#\u0000��\u0003\u0014����\u0012�\b\u0000��@�����BL%��\u0003\u0014�x\b\u0000��#\u0000��\u0003\u0014��\f�\u0012�\b\u0000��@�����B�%��\u0003\u0014�o\b\u0000��#\u0000��\u0003\u0014��\r�\u0012\b\u0000��@�����B�!��\u0003\u0014�f\b\u0000��#\u0000��\u0003\u0014��\f�\u0012v\b\u0000��@�����B�\u001a��\u0003\u0014�]\b\u0000��#\u0000��\u0003\u0014�\u0001\u000b�\u0012m\b\u0000��@�����Bp\u001b��\u0003\u0014�T\b\u0000��#\u0000��\u0003\u0014�\u0001\u0002�\u0012d\b\u0000��@�����B$(��\u0003\u0014�K\b\u0000��#\u0000��\u0003\u0014��\u0001�\u0012[\b\u0000��@�����BL\u000f��\u0003\u0014�B\b\u0000��#\u0000��\u0003\u0014�A\u0003�\u0012R\b\u0000��@�����B�\u000f��\u0003\u0014�9\b\u0000��#\u0000��\u0003\u0014�\u0001\u000e�\u0012I\b\u0000��@�����B4\u001f��\u0003\u0014�0\b\u0000��#\u0000��\u0003\u0014�a\u0000�\u0012@\b\u0000��@�����B,\u0018��\u0003\u0014�'\b\u0000��#\u0000��\u0003\u0014��\u0002�\u00127\b\u0000��@�����B�!��\u0003\u0014�\u001e\b\u0000��#\u0000��\u0003\u0014��\u0000�\u0012.\b\u0000��@�����B$\u0015��\u0003\u0014�\u0015\b\u0000��#\u0000��\u0003\u0014�!\r�\u0012%\b\u0000��@�����B�'��\u0003\u0014�\f\b\u0000��#\u0000��\u0003\u0014��\u0002�\u0012\u001c\b\u0000��@�����BL\u0019��\u0003\u0014�\u0003\b\u0000��#\u0000��\u0003\u0014��\u0004�\u0012\u0013\b\u0000��@�����B\u0004\u001e��\u0003\u0014��\u0007\u0000��#\u0000��\u0003\u0014��\u0002�\u0012\n\b\u0000��@�����B\u0010\u0011��\u0003\u0014��\u0007\u0000��#\u0000��\u0003\u0014�!\u000b�\u0012\u0001\b\u0000��@�����B�\u0019��\u0003\u0014��\u0007\u0000��#\u0000��\u0003\u0014�a\u0004�\u0012�\u0007\u0000��@�����B�\u001b��\u0003\u0014��\u0007\u0000��#\u0000��\u0003\u0014�a\f�\u0012�\u0007\u0000��@�����B�\u000f��\u0003\u0014��\u0007\u0000��#\u0000��\u0003\u0014��\f�\u0012�\u0007\u0000��@�����B\u0018\u0010��\u0003\u0014��\u0007\u0000��#\u0000��\u0003\u0014��\u0002�\u0012�\u0007\u0000��@�����B�\u0014��\u0003\u0014��\u0007\u0000��#\u0000��\u0003\u0014�\u0001\r�\u0012�\u0007\u0000��@�����B,\u0011��\u0003\u0014��\u0007\u0000��#\u0000��\u0003\u0014�A\u0002�\u0012�\u0007\u0000��@�����B�\u001b��\u0003\u0014��\u0007\u0000��#\u0000��\u0003\u0014�!\u0000�\u0012�\u0007\u0000��@�����BH\u0010��\u0003\u0014��\u0007\u0000��#\u0000��\u0003\u0014�a\u0001�\u0012�\u0007\u0000��@�����B� ��\u0003\u0014��\u0007\u0000��#\u0000��\u0003\u0014��\u0007�\u0012�\u0007\u0000��@�����B�#��\u0003\u0014��\u0007\u0000��#\u0000��\u0003\u0014�a\u000b�\u0012�\u0007\u0000��@�����B\u001c\u0013��\u0003\u0014��\u0007\u0000��#\u0000��\u0003\u0014�a\u0003�\u0012�\u0007\u0000��@�����Bd\u0010��\u0003\u0014��\u0007\u0000��#\u0000��\u0003\u0014��\u0004�\u0012�\u0007\u0000��@�����Bh\u0019��\u0003\u0014�|\u0007\u0000��#\u0000��\u0003\u0014�A\r�\u0012�\u0007\u0000��@�����BT\"��\u0003\u0014�s\u0007\u0000��#\u0000��\u0003\u0014�a\u0002�\u0012�\u0007\u0000��@�����BL\u0011��\u0003\u0014�j\u0007\u0000��#\u0000��\u0003\u0014��\u0004�\u0012z\u0007\u0000��@�����B�\u001e��\u0003\u0014�a\u0007\u0000��#\u0000��\u0003\u0014��\n�\u0012q\u0007\u0000��@�����B<\u0016��\u0003\u0014�X\u0007\u0000��#\u0000��\u0003\u0014��\u000b�\u0012h\u0007\u0000��@�����Bx\"��\u0003\u0014�O\u0007\u0000��#\u0000��\u0003\u0014�A\t�\u0012_\u0007\u0000��@�����B�\u000f��\u0003\u0014�F\u0007\u0000��#\u0000��\u0003\u0014�\u0001\u0000�\u0012V\u0007\u0000��@�����B�\u0010��\u0003\u0014�=\u0007\u0000��#\u0000��\u0003\u0014��\u0003�\u0012M\u0007\u0000��@�����Bl\u0011��\u0003\u0014�4\u0007\u0000��#\u0000��\u0003\u0014��\b�\u0012D\u0007\u0000��@�����B�\u0019��\u0003\u0014�+\u0007\u0000��#\u0000��\u0003\u0014��\u000b�\u0012;\u0007\u0000��@�����B�&��\u0003\u0014�\"\u0007\u0000��#\u0000��\u0003\u0014�A\u000b�\u00122\u0007\u0000��@�����B� ��\u0003\u0014�\u0019\u0007\u0000��#\u0000��\u0003\u0014�!\u0004�\u0012)\u0007\u0000��@�����Bh\u0012��\u0003\u0014�\u0010\u0007\u0000��#\u0000��\u0003\u0014��\u0003�\u0012 \u0007\u0000��@�����B�\u001a��\u0003\u0014�\u0007\u0007\u0000��#\u0000��\u0003\u0014�a\r�\u0012\u0017\u0007\u0000��@�����B�\u0012��\u0003\u0014��\u0006\u0000��#\u0000��\u0003\u0014��\u0003�\u0012\u000e\u0007\u0000��@�����B�\"��\u0003\u0014��\u0006\u0000��#\u0000��\u0003\u0014�A\u0000�\u0012\u0005\u0007\u0000��@�����B�\u0019��\u0003\u0014��\u0006\u0000��#\u0000��\u0003\u0014��\r�\u0012�\u0006\u0000��@�����Bh\u001f��\u0003\u0014��\u0006\u0000��#\u0000��\u0003\u0014�!\u0003�\u0012�\u0006\u0000��@�����B4\u0015��\u0003\u0014��\u0006\u0000��#\u0000��\u0003\u0014�!\u0002�\u0012�\u0006\u0000��@�����B\u0004$��\u0003\u0014��\u0006\u0000��#\u0000��\u0003\u0014����\u0012�\u0006\u0000��@�����B�\"��\u0003\u0014��\u0006\u0000��#\u0000��\u0003\u0014����\u0012�\u0006\u0000��@�����BD\u0018��\u0003\u0014��\u0006\u0000��#\u0000��\u0003\u0014��\u0000�\u0012�\u0006\u0000��@�����B�\u001b��\u0003\u0014��\u0006\u0000��#\u0000��\u0003\u0014��\u0003�\u0012�\u0006\u0000��@�����B�\u0014��\u0003\u0014��\u0006\u0000��#\u0000��\u0003\u0014��\r�\u0012�\u0006\u0000��@�����B�\u001e��\u0003\u0014��\u0006\u0000��#\u0000��\u0003\u0014�\u0001\u000f�\u0012�\u0006\u0000��@�����B�\u0010��\u0003\u0014��\u0006\u0000��#\u0000��\u0003\u0014�\u0001\u0003�\u0012�\u0006\u0000��@�����BT\u0018��\u0003\u0014��\u0006\u0000��#\u0000��\u0003\u0014�a��\u0012�\u0006\u0000��@�����B\u0018\"��\u0003\u0014��\u0006\u0000��#\u0000��\u0003\u0014�a\n�\u0012�\u0006\u0000��@�����B\u001c\u001e��\u0003\u0014��\u0006\u0000��#\u0000��\u0003\u0014��\u000b�\u0012�\u0006\u0000��@�����B@(��\u0003\u0014�w\u0006\u0000��#\u0000��\u0003\u0014��\u0007�\u0012�\u0006\u0000��@�����B�$��\u0003\u0014�n\u0006\u0000��#\u0000��\u0003\u0014�\u0001\u0006�\u0012~\u0006\u0000��@�����B� ��\u0003\u0014�e\u0006\u0000��\u0016@���_�\u001f\u0001\t�\u0001\u0001\u0000T�\u0003\u0013��OF��#@��WE��{C���\u0001��\u0003_�q\u0006\u0000�\u001f \u0003�@\u0004\u0002\u0010r\u0006\u0000\u0014�{���\u000b\u0000��W\u0002��O\u0003��\u0003\u0000��C\u0010�V�;��\u0003\u0000��#\u0000��\u0016@���\u001f�j\u0006\u0000�`\u0002�7�#\u0000��\u0003\u0000��\u0003\u0013�\u0002\u0000��@\u0006\u0000��\u0003@�\u001f\u0000\u0000qೈ��\u0016@���_�\u001f\u0001\t�\u0002\u0000T�C\u0010��OC��\u000b@��WB��{Ĩ�\u0003_��\u0003\u0000*Y\u0006\u0000��\u0003\u0000��\u0003\u0014*Z\u0006\u0000��\u0003\u0000��\u0003\u0013��\u0003\u0015�Z\u0006\u0000��\u0003\u001f��\u0016@���_�\u001f\u0001\t���T@\u0006\u0000��{���\u000b\u0000��W\u0002��O\u0003��\u0003\u0000��C\u0010�V�;��\u0003\u0000��#\u0000��\u0016@��#\u0000���\u001f�;\u0006\u0000�`\u0002�7�\u0002\b��\u0003\u0000��\u0003\u0013�\u0002\u0000��\u0011\u0006\u0000��\u0003@�\u001f\u0000\u0000qೈ��\u0016@���_�\u001f\u0001\t�\u0002\u0000T�C\u0010��OC��\u000b@��WB��{Ĩ�\u0003_��\u0003\u0000**\u0006\u0000��\u0003\u0000��\u0003\u0014*+\u0006\u0000��\u0003\u0000��\u0003\u0013��\u0003\u0015�+\u0006\u0000��\u0003\u001f��\u0016@���_�\u001f\u0001\t���T\u0011\u0006\u0000��{���\u000b\u0000��W\u0002��O\u0003��\u0003\u0000��C\u0010�V�;��\u0003\u0000��#\u0000��\u0016@��#\u0000���\u001f�\f\u0006\u0000�`\u0002�7�\u0002\u0004��\u0003\u0000��\u0003\u0013�\u0002\u0000���\u0005\u0000��\u0003@�\u001f\u0000\u0000qೈ��\u0016@���_�\u001f\u0001\t�\u0002\u0000T�C\u0010��OC��\u000b@��WB��{Ĩ�\u0003_��\u0003\u0000*�\u0005\u0000��\u0003\u0000��\u0003\u0014*�\u0005\u0000��\u0003\u0000��\u0003\u0013��\u0003\u0015��\u0005\u0000��\u0003\u001f��\u0016@���_�\u001f\u0001\t���T�\u0005\u0000��{���\u000b\u0000��W\u0002��O\u0003��\u0003\u0000��C\u0010�V�;��\u0003\u0000��#\u0000��\u0016@��#\u0000���\u001f��\u0005\u0000�`\u0002�7�\u0002\f��\u0003\u0000��\u0003\u0013�\u0002\u0000���\u0005\u0000��\u0003@�\u001f\u0000\u0000qೈ��\u0016@���_�\u001f\u0001\t�\u0002\u0000T�C\u0010��OC��\u000b@��WB��{Ĩ�\u0003_��\u0003\u0000*�\u0005\u0000��\u0003\u0000��\u0003\u0014*�\u0005\u0000��\u0003\u0000��\u0003\u0013��\u0003\u0015��\u0005\u0000��\u0003\u001f��\u0016@���_�\u001f\u0001\t���T�\u0005\u0000��{���\u000b\u0000��W\u0002��O\u0003��\u0003\u0000��\u0007@���\u0000�V�;��\u0003\u0000�\t\u0000�R�\u0016@��c\u0000��C\u0000���\u001f��\u000b\u0000��\u0005\u0000��\u0002�7�\u000b@��c\u0000��#\u0000��\u0003\u0013��\u0005\u0000��\u0007@�\u001f\u0000\u0000qೈ��\u0016@���_�\u001f\u0001\t��\u0002\u0000T�\u0007@���\u0000��OC��\u000b@��WB��{Ĩ�\u0003_��\u0003\u0000*�\u0005\u0000��\u0003\u0000��\u0003\u0014*�\u0005\u0000��\u0003\u0000��\u0003\u0013��\u0003\u0015��\u0005\u0000��\u0003\u001f��\u0016@���_�\u001f\u0001\t���T�\u0005\u0000���\u0000��{\u0001��O\u0002��C\u0000�T�;��\u0003\u0000��\u0016@��\u0007\u0000��\u0005\u0000��\u0003\u0000*�\u0003\u0000��\u0003\u0013�k\u0005\u0000��\u0003@��\u0016@�\u001f\u0000\u0000q�\u0007@�ೈ�?\u0001\n�\u0000\u0000T�OB��{A���\u0000��\u0003_�g\u0005\u0000���\u0000��{\u0001��O\u0002��C\u0000�T�;��\u0003\u0000��\u0016@��\u0007\u0000�~\u0005\u0000��\u0003\u0000*�\u0003\u0000��\u0003\u0013�R\u0005\u0000��\u0003@��\u0016@�\u001f\u0000\u0000q�\u0007@�ೈ�?\u0001\n�\u0000\u0000T�OB��{A���\u0000��\u0003_�N\u0005\u0000��{���\u000b\u0000��W\u0002��O\u0003��\u0003\u0000��\u0007@���\u0000�V�;��\u0003\u0000�\t\u0000�R�\u0016@��c\u0000��C\u0000���\u001f��\u000b\u0000�b\u0005\u0000��\u0002�7�\u000b@��c\u0000��#\u0000��\u0003\u0013�\u001c\u0005\u0000��\u0007@�\u001f\u0000\u0000qೈ��\u0016@���_�\u001f\u0001\t��\u0002\u0000T�\u0007@���\u0000��OC��\u000b@��WB��{Ĩ�\u0003_��\u0003\u0000*4\u0005\u0000��\u0003\u0000��\u0003\u0014*5\u0005\u0000��\u0003\u0000��\u0003\u0013��\u0003\u0015�5\u0005\u0000��\u0003\u001f��\u0016@���_�\u001f\u0001\t���T\u001b\u0005\u0000��{���\u000b\u0000��W\u0002��O\u0003��\u0003\u0000��\u0007@���\u0000�V�;�)\u0000�R�#\u0000��\u0016@��C\u0000��\u0003\u001f��\u0003\u001f��\u0003\u0000���\u001f��\u0007\u0000�1\u0005\u0000��\u0003_��C\u0000��\u0003\u0013�\u0003\u0000�R�\u0003\u001f�/\u0005\u0000��C\u0000�1\u0005\u0000�@\u0001�6�\u0003\u0000*\n\u0005\u0000��\u0003\u0000��\u0003\u0014*\u000b\u0005\u0000��\u0003\u0000��\u0003\u0013��\u0003\u0015�\u000b\u0005\u0000��\u0016@���_�\u001f\u0001\t�!\u0001\u0000T�\u0003\u001f��\u0007@���\u0000��OC��\u000b@��WB��{Ĩ�\u0003_��\u0004\u0000��{���\u000b\u0000��W\u0002��O\u0003��\u0003\u0000��\u0007@���\u0000�V�;��\u0003\u0000�\t\u0000�R�\u0016@��c\u0000��C\u0000���\u001f��\u000b\u0000�\u000e\u0005\u0000��\u0002�7�\u000b@��c\u0000��#\u0000��\u0003\u0013��\u0004\u0000��\u0007@�\u001f\u0000\u0000qೈ��\u0016@���_�\u001f\u0001\t��\u0002\u0000T�\u0007@���\u0000��OC��\u000b@��WB��{Ĩ�\u0003_��\u0003\u0000*�\u0004\u0000��\u0003\u0000��\u0003\u0014*�\u0004\u0000��\u0003\u0000��\u0003\u0013��\u0003\u0015��\u0004\u0000��\u0003\u001f��\u0016@���_�\u001f\u0001\t���T�\u0004\u0000��{���\u000b\u0000��W\u0002��O\u0003��\u0003\u0000��\u0007@���\u0000�V�;��\u0003\u0000�\t\u0000�R�\u0016@��c\u0000��C\u0000���\u001f��\u000b\u0000��\u0004\u0000��\u0002�7�\u000b@��c\u0000��#\u0000��\u0003\u0013��\u0004\u0000��\u0007@�\u001f\u0000\u0000qೈ��\u0016@���_�\u001f\u0001\t��\u0002\u0000T�\u0007@���\u0000��OC��\u000b@��WB��{Ĩ�\u0003_��\u0003\u0000*�\u0004\u0000��\u0003\u0000��\u0003\u0014*�\u0004\u0000��\u0003\u0000��\u0003\u0013��\u0003\u0015��\u0004\u0000��\u0003\u001f��\u0016@���_�\u001f\u0001\t���T�\u0004\u0000��C\u0002��{\u0006��W\u0007��O\b���\u0001�V�;��\u0003\u0000�)\b�R�\u0016@��_\u0000��#\u0000���\u001f��\u0007\u0000��\u0004\u0000�@\u0002�7�\u0007@��_\u0000��\u0003\u0000��\u0003\u0013�T\u0004\u0000��\u0003@�\u001f\u0000\u0000qೈ��\u0016@���_�\u001f\u0001\t�\u0002\u0000T�OH��WG��{F��C\u0002��\u0003_��\u0003\u0000*n\u0004\u0000��\u0003\u0000��\u0003\u0014*o\u0004\u0000��\u0003\u0000��\u0003\u0013��\u0003\u0015�o\u0004\u0000��\u0003\u001f��\u0016@���_�\u001f\u0001\t����TU\u0004\u0000���\u0001��{\u0003��W\u0004��O\u0005���\u0000�V�;�I\u0000�R�C\u0000��\u0016@��c\u0000��\u0003\u001f��\u0003\u001f��\u0003\u0000���\u001f��\u000b\u0000�m\u0004\u0000��\u000f@��3\u0000��\u0003\u0013��\u0004\u0000��\u0013@��#\u0000��\u0003\u0013�}\u0004\u0000��\u0003A)\u0004\u0000�@\u0001�6�\u0003\u0000*D\u0004\u0000��\u0003\u0000��\u0003\u0014*E\u0004\u0000��\u0003\u0000��\u0003\u0013��\u0003\u0015�E\u0004\u0000��\u0016@���_�\u001f\u0001\t��\u0000\u0000T�\u0003\u001f��OE��WD��{C���\u0001��\u0003_�&\u0004\u0000���\u0000��{\u0001��O\u0002��C\u0000�T�;��\u0003\u0000��\u0016@��\u0007\u0000�e\u0004\u0000��\u0003\u0000*�\u0003\u0000��\u0003\u0013�e\u0004\u0000��\u0003@��\u0016@��\u0007@�\u001f\u0001\t�\u0000\u0000T�OB��{A���\u0000��\u0003_�\u000f\u0004\u0000���\u0003��[\u0000��{\f��O\r��\u0003\u0003�T�;��\u0003\u0000��c\u0000��\u0016@���\u001e�T\u0004\u0000��C\u0000��\u0003\u0013��\u0003\u0000���Am\b����%���#\u0000��\u0003\u0013�\b\u0001g�\u0000�a^!�a^\u0000\u0004H\u001f\u0001\u0000x�B\u0004\u0000��@�����Bp\u0018��\u0003\u0013��\u0003\u0000���Bm�#\u0000��\u0003\u0013�\u0000�a^!�a^\u0000\u0004H\u001f\u0001\u0000x�5\u0004\u0000��@�����Bp%��\u0003\u0013��\u0003\u0000��\u000b@��\u0016@���^�\u001f\u0001\t��\u0000\u0000T�OM��[@��{L���\u0003��\u0003_��\u0003\u0000���\u0003��[\u0000��{\f��O\r��\u0003\u0003�T�;��\u0003\u0000��c\u0000��\u0016@���\u001e�\u001e\u0004\u0000��C\u0000��\u0003\u0013��\u0003\u0000���Am\b����%���#\u0000��\u0003\u0013�\b\u0001g�\u0000�a^!�a^\u0000\u0004H\u001f\u0001\u0000x�\f\u0004\u0000��@�����B�\u0011��\u0003\u0013��\u0003\u0000���Bm�#\u0000��\u0003\u0013�\u0000�a^!�a^\u0000\u0004H\u001f\u0001\u0000x��\u0003\u0000��@�����B�$��\u0003\u0013��\u0003\u0000��\u001f@��#\u0000��\u0003\u0013��\u0003\u0000��@�����B�\u0014��\u0003\u0013��\u0003\u0000��#@��#\u0000��\u0003\u0013��\u0003\u0000��@�����B$ ��\u0003\u0013��\u0003\u0000��'@��#\u0000��\u0003\u0013��\u0003\u0000��@�����B\u001c$��\u0003\u0013�{\u0003\u0000��+@��#\u0000��\u0003\u0013��\u0003\u0000��@�����B�\u001e��\u0003\u0013�r\u0003\u0000��/@��#\u0000��\u0003\u0013��\u0003\u0000��@�����B�\u001c��\u0003\u0013�i\u0003\u0000��3@��#\u0000��\u0003\u0013��\u0003\u0000��@�����B`\u0016��\u0003\u0013�`\u0003\u0000��7@��#\u0000��\u0003\u0013��\u0003\u0000��@�����B�\u0012��\u0003\u0013�W\u0003\u0000��;@��#\u0000��\u0003\u0013��\u0003\u0000��@�����B8\u001d��\u0003\u0013�N\u0003\u0000��?@��#\u0000��\u0003\u0013��\u0003\u0000��@�����B�\u0019��\u0003\u0013�E\u0003\u0000��C@��#\u0000��\u0003\u0013��\u0003\u0000��@�����B�(��\u0003\u0013�<\u0003\u0000��G@��#\u0000��\u0003\u0013��\u0003\u0000��@�����B�\u001f��\u0003\u0013�3\u0003\u0000��K@��#\u0000��\u0003\u0013��\u0003\u0000��@�����B\u0014\u001a��\u0003\u0013�*\u0003\u0000��O@��#\u0000��\u0003\u0013��\u0003\u0000��@�����B�\u0016��\u0003\u0013�!\u0003\u0000��S@��#\u0000��\u0003\u0013��\u0003\u0000��@�����B�&��\u0003\u0013�\u0018\u0003\u0000��\u000b@��\u0016@���^�\u001f\u0001\t��\u0000\u0000T�OM��[@��{L���\u0003��\u0003_�%\u0003\u0000���\u0001��{\u0005��O\u0006��C\u0001�\u001f \u0003�)��\u0010T�;� \u0005@��\u0016@��\u0000��\u0003\u0000���\u001f��\u0007\u0001�k\u0003\u0000��c\u0000��\u0003\u0013�\b\u0003\u0000��C\u0000�j\u0003\u0000��\u000b@��#\u0000��\u0003\u0013�Z\u0003\u0000��\u000f@��\u0007@�����B� ��\u0003\u0013��\u0002\u0000��\u0017@�?\u0004\u0000�@\u0001\u0000T�\u0003\u0000��\u0003\u0013�N\u0003\u0000��\u000f@��\u0003@�����B\u0000\u0017��\u0003\u0013��\u0002\u0000��\u001b@�?\u0004\u0000�@\u0001\u0000T�\u0003\u0000��\u0003\u0013�B\u0003\u0000��\u000f@��\u0003@�����B�\u0011��\u0003\u0013��\u0002\u0000��\u001f@�?\u0004\u0000�@\u0001\u0000T�\u0003\u0000��\u0003\u0013�6\u0003\u0000��\u000f@��\u0003@�����BL\u0013��\u0003\u0013��\u0002\u0000��\u000f@��\u0016@���_�\u001f\u0001\t�\u0000\u0000T�OF��{E���\u0001��\u0003_��\u0002\u0000���\u0000��{\u0001��O\u0002��C\u0000�T�;��\u0003\u0000��\u0016@��\u0007\u0000�-\u0003\u0000��\u0003\u0000��\u0003\u0000��\u0003\u0013�\u0019\u0003\u0000��\u0003@��\u0016@��\u0007@�\u001f\u0001\t�\u0000\u0000T�OB��{A���\u0000��\u0003_��\u0002\u0000���\u0000��{\u0001��O\u0002��C\u0000�T�;��\u0003\u0000��\u0016@��\u0007\u0000�\u001a\u0003\u0000��\u0003\u0000��\u0003\u0000��\u0003\u0013�\u0002\u0003\u0000��\u0003@��\u0016@��\u0007@�\u001f\u0001\t�\u0000\u0000T�OB��{A���\u0000��\u0003_֬\u0002\u0000��\u0003\u0001��{\u0002��O\u0003���\u0000�T�;��\u0003\u0000��C\u0000��\u0016@���\u001f�\u0006\u0003\u0000��\u000b@��#\u0000��\u0003\u0013�\u0006\u0003\u0000��\u0007@��\u0016@���_�\u001f\u0001\t�\u0000\u0000T�OC��{B��\u0003\u0001��\u0003_֔\u0002\u0000��\u0003\u0001��{\u0002��O\u0003���\u0000�T�;��C\u0000��#\u0000��\u0016@�\u0001\u0003�R�\u0003\u0000���\u001f��\u0002\u0000��\u0007@��\u0003\u0000��\u0003\u0013�\u0001\u0001�Rb\u0000�R�\u0003\u001f��\u0002\u0000��\u000b@��\u0002\u0000��\u0003@��\u0016@���_�\u001f\u0001\t�\u0000\u0000T�OC��{B��\u0003\u0001��\u0003_�u\u0002\u0000���\u0002��{\u0005��o\u0006��g\u0007��_\b��W\t��O\n��C\u0001�V�;��\u0003\u0000��C\u0000��\u0016@��S\u0000Ѩ�\u001f��\u0002\u0000� \u000e�7�Þ���\u0000��\u0003\u0013��\u0002\u0000���^��\u000e\u00004\t�z��\u0003\u001f��\u0003\u001f*(\r\b���\u0000��\u0003_��\u0000��\u0003\u0013�\b\u0001\u001c�\u001aeA�\u001b\u0001@�\u0018YB�\u0017\t@�\u0015\u0019@�D\u0002\u0000��\u0003^��\u0017@��\u0003\u0013��\u0003\u0014*�\u0002\u0000��\u0000��\u0003\u0013��\u0003\u001b�\u0002\u0000��*\u0002\u0000��\u0007B��\u0003\u0013�����B�\"�)\u0002\u0000��\u0002b\u001e�\u0000��\u0003\u0013��\u0002\u0000��\u0007B��\u0003\u0013�����BT\u0015� \u0002\u0000��\u0000��\u0003\u0013�)\u0002\u0000��\u0007B������j\u000f��\u0003\u0013��\u0003\u0017�\u0017\u0002\u0000��\u0017@��\u0000��\u0003\u0013��\u0003\u0017��\u0002\u0000��c\u0000��\u0003\u0013��\u0003\u001a�r\u0002\u0000��A��\u0003\u0013�����Bp\u0018�\t\u0002\u0000��c\u0000��\u0003\u0013��\u0003\u0019�i\u0002\u0000��A��\u0003\u0013�����BT\u001d�\u0000\u0002\u0000��c\u0000��\u0003\u0013��\u0003\u0018�`\u0002\u0000��A��\u0003\u0013�����B�\u0011��\u0001\u0000��c\u0000��\u0003\u0013��\u0003\u0016�W\u0002\u0000��A��\u0003\u0013�����B\b\u0012��\u0001\u0000��c\u0000��\u0003\u0013��\u0003\u0015�N\u0002\u0000��A��\u0003\u0013�����B\u001c\u0012��\u0001\u0000��\u000b@���\u0000��\u0006\u0000\u0011\u001f\u0001\u001c����T��^��\u0007@�\r\u0000\u0000\u0014�\u0003\u0000*�\u0001\u0000��\u0003\u0000��\u0003\u0014*\u0000\u0002\u0000��\u0003\u0000��\u0003\u0013��\u0003\u0015�\u0000\u0002\u0000��\u0003\u001f�\u0005\u0000\u0000\u0014�\u0003\u001f*�\u0003_�o\u0002\u0000��\u0003^��\u0016@���_�\u001f\u0001\t�!\u0001\u0000T�OJ��WI��_H��gG��oF��{E���\u0002��\u0003_��\u0001\u0000��C\u0005��{\u0011���\u0000��W\u0013��O\u0014��C\u0004�V�;��\u0003\u0000��#\u0000��\u0016@�\u0001 �R��\u001f�X\u0002\u0000� \u0002�7�#\u0000��\u0003\u0000��\u0003\u0013�\u0002\u0000���\u0001\u0000��\u0003@��\u0016@���_�\u001f\u0001\t�\u0002\u0000T�OT���@��WS��{Q��C\u0005��\u0003_��\u0003\u0000*�\u0001\u0000��\u0003\u0000��\u0003\u0014*�\u0001\u0000��\u0003\u0000��\u0003\u0013��\u0003\u0015��\u0001\u0000��\u0003\u001f��\u0016@���_�\u001f\u0001\t���T�\u0001\u0000��C\u0005��{\u0012���\u0000��O\u0014���\u0004�T�;�)\u0000�R�#\u0000��\u0016@��C\u0000��\u0003\u001f��\u0003\u001f��\u0003\u0000���\u001f��\u0007\u0000��\u0001\u0000��\u0003_��C\u0000��\u0003\u0013�\u0003 �R�\u0003\u001f��\u0001\u0000��C\u0000�$\u0002\u0000��\u0016@���_�\u001f\u0001\t��\u0000\u0000T�\u0003\u001f��OT���@��{R��C\u0005��\u0003_։\u0001\u0000���\u0001��{\u0003��W\u0004��O\u0005���\u0000�V�;�\u001f \u0003Օf\u0001\u0010�\u0016@��\u0003\u0000��\u0003\u0015���\u001f�\u0010\u0002\u0000��C\u0000ѡS\u0000�\u0011\u0002\u0000��\u0003\u0000*�\u0003\u0015�\u0012\u0002\u0000��\u0004�7�Þ��C\u0000��\u0003\u0013��\u0001\u0000���^�?\u0004\u0000qK\u0002\u0000T�\u0003\u001f��\u0003\u001f��\u0003_��#\u0000��\u0003\u0013�\u0002\u0000��\u0001iu�J\u0001\u0000��@��\u0003\u0013��\u0003\u0014*�\u0001\u0000��Þ��\u0006\u0000��B\u0000��\u0002\u0001�K��T�\u0003_��\u0001\u0000��\u000b@��\u0016@���_�\u001f\u0001\t�\u0002\u0000T�OE��WD��{C���\u0001��\u0003_��\u0003\u0014*[\u0001\u0000��\u0003\u0000��\u0003\u0014*\\\u0001\u0000��\u0003\u0000��\u0003\u0013��\u0003\u0015�\\\u0001\u0000��\u0003\u001f��\u0016@���_�\u001f\u0001\t����TB\u0001\u0000���\u0001��{\u0003��#\u0000��W\u0005��O\u0006���\u0000�W�;�)\u0000�R�c\u0000��\u0016@��C\u0000��\u0003\u001f��\u0003\u001f��\u0003\u0000���\u001f��\u000f\u0000�Y\u0001\u0000��\u0003_��C\u0000��\u0003\u0013��\u0003\u001f��\u0003\u001f�W\u0001\u0000��\u000b@�\u0015\u0005\u0000��\u0003\u0015��\u000b\u0000��\u0001\u0000��\u0003_��\u0003\u0000��C\u0000��\u0003\u0013��\u0003\u0014��\u0003\u0015�K\u0001\u0000�\u001f \u0003�\u0000Z\u0001\u0010�\u0001\u0000�\b �R\u0000 �R�\u0007\u0000��\u0001\u0000��\u0003\u0000��#\u0000��\u0003\u0014��\u0003\u0015��\u0001\u0000�\u001f�\u00011�\u0000\u0000T\u001f\b\u00001�\u0001\u0000T�\u0003\u0000��\u0003\u0013��\u0001\u0000�\u0010\u0000\u0000\u0014�\u0007@��\u0003\u0015��\u0001\u0000��\u0003\u0000��#\u0000��\u0003\u0014��\u0003\u0015��\u0001\u0000�\u0002\u0000\u0000\u0014\u0000\u0003�7�\u0007@��\u0003\u0000��\u0003\u0013��\u0003\u0015��\u0000\u0000�\u001f \u0003ՠU\u0001\u0010�\u0001\u0000��\u0003\u0014��\u0001\u0000��\u0003\u0015��\u0001\u0000��\u0003@��\u0016@���_�\u001f\u0001\t�\u0003\u0000T�OF��#@��WE��{C���\u0001��\u0003_�\u001f \u0003�hS\u0001\u0010�\u0003\u0000*�\u0003\b��\u0001\u0000��\u0003\u0015*�\u0000\u0000��\u0003\u0000��\u0003\u0015*�\u0000\u0000��\u0003\u0000��\u0003\u0013��\u0003\u0016��\u0000\u0000��\u0003\u0014��\u0001\u0000��\u0003\u001f��\u0016@���_�\u001f\u0001\t����T�\u0000\u0000���\u0001��{\u0003��_\u0004��W\u0005��O\u0006���\u0000�X�;�I\u0000�R�C\u0000�\b\u0017@��c\u0000��\u0003\u001f��\u0003\u001f��\u0003\u0000���\u001f��\u000b\u0000��\u0000\u0000��\u000f@��#\u0000��\u0003\u0013��\u0003\u001f��\u0003\u001f��\u0000\u0000��\u0007@�\u0015\u0005\u0000��\u0003\u0015��\u0007\u0000�\\\u0001\u0000��\u000f@��\u0003\u0000��#\u0000��\u0003\u0013��\u0003\u0014��\u0003\u0015��\u0000\u0000��\u0013@��\u0003\u0000��\u0003\u0013��\u0003\u001f��\u0003\u001f��\u0000\u0000��\u0003@�\u0016\u0005\u0000��\u0003\u0016��\u0003\u0000�J\u0001\u0000��\u0013@��\u0003\u0000��\u0003\u0000��\u0003\u0013��\u0003\u0015��\u0003\u0016��\u0000\u0000�\u001f \u0003�\u0017J\u0001\u0010�\u0003\u0017�S\u0001\u0000��\u0003\u0014��\u0003\u0015�T\u0001\u0000��\u0003\u0000*�\u0003\u0017�U\u0001\u0000�V\u0001�6�\u0003\u0016*�\u0000\u0000��\u0003\u0000��\u0003\u0016*�\u0000\u0000��\u0003\u0000��\u0003\u0013��\u0003\u0017��\u0000\u0000��\u0003\u0014�=\u0001\u0000��\u0003\u0015�;\u0001\u0000�\b\u0017@���_�\u001f\u0001\t�\u0001\u0001\u0000T�\u0003\u001f��OF��WE��_D��{C���\u0001��\u0003_�{\u0000\u0000���\u0001��{\u0002��\u001b\u0000��W\u0004��O\u0005���\u0000�W�;�)\u0000�R�#\u0000��\u0016@��C\u0000��\u0003\u001f��\u0003\u001f��\u0003\u0000���\u001f��\u0007\u0000��\u0000\u0000��\u000b@��\u0003\u0000��\u0003\u0013��\u0003\u001f��\u0003\u001f��\u0000\u0000��\u0003@�\u0015\u0005\u0000��\u0003\u0015��\u0003\u0000�\u0003\u0001\u0000��\u000b@��\u0003\u0000��\u0003\u0000��\u0003\u0013��\u0003\u0014��\u0003\u0015��\u0000\u0000�\u001f \u0003�6A\u0001\u0010�\u0003\u0016�\f\u0001\u0000��\u0003\u0014�\u0016\u0001\u0000��\u0003\u0000*�\u0003\u0016�\u000f\u0001\u0000�U\u0001�6�\u0003\u0015*X\u0000\u0000��\u0003\u0000��\u0003\u0015*Y\u0000\u0000��\u0003\u0000��\u0003\u0013��\u0003\u0016�Y\u0000\u0000��\u0003\u0014��\u0000\u0000��\u0016@���_�\u001f\u0001\t�\u0001\u0001\u0000T�\u0003\u001f��OE��\u001b@��WD��{B���\u0001��\u0003_�7\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�{��\u0010\u0000\u0000�\u0011\u000eE�\u0010b(� \u0002\u001f�\u001f \u0003�\u001f \u0003�\u001f \u0003�\u0010\u0000\u0000�\u0011\u0012E�\u0010�(� \u0002\u001f�\u0010\u0000\u0000�\u0011\u0016E�\u0010�(� \u0002\u001f�\u0010\u0000\u0000�\u0011\u001aE�\u0010�(� \u0002\u001f�\u0010\u0000\u0000�\u0011\u001eE�\u0010�(� \u0002\u001f�\u0010\u0000\u0000�\u0011\"E�\u0010\u0002)� \u0002\u001f�\u0010\u0000\u0000�\u0011&E�\u0010\")� \u0002\u001f�\u0010\u0000\u0000�\u0011*E�\u0010B)� \u0002\u001f�\u0010\u0000\u0000�\u0011.E�\u0010b)� \u0002\u001f�\u0010\u0000\u0000�\u00112E�\u0010�)� \u0002\u001f�\u0010\u0000\u0000�\u00116E�\u0010�)� \u0002\u001f�\u0010\u0000\u0000�\u0011:E�\u0010�)� \u0002\u001f�\u0010\u0000\u0000�\u0011>E�\u0010�)� \u0002\u001f�\u0010\u0000\u0000�\u0011BE�\u0010\u0002*� \u0002\u001f�\u0010\u0000\u0000�\u0011FE�\u0010\"*� \u0002\u001f�\u0010\u0000\u0000�\u0011JE�\u0010B*� \u0002\u001f�\u0010\u0000\u0000�\u0011NE�\u0010b*� \u0002\u001f�\u0010\u0000\u0000�\u0011RE�\u0010�*� \u0002\u001f�\u0010\u0000\u0000�\u0011VE�\u0010�*� \u0002\u001f�\u0010\u0000\u0000�\u0011ZE�\u0010�*� \u0002\u001f�\u0010\u0000\u0000�\u0011^E�\u0010�*� \u0002\u001f�\u0010\u0000\u0000�\u0011bE�\u0010\u0002+� \u0002\u001f�\u0010\u0000\u0000�\u0011fE�\u0010\"+� \u0002\u001f�\u0010\u0000\u0000�\u0011jE�\u0010B+� \u0002\u001f�\u0010\u0000\u0000�\u0011nE�\u0010b+� \u0002\u001f�\u0010\u0000\u0000�\u0011rE�\u0010�+� \u0002\u001f�\u0010\u0000\u0000�\u0011vE�\u0010�+� \u0002\u001f�\u0010\u0000\u0000�\u0011zE�\u0010�+� \u0002\u001f�\u0010\u0000\u0000�\u0011~E�\u0010�+� \u0002\u001f�\u0010\u0000\u0000�\u0011�E�\u0010\u0002,� \u0002\u001f�\u0010\u0000\u0000�\u0011�E�\u0010\",� \u0002\u001f�\u0010\u0000\u0000�\u0011�E�\u0010B,� \u0002\u001f�\u0010\u0000\u0000�\u0011�E�\u0010b,� \u0002\u001f�\u0010\u0000\u0000�\u0011�E�\u0010�,� \u0002\u001f�\u0010\u0000\u0000�\u0011�E�\u0010�,� \u0002\u001f�\u0010\u0000\u0000�\u0011�E�\u0010�,� \u0002\u001f�\u0010\u0000\u0000�\u0011�E�\u0010�,� \u0002\u001f�\u0010\u0000\u0000�\u0011�E�\u0010\u0002-� \u0002\u001f�\u0010\u0000\u0000�\u0011�E�\u0010\"-� \u0002\u001f�\u0010\u0000\u0000�\u0011�E�\u0010B-� \u0002\u001f�\u0010\u0000\u0000�\u0011�E�\u0010b-� \u0002\u001f�\u0010\u0000\u0000�\u0011�E�\u0010�-� \u0002\u001f�\u0010\u0000\u0000�\u0011�E�\u0010�-� \u0002\u001f�\u0010\u0000\u0000�\u0011�E�\u0010�-� \u0002\u001f�\u0010\u0000\u0000�\u0011�E�\u0010�-� \u0002\u001f�\u0010\u0000\u0000�\u0011�E�\u0010\u0002.� \u0002\u001f�\u0010\u0000\u0000�\u0011�E�\u0010\".� \u0002\u001f�\u0010\u0000\u0000�\u0011�E�\u0010B.� \u0002\u001f�\u0010\u0000\u0000�\u0011�E�\u0010b.� \u0002\u001f�\u0010\u0000\u0000�\u0011�E�\u0010�.� \u0002\u001f�\u0010\u0000\u0000�\u0011�E�\u0010�.� \u0002\u001f�\u0010\u0000\u0000�\u0011�E�\u0010�.� \u0002\u001f�\u0010\u0000\u0000�\u0011�E�\u0010�.� \u0002\u001f�\u0010\u0000\u0000�\u0011�E�\u0010\u0002/� \u0002\u001f�\u0010\u0000\u0000�\u0011�E�\u0010\"/� \u0002\u001f�\u0010\u0000\u0000�\u0011�E�\u0010B/� \u0002\u001f�\u0010\u0000\u0000�\u0011�E�\u0010b/� \u0002\u001f�\u0010\u0000\u0000�\u0011�E�\u0010�/� \u0002\u001f�\u0010\u0000\u0000�\u0011�E�\u0010�/� \u0002\u001f�\u0010\u0000\u0000�\u0011�E�\u0010�/� \u0002\u001f�\u0010\u0000\u0000�\u0011�E�\u0010�/� \u0002\u001f�\u0010\u0000\u0000�\u0011\u0002F�\u0010\u00020� \u0002\u001f�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u000e\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u001e\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000���o\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0007\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\r\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000H\u0000\u0000\u0000\u0000\u0000\u0000\u0000\t\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000���o\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0017\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000e\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\bj\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0007\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u000b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\t\u0000\u0000\u0000\u0000\u0000\u0000\n\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0017\u0004\u0000\u0000\u0000\u0000\u0000\u0000���o\u0000\u0000\u0000\u0000�\t\u0000\u0000\u0000\u0000\u0000\u0000\u001a\u0000\u0000\u0000\u0000\u0000\u0000\u0000hh\u0000\u0000\u0000\u0000\u0000\u0000\u001c\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000���o\u0000\u0000\u0000\u0000�\b\u0000\u0000\u0000\u0000\u0000\u0000���o\u0000\u0000\u0000\u0000`\t\u0000\u0000\u0000\u0000\u0000\u0000���o\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000pT\u0000\u0000\u0000\u0000\u0000\u0000pT\u0000\u0000\u0000\u0000\u0000\u0000pT\u0000\u0000\u0000\u0000\u0000\u0000pT\u0000\u0000\u0000\u0000\u0000\u0000pT\u0000\u0000\u0000\u0000\u0000\u0000pT\u0000\u0000\u0000\u0000\u0000\u0000pT\u0000\u0000\u0000\u0000\u0000\u0000pT\u0000\u0000\u0000\u0000\u0000\u0000pT\u0000\u0000\u0000\u0000\u0000\u0000pT\u0000\u0000\u0000\u0000\u0000\u0000pT\u0000\u0000\u0000\u0000\u0000\u0000pT\u0000\u0000\u0000\u0000\u0000\u0000pT\u0000\u0000\u0000\u0000\u0000\u0000pT\u0000\u0000\u0000\u0000\u0000\u0000pT\u0000\u0000\u0000\u0000\u0000\u0000pT\u0000\u0000\u0000\u0000\u0000\u0000pT\u0000\u0000\u0000\u0000\u0000\u0000pT\u0000\u0000\u0000\u0000\u0000\u0000pT\u0000\u0000\u0000\u0000\u0000\u0000pT\u0000\u0000\u0000\u0000\u0000\u0000pT\u0000\u0000\u0000\u0000\u0000\u0000pT\u0000\u0000\u0000\u0000\u0000\u0000pT\u0000\u0000\u0000\u0000\u0000\u0000pT\u0000\u0000\u0000\u0000\u0000\u0000pT\u0000\u0000\u0000\u0000\u0000\u0000pT\u0000\u0000\u0000\u0000\u0000\u0000pT\u0000\u0000\u0000\u0000\u0000\u0000pT\u0000\u0000\u0000\u0000\u0000\u0000pT\u0000\u0000\u0000\u0000\u0000\u0000pT\u0000\u0000\u0000\u0000\u0000\u0000pT\u0000\u0000\u0000\u0000\u0000\u0000pT\u0000\u0000\u0000\u0000\u0000\u0000pT\u0000\u0000\u0000\u0000\u0000\u0000pT\u0000\u0000\u0000\u0000\u0000\u0000pT\u0000\u0000\u0000\u0000\u0000\u0000pT\u0000\u0000\u0000\u0000\u0000\u0000pT\u0000\u0000\u0000\u0000\u0000\u0000pT\u0000\u0000\u0000\u0000\u0000\u0000pT\u0000\u0000\u0000\u0000\u0000\u0000pT\u0000\u0000\u0000\u0000\u0000\u0000pT\u0000\u0000\u0000\u0000\u0000\u0000pT\u0000\u0000\u0000\u0000\u0000\u0000pT\u0000\u0000\u0000\u0000\u0000\u0000pT\u0000\u0000\u0000\u0000\u0000\u0000pT\u0000\u0000\u0000\u0000\u0000\u0000pT\u0000\u0000\u0000\u0000\u0000\u0000pT\u0000\u0000\u0000\u0000\u0000\u0000pT\u0000\u0000\u0000\u0000\u0000\u0000pT\u0000\u0000\u0000\u0000\u0000\u0000pT\u0000\u0000\u0000\u0000\u0000\u0000pT\u0000\u0000\u0000\u0000\u0000\u0000pT\u0000\u0000\u0000\u0000\u0000\u0000pT\u0000\u0000\u0000\u0000\u0000\u0000pT\u0000\u0000\u0000\u0000\u0000\u0000pT\u0000\u0000\u0000\u0000\u0000\u0000pT\u0000\u0000\u0000\u0000\u0000\u0000pT\u0000\u0000\u0000\u0000\u0000\u0000pT\u0000\u0000\u0000\u0000\u0000\u0000pT\u0000\u0000\u0000\u0000\u0000\u0000pT\u0000\u0000\u0000\u0000\u0000\u0000pT\u0000\u0000\u0000\u0000\u0000\u0000\u0000Linker: LLD 18.0.3\u0000Android (12470979, +pgo, +bolt, +lto, +mlgo, based on r522817c) clang version 18.0.3 (https://android.googlesource.com/toolchain/llvm-project d8003a456d14a3deb8054cdaa529ffbf02d9b262)\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0004\u0000��\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000f\u0000\u0000\u0000\u0002\u0000\r\u0000x\"\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001c\u0000\u0000\u0000\u0000\u0000\r\u0000x\"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000!\u0000\u0000\u0000\u0002\u0000\r\u0000�\"\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u00003\u0000\u0000\u0000\u0000\u0000\u000f\u0000`h\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00008\u0000\u0000\u0000\u0000\u0000\u0010\u0000hh\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000=\u0000\u0000\u0000\u0000\u0000\u0010\u0000ph\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000B\u0000\u0000\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000G\u0000\u0000\u0000\u0000\u0000\f\u0000�\u001b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000L\u0000\u0000\u0000\u0001\u0000\u0001\u00008\u0002\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000_\u0000\u0000\u0000\u0000\u0000\u0001\u00008\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000d\u0000\u0000\u0000\u0000\u0000\u0001\u0000L\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000n\u0000\u0000\u0000\u0000\u0000\u0001\u0000D\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000x\u0000\u0000\u0000\u0000\u0000\u0001\u0000�\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0001\u0000P\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0001\u0000�\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0003\u0000\u0000\u0001\u0002\u000f\u0000`h\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0003\u0000\u0000\u0002\u0002\r\u0000�\"\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0003\u0000\u0000\u0002\u0002\r\u0000�\"\u0000\u0000\u0000\u0000\u0000\u0000\u0014\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0011\u0004\u0000\u0000\u0002\u0002\r\u0000�\"\u0000\u0000\u0000\u0000\u0000\u0000\u001c\u0000\u0000\u0000\u0000\u0000\u0000\u0000%\u0004\u0000\u0000\u0002\u0002\r\u0000�\"\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0004\u0000��\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\r\u0000�\"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0002\u0000\r\u0000�\"\u0000\u0000\u0000\u0000\u0000\u0000�\u0018\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\r\u0000�\"\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0001\u0000\u0014\u0000\b|\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0002\u0000\r\u0000�;\u0000\u0000\u0000\u0000\u0000\u0000\f\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0002\u0000\r\u0000�;\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0002\u0000\r\u0000D<\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0001\u0000\u0000\u0002\u0000\r\u0000\u0000=\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0001\u0000\u0000\u0002\u0000\r\u0000�=\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u00000\u0001\u0000\u0000\u0002\u0000\r\u0000x>\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000B\u0001\u0000\u0000\u0002\u0000\r\u0000D?\u0000\u0000\u0000\u0000\u0000\u0000d\u0000\u0000\u0000\u0000\u0000\u0000\u0000N\u0001\u0000\u0000\u0002\u0000\r\u0000�?\u0000\u0000\u0000\u0000\u0000\u0000d\u0000\u0000\u0000\u0000\u0000\u0000\u0000[\u0001\u0000\u0000\u0002\u0000\r\u0000\f@\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000g\u0001\u0000\u0000\u0002\u0000\r\u0000�@\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000u\u0001\u0000\u0000\u0002\u0000\r\u0000�A\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0001\u0000\u0000\u0002\u0000\r\u0000hB\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0001\u0000\u0000\u0002\u0000\r\u00004C\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0001\u0000\u0000\u0002\u0000\r\u0000�C\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0001\u0000\u0000\u0002\u0000\r\u0000�D\u0000\u0000\u0000\u0000\u0000\u0000\\\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0001\u0000\u0000\u0002\u0000\r\u0000\bE\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0001\u0000\u0000\u0002\u0000\r\u0000�E\u0000\u0000\u0000\u0000\u0000\u0000�\u0002\u0000\u0000\u0000\u0000\u0000\u0000�\u0001\u0000\u0000\u0002\u0000\r\u0000�H\u0000\u0000\u0000\u0000\u0000\u0000,\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u000e\u0002\u0000\u0000\u0002\u0000\r\u0000�I\u0000\u0000\u0000\u0000\u0000\u0000\\\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001e\u0002\u0000\u0000\u0002\u0000\r\u00008J\u0000\u0000\u0000\u0000\u0000\u0000\\\u0000\u0000\u0000\u0000\u0000\u0000\u0000/\u0002\u0000\u0000\u0002\u0000\r\u0000�J\u0000\u0000\u0000\u0000\u0000\u0000`\u0000\u0000\u0000\u0000\u0000\u0000\u0000>\u0002\u0000\u0000\u0002\u0000\r\u0000�J\u0000\u0000\u0000\u0000\u0000\u0000|\u0000\u0000\u0000\u0000\u0000\u0000\u0000N\u0002\u0000\u0000\u0002\u0000\r\u0000pK\u0000\u0000\u0000\u0000\u0000\u0000p\u0002\u0000\u0000\u0000\u0000\u0000\u0000[\u0002\u0000\u0000\u0002\u0000\r\u0000�M\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000u\u0002\u0000\u0000\u0002\u0000\r\u0000�N\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0002\u0000\u0000\u0002\u0000\r\u0000 O\u0000\u0000\u0000\u0000\u0000\u0000\u001c\u0001\u0000\u0000\u0000\u0000\u0000\u0000�\u0002\u0000\u0000\u0002\u0000\r\u0000<P\u0000\u0000\u0000\u0000\u0000\u0000�\u0001\u0000\u0000\u0000\u0000\u0000\u0000�\u0002\u0000\u0000\u0002\u0000\r\u0000�Q\u0000\u0000\u0000\u0000\u0000\u0000d\u0001\u0000\u0000\u0000\u0000\u0000\u0000�\u0002\u0000\u0000\u0002\u0000\r\u0000XS\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0001\u0000\u0000\u0000\u0000\u0000\u0000�\u0002\u0000\u0000\u0000\u0000\r\u0000�;\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0002\u0000\u0000\u0001\u0000\u0014\u0000\f|\u0000\u0000\u0000\u0000\u0000\u00008\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0002\u0000\u0000\u0000\u0000\r\u0000�;\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0002\u0000\u0000\u0000\u0000\r\u0000D<\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0002\u0000\u0000\u0000\u0000\r\u0000\u0000=\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0002\u0000\u0000\u0000\u0000\r\u0000�=\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\r\u0000x>\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0005\u0003\u0000\u0000\u0000\u0000\r\u0000D?\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\n\u0003\u0000\u0000\u0000\u0000\r\u0000�?\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000f\u0003\u0000\u0000\u0000\u0000\r\u0000\f@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0015\u0003\u0000\u0000\u0000\u0000\r\u0000�@\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001b\u0003\u0000\u0000\u0000\u0000\r\u0000�A\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000!\u0003\u0000\u0000\u0000\u0000\r\u0000hB\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000'\u0003\u0000\u0000\u0000\u0000\r\u00004C\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000-\u0003\u0000\u0000\u0000\u0000\r\u0000�C\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00003\u0003\u0000\u0000\u0000\u0000\r\u0000�D\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00009\u0003\u0000\u0000\u0000\u0000\r\u0000\bE\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000?\u0003\u0000\u0000\u0000\u0000\r\u0000�E\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000E\u0003\u0000\u0000\u0000\u0000\r\u0000�H\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000K\u0003\u0000\u0000\u0000\u0000\r\u0000�I\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000Q\u0003\u0000\u0000\u0000\u0000\r\u00008J\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000W\u0003\u0000\u0000\u0000\u0000\r\u0000�J\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000]\u0003\u0000\u0000\u0000\u0000\r\u0000�J\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000c\u0003\u0000\u0000\u0000\u0000\r\u0000pK\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000i\u0003\u0000\u0000\u0000\u0000\r\u0000�M\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000o\u0003\u0000\u0000\u0000\u0000\r\u0000�N\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000u\u0003\u0000\u0000\u0000\u0000\r\u0000 O\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000{\u0003\u0000\u0000\u0000\u0000\r\u0000<P\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0003\u0000\u0000\u0000\u0000\r\u0000�Q\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0003\u0000\u0000\u0000\u0000\r\u0000XS\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0003\u0000\u0000\u0000\u0000\u0014\u0000\b|\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0003\u0000\u0000\u0000\u0000\n\u0000J\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0003\u0000\u0000\u0000\u0000\u0014\u0000\f|\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0003\u0000\u0000\u0000\u0000\n\u0000(\u001a\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0003\u0000\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0003\u0000\u0000\u0000\u0000\f\u0000�\u001b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0003\u0000\u0000\u0001\u0000\f\u0000�\u001b\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0003\u0000\u0000\u0000\u0000\f\u0000�\u001b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\b\u0000\u0000\u0000\u0002\u0011\u0000xh\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0003\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0018\u0004\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00004\u0004\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000F\u0004\u0000\u0000\u0012\u0000\r\u0000�\"\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000^\u0004\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000f\u0004\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0004\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0004\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0004\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0004\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0004\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0004\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0004\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0004\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0006\u0005\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0012\u0005\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001e\u0005\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000*\u0005\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00009\u0005\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000D\u0005\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000Q\u0005\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000_\u0005\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000f\u0005\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000{\u0005\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0005\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0005\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0005\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0005\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0005\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0005\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0005\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0005\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000f\u0006\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u001c\u0006\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00003\u0006\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0006\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000]\u0006\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000q\u0006\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000{\u0006\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0006\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0006\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0006\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0006\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0006\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0006\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0006\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000f\u0007\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000 \u0007\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u00005\u0007\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000J\u0007\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000[\u0007\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000i\u0007\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000|\u0007\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0007\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0007\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0007\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0007\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0007\u0000\u0000\u0012\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0007\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0007\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0007\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0007\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000.note.android.ident\u0000.note.gnu.build-id\u0000.dynsym\u0000.gnu.version\u0000.gnu.version_r\u0000.gnu.hash\u0000.dynstr\u0000.rela.dyn\u0000.rela.plt\u0000.rodata\u0000.eh_frame_hdr\u0000.eh_frame\u0000.text\u0000.plt\u0000.data.rel.ro\u0000.fini_array\u0000.dynamic\u0000.got.plt\u0000.relro_padding\u0000.bss\u0000.comment\u0000.symtab\u0000.shstrtab\u0000.strtab\u0000\u0000crtbegin_so.c\u0000__on_dlclose\u0000$x.1\u0000__on_dlclose_late\u0000$d.2\u0000$d.3\u0000$d.4\u0000$d.5\u0000$d.6\u0000note_android_ident\u0000$d.0\u0000note_data\u0000note_name\u0000note_end\u0000ndk_version\u0000ndk_build_number\u0000binding.c\u0000$x.0\u0000bare_os_exports\u0000$x.1\u0000bare_os_env_lock_guard\u0000bare_os__on_env_lock_init\u0000bare_os_type\u0000bare_os_version\u0000bare_os_release\u0000bare_os_machine\u0000bare_os_exec_path\u0000bare_os_pid\u0000bare_os_ppid\u0000bare_os_cwd\u0000bare_os_chdir\u0000bare_os_tmpdir\u0000bare_os_homedir\u0000bare_os_hostname\u0000bare_os_kill\u0000bare_os_available_parallelism\u0000bare_os_cpu_usage\u0000bare_os_resource_usage\u0000bare_os_memory_usage\u0000bare_os_freemem\u0000bare_os_totalmem\u0000bare_os_uptime\u0000bare_os_loadavg\u0000bare_os_cpus\u0000bare_os_get_process_title\u0000bare_os_set_process_title\u0000bare_os_get_env_keys\u0000bare_os_get_env\u0000bare_os_set_env\u0000bare_os_unset_env\u0000$x.2\u0000bare_os_env_lock\u0000$x.3\u0000$x.4\u0000$x.5\u0000$x.6\u0000$x.7\u0000$x.8\u0000$x.9\u0000$x.10\u0000$x.11\u0000$x.12\u0000$x.13\u0000$x.14\u0000$x.15\u0000$x.16\u0000$x.17\u0000$x.18\u0000$x.19\u0000$x.20\u0000$x.21\u0000$x.22\u0000$x.23\u0000$x.24\u0000$x.25\u0000$x.26\u0000$x.27\u0000$x.28\u0000$x.29\u0000$x.30\u0000$d.31\u0000$d.32\u0000$d.33\u0000$d.34\u0000$d.35\u0000$d.36\u0000__FRAME_END__\u0000$d.1\u0000__dso_handle\u0000__cxa_finalize\u0000__emutls_unregister_key\u0000__atexit_handler_wrapper\u0000atexit\u0000__cxa_atexit\u0000pthread_atfork\u0000__register_atfork\u0000bare_register_module_v0\u0000uv_once\u0000js_create_string_utf8\u0000js_set_named_property\u0000js_create_function\u0000js_get_boolean\u0000js_create_object\u0000js_create_uint32\u0000js_create_int32\u0000__stack_chk_fail\u0000uv_rwlock_init\u0000uv_os_uname\u0000uv_err_name\u0000uv_strerror\u0000js_throw_error\u0000uv_exepath\u0000uv_os_getpid\u0000uv_os_getppid\u0000uv_cwd\u0000js_get_callback_info\u0000js_get_value_string_utf8\u0000uv_chdir\u0000uv_os_tmpdir\u0000uv_os_homedir\u0000uv_os_gethostname\u0000js_get_value_uint32\u0000uv_kill\u0000uv_available_parallelism\u0000js_create_int64\u0000uv_getrusage\u0000js_get_heap_statistics\u0000uv_resident_set_memory\u0000uv_get_free_memory\u0000uv_get_total_memory\u0000uv_uptime\u0000js_create_double\u0000js_create_arraybuffer\u0000js_create_typedarray\u0000uv_loadavg\u0000uv_cpu_info\u0000js_create_array_with_length\u0000js_set_element\u0000js_get_named_property\u0000uv_free_cpu_info\u0000uv_get_process_title\u0000uv_set_process_title\u0000uv_rwlock_rdlock\u0000uv_os_environ\u0000uv_rwlock_rdunlock\u0000uv_os_free_environ\u0000malloc\u0000uv_os_getenv\u0000js_get_undefined\u0000realloc\u0000free\u0000uv_rwlock_wrlock\u0000uv_os_setenv\u0000uv_rwlock_wrunlock\u0000uv_os_unsetenv\u0000_DYNAMIC\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0007\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u00008\u0002\u0000\u0000\u0000\u0000\u0000\u00008\u0002\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0015\u0000\u0000\u0000\u0007\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0002\u0000\u0000\u0000\u0000\u0000\u0000�\u0002\u0000\u0000\u0000\u0000\u0000\u0000$\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000(\u0000\u0000\u0000\u000b\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0002\u0000\u0000\u0000\u0000\u0000\u0000�\u0002\u0000\u0000\u0000\u0000\u0000\u0000�\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0007\u0000\u0000\u0000\u0001\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u00000\u0000\u0000\u0000���o\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\b\u0000\u0000\u0000\u0000\u0000\u0000�\b\u0000\u0000\u0000\u0000\u0000\u0000~\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000=\u0000\u0000\u0000���o\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000`\t\u0000\u0000\u0000\u0000\u0000\u0000`\t\u0000\u0000\u0000\u0000\u0000\u0000 \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0007\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000L\u0000\u0000\u0000���o\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\t\u0000\u0000\u0000\u0000\u0000\u0000�\t\u0000\u0000\u0000\u0000\u0000\u0000 \u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000V\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\t\u0000\u0000\u0000\u0000\u0000\u0000�\t\u0000\u0000\u0000\u0000\u0000\u0000\u0017\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000^\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\r\u0000\u0000\u0000\u0000\u0000\u0000�\r\u0000\u0000\u0000\u0000\u0000\u0000H\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000h\u0000\u0000\u0000\u0004\u0000\u0000\u0000B\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000e\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u000e\u0000\u0000\u0000\u0000\u0000\u0000�\u0005\u0000\u0000\u0000\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0012\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000r\u0000\u0000\u0000\u0001\u0000\u0000\u00002\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0013\u0000\u0000\u0000\u0000\u0000\u0000�\u0013\u0000\u0000\u0000\u0000\u0000\u0000�\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000z\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000H\u001a\u0000\u0000\u0000\u0000\u0000\u0000H\u001a\u0000\u0000\u0000\u0000\u0000\u00004\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u001b\u0000\u0000\u0000\u0000\u0000\u0000�\u001b\u0000\u0000\u0000\u0000\u0000\u0000�\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000x\"\u0000\u0000\u0000\u0000\u0000\u0000x\"\u0000\u0000\u0000\u0000\u0000\u0000�1\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0000\u0000\u0000\u0000pT\u0000\u0000\u0000\u0000\u0000\u0000pT\u0000\u0000\u0000\u0000\u0000\u0000�\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000`h\u0000\u0000\u0000\u0000\u0000\u0000`X\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u000f\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000hh\u0000\u0000\u0000\u0000\u0000\u0000hX\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0006\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000xh\u0000\u0000\u0000\u0000\u0000\u0000xX\u0000\u0000\u0000\u0000\u0000\u0000�\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0007\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0010\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\bj\u0000\u0000\u0000\u0000\u0000\u0000\bZ\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\b\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\bl\u0000\u0000\u0000\u0000\u0000\u0000\b\\\u0000\u0000\u0000\u0000\u0000\u0000�\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\b\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b|\u0000\u0000\u0000\u0000\u0000\u0000\b\\\u0000\u0000\u0000\u0000\u0000\u0000<\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0004\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0001\u0000\u0000\u00000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\b\\\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0002\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\\\u0000\u0000\u0000\u0000\u0000\u0000�\u000e\u0000\u0000\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000_\u0000\u0000\u0000\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0018\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�k\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�\u0000\u0000\u0000\u0003\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000�l\u0000\u0000\u0000\u0000\u0000\u0000\n\b\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0001\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000/* global Bare */\n\n// This export SHOULD NOT be shortened in any way as having the full\n// `module.exports = require(...)` statement is crucial for synthesizing\n// ESM exports.\n\nif (Bare.platform === 'win32') {\n  module.exports = require('./lib/win32')\n} else {\n  module.exports = require('./lib/posix')\n}\nmodule.exports = {\n  CHAR_UPPERCASE_A: 0x41,\n  CHAR_LOWERCASE_A: 0x61,\n  CHAR_UPPERCASE_Z: 0x5a,\n  CHAR_LOWERCASE_Z: 0x7a,\n  CHAR_DOT: 0x2e,\n  CHAR_FORWARD_SLASH: 0x2f,\n  CHAR_BACKWARD_SLASH: 0x5c,\n  CHAR_COLON: 0x3a,\n  CHAR_QUESTION_MARK: 0x3f\n}\nconst os = require('bare-os')\n\nconst { normalizeString } = require('./shared')\nconst {\n  CHAR_DOT,\n  CHAR_FORWARD_SLASH\n} = require('./constants')\n\nfunction isPosixPathSeparator (code) {\n  return code === CHAR_FORWARD_SLASH\n}\n\nexports.win32 = require('./win32')\nexports.posix = exports\n\nexports.sep = '/'\nexports.delimiter = ':'\n\nexports.resolve = function resolve (...args) {\n  let resolvedPath = ''\n  let resolvedAbsolute = false\n\n  for (let i = args.length - 1; i >= -1 && !resolvedAbsolute; i--) {\n    const path = i >= 0 ? args[i] : os.cwd()\n\n    if (path.length === 0) {\n      continue\n    }\n\n    resolvedPath = `${path}/${resolvedPath}`\n    resolvedAbsolute = path.charCodeAt(0) === CHAR_FORWARD_SLASH\n  }\n\n  resolvedPath = normalizeString(resolvedPath, !resolvedAbsolute, '/', isPosixPathSeparator)\n\n  if (resolvedAbsolute) {\n    return `/${resolvedPath}`\n  }\n\n  return resolvedPath.length > 0 ? resolvedPath : '.'\n}\n\nexports.normalize = function normalize (path) {\n  if (path.length === 0) return '.'\n\n  const isAbsolute = path.charCodeAt(0) === CHAR_FORWARD_SLASH\n  const trailingSeparator = path.charCodeAt(path.length - 1) === CHAR_FORWARD_SLASH\n\n  path = normalizeString(path, !isAbsolute, '/', isPosixPathSeparator)\n\n  if (path.length === 0) {\n    if (isAbsolute) return '/'\n    return trailingSeparator ? './' : '.'\n  }\n\n  if (trailingSeparator) path += '/'\n\n  return isAbsolute ? `/${path}` : path\n}\n\nexports.isAbsolute = function isAbsolute (path) {\n  return path.length > 0 && path.charCodeAt(0) === CHAR_FORWARD_SLASH\n}\n\nexports.join = function join (...args) {\n  if (args.length === 0) return '.'\n  let joined\n  for (let i = 0; i < args.length; ++i) {\n    const arg = args[i]\n    if (arg.length > 0) {\n      if (joined === undefined) joined = arg\n      else joined += `/${arg}`\n    }\n  }\n  if (joined === undefined) return '.'\n  return exports.normalize(joined)\n}\n\nexports.relative = function relative (from, to) {\n  if (from === to) return ''\n\n  from = exports.resolve(from)\n  to = exports.resolve(to)\n\n  if (from === to) return ''\n\n  const fromStart = 1\n  const fromEnd = from.length\n  const fromLen = fromEnd - fromStart\n  const toStart = 1\n  const toLen = to.length - toStart\n\n  const length = (fromLen < toLen ? fromLen : toLen)\n  let lastCommonSep = -1\n  let i = 0\n  for (; i < length; i++) {\n    const fromCode = from.charCodeAt(fromStart + i)\n    if (fromCode !== to.charCodeAt(toStart + i)) {\n      break\n    } else if (fromCode === CHAR_FORWARD_SLASH) {\n      lastCommonSep = i\n    }\n  }\n  if (i === length) {\n    if (toLen > length) {\n      if (to.charCodeAt(toStart + i) === CHAR_FORWARD_SLASH) {\n        return to.substring(toStart + i + 1)\n      }\n      if (i === 0) {\n        return to.substring(toStart + i)\n      }\n    } else if (fromLen > length) {\n      if (from.charCodeAt(fromStart + i) === CHAR_FORWARD_SLASH) {\n        lastCommonSep = i\n      } else if (i === 0) {\n        lastCommonSep = 0\n      }\n    }\n  }\n\n  let out = ''\n  for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n    if (i === fromEnd || from.charCodeAt(i) === CHAR_FORWARD_SLASH) {\n      out += out.length === 0 ? '..' : '/..'\n    }\n  }\n\n  return `${out}${to.substring(toStart + lastCommonSep)}`\n}\n\nexports.toNamespacedPath = function toNamespacedPath (path) {\n  return path\n}\n\nexports.dirname = function dirname (path) {\n  if (path.length === 0) return '.'\n  const hasRoot = path.charCodeAt(0) === CHAR_FORWARD_SLASH\n  let end = -1\n  let matchedSlash = true\n  for (let i = path.length - 1; i >= 1; --i) {\n    if (path.charCodeAt(i) === CHAR_FORWARD_SLASH) {\n      if (!matchedSlash) {\n        end = i\n        break\n      }\n    } else {\n      matchedSlash = false\n    }\n  }\n\n  if (end === -1) return hasRoot ? '/' : '.'\n  if (hasRoot && end === 1) return '//'\n  return path.substring(0, end)\n}\n\nexports.basename = function basename (path, suffix) {\n  let start = 0\n  let end = -1\n  let matchedSlash = true\n\n  if (suffix !== undefined && suffix.length > 0 && suffix.length <= path.length) {\n    if (suffix === path) { return '' }\n    let extIdx = suffix.length - 1\n    let firstNonSlashEnd = -1\n    for (let i = path.length - 1; i >= 0; --i) {\n      const code = path.charCodeAt(i)\n      if (code === CHAR_FORWARD_SLASH) {\n        if (!matchedSlash) {\n          start = i + 1\n          break\n        }\n      } else {\n        if (firstNonSlashEnd === -1) {\n          matchedSlash = false\n          firstNonSlashEnd = i + 1\n        }\n        if (extIdx >= 0) {\n          if (code === suffix.charCodeAt(extIdx)) {\n            if (--extIdx === -1) {\n              end = i\n            }\n          } else {\n            extIdx = -1\n            end = firstNonSlashEnd\n          }\n        }\n      }\n    }\n\n    if (start === end) end = firstNonSlashEnd\n    else if (end === -1) end = path.length\n    return path.substring(start, end)\n  }\n\n  for (let i = path.length - 1; i >= 0; --i) {\n    if (path.charCodeAt(i) === CHAR_FORWARD_SLASH) {\n      if (!matchedSlash) {\n        start = i + 1\n        break\n      }\n    } else if (end === -1) {\n      matchedSlash = false\n      end = i + 1\n    }\n  }\n\n  if (end === -1) return ''\n  return path.substring(start, end)\n}\n\nexports.extname = function extname (path) {\n  let startDot = -1\n  let startPart = 0\n  let end = -1\n  let matchedSlash = true\n  let preDotState = 0\n  for (let i = path.length - 1; i >= 0; --i) {\n    const code = path.charCodeAt(i)\n    if (code === CHAR_FORWARD_SLASH) {\n      if (!matchedSlash) {\n        startPart = i + 1\n        break\n      }\n      continue\n    }\n    if (end === -1) {\n      matchedSlash = false\n      end = i + 1\n    }\n    if (code === CHAR_DOT) {\n      if (startDot === -1) startDot = i\n      else if (preDotState !== 1) preDotState = 1\n    } else if (startDot !== -1) {\n      preDotState = -1\n    }\n  }\n\n  if (startDot === -1 || end === -1 || preDotState === 0 || (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)) {\n    return ''\n  }\n  return path.substring(startDot, end)\n}\nconst {\n  CHAR_DOT,\n  CHAR_FORWARD_SLASH\n} = require('./constants')\n\nexports.normalizeString = function normalizeString (path, allowAboveRoot, separator, isPathSeparator) {\n  let res = ''\n  let lastSegmentLength = 0\n  let lastSlash = -1\n  let dots = 0\n  let code = 0\n  for (let i = 0; i <= path.length; ++i) {\n    if (i < path.length) {\n      code = path.charCodeAt(i)\n    } else if (isPathSeparator(code)) {\n      break\n    } else {\n      code = CHAR_FORWARD_SLASH\n    }\n\n    if (isPathSeparator(code)) {\n      if (lastSlash === i - 1 || dots === 1) ;\n      else if (dots === 2) {\n        if (res.length < 2 || lastSegmentLength !== 2 || res.charCodeAt(res.length - 1) !== CHAR_DOT || res.charCodeAt(res.length - 2) !== CHAR_DOT) {\n          if (res.length > 2) {\n            const lastSlashIndex = res.lastIndexOf(separator)\n            if (lastSlashIndex === -1) {\n              res = ''\n              lastSegmentLength = 0\n            } else {\n              res = res.substring(0, lastSlashIndex)\n              lastSegmentLength =\n                res.length - 1 - res.lastIndexOf(separator)\n            }\n            lastSlash = i\n            dots = 0\n            continue\n          } else if (res.length !== 0) {\n            res = ''\n            lastSegmentLength = 0\n            lastSlash = i\n            dots = 0\n            continue\n          }\n        }\n        if (allowAboveRoot) {\n          res += res.length > 0 ? `${separator}..` : '..'\n          lastSegmentLength = 2\n        }\n      } else {\n        if (res.length > 0) {\n          res += `${separator}${path.substring(lastSlash + 1, i)}`\n        } else {\n          res = path.substring(lastSlash + 1, i)\n        }\n        lastSegmentLength = i - lastSlash - 1\n      }\n      lastSlash = i\n      dots = 0\n    } else if (code === CHAR_DOT && dots !== -1) {\n      ++dots\n    } else {\n      dots = -1\n    }\n  }\n  return res\n}\nconst os = require('bare-os')\n\nconst { normalizeString } = require('./shared')\nconst {\n  CHAR_UPPERCASE_A,\n  CHAR_LOWERCASE_A,\n  CHAR_UPPERCASE_Z,\n  CHAR_LOWERCASE_Z,\n  CHAR_DOT,\n  CHAR_FORWARD_SLASH,\n  CHAR_BACKWARD_SLASH,\n  CHAR_COLON,\n  CHAR_QUESTION_MARK\n} = require('./constants')\n\nfunction isWindowsPathSeparator (code) {\n  return code === CHAR_FORWARD_SLASH || code === CHAR_BACKWARD_SLASH\n}\n\nfunction isWindowsDeviceRoot (code) {\n  return (code >= CHAR_UPPERCASE_A && code <= CHAR_UPPERCASE_Z) ||\n         (code >= CHAR_LOWERCASE_A && code <= CHAR_LOWERCASE_Z)\n}\n\nexports.posix = require('./posix')\nexports.win32 = exports\n\nexports.sep = '\\\\'\nexports.delimiter = ';'\n\nexports.resolve = function resolve (...args) {\n  let resolvedDevice = ''\n  let resolvedTail = ''\n  let resolvedAbsolute = false\n\n  for (let i = args.length - 1; i >= -1; i--) {\n    let path\n    if (i >= 0) {\n      path = args[i]\n\n      if (path.length === 0) continue\n    } else if (resolvedDevice.length === 0) {\n      path = os.cwd()\n    } else {\n      path = os.getEnv(`=${resolvedDevice}`) || os.cwd()\n\n      if (path === undefined || (path.substring(0, 2).toLowerCase() !== resolvedDevice.toLowerCase() && path.charCodeAt(2) === CHAR_BACKWARD_SLASH)) {\n        path = `${resolvedDevice}\\\\`\n      }\n    }\n\n    const len = path.length\n    let rootEnd = 0\n    let device = ''\n    let isAbsolute = false\n    const code = path.charCodeAt(0)\n\n    if (len === 1) {\n      if (isWindowsPathSeparator(code)) {\n        rootEnd = 1\n        isAbsolute = true\n      }\n    } else if (isWindowsPathSeparator(code)) {\n      isAbsolute = true\n\n      if (isWindowsPathSeparator(path.charCodeAt(1))) {\n        let j = 2\n        let last = j\n        while (j < len && !isWindowsPathSeparator(path.charCodeAt(j))) {\n          j++\n        }\n        if (j < len && j !== last) {\n          const firstPart = path.substring(last, j)\n          last = j\n          while (j < len && isWindowsPathSeparator(path.charCodeAt(j))) {\n            j++\n          }\n          if (j < len && j !== last) {\n            last = j\n            while (j < len && !isWindowsPathSeparator(path.charCodeAt(j))) {\n              j++\n            }\n            if (j === len || j !== last) {\n              device = `\\\\\\\\${firstPart}\\\\${path.substring(last, j)}`\n              rootEnd = j\n            }\n          }\n        }\n      } else {\n        rootEnd = 1\n      }\n    } else if (isWindowsDeviceRoot(code) && path.charCodeAt(1) === CHAR_COLON) {\n      device = path.substring(0, 2)\n      rootEnd = 2\n      if (len > 2 && isWindowsPathSeparator(path.charCodeAt(2))) {\n        isAbsolute = true\n        rootEnd = 3\n      }\n    }\n\n    if (device.length > 0) {\n      if (resolvedDevice.length > 0) {\n        if (device.toLowerCase() !== resolvedDevice.toLowerCase()) { continue }\n      } else {\n        resolvedDevice = device\n      }\n    }\n\n    if (resolvedAbsolute) {\n      if (resolvedDevice.length > 0) { break }\n    } else {\n      resolvedTail = `${path.substring(rootEnd)}\\\\${resolvedTail}`\n      resolvedAbsolute = isAbsolute\n      if (isAbsolute && resolvedDevice.length > 0) {\n        break\n      }\n    }\n  }\n\n  resolvedTail = normalizeString(resolvedTail, !resolvedAbsolute, '\\\\', isWindowsPathSeparator)\n\n  return resolvedAbsolute ? `${resolvedDevice}\\\\${resolvedTail}` : `${resolvedDevice}${resolvedTail}` || '.'\n}\n\nexports.normalize = function normalize (path) {\n  const len = path.length\n  if (len === 0) return '.'\n  let rootEnd = 0\n  let device\n  let isAbsolute = false\n  const code = path.charCodeAt(0)\n\n  if (len === 1) {\n    return code === CHAR_FORWARD_SLASH ? '\\\\' : path\n  }\n\n  if (isWindowsPathSeparator(code)) {\n    isAbsolute = true\n\n    if (isWindowsPathSeparator(path.charCodeAt(1))) {\n      let j = 2\n      let last = j\n      while (j < len && !isWindowsPathSeparator(path.charCodeAt(j))) {\n        j++\n      }\n      if (j < len && j !== last) {\n        const firstPart = path.substring(last, j)\n        last = j\n        while (j < len && isWindowsPathSeparator(path.charCodeAt(j))) {\n          j++\n        }\n        if (j < len && j !== last) {\n          last = j\n          while (j < len && !isWindowsPathSeparator(path.charCodeAt(j))) {\n            j++\n          }\n          if (j === len) {\n            return `\\\\\\\\${firstPart}\\\\${path.substring(last)}\\\\`\n          }\n          if (j !== last) {\n            device = `\\\\\\\\${firstPart}\\\\${path.substring(last, j)}`\n            rootEnd = j\n          }\n        }\n      }\n    } else {\n      rootEnd = 1\n    }\n  } else if (isWindowsDeviceRoot(code) && path.charCodeAt(1) === CHAR_COLON) {\n    device = path.substring(0, 2)\n    rootEnd = 2\n    if (len > 2 && isWindowsPathSeparator(path.charCodeAt(2))) {\n      isAbsolute = true\n      rootEnd = 3\n    }\n  }\n\n  let tail = rootEnd < len ? normalizeString(path.substring(rootEnd), !isAbsolute, '\\\\', isWindowsPathSeparator) : ''\n  if (tail.length === 0 && !isAbsolute) {\n    tail = '.'\n  }\n  if (tail.length > 0 && isWindowsPathSeparator(path.charCodeAt(len - 1))) {\n    tail += '\\\\'\n  }\n  if (device === undefined) {\n    return isAbsolute ? `\\\\${tail}` : tail\n  }\n  return isAbsolute ? `${device}\\\\${tail}` : `${device}${tail}`\n}\n\nexports.isAbsolute = function isAbsolute (path) {\n  const len = path.length\n  if (len === 0) return false\n\n  const code = path.charCodeAt(0)\n\n  return isWindowsPathSeparator(code) || (len > 2 && isWindowsDeviceRoot(code) && path.charCodeAt(1) === CHAR_COLON && isWindowsPathSeparator(path.charCodeAt(2)))\n}\n\nexports.join = function join (...args) {\n  if (args.length === 0) return '.'\n\n  let joined\n  let firstPart\n  for (let i = 0; i < args.length; ++i) {\n    const arg = args[i]\n    if (arg.length > 0) {\n      if (joined === undefined) joined = firstPart = arg\n      else joined += `\\\\${arg}`\n    }\n  }\n\n  if (joined === undefined) return '.'\n\n  let needsReplace = true\n  let slashCount = 0\n  if (isWindowsPathSeparator(firstPart.charCodeAt(0))) {\n    ++slashCount\n    const firstLen = firstPart.length\n    if (firstLen > 1 && isWindowsPathSeparator(firstPart.charCodeAt(1))) {\n      ++slashCount\n      if (firstLen > 2) {\n        if (isWindowsPathSeparator(firstPart.charCodeAt(2))) {\n          ++slashCount\n        } else {\n          needsReplace = false\n        }\n      }\n    }\n  }\n  if (needsReplace) {\n    while (slashCount < joined.length && isWindowsPathSeparator(joined.charCodeAt(slashCount))) {\n      slashCount++\n    }\n\n    if (slashCount >= 2) {\n      joined = `\\\\${joined.substring(slashCount)}`\n    }\n  }\n\n  return exports.normalize(joined)\n}\n\nexports.relative = function relative (from, to) {\n  if (from === to) return ''\n\n  const fromOrig = exports.resolve(from)\n  const toOrig = exports.resolve(to)\n\n  if (fromOrig === toOrig) return ''\n\n  from = fromOrig.toLowerCase()\n  to = toOrig.toLowerCase()\n\n  if (from === to) return ''\n\n  let fromStart = 0\n  while (fromStart < from.length && from.charCodeAt(fromStart) === CHAR_BACKWARD_SLASH) {\n    fromStart++\n  }\n  let fromEnd = from.length\n  while (fromEnd - 1 > fromStart && from.charCodeAt(fromEnd - 1) === CHAR_BACKWARD_SLASH) {\n    fromEnd--\n  }\n  const fromLen = fromEnd - fromStart\n\n  let toStart = 0\n  while (toStart < to.length && to.charCodeAt(toStart) === CHAR_BACKWARD_SLASH) {\n    toStart++\n  }\n  let toEnd = to.length\n  while (toEnd - 1 > toStart && to.charCodeAt(toEnd - 1) === CHAR_BACKWARD_SLASH) {\n    toEnd--\n  }\n  const toLen = toEnd - toStart\n\n  const length = fromLen < toLen ? fromLen : toLen\n  let lastCommonSep = -1\n  let i = 0\n  for (; i < length; i++) {\n    const fromCode = from.charCodeAt(fromStart + i)\n    if (fromCode !== to.charCodeAt(toStart + i)) {\n      break\n    } else if (fromCode === CHAR_BACKWARD_SLASH) {\n      lastCommonSep = i\n    }\n  }\n\n  if (i !== length) {\n    if (lastCommonSep === -1) return toOrig\n  } else {\n    if (toLen > length) {\n      if (to.charCodeAt(toStart + i) === CHAR_BACKWARD_SLASH) {\n        return toOrig.substring(toStart + i + 1)\n      }\n      if (i === 2) {\n        return toOrig.substring(toStart + i)\n      }\n    }\n    if (fromLen > length) {\n      if (from.charCodeAt(fromStart + i) === CHAR_BACKWARD_SLASH) {\n        lastCommonSep = i\n      } else if (i === 2) {\n        lastCommonSep = 3\n      }\n    }\n    if (lastCommonSep === -1) lastCommonSep = 0\n  }\n\n  let out = ''\n  for (i = fromStart + lastCommonSep + 1; i <= fromEnd; ++i) {\n    if (i === fromEnd || from.charCodeAt(i) === CHAR_BACKWARD_SLASH) {\n      out += out.length === 0 ? '..' : '\\\\..'\n    }\n  }\n\n  toStart += lastCommonSep\n\n  if (out.length > 0) {\n    return `${out}${toOrig.substring(toStart, toEnd)}`\n  }\n  if (toOrig.charCodeAt(toStart) === CHAR_BACKWARD_SLASH) {\n    ++toStart\n  }\n  return toOrig.substring(toStart, toEnd)\n}\n\nexports.toNamespacedPath = function toNamespacedPath (path) {\n  if (path.length === 0) return path\n\n  const resolvedPath = exports.resolve(path)\n\n  if (resolvedPath.length <= 2) return path\n\n  if (resolvedPath.charCodeAt(0) === CHAR_BACKWARD_SLASH) {\n    if (resolvedPath.charCodeAt(1) === CHAR_BACKWARD_SLASH) {\n      const code = resolvedPath.charCodeAt(2)\n      if (code !== CHAR_QUESTION_MARK && code !== CHAR_DOT) {\n        return `\\\\\\\\?\\\\UNC\\\\${resolvedPath.substring(2)}`\n      }\n    }\n  } else if (\n    isWindowsDeviceRoot(resolvedPath.charCodeAt(0)) &&\n      resolvedPath.charCodeAt(1) === CHAR_COLON &&\n      resolvedPath.charCodeAt(2) === CHAR_BACKWARD_SLASH\n  ) {\n    return `\\\\\\\\?\\\\${resolvedPath}`\n  }\n\n  return path\n}\n\nexports.dirname = function dirname (path) {\n  const len = path.length\n  if (len === 0) return '.'\n  let rootEnd = -1\n  let offset = 0\n  const code = path.charCodeAt(0)\n\n  if (len === 1) {\n    return isWindowsPathSeparator(code) ? path : '.'\n  }\n\n  if (isWindowsPathSeparator(code)) {\n    rootEnd = offset = 1\n\n    if (isWindowsPathSeparator(path.charCodeAt(1))) {\n      let j = 2\n      let last = j\n      while (j < len && !isWindowsPathSeparator(path.charCodeAt(j))) {\n        j++\n      }\n      if (j < len && j !== last) {\n        last = j\n        while (j < len && isWindowsPathSeparator(path.charCodeAt(j))) {\n          j++\n        }\n        if (j < len && j !== last) {\n          last = j\n          while (j < len && !isWindowsPathSeparator(path.charCodeAt(j))) {\n            j++\n          }\n          if (j === len) {\n            return path\n          }\n          if (j !== last) {\n            rootEnd = offset = j + 1\n          }\n        }\n      }\n    }\n  } else if (isWindowsDeviceRoot(code) && path.charCodeAt(1) === CHAR_COLON) {\n    rootEnd = len > 2 && isWindowsPathSeparator(path.charCodeAt(2)) ? 3 : 2\n    offset = rootEnd\n  }\n\n  let end = -1\n  let matchedSlash = true\n  for (let i = len - 1; i >= offset; --i) {\n    if (isWindowsPathSeparator(path.charCodeAt(i))) {\n      if (!matchedSlash) {\n        end = i\n        break\n      }\n    } else {\n      matchedSlash = false\n    }\n  }\n\n  if (end === -1) {\n    if (rootEnd === -1) return '.'\n\n    end = rootEnd\n  }\n  return path.substring(0, end)\n}\n\nexports.basename = function basename (path, suffix) {\n  let start = 0\n  let end = -1\n  let matchedSlash = true\n\n  if (path.length >= 2 && isWindowsDeviceRoot(path.charCodeAt(0)) && path.charCodeAt(1) === CHAR_COLON) {\n    start = 2\n  }\n\n  if (suffix !== undefined && suffix.length > 0 && suffix.length <= path.length) {\n    if (suffix === path) return ''\n    let extIdx = suffix.length - 1\n    let firstNonSlashEnd = -1\n    for (let i = path.length - 1; i >= start; --i) {\n      const code = path.charCodeAt(i)\n      if (isWindowsPathSeparator(code)) {\n        if (!matchedSlash) {\n          start = i + 1\n          break\n        }\n      } else {\n        if (firstNonSlashEnd === -1) {\n          matchedSlash = false\n          firstNonSlashEnd = i + 1\n        }\n        if (extIdx >= 0) {\n          if (code === suffix.charCodeAt(extIdx)) {\n            if (--extIdx === -1) {\n              end = i\n            }\n          } else {\n            extIdx = -1\n            end = firstNonSlashEnd\n          }\n        }\n      }\n    }\n\n    if (start === end) end = firstNonSlashEnd\n    else if (end === -1) end = path.length\n    return path.substring(start, end)\n  }\n  for (let i = path.length - 1; i >= start; --i) {\n    if (isWindowsPathSeparator(path.charCodeAt(i))) {\n      if (!matchedSlash) {\n        start = i + 1\n        break\n      }\n    } else if (end === -1) {\n      matchedSlash = false\n      end = i + 1\n    }\n  }\n\n  if (end === -1) return ''\n  return path.substring(start, end)\n}\n\nexports.extname = function extname (path) {\n  let start = 0\n  let startDot = -1\n  let startPart = 0\n  let end = -1\n  let matchedSlash = true\n  let preDotState = 0\n\n  if (path.length >= 2 && path.charCodeAt(1) === CHAR_COLON && isWindowsDeviceRoot(path.charCodeAt(0))) {\n    start = startPart = 2\n  }\n\n  for (let i = path.length - 1; i >= start; --i) {\n    const code = path.charCodeAt(i)\n    if (isWindowsPathSeparator(code)) {\n      if (!matchedSlash) {\n        startPart = i + 1\n        break\n      }\n      continue\n    }\n    if (end === -1) {\n      matchedSlash = false\n      end = i + 1\n    }\n    if (code === CHAR_DOT) {\n      if (startDot === -1) startDot = i\n      else if (preDotState !== 1) preDotState = 1\n    } else if (startDot !== -1) {\n      preDotState = -1\n    }\n  }\n\n  if (startDot === -1 || end === -1 || preDotState === 0 || (preDotState === 1 && startDot === end - 1 && startDot === startPart + 1)) {\n    return ''\n  }\n  return path.substring(startDot, end)\n}\n{\n  \"name\": \"bare-path\",\n  \"version\": \"3.0.0\",\n  \"description\": \"Path manipulation library for JavaScript\",\n  \"exports\": {\n    \".\": \"./index.js\",\n    \"./package\": \"./package.json\",\n    \"./posix\": \"./lib/posix.js\",\n    \"./win32\": \"./lib/win32.js\"\n  },\n  \"files\": [\n    \"index.js\",\n    \"lib\",\n    \"NOTICE\"\n  ],\n  \"scripts\": {\n    \"test\": \"standard && bare test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/holepunchto/bare-path.git\"\n  },\n  \"author\": \"Holepunch\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/bare-path/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/bare-path#readme\",\n  \"dependencies\": {\n    \"bare-os\": \"^3.0.1\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^3.3.2\",\n    \"standard\": \"^17.0.0\"\n  }\n}\nconst stream = require('streamx')\n\nconst defaultEncoding = 'utf8'\n\nmodule.exports = exports = stream.Stream\n\nexports.pipeline = stream.pipeline\n\nexports.isStream = stream.isStream\nexports.isEnded = stream.isEnded\nexports.isFinished = stream.isFinished\nexports.isDisturbed = stream.isDisturbed\n\nexports.getStreamError = stream.getStreamError\n\nexports.Stream = exports\n\nexports.Readable = class Readable extends stream.Readable {\n  constructor(opts = {}) {\n    super({\n      ...opts,\n      byteLength: null,\n      byteLengthReadable: null,\n      map: null,\n      mapReadable: null\n    })\n\n    if (this._construct) this._open = this._construct\n\n    if (this._read !== stream.Readable.prototype._read) {\n      this._read = read.bind(this, this._read)\n    }\n\n    if (this._destroy !== stream.Stream.prototype._destroy) {\n      this._destroy = destroy.bind(this, this._destroy)\n    }\n  }\n\n  push(chunk, encoding) {\n    if (typeof chunk === 'string') {\n      chunk = Buffer.from(chunk, encoding || defaultEncoding)\n    }\n\n    return super.push(chunk)\n  }\n\n  unshift(chunk, encoding) {\n    if (typeof chunk === 'string') {\n      chunk = Buffer.from(chunk, encoding || defaultEncoding)\n    }\n\n    super.unshift(chunk)\n  }\n}\n\nexports.Writable = class Writable extends stream.Writable {\n  constructor(opts = {}) {\n    super({\n      ...opts,\n      byteLength: null,\n      byteLengthWritable,\n      map: null,\n      mapWritable: null\n    })\n\n    if (this._construct) this._open = this._construct\n\n    if (this._write !== stream.Writable.prototype._write) {\n      this._write = write.bind(this, this._write)\n    }\n\n    if (this._destroy !== stream.Stream.prototype._destroy) {\n      this._destroy = destroy.bind(this, this._destroy)\n    }\n  }\n\n  write(chunk, encoding, cb) {\n    if (typeof encoding === 'function') {\n      cb = encoding\n      encoding = null\n    }\n\n    if (typeof chunk === 'string') {\n      encoding = encoding || defaultEncoding\n      chunk = Buffer.from(chunk, encoding)\n    } else {\n      encoding = 'buffer'\n    }\n\n    const result = super.write({ chunk, encoding })\n\n    if (cb) stream.Writable.drained(this).then(() => cb(null), cb)\n\n    return result\n  }\n\n  end(chunk, encoding, cb) {\n    if (typeof chunk === 'function') {\n      cb = chunk\n      chunk = null\n    } else if (typeof encoding === 'function') {\n      cb = encoding\n      encoding = null\n    }\n\n    if (typeof chunk === 'string') {\n      encoding = encoding || defaultEncoding\n      chunk = Buffer.from(chunk, encoding || defaultEncoding)\n    } else {\n      encoding = 'buffer'\n    }\n\n    const result =\n      chunk !== undefined && chunk !== null\n        ? super.end({ chunk, encoding })\n        : super.end()\n\n    if (cb) this.once('end', () => cb(null))\n\n    return result\n  }\n}\n\nexports.Duplex = class Duplex extends stream.Duplex {\n  constructor(opts = {}) {\n    super({\n      ...opts,\n      byteLength: null,\n      byteLengthReadable: null,\n      byteLengthWritable,\n      map: null,\n      mapReadable: null,\n      mapWritable: null\n    })\n\n    if (this._construct) this._open = this._construct\n\n    if (this._read !== stream.Readable.prototype._read) {\n      this._read = read.bind(this, this._read)\n    }\n\n    if (this._write !== stream.Duplex.prototype._write) {\n      this._write = write.bind(this, this._write)\n    }\n\n    if (this._destroy !== stream.Stream.prototype._destroy) {\n      this._destroy = destroy.bind(this, this._destroy)\n    }\n  }\n\n  push(chunk, encoding) {\n    if (typeof chunk === 'string') {\n      chunk = Buffer.from(chunk, encoding || defaultEncoding)\n    }\n\n    return super.push(chunk)\n  }\n\n  unshift(chunk, encoding) {\n    if (typeof chunk === 'string') {\n      chunk = Buffer.from(chunk, encoding || defaultEncoding)\n    }\n\n    super.unshift(chunk)\n  }\n\n  write(chunk, encoding, cb) {\n    if (typeof encoding === 'function') {\n      cb = encoding\n      encoding = null\n    }\n\n    if (typeof chunk === 'string') {\n      encoding = encoding || defaultEncoding\n      chunk = Buffer.from(chunk, encoding)\n    } else {\n      encoding = 'buffer'\n    }\n\n    const result = super.write({ chunk, encoding })\n\n    if (cb) stream.Writable.drained(this).then(() => cb(null), cb)\n\n    return result\n  }\n\n  end(chunk, encoding, cb) {\n    if (typeof chunk === 'function') {\n      cb = chunk\n      chunk = null\n    } else if (typeof encoding === 'function') {\n      cb = encoding\n      encoding = null\n    }\n\n    if (typeof chunk === 'string') {\n      encoding = encoding || defaultEncoding\n      chunk = Buffer.from(chunk, encoding)\n    } else {\n      encoding = 'buffer'\n    }\n\n    const result =\n      chunk !== undefined && chunk !== null\n        ? super.end({ chunk, encoding })\n        : super.end()\n\n    if (cb) this.once('end', () => cb(null))\n\n    return result\n  }\n}\n\nexports.Transform = class Transform extends stream.Transform {\n  constructor(opts = {}) {\n    super({\n      ...opts,\n      byteLength: null,\n      byteLengthReadable: null,\n      byteLengthWritable,\n      map: null,\n      mapReadable: null,\n      mapWritable: null\n    })\n\n    if (this._transform !== stream.Transform.prototype._transform) {\n      this._transform = transform.bind(this, this._transform)\n    } else {\n      this._transform = passthrough\n    }\n  }\n\n  push(chunk, encoding) {\n    if (typeof chunk === 'string') {\n      chunk = Buffer.from(chunk, encoding || defaultEncoding)\n    }\n\n    return super.push(chunk)\n  }\n\n  unshift(chunk, encoding) {\n    if (typeof chunk === 'string') {\n      chunk = Buffer.from(chunk, encoding || defaultEncoding)\n    }\n\n    super.unshift(chunk)\n  }\n\n  write(chunk, encoding, cb) {\n    if (typeof encoding === 'function') {\n      cb = encoding\n      encoding = null\n    }\n\n    if (typeof chunk === 'string') {\n      encoding = encoding || defaultEncoding\n      chunk = Buffer.from(chunk, encoding)\n    } else {\n      encoding = 'buffer'\n    }\n\n    const result = super.write({ chunk, encoding })\n\n    if (cb) stream.Writable.drained(this).then(() => cb(null), cb)\n\n    return result\n  }\n\n  end(chunk, encoding, cb) {\n    if (typeof chunk === 'function') {\n      cb = chunk\n      chunk = null\n    } else if (typeof encoding === 'function') {\n      cb = encoding\n      encoding = null\n    }\n\n    if (typeof chunk === 'string') {\n      encoding = encoding || defaultEncoding\n      chunk = Buffer.from(chunk, encoding)\n    } else {\n      encoding = 'buffer'\n    }\n\n    const result =\n      chunk !== undefined && chunk !== null\n        ? super.end({ chunk, encoding })\n        : super.end()\n\n    if (cb) this.once('end', () => cb(null))\n\n    return result\n  }\n}\n\nexports.PassThrough = class PassThrough extends exports.Transform {}\n\nexports.finished = function finished(stream, opts, cb) {\n  if (typeof opts === 'function') {\n    cb = opts\n    opts = {}\n  }\n\n  if (!opts) opts = {}\n\n  const { cleanup = false } = opts\n\n  const done = () => {\n    cb(exports.getStreamError(stream, { all: true }))\n\n    if (cleanup) detach()\n  }\n\n  const detach = () => {\n    stream.off('close', done)\n    stream.off('error', noop)\n  }\n\n  if (stream.destroyed) {\n    done()\n  } else {\n    stream.on('close', done)\n    stream.on('error', noop)\n  }\n\n  return detach\n}\n\nfunction read(read, cb) {\n  read.call(this, 65536)\n\n  cb(null)\n}\n\nfunction write(write, data, cb) {\n  write.call(this, data.chunk, data.encoding, cb)\n}\n\nfunction transform(transform, data, cb) {\n  transform.call(this, data.chunk, data.encoding, cb)\n}\n\nfunction destroy(destroy, cb) {\n  destroy.call(this, exports.getStreamError(this), cb)\n}\n\nfunction passthrough(data, cb) {\n  cb(null, data.chunk)\n}\n\nfunction byteLengthWritable(data) {\n  return data.chunk.byteLength\n}\n\nfunction noop() {}\n{\n  \"name\": \"bare-stream\",\n  \"version\": \"2.6.5\",\n  \"description\": \"Streaming data for JavaScript\",\n  \"exports\": {\n    \".\": {\n      \"types\": \"./index.d.ts\",\n      \"default\": \"./index.js\"\n    },\n    \"./package\": \"./package.json\",\n    \"./promises\": \"./promises.js\",\n    \"./web\": \"./web.js\",\n    \"./global\": \"./global.js\"\n  },\n  \"files\": [\n    \"index.js\",\n    \"index.d.ts\",\n    \"promises.js\",\n    \"web.js\",\n    \"global.js\"\n  ],\n  \"scripts\": {\n    \"test\": \"prettier . --check && bare test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/holepunchto/bare-stream.git\"\n  },\n  \"author\": \"Holepunch\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/bare-stream/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/bare-stream#readme\",\n  \"dependencies\": {\n    \"streamx\": \"^2.21.0\"\n  },\n  \"devDependencies\": {\n    \"bare-buffer\": \"^3.0.0\",\n    \"bare-events\": \"^2.5.4\",\n    \"brittle\": \"^3.5.2\",\n    \"prettier\": \"^3.3.3\",\n    \"prettier-config-standard\": \"^7.0.0\"\n  },\n  \"peerDependencies\": {\n    \"bare-buffer\": \"*\",\n    \"bare-events\": \"*\"\n  },\n  \"peerDependenciesMeta\": {\n    \"bare-buffer\": {\n      \"optional\": true\n    },\n    \"bare-events\": {\n      \"optional\": true\n    }\n  }\n}\nconst FACTOR = new Uint16Array(8)\n\nfunction factor4096 (i, n) {\n  while (n > 0) {\n    const f = i & 4095\n    FACTOR[--n] = f\n    i = (i - f) / 4096\n  }\n  return FACTOR\n}\n\nmodule.exports = class BigSparseArray {\n  constructor () {\n    this.tiny = new TinyArray()\n    this.maxLength = 4096\n    this.factor = 1\n  }\n\n  set (index, val) {\n    if (val !== undefined) {\n      while (index >= this.maxLength) {\n        this.maxLength *= 4096\n        this.factor++\n        if (!this.tiny.isEmptyish()) {\n          const t = new TinyArray()\n          t.set(0, this.tiny)\n          this.tiny = t\n        }\n      }\n    }\n\n    const f = factor4096(index, this.factor)\n    const last = this.factor - 1\n\n    let tiny = this.tiny\n    for (let i = 0; i < last; i++) {\n      const next = tiny.get(f[i])\n      if (next === undefined) {\n        if (val === undefined) return\n        tiny = tiny.set(f[i], new TinyArray())\n      } else {\n        tiny = next\n      }\n    }\n\n    return tiny.set(f[last], val)\n  }\n\n  get (index) {\n    if (index >= this.maxLength) return\n\n    const f = factor4096(index, this.factor)\n    const last = this.factor - 1\n\n    let tiny = this.tiny\n    for (let i = 0; i < last; i++) {\n      tiny = tiny.get(f[i])\n      if (tiny === undefined) return\n    }\n\n    return tiny.get(f[last])\n  }\n}\n\nclass TinyArray {\n  constructor () {\n    this.s = 0\n    this.b = new Array(1)\n    this.f = new Uint16Array(1)\n  }\n\n  isEmptyish () {\n    return this.b.length === 1 && this.b[0] === undefined\n  }\n\n  get (i) {\n    if (this.s === 12) return this.b[i]\n    const f = i >>> this.s\n    const r = i & (this.b.length - 1)\n    return this.f[r] === f ? this.b[r] : undefined\n  }\n\n  set (i, v) {\n    while (this.s !== 12) {\n      const f = i >>> this.s\n      const r = i & (this.b.length - 1)\n      const o = this.b[r]\n\n      if (o === undefined || f === this.f[r]) {\n        this.b[r] = v\n        this.f[r] = f\n        return v\n      }\n\n      this.grow()\n    }\n\n    this.b[i] = v\n    return v\n  }\n\n  grow () {\n    const os = this.s\n    const ob = this.b\n    const of = this.f\n\n    this.s += 4\n    this.b = new Array(this.b.length << 4)\n    this.f = this.s === 12 ? null : new Uint8Array(this.b.length)\n\n    const m = this.b.length - 1\n\n    for (let or = 0; or < ob.length; or++) {\n      if (ob[or] === undefined) continue\n\n      const i = of[or] << os | or\n      const f = i >>> this.s\n      const r = i & m\n\n      this.b[r] = ob[or]\n      if (this.s !== 12) this.f[r] = f\n    }\n  }\n}\n{\n  \"name\": \"big-sparse-array\",\n  \"version\": \"1.0.3\",\n  \"description\": \"A sparse array optimised for low memory whilst still being fast\",\n  \"main\": \"index.js\",\n  \"dependencies\": {},\n  \"devDependencies\": {\n    \"brittle\": \"^3.1.1\",\n    \"standard\": \"^16.0.3\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && brittle test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mafintosh/big-sparse-array.git\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mafintosh/big-sparse-array/issues\"\n  },\n  \"homepage\": \"https://github.com/mafintosh/big-sparse-array\"\n}\nconst b4a = require('b4a')\n\nfunction byteLength (size) {\n  return Math.ceil(size / 8)\n}\n\nfunction get (buffer, bit) {\n  const n = buffer.BYTES_PER_ELEMENT * 8\n\n  const offset = bit & (n - 1)\n  const i = (bit - offset) / n\n\n  return (buffer[i] & (1 << offset)) !== 0\n}\n\nfunction set (buffer, bit, value = true) {\n  const n = buffer.BYTES_PER_ELEMENT * 8\n\n  const offset = bit & (n - 1)\n  const i = (bit - offset) / n\n  const mask = 1 << offset\n\n  if (value) {\n    if ((buffer[i] & mask) !== 0) return false\n  } else {\n    if ((buffer[i] & mask) === 0) return false\n  }\n\n  buffer[i] ^= mask\n  return true\n}\n\nfunction setRange (buffer, start, end, value = true) {\n  const n = buffer.BYTES_PER_ELEMENT * 8\n\n  let remaining = end - start\n  let offset = start & (n - 1)\n  let i = (start - offset) / n\n\n  let changed = false\n\n  while (remaining > 0) {\n    const mask = (2 ** Math.min(remaining, n - offset) - 1) << offset\n\n    if (value) {\n      if ((buffer[i] & mask) !== mask) {\n        buffer[i] |= mask\n        changed = true\n      }\n    } else {\n      if ((buffer[i] & mask) !== 0) {\n        buffer[i] &= ~mask\n        changed = true\n      }\n    }\n\n    remaining -= n - offset\n    offset = 0\n    i++\n  }\n\n  return changed\n}\n\nfunction fill (buffer, value, start = 0, end = buffer.byteLength * 8) {\n  const n = buffer.BYTES_PER_ELEMENT * 8\n  let i, j\n\n  {\n    const offset = start & (n - 1)\n    i = (start - offset) / n\n\n    if (offset !== 0) {\n      const mask = (2 ** Math.min(n - offset, end - start) - 1) << offset\n\n      if (value) buffer[i] |= mask\n      else buffer[i] &= ~mask\n\n      i++\n    }\n  }\n\n  {\n    const offset = end & (n - 1)\n    j = (end - offset) / n\n\n    if (offset !== 0 && j >= i) {\n      const mask = (2 ** offset) - 1\n\n      if (value) buffer[j] |= mask\n      else buffer[j] &= ~mask\n    }\n  }\n\n  return buffer.fill(value ? (2 ** n) - 1 : 0, i, j)\n}\n\nfunction toggle (buffer, bit) {\n  const n = buffer.BYTES_PER_ELEMENT * 8\n\n  const offset = bit & (n - 1)\n  const i = (bit - offset) / n\n  const mask = 1 << offset\n\n  buffer[i] ^= mask\n  return (buffer[i] & mask) !== 0\n}\n\nfunction remove (buffer, bit) {\n  return set(buffer, bit, false)\n}\n\nfunction removeRange (buffer, start, end) {\n  return setRange(buffer, start, end, false)\n}\n\nfunction indexOf (buffer, value, position = 0) {\n  for (let i = position, n = buffer.byteLength * 8; i < n; i++) {\n    if (get(buffer, i) === value) return i\n  }\n\n  return -1\n}\n\nfunction lastIndexOf (buffer, value, position = buffer.byteLength * 8 - 1) {\n  for (let i = position; i >= 0; i--) {\n    if (get(buffer, i) === value) return i\n  }\n\n  return -1\n}\n\nfunction of (...bits) {\n  return from(bits)\n}\n\nfunction from (bits) {\n  const buffer = b4a.alloc(byteLength(bits.length))\n  for (let i = 0; i < bits.length; i++) set(buffer, i, bits[i])\n  return buffer\n}\n\nfunction * iterator (buffer) {\n  for (let i = 0, n = buffer.byteLength * 8; i < n; i++) yield get(buffer, i)\n}\n\nmodule.exports = {\n  byteLength,\n  get,\n  set,\n  setRange,\n  fill,\n  toggle,\n  remove,\n  removeRange,\n  indexOf,\n  lastIndexOf,\n  of,\n  from,\n  iterator\n}\n{\n  \"name\": \"bits-to-bytes\",\n  \"version\": \"1.3.0\",\n  \"description\": \"Functions for doing bit manipulation of typed arrays\",\n  \"main\": \"index.js\",\n  \"files\": [\n    \"index.js\"\n  ],\n  \"scripts\": {\n    \"test\": \"standard && brittle test.mjs\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/holepunchto/bits-to-bytes.git\"\n  },\n  \"author\": \"Kasper Isager Dalsgarð <kasper@funktionel.co>\",\n  \"license\": \"ISC\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/bits-to-bytes/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/bits-to-bytes#readme\",\n  \"dependencies\": {\n    \"b4a\": \"^1.5.0\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^2.3.1\",\n    \"standard\": \"^17.0.0\"\n  }\n}\nconst EventEmitter = require('events')\nconst Protomux = require('protomux')\nconst { Readable } = require('streamx')\nconst sodium = require('sodium-universal')\nconst b4a = require('b4a')\nconst c = require('compact-encoding')\nconst bitfield = require('compact-encoding-bitfield')\nconst bits = require('bits-to-bytes')\nconst errors = require('./lib/errors')\nconst { createTracer } = require('hypertrace')\n\nexports.Server = class BlindRelayServer extends EventEmitter {\n  constructor (opts = {}) {\n    super()\n\n    const {\n      createStream\n    } = opts\n\n    this._createStream = createStream\n    this._pairing = new Map()\n    this._sessions = new Set()\n  }\n\n  get sessions () {\n    return this._sessions[Symbol.iterator]()\n  }\n\n  accept (stream, opts) {\n    const session = new BlindRelaySession(this, stream, opts)\n\n    this._sessions.add(session)\n\n    return session\n  }\n\n  async close () {\n    const ending = []\n\n    for (const session of this._sessions) {\n      ending.push(session.end())\n    }\n\n    await Promise.all(ending)\n\n    this._pairing.clear()\n  }\n}\n\nclass BlindRelaySession extends EventEmitter {\n  constructor (server, stream, opts = {}) {\n    super()\n\n    const {\n      id,\n      handshake,\n      handshakeEncoding\n    } = opts\n\n    this.tracer = createTracer(this, {\n      props: {\n        id,\n        remotePublicKey: stream.remotePublicKey\n      }\n    })\n\n    this._server = server\n    this._mux = Protomux.from(stream)\n\n    this._channel = this._mux.createChannel({\n      protocol: 'blind-relay',\n      id,\n      handshake: handshake ? handshakeEncoding || c.raw : null,\n      onopen: this._onopen.bind(this),\n      onclose: this._onclose.bind(this),\n      ondestroy: this._ondestroy.bind(this)\n    })\n\n    this._pair = this._channel.addMessage({\n      encoding: m.pair,\n      onmessage: this._onpair.bind(this)\n    })\n\n    this._unpair = this._channel.addMessage({\n      encoding: m.unpair,\n      onmessage: this._onunpair.bind(this)\n    })\n\n    this._ending = null\n    this._destroyed = false\n    this._error = null\n    this._pairing = new Set()\n    this._streams = new Map()\n\n    this._onerror = (err) => this.emit('error', err)\n\n    this._channel.open(handshake)\n  }\n\n  get closed () {\n    return this._channel.closed\n  }\n\n  get mux () {\n    return this._mux\n  }\n\n  get stream () {\n    return this._mux.stream\n  }\n\n  _onopen () {\n    this.tracer.trace('open')\n    this.emit('open')\n  }\n\n  _onclose () {\n    this._ending = Promise.resolve()\n\n    const err = this._error || errors.CHANNEL_CLOSED()\n\n    for (const token of this._pairing) {\n      this._server._pairing.delete(token.toString('hex'))\n    }\n\n    for (const stream of this._streams.values()) {\n      stream\n        .off('error', this._onerror)\n        .on('error', noop)\n        .destroy(err)\n    }\n\n    this._pairing.clear()\n    this._streams.clear()\n\n    this._server._sessions.delete(this)\n\n    this.tracer.trace('close', { error: err })\n    this.emit('close')\n  }\n\n  _ondestroy () {\n    this._destroyed = true\n    this.emit('destroy')\n  }\n\n  _onpair ({ isInitiator, token, id: remoteId }) {\n    const keyString = token.toString('hex')\n\n    let pair = this._server._pairing.get(keyString)\n\n    if (pair === undefined) {\n      pair = new BlindRelayPair(token)\n      this._server._pairing.set(keyString, pair)\n    } else if (pair.links[+isInitiator]) return\n\n    this._pairing.add(keyString)\n\n    pair.links[+isInitiator] = new BlindRelayLink(this, isInitiator, remoteId)\n\n    if (!pair.paired) return\n\n    this._server._pairing.delete(keyString)\n\n    // 1st pass: Create the raw streams needed for each end of the link.\n    for (const link of pair.links) {\n      link.createStream()\n    }\n\n    // 2nd pass: Connect the raw streams and set up handlers.\n    for (const { isInitiator, session, stream } of pair.links) {\n      const remote = pair.remote(isInitiator)\n\n      stream\n        .on('error', session._onerror)\n        .on('close', () => session._streams.delete(keyString))\n        .relayTo(remote.stream)\n\n      session._pairing.delete(keyString)\n      session._streams.set(keyString, stream)\n    }\n\n    // 3rd pass: Let either end of the link know the streams were set up.\n    for (const { isInitiator, session, remoteId, stream } of pair.links) {\n      session._pair.send({\n        isInitiator,\n        token,\n        id: stream.id,\n        seq: 0\n      })\n\n      session._endMaybe()\n\n      session.emit('pair', isInitiator, token, stream, remoteId)\n    }\n  }\n\n  _onunpair ({ token }) {\n    const keyString = token.toString('hex')\n\n    const pair = this._server._pairing.get(keyString)\n\n    if (pair) {\n      for (const link of pair.links) {\n        if (link) link.session._pairing.delete(keyString)\n      }\n\n      return this._server._pairing.delete(keyString)\n    }\n\n    const stream = this._streams.get(keyString)\n\n    if (stream) {\n      stream\n        .off('error', this._onerror)\n        .on('error', noop)\n        .destroy(errors.PAIRING_CANCELLED())\n\n      this._streams.delete(keyString)\n    }\n  }\n\n  cork () {\n    this._channel.cork()\n  }\n\n  uncork () {\n    this._channel.uncork()\n  }\n\n  async end () {\n    if (this._ending) return this._ending\n\n    this._ending = EventEmitter.once(this, 'close')\n    this._endMaybe()\n\n    return this._ending\n  }\n\n  _endMaybe () {\n    if (this._ending && this._pairing.size === 0) {\n      this._channel.close()\n    }\n  }\n\n  destroy (err) {\n    if (this._destroyed) return\n    this._destroyed = true\n\n    this._error = err || errors.CHANNEL_DESTROYED()\n    this._channel.close()\n    this.tracer.trace('destroy', { error: this._error })\n  }\n}\n\nclass BlindRelayPair {\n  constructor (token) {\n    this.token = token\n    this.links = [null, null]\n  }\n\n  get paired () {\n    return this.links[0] !== null && this.links[1] !== null\n  }\n\n  remote (isInitiator) {\n    return this.links[isInitiator ? 0 : 1]\n  }\n}\n\nclass BlindRelayLink {\n  constructor (session, isInitiator, remoteId) {\n    this.session = session\n    this.isInitiator = isInitiator\n    this.remoteId = remoteId\n    this.stream = null\n  }\n\n  createStream () {\n    if (this.stream) return\n\n    this.stream = this.session._server._createStream({\n      firewall: this._onfirewall.bind(this)\n    })\n  }\n\n  _onfirewall (socket, port, host) {\n    this.stream.connect(socket, this.remoteId, port, host)\n\n    return false\n  }\n}\n\nexports.Client = class BlindRelayClient extends EventEmitter {\n  static _clients = new WeakMap()\n\n  static from (stream, opts) {\n    let client = this._clients.get(stream)\n    if (client) return client\n    client = new this(stream, opts)\n    this._clients.set(stream, client)\n    return client\n  }\n\n  constructor (stream, opts = {}) {\n    super()\n\n    const {\n      id,\n      handshake,\n      handshakeEncoding\n    } = opts\n\n    this.tracer = createTracer(this, {\n      props: {\n        id,\n        remotePublicKey: stream.remotePublicKey\n      }\n    })\n\n    this._mux = Protomux.from(stream)\n\n    this._channel = this._mux.createChannel({\n      protocol: 'blind-relay',\n      id,\n      handshake: handshake ? handshakeEncoding || c.raw : null,\n      onopen: this._onopen.bind(this),\n      onclose: this._onclose.bind(this),\n      ondestroy: this._ondestroy.bind(this)\n    })\n\n    this._pair = this._channel.addMessage({\n      encoding: m.pair,\n      onmessage: this._onpair.bind(this)\n    })\n\n    this._unpair = this._channel.addMessage({\n      encoding: m.unpair\n    })\n\n    this._ending = false\n    this._destroyed = false\n    this._error = null\n    this._requests = new Map()\n\n    this._channel.open(handshake)\n  }\n\n  get closed () {\n    return this._channel.closed\n  }\n\n  get mux () {\n    return this._mux\n  }\n\n  get stream () {\n    return this._mux.stream\n  }\n\n  get requests () {\n    return this._requests.values()\n  }\n\n  _onopen () {\n    this.tracer.trace('open')\n    this.emit('open')\n  }\n\n  _onclose () {\n    this._ending = Promise.resolve()\n\n    const err = this._error || errors.CHANNEL_CLOSED()\n\n    for (const request of this._requests.values()) {\n      request.destroy(err)\n    }\n\n    this._requests.clear()\n\n    this.constructor._clients.delete(this.stream)\n\n    this.tracer.trace('close', { error: err })\n    this.emit('close')\n  }\n\n  _ondestroy () {\n    this._destroyed = true\n    this.emit('destroy')\n  }\n\n  _onpair ({ isInitiator, token, id: remoteId }) {\n    const request = this._requests.get(token.toString('hex'))\n\n    if (request === undefined || request.isInitiator !== isInitiator) return\n\n    request.push(remoteId)\n    request.push(null)\n\n    this.emit('pair', request.isInitiator, request.token, request.stream, remoteId)\n  }\n\n  pair (isInitiator, token, stream) {\n    if (this._destroyed) throw errors.CHANNEL_DESTROYED()\n\n    const keyString = token.toString('hex')\n\n    if (this._requests.has(keyString)) throw errors.ALREADY_PAIRING()\n\n    const request = new BlindRelayRequest(this, isInitiator, token, stream)\n\n    this._requests.set(keyString, request)\n\n    return request\n  }\n\n  unpair (token) {\n    if (this._destroyed) throw errors.CHANNEL_DESTROYED()\n\n    const request = this._requests.get(token.toString('hex'))\n\n    if (request) request.destroy(errors.PAIRING_CANCELLED())\n\n    this._unpair.send({ token })\n  }\n\n  cork () {\n    this._channel.cork()\n  }\n\n  uncork () {\n    this._channel.uncork()\n  }\n\n  async end () {\n    if (this._ending) return this._ending\n\n    this._ending = EventEmitter.once(this, 'close')\n    this._endMaybe()\n\n    return this._ending\n  }\n\n  _endMaybe () {\n    if (this._ending && this._requests.size === 0) {\n      this._channel.close()\n    }\n  }\n\n  destroy (err) {\n    if (this._destroyed) return\n    this._destroyed = true\n\n    this._error = err || errors.CHANNEL_DESTROYED()\n    this._channel.close()\n    this.tracer.trace('destroy', { error: err })\n  }\n}\n\nclass BlindRelayRequest extends Readable {\n  constructor (client, isInitiator, token, stream) {\n    super()\n\n    this.client = client\n    this.isInitiator = isInitiator\n    this.token = token\n    this.stream = stream\n\n    this.tracer = createTracer(this, {\n      parent: client.tracer\n    })\n  }\n\n  _open (cb) {\n    if (this.client._destroyed) return cb(errors.CHANNEL_DESTROYED())\n\n    this.tracer.trace('open', {\n      isInitiator: this.isInitiator,\n      stream: this.stream\n    })\n\n    this.client._pair.send({\n      isInitiator: this.isInitiator,\n      token: this.token,\n      id: this.stream.id,\n      seq: 0\n    })\n\n    cb(null)\n  }\n\n  _destroy (cb) {\n    this.tracer.trace('destroy')\n\n    this.client._requests.delete(this.token.toString('hex'))\n\n    cb(null)\n\n    this.client._endMaybe()\n  }\n}\n\nexports.token = function token (buf = b4a.allocUnsafe(32)) {\n  sodium.randombytes_buf(buf)\n  return buf\n}\n\nfunction noop () {}\n\nconst m = exports.messages = {}\n\nconst flags = bitfield(7)\n\nm.pair = {\n  preencode (state, m) {\n    flags.preencode(state)\n    c.fixed32.preencode(state, m.token)\n    c.uint.preencode(state, m.id)\n    c.uint.preencode(state, m.seq)\n  },\n  encode (state, m) {\n    flags.encode(state, bits.of(m.isInitiator))\n    c.fixed32.encode(state, m.token)\n    c.uint.encode(state, m.id)\n    c.uint.encode(state, m.seq)\n  },\n  decode (state) {\n    const [isInitiator] = bits.iterator(flags.decode(state))\n\n    return {\n      isInitiator,\n      token: c.fixed32.decode(state),\n      id: c.uint.decode(state),\n      seq: c.uint.decode(state)\n    }\n  }\n}\n\nm.unpair = {\n  preencode (state, m) {\n    flags.preencode(state)\n    c.fixed32.preencode(state, m.token)\n  },\n  encode (state, m) {\n    flags.encode(state, bits.of())\n    c.fixed32.encode(state, m.token)\n  },\n  decode (state) {\n    flags.decode(state)\n\n    return {\n      token: c.fixed32.decode(state)\n    }\n  }\n}\nmodule.exports = class BlindRelayError extends Error {\n  constructor (msg, code, fn = BlindRelayError) {\n    super(`${code}: ${msg}`)\n    this.code = code\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, fn)\n    }\n  }\n\n  get name () {\n    return 'BlindRelayError'\n  }\n\n  static DUPLICATE_CHANNEL (msg = 'Duplicate channel') {\n    return new BlindRelayError(msg, 'DUPLICATE_CHANNEL', BlindRelayError.DUPLICATE_CHANNEL)\n  }\n\n  static CHANNEL_CLOSED (msg = 'Channel closed') {\n    return new BlindRelayError(msg, 'CHANNEL_CLOSED', BlindRelayError.CHANNEL_CLOSED)\n  }\n\n  static CHANNEL_DESTROYED (msg = 'Channel destroyed') {\n    return new BlindRelayError(msg, 'CHANNEL_DESTROYED', BlindRelayError.CHANNEL_DESTROYED)\n  }\n\n  static ALREADY_PAIRING (msg = 'Already pairing') {\n    return new BlindRelayError(msg, 'ALREADY_PAIRING', BlindRelayError.ALREADY_PAIRING)\n  }\n\n  static PAIRING_CANCELLED (msg = 'Pairing cancelled') {\n    return new BlindRelayError(msg, 'PAIRING_CANCELLED', BlindRelayError.PAIRING_CANCELLED)\n  }\n}\n{\n  \"name\": \"blind-relay\",\n  \"version\": \"1.3.3\",\n  \"description\": \"Blind relay for UDX over Protomux channels\",\n  \"main\": \"index.js\",\n  \"files\": [\n    \"index.js\",\n    \"lib\"\n  ],\n  \"scripts\": {\n    \"test\": \"standard && brittle test.mjs\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/holepunchto/blind-relay.git\"\n  },\n  \"author\": \"Holepunch\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/blind-relay/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/blind-relay#readme\",\n  \"imports\": {\n    \"events\": {\n      \"bare\": \"bare-events\",\n      \"default\": \"events\"\n    }\n  },\n  \"dependencies\": {\n    \"b4a\": \"^1.6.4\",\n    \"bare-events\": \"^2.2.0\",\n    \"bits-to-bytes\": \"^1.3.0\",\n    \"compact-encoding\": \"^2.12.0\",\n    \"compact-encoding-bitfield\": \"^1.0.0\",\n    \"hypertrace\": \"^1.4.1\",\n    \"protomux\": \"^3.5.1\",\n    \"sodium-universal\": \"^4.0.0\",\n    \"streamx\": \"^2.15.1\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^3.2.1\",\n    \"hyperdht\": \"^6.6.1\",\n    \"standard\": \"^17.0.0\",\n    \"udx-native\": \"^1.6.1\"\n  }\n}\n// https://ipinfo.io/bogon\n\nconst b4a = require('b4a')\nconst c = require('compact-encoding')\nconst net = require('compact-encoding-net')\n\nmodule.exports = exports = function isBogon (ip) {\n  return isBogonIP(ensureBuffer(ip))\n}\n\nexports.isBogon = exports\n\nexports.isPrivate = function isPrivate (ip) {\n  return isPrivateIP(ensureBuffer(ip))\n}\n\nfunction isBogonIP (ip) {\n  return isPrivateIP(ip) || isReservedIP(ip)\n}\n\nfunction isPrivateIP (ip) {\n  return ip.byteLength === 4 ? isPrivateIPv4(ip) : false // IPv6 has no private IPs\n}\n\nfunction isPrivateIPv4 (ip) {\n  return (\n    // 10.0.0.0/8  Private-use networks\n    (ip[0] === 10) ||\n    // 100.64.0.0/10 Carrier-grade NAT\n    (ip[0] === 100 && ip[1] >= 64 && ip[1] <= 127) ||\n    // 127.0.0.0/8 Loopback + Name collision occurrence (127.0.53.53)\n    (ip[0] === 127) ||\n    // 169.254.0.0/16  Link local\n    (ip[0] === 169 && ip[1] === 254) ||\n    // 172.16.0.0/12 Private-use networks\n    (ip[0] === 172 && ip[1] >= 16 && ip[1] <= 31) ||\n    // 192.168.0.0/16  Private-use networks\n    (ip[0] === 192 && ip[1] === 168)\n  )\n}\n\nfunction isReservedIP (ip) {\n  return ip.byteLength === 4 ? isReservedIPv4(ip) : isReservedIPv6(ip)\n}\n\nfunction isReservedIPv4 (ip) {\n  return (\n    // 0.0.0.0/8 \"This\" network\n    (ip[0] === 0) ||\n    // 192.0.0.0/24  IETF protocol assignments\n    (ip[0] === 192 && ip[1] === 0 && ip[2] === 0) ||\n    // 192.0.2.0/24  TEST-NET-1\n    (ip[0] === 192 && ip[1] === 0 && ip[2] === 2) ||\n    // 198.18.0.0/15 Network interconnect device benchmark testing\n    (ip[0] === 198 && ip[1] >= 18 && ip[1] <= 19) ||\n    // 198.51.100.0/24 TEST-NET-2\n    (ip[0] === 198 && ip[1] === 51 && ip[2] === 100) ||\n    // 203.0.113.0/24  TEST-NET-3\n    (ip[0] === 203 && ip[1] === 0 && ip[2] === 113) ||\n    // 224.0.0.0/4 Multicast\n    (ip[0] >= 224 && ip[0] <= 239) ||\n    // 240.0.0.0/4 Reserved for future use\n    (ip[0] >= 240) ||\n    // 255.255.255.255/32\n    (ip[0] === 255 && ip[1] === 255 && ip[2] === 255 && ip[3] === 255)\n  )\n}\n\nfunction isReservedIPv6 (ip) {\n  return (\n    // ::/128 Node-scope unicast unspecified address\n    // ::1/128 Node-scope unicast loopback address\n    (\n      ip[0] === 0 && ip[1] === 0 && ip[2] === 0 && ip[3] === 0 && ip[4] === 0 &&\n      ip[5] === 0 && ip[6] === 0 && ip[7] === 0 && ip[8] === 0 && ip[9] === 0 &&\n      ip[10] === 0 && ip[11] === 0 && ip[12] === 0 && ip[13] === 0 && ip[14] === 0 &&\n      ip[15] <= 1\n    ) ||\n    // ::ffff:0:0/96 IPv4-mapped addresses\n    // ::/96 IPv4-compatible addresses\n    (\n      ip[0] === 0 && ip[1] === 0 && ip[2] === 0 && ip[3] === 0 && ip[4] === 0 &&\n      ip[5] === 0 && ip[6] === 0 && ip[7] === 0 && ip[8] === 0 && ip[9] === 0 &&\n      (ip[10] === 0 || ip[10] === 0xff) &&\n      (ip[11] === 0 || ip[11] === 0xff)\n    ) ||\n    // 100::/64 Remotely triggered black hole addresses\n    (ip[0] === 0x01 && ip[1] === 0 && ip[2] === 0 && ip[3] === 0 && ip[4] === 0 && ip[5] === 0 && ip[6] === 0 && ip[7] === 0) ||\n    // 2001:10::/28 Overlay routable cryptographic hash identifiers (ORCHID)\n    (ip[0] === 0x20 && ip[1] === 0x01 && ip[2] === 0 && ip[3] >= 0x10 && ip[3] <= 0x1f) ||\n    // 2001:20::/28 Overlay routable cryptographic hash identifiers version 2 (ORCHIDv2)\n    (ip[0] === 0x20 && ip[1] === 0x01 && ip[2] === 0 && ip[3] >= 0x20 && ip[3] <= 0x2f) ||\n    // 2001:db8::/32 Documentation prefix\n    (ip[0] === 0x20 && ip[1] === 0x01 && ip[2] === 0x0d && ip[3] === 0xb8) ||\n    // fc00::/7 Unique local addresses (ULA)\n    (ip[0] >= 0xfc && ip[0] <= 0xfd) ||\n    // fe80::/10 Link-local unicast\n    (ip[0] === 0xfe && ip[1] >= 0x80 && ip[1] <= 0xbf) ||\n    // ff00::/8 Multicast\n    (ip[0] === 0xff)\n  )\n}\n\nconst state = c.state(0, 0, b4a.allocUnsafe(1 /* family */ + 16))\n\nfunction ensureBuffer (ip) {\n  if (b4a.isBuffer(ip)) return ip\n\n  net.ip.preencode(state, ip)\n  net.ip.encode(state, ip)\n\n  const buffer = state.buffer.subarray(1 /* family */, state.end)\n\n  state.start = 0\n  state.end = 0\n\n  return buffer\n}\n{\n  \"name\": \"bogon\",\n  \"version\": \"1.1.0\",\n  \"description\": \"Check if an IP is a bogon\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"standard && brittle test.mjs\"\n  },\n  \"dependencies\": {\n    \"compact-encoding\": \"^2.11.0\",\n    \"compact-encoding-net\": \"^1.2.0\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^3.0.4\",\n    \"nanobench\": \"^2.1.1\",\n    \"standard\": \"^17.0.0\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mafintosh/bogon.git\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mafintosh/bogon/issues\"\n  },\n  \"homepage\": \"https://github.com/mafintosh/bogon\"\n}\nconst b4a = require('b4a')\n\nmodule.exports = codecs\n\ncodecs.ascii = createString('ascii')\ncodecs.utf8 = createString('utf-8')\ncodecs.hex = createString('hex')\ncodecs.base64 = createString('base64')\ncodecs.ucs2 = createString('ucs2')\ncodecs.utf16le = createString('utf16le')\ncodecs.ndjson = createJSON(true)\ncodecs.json = createJSON(false)\ncodecs.binary = {\n  name: 'binary',\n  encode: function encodeBinary (obj) {\n    return typeof obj === 'string'\n      ? b4a.from(obj, 'utf-8')\n      : b4a.toBuffer(obj)\n  },\n  decode: function decodeBinary (buf) {\n    return b4a.toBuffer(buf)\n  }\n}\n\nfunction isCompactEncoding (c) {\n  return !!(c.encode && c.decode && c.preencode)\n}\n\nfunction fromCompactEncoding (c) {\n  return {\n    name: 'compact-encoding',\n    encode: function encodeWithCompact (value) {\n      const state = { start: 0, end: 0, buffer: null, cache: null }\n      c.preencode(state, value)\n      state.buffer = b4a.allocUnsafe(state.end)\n      c.encode(state, value)\n      return state.buffer\n    },\n    decode: function decodeWithCompact (buffer) {\n      return c.decode({ start: 0, end: buffer.byteLength, buffer, cache: null })\n    }\n  }\n}\n\nfunction codecs (fmt, fallback) {\n  if (typeof fmt === 'object' && fmt) {\n    return isCompactEncoding(fmt) ? fromCompactEncoding(fmt) : fmt\n  }\n\n  switch (fmt) {\n    case 'ndjson': return codecs.ndjson\n    case 'json': return codecs.json\n    case 'ascii': return codecs.ascii\n    case 'utf-8':\n    case 'utf8': return codecs.utf8\n    case 'hex': return codecs.hex\n    case 'base64': return codecs.base64\n    case 'ucs-2':\n    case 'ucs2': return codecs.ucs2\n    case 'utf16-le':\n    case 'utf16le': return codecs.utf16le\n  }\n\n  return fallback !== undefined ? fallback : codecs.binary\n}\n\nfunction createJSON (newline) {\n  return {\n    name: newline ? 'ndjson' : 'json',\n    encode: newline ? encodeNDJSON : encodeJSON,\n    decode: function decodeJSON (buf) {\n      return JSON.parse(b4a.toString(buf))\n    }\n  }\n\n  function encodeJSON (val) {\n    return b4a.from(JSON.stringify(val))\n  }\n\n  function encodeNDJSON (val) {\n    return b4a.from(JSON.stringify(val) + '\\n')\n  }\n}\n\nfunction createString (type) {\n  return {\n    name: type,\n    encode: function encodeString (val) {\n      if (typeof val !== 'string') val = val.toString()\n      return b4a.from(val, type)\n    },\n    decode: function decodeString (buf) {\n      return b4a.toString(buf, type)\n    }\n  }\n}\n{\n  \"name\": \"codecs\",\n  \"version\": \"3.1.0\",\n  \"description\": \"Create an binary encoder/decoder for json, utf-8 or custom types\",\n  \"main\": \"index.js\",\n  \"dependencies\": {\n    \"b4a\": \"^1.6.3\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^3.2.1\",\n    \"compact-encoding\": \"^2.11.0\",\n    \"standard\": \"^17.0.0\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && brittle test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mafintosh/codecs.git\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mafintosh/codecs/issues\"\n  },\n  \"homepage\": \"https://github.com/mafintosh/codecs\"\n}\nconst c = require('compact-encoding')\n\nmodule.exports = function bitfield (length) {\n  if (length > 64) throw new RangeError('Bitfield cannot be larger than 64 bits')\n\n  let byteLength\n  if (length < 8) byteLength = 1\n  else if (length <= 16) byteLength = 2\n  else if (length <= 32) byteLength = 4\n  else byteLength = 8\n\n  return {\n    preencode (state) {\n      state.end++ // Length byte, used for data when byteLength === 1\n\n      if (byteLength === 1) ;\n      else if (byteLength === 2) c.uint16.preencode(state)\n      else if (byteLength === 4) c.uint32.preencode(state)\n      else c.uint64.preencode(state)\n    },\n\n    encode (state, b) {\n      if (byteLength === 1) ;\n      else if (byteLength === 2) c.uint8.encode(state, 0xfd)\n      else if (byteLength === 4) c.uint8.encode(state, 0xfe)\n      else c.uint8.encode(state, 0xff)\n\n      if (typeof b === 'number') {\n        if (byteLength === 1) c.uint8.encode(state, b)\n        else if (byteLength === 2) c.uint16.encode(state, b)\n        else if (byteLength === 4) c.uint32.encode(state, b)\n        else c.uint64.encode(state, b)\n      } else {\n        state.buffer.set(b, state.start)\n\n        if (b.byteLength < byteLength) {\n          // Zero-fill the rest of the byte length.\n          state.buffer.fill(\n            0,\n            state.start + b.byteLength,\n            state.start + byteLength\n          )\n        }\n\n        state.start += byteLength\n      }\n    },\n\n    decode (state) {\n      const byte = state.buffer[state.start]\n\n      let byteLength\n      if (byte <= 0xfc) byteLength = 1\n      else if (byte === 0xfd) byteLength = 2\n      else if (byte === 0xfe) byteLength = 4\n      else byteLength = 8\n\n      if (byteLength > 1) state.start++ // Skip the length byte\n\n      if (state.end - state.start < byteLength) throw new Error('Out of bounds')\n\n      const b = state.buffer.subarray(state.start, (state.start += byteLength))\n\n      return length <= 8 ? b.subarray(0, 1) : b\n    }\n  }\n}\n{\n  \"name\": \"compact-encoding-bitfield\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Compact codec for bitfields\",\n  \"main\": \"index.js\",\n  \"files\": [\n    \"index.js\"\n  ],\n  \"scripts\": {\n    \"test\": \"standard && brittle test.mjs\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/compact-encoding/compact-encoding-bitfield.git\"\n  },\n  \"author\": \"Kasper Isager Dalsgarð <kasper@funktionel.co>\",\n  \"license\": \"ISC\",\n  \"bugs\": {\n    \"url\": \"https://github.com/compact-encoding/compact-encoding-bitfield/issues\"\n  },\n  \"homepage\": \"https://github.com/compact-encoding/compact-encoding-bitfield#readme\",\n  \"dependencies\": {\n    \"compact-encoding\": \"^2.4.1\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^1.3.5\",\n    \"standard\": \"^16.0.3\"\n  },\n  \"standard\": {\n    \"ignore\": [\n      \"__snapshots__/**\"\n    ]\n  }\n}\nconst c = require('compact-encoding')\n\nconst port = c.uint16\n\nconst address = (host, family) => {\n  return {\n    preencode (state, m) {\n      host.preencode(state, m.host)\n      port.preencode(state, m.port)\n    },\n    encode (state, m) {\n      host.encode(state, m.host)\n      port.encode(state, m.port)\n    },\n    decode (state) {\n      return {\n        host: host.decode(state),\n        family,\n        port: port.decode(state)\n      }\n    }\n  }\n}\n\nconst ipv4 = {\n  preencode (state) {\n    state.end += 4\n  },\n  encode (state, string) {\n    const start = state.start\n    const end = start + 4\n\n    let i = 0\n\n    while (i < string.length) {\n      let n = 0\n      let c\n\n      while (i < string.length && (c = string.charCodeAt(i++)) !== /* . */ 0x2e) {\n        n = n * 10 + (c - /* 0 */ 0x30)\n      }\n\n      state.buffer[state.start++] = n\n    }\n\n    state.start = end\n  },\n  decode (state) {\n    if (state.end - state.start < 4) throw new Error('Out of bounds')\n    return (\n      state.buffer[state.start++] + '.' +\n      state.buffer[state.start++] + '.' +\n      state.buffer[state.start++] + '.' +\n      state.buffer[state.start++]\n    )\n  }\n}\n\nconst ipv4Address = address(ipv4, 4)\n\nconst ipv6 = {\n  preencode (state) {\n    state.end += 16\n  },\n  encode (state, string) {\n    const start = state.start\n    const end = start + 16\n\n    let i = 0\n    let split = null\n\n    while (i < string.length) {\n      let n = 0\n      let c\n\n      while (i < string.length && (c = string.charCodeAt(i++)) !== /* : */ 0x3a) {\n        if (c >= 0x30 && c <= 0x39) n = n * 0x10 + (c - /* 0 */ 0x30)\n        else if (c >= 0x41 && c <= 0x46) n = n * 0x10 + (c - /* A */ 0x41 + 10)\n        else if (c >= 0x61 && c <= 0x66) n = n * 0x10 + (c - /* a */ 0x61 + 10)\n      }\n\n      state.buffer[state.start++] = n >>> 8\n      state.buffer[state.start++] = n\n\n      if (i < string.length && string.charCodeAt(i) === /* : */ 0x3a) {\n        i++\n        split = state.start\n      }\n    }\n\n    if (split !== null) {\n      const offset = end - state.start\n      state.buffer\n        .copyWithin(split + offset, split)\n        .fill(0, split, split + offset)\n    }\n\n    state.start = end\n  },\n  decode (state) {\n    if (state.end - state.start < 16) throw new Error('Out of bounds')\n    return (\n      (state.buffer[state.start++] * 256 + state.buffer[state.start++]).toString(16) + ':' +\n      (state.buffer[state.start++] * 256 + state.buffer[state.start++]).toString(16) + ':' +\n      (state.buffer[state.start++] * 256 + state.buffer[state.start++]).toString(16) + ':' +\n      (state.buffer[state.start++] * 256 + state.buffer[state.start++]).toString(16) + ':' +\n      (state.buffer[state.start++] * 256 + state.buffer[state.start++]).toString(16) + ':' +\n      (state.buffer[state.start++] * 256 + state.buffer[state.start++]).toString(16) + ':' +\n      (state.buffer[state.start++] * 256 + state.buffer[state.start++]).toString(16) + ':' +\n      (state.buffer[state.start++] * 256 + state.buffer[state.start++]).toString(16)\n    )\n  }\n}\n\nconst ipv6Address = address(ipv6, 6)\n\nconst ip = {\n  preencode (state, string) {\n    const family = string.includes(':') ? 6 : 4\n    c.uint8.preencode(state, family)\n    if (family === 4) ipv4.preencode(state)\n    else ipv6.preencode(state)\n  },\n  encode (state, string) {\n    const family = string.includes(':') ? 6 : 4\n    c.uint8.encode(state, family)\n    if (family === 4) ipv4.encode(state, string)\n    else ipv6.encode(state, string)\n  },\n  decode (state) {\n    const family = c.uint8.decode(state)\n    if (family === 4) return ipv4.decode(state)\n    else return ipv6.decode(state)\n  }\n}\n\nconst ipAddress = {\n  preencode (state, m) {\n    ip.preencode(state, m.host)\n    port.preencode(state, m.port)\n  },\n  encode (state, m) {\n    ip.encode(state, m.host)\n    port.encode(state, m.port)\n  },\n  decode (state) {\n    const family = c.uint8.decode(state)\n    return {\n      host: family === 4 ? ipv4.decode(state) : ipv6.decode(state),\n      family,\n      port: port.decode(state)\n    }\n  }\n}\n\nmodule.exports = {\n  port,\n  ipv4,\n  ipv4Address,\n  ipv6,\n  ipv6Address,\n  ip,\n  ipAddress\n}\n{\n  \"name\": \"compact-encoding-net\",\n  \"version\": \"1.2.0\",\n  \"description\": \"Compact codecs for net types\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"standard && brittle test.mjs\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/compact-encoding/compact-encoding-net.git\"\n  },\n  \"author\": \"Kasper Isager Dalsgarð <kasper@funktionel.co>\",\n  \"license\": \"ISC\",\n  \"bugs\": {\n    \"url\": \"https://github.com/compact-encoding/compact-encoding-net/issues\"\n  },\n  \"homepage\": \"https://github.com/compact-encoding/compact-encoding-net#readme\",\n  \"dependencies\": {\n    \"compact-encoding\": \"^2.4.1\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^1.3.5\",\n    \"nanobench\": \"^2.1.1\",\n    \"standard\": \"^16.0.3\"\n  }\n}\nconst LE = exports.LE = (new Uint8Array(new Uint16Array([0xff]).buffer))[0] === 0xff\n\nexports.BE = !LE\nconst b4a = require('b4a')\n\nconst { BE } = require('./endian')\n\nexports.state = function (start = 0, end = 0, buffer = null) {\n  return { start, end, buffer, cache: null }\n}\n\nconst raw = exports.raw = require('./raw')\n\nconst uint = exports.uint = {\n  preencode (state, n) {\n    state.end += n <= 0xfc ? 1 : n <= 0xffff ? 3 : n <= 0xffffffff ? 5 : 9\n  },\n  encode (state, n) {\n    if (n <= 0xfc) uint8.encode(state, n)\n    else if (n <= 0xffff) {\n      state.buffer[state.start++] = 0xfd\n      uint16.encode(state, n)\n    } else if (n <= 0xffffffff) {\n      state.buffer[state.start++] = 0xfe\n      uint32.encode(state, n)\n    } else {\n      state.buffer[state.start++] = 0xff\n      uint64.encode(state, n)\n    }\n  },\n  decode (state) {\n    const a = uint8.decode(state)\n    if (a <= 0xfc) return a\n    if (a === 0xfd) return uint16.decode(state)\n    if (a === 0xfe) return uint32.decode(state)\n    return uint64.decode(state)\n  }\n}\n\nconst uint8 = exports.uint8 = {\n  preencode (state, n) {\n    state.end += 1\n  },\n  encode (state, n) {\n    validateUint(n)\n    state.buffer[state.start++] = n\n  },\n  decode (state) {\n    if (state.start >= state.end) throw new Error('Out of bounds')\n    return state.buffer[state.start++]\n  }\n}\n\nconst uint16 = exports.uint16 = {\n  preencode (state, n) {\n    state.end += 2\n  },\n  encode (state, n) {\n    validateUint(n)\n    state.buffer[state.start++] = n\n    state.buffer[state.start++] = n >>> 8\n  },\n  decode (state) {\n    if (state.end - state.start < 2) throw new Error('Out of bounds')\n    return (\n      state.buffer[state.start++] +\n      state.buffer[state.start++] * 0x100\n    )\n  }\n}\n\nconst uint24 = exports.uint24 = {\n  preencode (state, n) {\n    state.end += 3\n  },\n  encode (state, n) {\n    validateUint(n)\n    state.buffer[state.start++] = n\n    state.buffer[state.start++] = n >>> 8\n    state.buffer[state.start++] = n >>> 16\n  },\n  decode (state) {\n    if (state.end - state.start < 3) throw new Error('Out of bounds')\n    return (\n      state.buffer[state.start++] +\n      state.buffer[state.start++] * 0x100 +\n      state.buffer[state.start++] * 0x10000\n    )\n  }\n}\n\nconst uint32 = exports.uint32 = {\n  preencode (state, n) {\n    state.end += 4\n  },\n  encode (state, n) {\n    validateUint(n)\n    state.buffer[state.start++] = n\n    state.buffer[state.start++] = n >>> 8\n    state.buffer[state.start++] = n >>> 16\n    state.buffer[state.start++] = n >>> 24\n  },\n  decode (state) {\n    if (state.end - state.start < 4) throw new Error('Out of bounds')\n    return (\n      state.buffer[state.start++] +\n      state.buffer[state.start++] * 0x100 +\n      state.buffer[state.start++] * 0x10000 +\n      state.buffer[state.start++] * 0x1000000\n    )\n  }\n}\n\nconst uint40 = exports.uint40 = {\n  preencode (state, n) {\n    state.end += 5\n  },\n  encode (state, n) {\n    validateUint(n)\n    const r = Math.floor(n / 0x100)\n    uint8.encode(state, n)\n    uint32.encode(state, r)\n  },\n  decode (state) {\n    if (state.end - state.start < 5) throw new Error('Out of bounds')\n    return uint8.decode(state) + 0x100 * uint32.decode(state)\n  }\n}\n\nconst uint48 = exports.uint48 = {\n  preencode (state, n) {\n    state.end += 6\n  },\n  encode (state, n) {\n    validateUint(n)\n    const r = Math.floor(n / 0x10000)\n    uint16.encode(state, n)\n    uint32.encode(state, r)\n  },\n  decode (state) {\n    if (state.end - state.start < 6) throw new Error('Out of bounds')\n    return uint16.decode(state) + 0x10000 * uint32.decode(state)\n  }\n}\n\nconst uint56 = exports.uint56 = {\n  preencode (state, n) {\n    state.end += 7\n  },\n  encode (state, n) {\n    validateUint(n)\n    const r = Math.floor(n / 0x1000000)\n    uint24.encode(state, n)\n    uint32.encode(state, r)\n  },\n  decode (state) {\n    if (state.end - state.start < 7) throw new Error('Out of bounds')\n    return uint24.decode(state) + 0x1000000 * uint32.decode(state)\n  }\n}\n\nconst uint64 = exports.uint64 = {\n  preencode (state, n) {\n    state.end += 8\n  },\n  encode (state, n) {\n    validateUint(n)\n    const r = Math.floor(n / 0x100000000)\n    uint32.encode(state, n)\n    uint32.encode(state, r)\n  },\n  decode (state) {\n    if (state.end - state.start < 8) throw new Error('Out of bounds')\n    return uint32.decode(state) + 0x100000000 * uint32.decode(state)\n  }\n}\n\nexports.int = zigZagInt(uint)\nexports.int8 = zigZagInt(uint8)\nexports.int16 = zigZagInt(uint16)\nexports.int24 = zigZagInt(uint24)\nexports.int32 = zigZagInt(uint32)\nexports.int40 = zigZagInt(uint40)\nexports.int48 = zigZagInt(uint48)\nexports.int56 = zigZagInt(uint56)\nexports.int64 = zigZagInt(uint64)\n\nconst biguint64 = exports.biguint64 = {\n  preencode (state, n) {\n    state.end += 8\n  },\n  encode (state, n) {\n    const view = new DataView(state.buffer.buffer, state.start + state.buffer.byteOffset, 8)\n    view.setBigUint64(0, n, true) // little endian\n    state.start += 8\n  },\n  decode (state) {\n    if (state.end - state.start < 8) throw new Error('Out of bounds')\n    const view = new DataView(state.buffer.buffer, state.start + state.buffer.byteOffset, 8)\n    const n = view.getBigUint64(0, true) // little endian\n    state.start += 8\n    return n\n  }\n}\n\nexports.bigint64 = zigZagBigInt(biguint64)\n\nconst biguint = exports.biguint = {\n  preencode (state, n) {\n    let len = 0\n    for (let m = n; m; m = m >> 64n) len++\n    uint.preencode(state, len)\n    state.end += 8 * len\n  },\n  encode (state, n) {\n    let len = 0\n    for (let m = n; m; m = m >> 64n) len++\n    uint.encode(state, len)\n    const view = new DataView(state.buffer.buffer, state.start + state.buffer.byteOffset, 8 * len)\n    for (let m = n, i = 0; m; m = m >> 64n, i += 8) {\n      view.setBigUint64(i, BigInt.asUintN(64, m), true) // little endian\n    }\n    state.start += 8 * len\n  },\n  decode (state) {\n    const len = uint.decode(state)\n    if (state.end - state.start < 8 * len) throw new Error('Out of bounds')\n    const view = new DataView(state.buffer.buffer, state.start + state.buffer.byteOffset, 8 * len)\n    let n = 0n\n    for (let i = len - 1; i >= 0; i--) n = (n << 64n) + view.getBigUint64(i * 8, true) // little endian\n    state.start += 8 * len\n    return n\n  }\n}\n\nexports.bigint = zigZagBigInt(biguint)\n\nexports.lexint = require('./lexint')\n\nexports.float32 = {\n  preencode (state, n) {\n    state.end += 4\n  },\n  encode (state, n) {\n    const view = new DataView(state.buffer.buffer, state.start + state.buffer.byteOffset, 4)\n    view.setFloat32(0, n, true) // little endian\n    state.start += 4\n  },\n  decode (state) {\n    if (state.end - state.start < 4) throw new Error('Out of bounds')\n    const view = new DataView(state.buffer.buffer, state.start + state.buffer.byteOffset, 4)\n    const float = view.getFloat32(0, true) // little endian\n    state.start += 4\n    return float\n  }\n}\n\nexports.float64 = {\n  preencode (state, n) {\n    state.end += 8\n  },\n  encode (state, n) {\n    const view = new DataView(state.buffer.buffer, state.start + state.buffer.byteOffset, 8)\n    view.setFloat64(0, n, true) // little endian\n    state.start += 8\n  },\n  decode (state) {\n    if (state.end - state.start < 8) throw new Error('Out of bounds')\n    const view = new DataView(state.buffer.buffer, state.start + state.buffer.byteOffset, 8)\n    const float = view.getFloat64(0, true) // little endian\n    state.start += 8\n    return float\n  }\n}\n\nconst buffer = exports.buffer = {\n  preencode (state, b) {\n    if (b) uint8array.preencode(state, b)\n    else state.end++\n  },\n  encode (state, b) {\n    if (b) uint8array.encode(state, b)\n    else state.buffer[state.start++] = 0\n  },\n  decode (state) {\n    const len = uint.decode(state)\n    if (len === 0) return null\n    if (state.end - state.start < len) throw new Error('Out of bounds')\n    return state.buffer.subarray(state.start, (state.start += len))\n  }\n}\n\nexports.binary = {\n  ...buffer,\n  preencode (state, b) {\n    if (typeof b === 'string') utf8.preencode(state, b)\n    else buffer.preencode(state, b)\n  },\n  encode (state, b) {\n    if (typeof b === 'string') utf8.encode(state, b)\n    else buffer.encode(state, b)\n  }\n}\n\nexports.arraybuffer = {\n  preencode (state, b) {\n    uint.preencode(state, b.byteLength)\n    state.end += b.byteLength\n  },\n  encode (state, b) {\n    uint.encode(state, b.byteLength)\n\n    const view = new Uint8Array(b)\n\n    state.buffer.set(view, state.start)\n    state.start += b.byteLength\n  },\n  decode (state) {\n    const len = uint.decode(state)\n\n    const b = new ArrayBuffer(len)\n    const view = new Uint8Array(b)\n\n    view.set(state.buffer.subarray(state.start, state.start += len))\n\n    return b\n  }\n}\n\nfunction typedarray (TypedArray, swap) {\n  const n = TypedArray.BYTES_PER_ELEMENT\n\n  return {\n    preencode (state, b) {\n      uint.preencode(state, b.length)\n      state.end += b.byteLength\n    },\n    encode (state, b) {\n      uint.encode(state, b.length)\n\n      const view = new Uint8Array(b.buffer, b.byteOffset, b.byteLength)\n\n      if (BE && swap) swap(view)\n\n      state.buffer.set(view, state.start)\n      state.start += b.byteLength\n    },\n    decode (state) {\n      const len = uint.decode(state)\n\n      let b = state.buffer.subarray(state.start, state.start += len * n)\n      if (b.byteLength !== len * n) throw new Error('Out of bounds')\n      if ((b.byteOffset % n) !== 0) b = new Uint8Array(b)\n\n      if (BE && swap) swap(b)\n\n      return new TypedArray(b.buffer, b.byteOffset, b.byteLength / n)\n    }\n  }\n}\n\nconst uint8array = exports.uint8array = typedarray(Uint8Array)\nexports.uint16array = typedarray(Uint16Array, b4a.swap16)\nexports.uint32array = typedarray(Uint32Array, b4a.swap32)\n\nexports.int8array = typedarray(Int8Array)\nexports.int16array = typedarray(Int16Array, b4a.swap16)\nexports.int32array = typedarray(Int32Array, b4a.swap32)\n\nexports.biguint64array = typedarray(BigUint64Array, b4a.swap64)\nexports.bigint64array = typedarray(BigInt64Array, b4a.swap64)\n\nexports.float32array = typedarray(Float32Array, b4a.swap32)\nexports.float64array = typedarray(Float64Array, b4a.swap64)\n\nfunction string (encoding) {\n  return {\n    preencode (state, s) {\n      const len = b4a.byteLength(s, encoding)\n      uint.preencode(state, len)\n      state.end += len\n    },\n    encode (state, s) {\n      const len = b4a.byteLength(s, encoding)\n      uint.encode(state, len)\n      b4a.write(state.buffer, s, state.start, encoding)\n      state.start += len\n    },\n    decode (state) {\n      const len = uint.decode(state)\n      if (state.end - state.start < len) throw new Error('Out of bounds')\n      return b4a.toString(state.buffer, encoding, state.start, (state.start += len))\n    },\n    fixed (n) {\n      return {\n        preencode (state) {\n          state.end += n\n        },\n        encode (state, s) {\n          b4a.write(state.buffer, s, state.start, n, encoding)\n          state.start += n\n        },\n        decode (state) {\n          if (state.end - state.start < n) throw new Error('Out of bounds')\n          return b4a.toString(state.buffer, encoding, state.start, (state.start += n))\n        }\n      }\n    }\n  }\n}\n\nconst utf8 = exports.string = exports.utf8 = string('utf-8')\nexports.ascii = string('ascii')\nexports.hex = string('hex')\nexports.base64 = string('base64')\nexports.ucs2 = exports.utf16le = string('utf16le')\n\nexports.bool = {\n  preencode (state, b) {\n    state.end++\n  },\n  encode (state, b) {\n    state.buffer[state.start++] = b ? 1 : 0\n  },\n  decode (state) {\n    if (state.start >= state.end) throw Error('Out of bounds')\n    return state.buffer[state.start++] === 1\n  }\n}\n\nconst fixed = exports.fixed = function fixed (n) {\n  return {\n    preencode (state, s) {\n      if (s.byteLength !== n) throw new Error('Incorrect buffer size')\n      state.end += n\n    },\n    encode (state, s) {\n      state.buffer.set(s, state.start)\n      state.start += n\n    },\n    decode (state) {\n      if (state.end - state.start < n) throw new Error('Out of bounds')\n      return state.buffer.subarray(state.start, (state.start += n))\n    }\n  }\n}\n\nexports.fixed32 = fixed(32)\nexports.fixed64 = fixed(64)\n\nexports.array = function array (enc) {\n  return {\n    preencode (state, list) {\n      uint.preencode(state, list.length)\n      for (let i = 0; i < list.length; i++) enc.preencode(state, list[i])\n    },\n    encode (state, list) {\n      uint.encode(state, list.length)\n      for (let i = 0; i < list.length; i++) enc.encode(state, list[i])\n    },\n    decode (state) {\n      const len = uint.decode(state)\n      if (len > 0x100000) throw new Error('Array is too big')\n      const arr = new Array(len)\n      for (let i = 0; i < len; i++) arr[i] = enc.decode(state)\n      return arr\n    }\n  }\n}\n\nexports.frame = function frame (enc) {\n  const dummy = exports.state()\n\n  return {\n    preencode (state, m) {\n      const end = state.end\n      enc.preencode(state, m)\n      uint.preencode(state, state.end - end)\n    },\n    encode (state, m) {\n      dummy.end = 0\n      enc.preencode(dummy, m)\n      uint.encode(state, dummy.end)\n      enc.encode(state, m)\n    },\n    decode (state) {\n      const end = state.end\n      const len = uint.decode(state)\n      state.end = state.start + len\n      const m = enc.decode(state)\n      state.start = state.end\n      state.end = end\n      return m\n    }\n  }\n}\n\nexports.date = {\n  preencode (state, d) {\n    uint.preencode(state, d.getTime())\n  },\n  encode (state, d) {\n    uint.encode(state, d.getTime())\n  },\n  decode (state, d) {\n    return new Date(uint.decode(state))\n  }\n}\n\nexports.json = {\n  preencode (state, v) {\n    utf8.preencode(state, JSON.stringify(v))\n  },\n  encode (state, v) {\n    utf8.encode(state, JSON.stringify(v))\n  },\n  decode (state) {\n    return JSON.parse(utf8.decode(state))\n  }\n}\n\nexports.ndjson = {\n  preencode (state, v) {\n    utf8.preencode(state, JSON.stringify(v) + '\\n')\n  },\n  encode (state, v) {\n    utf8.encode(state, JSON.stringify(v) + '\\n')\n  },\n  decode (state) {\n    return JSON.parse(utf8.decode(state))\n  }\n}\n\n// simple helper for when you want to just express nothing\nexports.none = {\n  preencode (state, n) {\n    // do nothing\n  },\n  encode (state, n) {\n    // do nothing\n  },\n  decode (state) {\n    return null\n  }\n}\n\n// \"any\" encoders here for helping just structure any object without schematising it\n\nconst anyArray = {\n  preencode (state, arr) {\n    uint.preencode(state, arr.length)\n    for (let i = 0; i < arr.length; i++) {\n      any.preencode(state, arr[i])\n    }\n  },\n  encode (state, arr) {\n    uint.encode(state, arr.length)\n    for (let i = 0; i < arr.length; i++) {\n      any.encode(state, arr[i])\n    }\n  },\n  decode (state) {\n    const arr = []\n    let len = uint.decode(state)\n    while (len-- > 0) {\n      arr.push(any.decode(state))\n    }\n    return arr\n  }\n}\n\nconst anyObject = {\n  preencode (state, o) {\n    const keys = Object.keys(o)\n    uint.preencode(state, keys.length)\n    for (const key of keys) {\n      utf8.preencode(state, key)\n      any.preencode(state, o[key])\n    }\n  },\n  encode (state, o) {\n    const keys = Object.keys(o)\n    uint.encode(state, keys.length)\n    for (const key of keys) {\n      utf8.encode(state, key)\n      any.encode(state, o[key])\n    }\n  },\n  decode (state) {\n    let len = uint.decode(state)\n    const o = {}\n    while (len-- > 0) {\n      const key = utf8.decode(state)\n      o[key] = any.decode(state)\n    }\n    return o\n  }\n}\n\nconst anyTypes = [\n  exports.none,\n  exports.bool,\n  exports.string,\n  exports.buffer,\n  exports.uint,\n  exports.int,\n  exports.float64,\n  anyArray,\n  anyObject,\n  exports.date\n]\n\nconst any = exports.any = {\n  preencode (state, o) {\n    const t = getType(o)\n    uint.preencode(state, t)\n    anyTypes[t].preencode(state, o)\n  },\n  encode (state, o) {\n    const t = getType(o)\n    uint.encode(state, t)\n    anyTypes[t].encode(state, o)\n  },\n  decode (state) {\n    const t = uint.decode(state)\n    if (t >= anyTypes.length) throw new Error('Unknown type: ' + t)\n    return anyTypes[t].decode(state)\n  }\n}\n\nfunction getType (o) {\n  if (o === null || o === undefined) return 0\n  if (typeof o === 'boolean') return 1\n  if (typeof o === 'string') return 2\n  if (b4a.isBuffer(o)) return 3\n  if (typeof o === 'number') {\n    if (Number.isInteger(o)) return o >= 0 ? 4 : 5\n    return 6\n  }\n  if (Array.isArray(o)) return 7\n  if (o instanceof Date) return 9\n  if (typeof o === 'object') return 8\n\n  throw new Error('Unsupported type for ' + o)\n}\n\nexports.from = function from (enc) {\n  if (typeof enc === 'string') return fromNamed(enc)\n  if (enc.preencode) return enc\n  if (enc.encodingLength) return fromAbstractEncoder(enc)\n  return fromCodec(enc)\n}\n\nfunction fromNamed (enc) {\n  switch (enc) {\n    case 'ascii': return raw.ascii\n    case 'utf-8':\n    case 'utf8': return raw.utf8\n    case 'hex': return raw.hex\n    case 'base64': return raw.base64\n    case 'utf16-le':\n    case 'utf16le':\n    case 'ucs-2':\n    case 'ucs2': return raw.ucs2\n    case 'ndjson': return raw.ndjson\n    case 'json': return raw.json\n    case 'binary':\n    default: return raw.binary\n  }\n}\n\nfunction fromCodec (enc) {\n  let tmpM = null\n  let tmpBuf = null\n\n  return {\n    preencode (state, m) {\n      tmpM = m\n      tmpBuf = enc.encode(m)\n      state.end += tmpBuf.byteLength\n    },\n    encode (state, m) {\n      raw.encode(state, m === tmpM ? tmpBuf : enc.encode(m))\n      tmpM = tmpBuf = null\n    },\n    decode (state) {\n      return enc.decode(raw.decode(state))\n    }\n  }\n}\n\nfunction fromAbstractEncoder (enc) {\n  return {\n    preencode (state, m) {\n      state.end += enc.encodingLength(m)\n    },\n    encode (state, m) {\n      enc.encode(m, state.buffer, state.start)\n      state.start += enc.encode.bytes\n    },\n    decode (state) {\n      const m = enc.decode(state.buffer, state.start, state.end)\n      state.start += enc.decode.bytes\n      return m\n    }\n  }\n}\n\nexports.encode = function encode (enc, m) {\n  const state = exports.state()\n  enc.preencode(state, m)\n  state.buffer = b4a.allocUnsafe(state.end)\n  enc.encode(state, m)\n  return state.buffer\n}\n\nexports.decode = function decode (enc, buffer) {\n  return enc.decode(exports.state(0, buffer.byteLength, buffer))\n}\n\nfunction zigZagInt (enc) {\n  return {\n    preencode (state, n) {\n      enc.preencode(state, zigZagEncodeInt(n))\n    },\n    encode (state, n) {\n      enc.encode(state, zigZagEncodeInt(n))\n    },\n    decode (state) {\n      return zigZagDecodeInt(enc.decode(state))\n    }\n  }\n}\n\nfunction zigZagDecodeInt (n) {\n  return n === 0 ? n : (n & 1) === 0 ? n / 2 : -(n + 1) / 2\n}\n\nfunction zigZagEncodeInt (n) {\n  // 0, -1, 1, -2, 2, ...\n  return n < 0 ? (2 * -n) - 1 : n === 0 ? 0 : 2 * n\n}\n\nfunction zigZagBigInt (enc) {\n  return {\n    preencode (state, n) {\n      enc.preencode(state, zigZagEncodeBigInt(n))\n    },\n    encode (state, n) {\n      enc.encode(state, zigZagEncodeBigInt(n))\n    },\n    decode (state) {\n      return zigZagDecodeBigInt(enc.decode(state))\n    }\n  }\n}\n\nfunction zigZagDecodeBigInt (n) {\n  return n === 0n ? n : (n & 1n) === 0n ? n / 2n : -(n + 1n) / 2n\n}\n\nfunction zigZagEncodeBigInt (n) {\n  // 0, -1, 1, -2, 2, ...\n  return n < 0n ? (2n * -n) - 1n : n === 0n ? 0n : 2n * n\n}\n\nfunction validateUint (n) {\n  if ((n >= 0) === false /* Handles NaN as well */) throw new Error('uint must be positive')\n}\nmodule.exports = {\n  preencode,\n  encode,\n  decode\n}\n\nfunction preencode (state, num) {\n  if (num < 251) {\n    state.end++\n  } else if (num < 256) {\n    state.end += 2\n  } else if (num < 0x10000) {\n    state.end += 3\n  } else if (num < 0x1000000) {\n    state.end += 4\n  } else if (num < 0x100000000) {\n    state.end += 5\n  } else {\n    state.end++\n    const exp = Math.floor(Math.log(num) / Math.log(2)) - 32\n    preencode(state, exp)\n    state.end += 6\n  }\n}\n\nfunction encode (state, num) {\n  const max = 251\n  const x = num - max\n\n  if (num < max) {\n    state.buffer[state.start++] = num\n  } else if (num < 256) {\n    state.buffer[state.start++] = max\n    state.buffer[state.start++] = x\n  } else if (num < 0x10000) {\n    state.buffer[state.start++] = max + 1\n    state.buffer[state.start++] = x >> 8 & 0xff\n    state.buffer[state.start++] = x & 0xff\n  } else if (num < 0x1000000) {\n    state.buffer[state.start++] = max + 2\n    state.buffer[state.start++] = x >> 16\n    state.buffer[state.start++] = x >> 8 & 0xff\n    state.buffer[state.start++] = x & 0xff\n  } else if (num < 0x100000000) {\n    state.buffer[state.start++] = max + 3\n    state.buffer[state.start++] = x >> 24\n    state.buffer[state.start++] = x >> 16 & 0xff\n    state.buffer[state.start++] = x >> 8 & 0xff\n    state.buffer[state.start++] = x & 0xff\n  } else {\n    // need to use Math here as bitwise ops are 32 bit\n    const exp = Math.floor(Math.log(x) / Math.log(2)) - 32\n    state.buffer[state.start++] = 0xff\n\n    encode(state, exp)\n    const rem = x / Math.pow(2, exp - 11)\n\n    for (let i = 5; i >= 0; i--) {\n      state.buffer[state.start++] = rem / Math.pow(2, 8 * i) & 0xff\n    }\n  }\n}\n\nfunction decode (state) {\n  const max = 251\n\n  if (state.end - state.start < 1) throw new Error('Out of bounds')\n\n  const flag = state.buffer[state.start++]\n\n  if (flag < max) return flag\n\n  if (state.end - state.start < flag - max + 1) {\n    throw new Error('Out of bounds.')\n  }\n\n  if (flag < 252) {\n    return state.buffer[state.start++] +\n      max\n  }\n\n  if (flag < 253) {\n    return (state.buffer[state.start++] << 8) +\n      state.buffer[state.start++] +\n      max\n  }\n\n  if (flag < 254) {\n    return (state.buffer[state.start++] << 16) +\n      (state.buffer[state.start++] << 8) +\n      state.buffer[state.start++] +\n      max\n  }\n\n  // << 24 result may be interpreted as negative\n  if (flag < 255) {\n    return (state.buffer[state.start++] * 0x1000000) +\n      (state.buffer[state.start++] << 16) +\n      (state.buffer[state.start++] << 8) +\n      state.buffer[state.start++] +\n      max\n  }\n\n  const exp = decode(state)\n\n  if (state.end - state.start < 6) throw new Error('Out of bounds')\n\n  let rem = 0\n  for (let i = 5; i >= 0; i--) {\n    rem += state.buffer[state.start++] * Math.pow(2, 8 * i)\n  }\n\n  return (rem * Math.pow(2, exp - 11)) + max\n}\n{\n  \"name\": \"compact-encoding\",\n  \"version\": \"2.16.0\",\n  \"description\": \"A series of compact encoding schemes for building small and fast parsers and serializers\",\n  \"main\": \"index.js\",\n  \"dependencies\": {\n    \"b4a\": \"^1.3.0\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^3.0.0\",\n    \"standard\": \"^16.0.3\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && brittle test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/compact-encoding/compact-encoding.git\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/compact-encoding/compact-encoding/issues\"\n  },\n  \"homepage\": \"https://github.com/compact-encoding/compact-encoding\"\n}\nconst b4a = require('b4a')\n\nconst { BE } = require('./endian')\n\nexports = module.exports = {\n  preencode (state, b) {\n    state.end += b.byteLength\n  },\n  encode (state, b) {\n    state.buffer.set(b, state.start)\n    state.start += b.byteLength\n  },\n  decode (state) {\n    const b = state.buffer.subarray(state.start, state.end)\n    state.start = state.end\n    return b\n  }\n}\n\nconst buffer = exports.buffer = {\n  preencode (state, b) {\n    if (b) uint8array.preencode(state, b)\n    else state.end++\n  },\n  encode (state, b) {\n    if (b) uint8array.encode(state, b)\n    else state.buffer[state.start++] = 0\n  },\n  decode (state) {\n    const b = state.buffer.subarray(state.start)\n    if (b.byteLength === 0) return null\n    state.start = state.end\n    return b\n  }\n}\n\nexports.binary = {\n  ...buffer,\n  preencode (state, b) {\n    if (typeof b === 'string') utf8.preencode(state, b)\n    else buffer.preencode(state, b)\n  },\n  encode (state, b) {\n    if (typeof b === 'string') utf8.encode(state, b)\n    else buffer.encode(state, b)\n  }\n}\n\nexports.arraybuffer = {\n  preencode (state, b) {\n    state.end += b.byteLength\n  },\n  encode (state, b) {\n    const view = new Uint8Array(b)\n\n    state.buffer.set(view, state.start)\n    state.start += b.byteLength\n  },\n  decode (state) {\n    const b = new ArrayBuffer(state.end - state.start)\n    const view = new Uint8Array(b)\n\n    view.set(state.buffer.subarray(state.start))\n\n    state.start = state.end\n\n    return b\n  }\n}\n\nfunction typedarray (TypedArray, swap) {\n  const n = TypedArray.BYTES_PER_ELEMENT\n\n  return {\n    preencode (state, b) {\n      state.end += b.byteLength\n    },\n    encode (state, b) {\n      const view = new Uint8Array(b.buffer, b.byteOffset, b.byteLength)\n\n      if (BE && swap) swap(view)\n\n      state.buffer.set(view, state.start)\n      state.start += b.byteLength\n    },\n    decode (state) {\n      let b = state.buffer.subarray(state.start)\n      if ((b.byteOffset % n) !== 0) b = new Uint8Array(b)\n\n      if (BE && swap) swap(b)\n\n      state.start = state.end\n\n      return new TypedArray(b.buffer, b.byteOffset, b.byteLength / n)\n    }\n  }\n}\n\nconst uint8array = exports.uint8array = typedarray(Uint8Array)\nexports.uint16array = typedarray(Uint16Array, b4a.swap16)\nexports.uint32array = typedarray(Uint32Array, b4a.swap32)\n\nexports.int8array = typedarray(Int8Array)\nexports.int16array = typedarray(Int16Array, b4a.swap16)\nexports.int32array = typedarray(Int32Array, b4a.swap32)\n\nexports.biguint64array = typedarray(BigUint64Array, b4a.swap64)\nexports.bigint64array = typedarray(BigInt64Array, b4a.swap64)\n\nexports.float32array = typedarray(Float32Array, b4a.swap32)\nexports.float64array = typedarray(Float64Array, b4a.swap64)\n\nfunction string (encoding) {\n  return {\n    preencode (state, s) {\n      state.end += b4a.byteLength(s, encoding)\n    },\n    encode (state, s) {\n      state.start += b4a.write(state.buffer, s, state.start, encoding)\n    },\n    decode (state) {\n      const s = b4a.toString(state.buffer, encoding, state.start)\n      state.start = state.end\n      return s\n    }\n  }\n}\n\nconst utf8 = exports.string = exports.utf8 = string('utf-8')\nexports.ascii = string('ascii')\nexports.hex = string('hex')\nexports.base64 = string('base64')\nexports.ucs2 = exports.utf16le = string('utf16le')\n\nexports.array = function array (enc) {\n  return {\n    preencode (state, list) {\n      for (const value of list) enc.preencode(state, value)\n    },\n    encode (state, list) {\n      for (const value of list) enc.encode(state, value)\n    },\n    decode (state) {\n      const arr = []\n      while (state.start < state.end) arr.push(enc.decode(state))\n      return arr\n    }\n  }\n}\n\nexports.json = {\n  preencode (state, v) {\n    utf8.preencode(state, JSON.stringify(v))\n  },\n  encode (state, v) {\n    utf8.encode(state, JSON.stringify(v))\n  },\n  decode (state) {\n    return JSON.parse(utf8.decode(state))\n  }\n}\n\nexports.ndjson = {\n  preencode (state, v) {\n    utf8.preencode(state, JSON.stringify(v) + '\\n')\n  },\n  encode (state, v) {\n    utf8.encode(state, JSON.stringify(v) + '\\n')\n  },\n  decode (state) {\n    return JSON.parse(utf8.decode(state))\n  }\n}\nmodule.exports = require('node-gyp-build')(__dirname)\nconst binding = require('./binding')\n\nexports.crc32 = function crc32 (buffer) {\n  return binding.crc_u32_napi(buffer)\n}\n{\n  \"name\": \"crc-native\",\n  \"version\": \"1.1.6\",\n  \"description\": \"libcrc JavaScript bindings for Node.js\",\n  \"main\": \"index.js\",\n  \"files\": [\n    \"index.js\",\n    \"macros.h\",\n    \"binding.c\",\n    \"binding.js\",\n    \"CMakeLists.txt\",\n    \"prebuilds\"\n  ],\n  \"addon\": true,\n  \"scripts\": {\n    \"test\": \"npm run lint && npm run test:bare && npm run test:node\",\n    \"test:bare\": \"bare test.mjs\",\n    \"test:node\": \"node test.mjs\",\n    \"lint\": \"standard\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/holepunchto/crc-native.git\"\n  },\n  \"author\": \"Holepunch\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/crc-native/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/crc-native#readme\",\n  \"dependencies\": {\n    \"node-gyp-build\": \"^4.8.2\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^3.1.0\",\n    \"cmake-bare\": \"^1.1.7\",\n    \"cmake-fetch\": \"^1.1.0\",\n    \"cmake-napi\": \"^1.0.2\",\n    \"standard\": \"^17.0.0\"\n  }\n}\n/**\n * The JavaScript implementation of CRC32 is a version of the slice-by-16 algorithm\n * as implemented by Stephan Brumme, see https://github.com/stbrumme/crc32.\n *\n * Copyright (c) 2011-2016 Stephan Brumme\n *\n * This software is provided 'as-is', without any express or implied warranty.\n * In no event will the authors be held liable for any damages arising from the\n * use of this software.\n *\n * Permission is granted to anyone to use this software for any purpose,\n * including commercial applications, and to alter it and redistribute it freely,\n * subject to the following restrictions:\n *\n * 1. The origin of this software must not be misrepresented; you must not claim\n *    that you wrote the original software.\n *    If you use this software in a product, an acknowledgment in the product\n *    documentation would be appreciated but is not required.\n * 2. Altered source versions must be plainly marked as such, and must not be\n *    misrepresented as being the original software.\n * 3. This notice may not be removed or altered from any source distribution.\n */\n\nconst lookup = require('./lookup')\n\nexports.crc32 = function crc32 (buffer) {\n  let crc = ~0\n  let i = 0\n  let length = buffer.byteLength\n\n  while (length >= 16) {\n    crc = lookup[15][buffer[i++] ^ (crc & 0xff)] ^\n          lookup[14][buffer[i++] ^ ((crc >>> 8) & 0xff)] ^\n          lookup[13][buffer[i++] ^ ((crc >>> 16) & 0xff)] ^\n          lookup[12][buffer[i++] ^ (crc >>> 24)] ^\n          lookup[11][buffer[i++]] ^\n          lookup[10][buffer[i++]] ^\n          lookup[9][buffer[i++]] ^\n          lookup[8][buffer[i++]] ^\n          lookup[7][buffer[i++]] ^\n          lookup[6][buffer[i++]] ^\n          lookup[5][buffer[i++]] ^\n          lookup[4][buffer[i++]] ^\n          lookup[3][buffer[i++]] ^\n          lookup[2][buffer[i++]] ^\n          lookup[1][buffer[i++]] ^\n          lookup[0][buffer[i++]]\n\n    length -= 16\n  }\n\n  while (length-- > 0) {\n    crc = (crc >>> 8) ^ lookup[0][(crc & 0xff) ^ buffer[i++]]\n  }\n\n  return ~crc >>> 0\n}\nconst fallback = require('./fallback')\n\ntry {\n  const native = require('crc-native')\n\n  exports.crc32 = function crc32 (buffer) {\n    return buffer.byteLength <= 24 ? fallback.crc32(buffer) : native.crc32(buffer)\n  }\n} catch {\n  module.exports = fallback\n}\nconst lookup = new Array(16)\n\nfor (let i = 0; i < 16; i++) {\n  lookup[i] = new Uint32Array(0x100)\n}\n\nfor (let i = 0; i <= 0xff; i++) {\n  let crc = i\n\n  for (let j = 0; j < 8; j++) {\n    crc = (crc >>> 1) ^ ((crc & 1) * 0xedb88320)\n  }\n\n  lookup[0][i] = crc\n}\n\nfor (let i = 0; i <= 0xff; i++) {\n  for (let j = 1; j < 16; j++) {\n    lookup[j][i] = (lookup[j - 1][i] >>> 8) ^ lookup[0][lookup[j - 1][i] & 0xff]\n  }\n}\n\nmodule.exports = lookup\n{\n  \"name\": \"crc-universal\",\n  \"version\": \"1.0.4\",\n  \"description\": \"Universal wrapper for libcrc with a JavaScript fallback\",\n  \"main\": \"index.js\",\n  \"files\": [\n    \"fallback.js\",\n    \"index.js\",\n    \"lookup.js\"\n  ],\n  \"browser\": {\n    \"./index.js\": \"./fallback.js\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && brittle test.mjs\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/holepunchto/crc-universal.git\"\n  },\n  \"author\": \"Kasper Isager Dalsgarð <kasper@funktionel.co>\",\n  \"license\": \"ISC\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/crc-universal/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/crc-universal#readme\",\n  \"optionalDependencies\": {\n    \"crc-native\": \"^1.0.3\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^3.1.0\",\n    \"standard\": \"^17.0.0\"\n  }\n}\nmodule.exports = function debounce (worker, context = null) {\n  debounced.running = null\n  return debounced\n\n  async function debounced () {\n    if (debounced.running !== null) {\n      try {\n        await debounced.running\n      } catch (_) {\n        // ignore - do not fail on old errors\n      }\n    }\n\n    // another \"thread\" beat us to it, just piggy pack on that one\n    if (debounced.running !== null) return debounced.running\n\n    debounced.running = worker.call(context)\n\n    try {\n      return await debounced.running\n    } finally {\n      debounced.running = null\n    }\n  }\n}\n{\n  \"name\": \"debounceify\",\n  \"version\": \"1.1.0\",\n  \"description\": \"Tiny async debouncer\",\n  \"main\": \"index.js\",\n  \"dependencies\": {},\n  \"devDependencies\": {\n    \"standard\": \"^16.0.3\",\n    \"tape\": \"^5.1.1\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mafintosh/debounceify.git\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && tape test.js\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mafintosh/debounceify/issues\"\n  },\n  \"homepage\": \"https://github.com/mafintosh/debounceify\"\n}\nconst { EventEmitter } = require('events')\nconst Table = require('kademlia-routing-table')\nconst TOS = require('time-ordered-set')\nconst UDX = require('udx-native')\nconst sodium = require('sodium-universal')\nconst c = require('compact-encoding')\nconst NatSampler = require('nat-sampler')\nconst b4a = require('b4a')\nconst IO = require('./lib/io')\nconst Query = require('./lib/query')\nconst Session = require('./lib/session')\nconst peer = require('./lib/peer')\nconst { UNKNOWN_COMMAND, INVALID_TOKEN } = require('./lib/errors')\nconst { PING, PING_NAT, FIND_NODE, DOWN_HINT } = require('./lib/commands')\n\nconst TMP = b4a.allocUnsafe(32)\nconst TICK_INTERVAL = 5000\nconst SLEEPING_INTERVAL = 3 * TICK_INTERVAL\nconst STABLE_TICKS = 240 // if nothing major bad happens in ~20mins we can consider this node stable (if nat is friendly)\nconst MORE_STABLE_TICKS = 3 * STABLE_TICKS\nconst REFRESH_TICKS = 60 // refresh every ~5min when idle\nconst RECENT_NODE = 12 // we've heard from a node less than 1min ago\nconst OLD_NODE = 360 // if an node has been around more than 30 min we consider it old\n\nclass DHT extends EventEmitter {\n  constructor (opts = {}) {\n    super()\n\n    this.bootstrapNodes = opts.bootstrap === false ? [] : (opts.bootstrap || []).map(parseNode)\n    this.table = new Table(randomBytes(32))\n    this.nodes = new TOS()\n    this.udx = opts.udx || new UDX()\n    this.io = new IO(this.table, this.udx, {\n      ...opts,\n      onrequest: this._onrequest.bind(this),\n      onresponse: this._onresponse.bind(this),\n      ontimeout: this._ontimeout.bind(this)\n    })\n\n    this.concurrency = opts.concurrency || 10\n    this.bootstrapped = false\n    this.ephemeral = true\n    this.firewalled = this.io.firewalled\n    this.adaptive = typeof opts.ephemeral !== 'boolean' && opts.adaptive !== false\n    this.destroyed = false\n    this.suspended = false\n    this.online = true\n    this.stats = {\n      queries: { active: 0, total: 0 },\n      commands: {\n        ping: this.io.stats.commands[PING],\n        pingNat: this.io.stats.commands[PING_NAT],\n        findNode: this.io.stats.commands[FIND_NODE],\n        downHint: this.io.stats.commands[DOWN_HINT]\n      }\n    }\n\n    this._nat = new NatSampler()\n    this._quickFirewall = opts.quickFirewall !== false\n    this._forcePersistent = opts.ephemeral === false\n    this._repinging = 0\n    this._checks = 0\n    this._tick = randomOffset(100) // make sure to random offset all the network ticks\n    this._refreshTicks = randomOffset(REFRESH_TICKS)\n    this._stableTicks = this.adaptive ? STABLE_TICKS : 0\n    this._tickInterval = setInterval(this._ontick.bind(this), TICK_INTERVAL)\n    this._lastTick = Date.now()\n    this._lastHost = null\n    this._filterNode = opts.filterNode || opts.addNode || null // opts.addNode is deprecating, use opts.filterNode instead\n    this._onrow = (row) => row.on('full', (node) => this._onfullrow(node, row))\n    this._nonePersistentSamples = []\n    this._bootstrapping = this._bootstrap()\n    this._bootstrapping.catch(noop)\n\n    this.table.on('row', this._onrow)\n\n    this.io.networkInterfaces.on('change', (interfaces) => this._onnetworkchange(interfaces))\n\n    if (opts.nodes) {\n      for (let i = opts.nodes.length - 1; i >= 0; i--) {\n        this.addNode(opts.nodes[i])\n      }\n    }\n  }\n\n  static bootstrapper (port, host, opts) {\n    if (!port) throw new Error('Port is required')\n    if (!host) throw new Error('Host is required')\n    if (host === '0.0.0.0' || host === '::') throw new Error('Invalid host')\n    if (!UDX.isIPv4(host)) throw new Error('Host must be a IPv4 address')\n\n    const dht = new this({ port, ephemeral: false, firewalled: false, anyPort: false, bootstrap: [], ...opts })\n    dht._nat.add(host, port)\n    return dht\n  }\n\n  get id () {\n    return this.ephemeral ? null : this.table.id\n  }\n\n  get host () {\n    return this._nat.host\n  }\n\n  get port () {\n    return this._nat.port\n  }\n\n  get randomized () {\n    return this._nat.host !== null && (this._nat.port === 0)\n  }\n\n  get socket () {\n    return this.firewalled ? this.io.clientSocket : this.io.serverSocket\n  }\n\n  onmessage (socket, buf, rinfo) {\n    if (buf.byteLength > 1) this.io.onmessage(socket, buf, rinfo)\n  }\n\n  bind () {\n    return this.io.bind()\n  }\n\n  async suspend () {\n    await this.io.bind()\n    if (this.suspended || this.destroyed) return\n    this.suspended = true\n    this.io.suspend()\n    this.emit('suspend')\n  }\n\n  async resume () {\n    if (!this.suspended || this.destroyed) return\n    this.suspended = false\n    this._onwakeup()\n    await this.io.resume()\n    this.refresh()\n    this.emit('resume')\n  }\n\n  address () {\n    const socket = this.socket\n    return socket ? socket.address() : null\n  }\n\n  localAddress () {\n    if (!this.io.serverSocket) return null\n\n    return {\n      host: localIP(this.udx),\n      port: this.io.serverSocket.address().port\n    }\n  }\n\n  remoteAddress () {\n    if (!this.host) return null\n    if (!this.port) return null\n    if (this.firewalled) return null\n    if (!this.io.serverSocket) return null\n\n    const port = this.io.serverSocket.address().port\n    if (port !== this.port) return null\n\n    return {\n      host: this.host,\n      port\n    }\n  }\n\n  addNode ({ host, port }) {\n    this._addNode({\n      id: peer.id(host, port),\n      port,\n      host,\n      token: null,\n      to: null,\n      sampled: 0,\n      added: this._tick,\n      pinged: 0,\n      seen: 0,\n      downHints: 0,\n      prev: null,\n      next: null\n    })\n  }\n\n  toArray (opts) {\n    const limit = (opts && opts.limit)\n    if (limit === 0) return []\n    return this.nodes.toArray({ limit, reverse: true }).map(({ host, port }) => ({ host, port }))\n  }\n\n  async fullyBootstrapped () {\n    return this._bootstrapping\n  }\n\n  ready () {\n    // Deprecating, use fullyBootstrapped instead (removed on next major)\n    return this.fullyBootstrapped()\n  }\n\n  findNode (target, opts) {\n    if (this.destroyed) throw new Error('Node destroyed')\n    this._refreshTicks = REFRESH_TICKS\n    return new Query(this, target, true, FIND_NODE, null, opts)\n  }\n\n  query ({ target, command, value }, opts) {\n    if (this.destroyed) throw new Error('Node destroyed')\n    this._refreshTicks = REFRESH_TICKS\n    return new Query(this, target, false, command, value || null, opts)\n  }\n\n  ping ({ host, port }, opts) {\n    let value = null\n\n    if (opts && opts.size && opts.size > 0) value = b4a.alloc(opts.size)\n\n    const req = this.io.createRequest({ id: null, host, port }, null, true, PING, null, value, (opts && opts.session) || null, (opts && opts.ttl))\n    return this._requestToPromise(req, opts)\n  }\n\n  request ({ token = null, command, target = null, value = null }, { host, port }, opts) {\n    const req = this.io.createRequest({ id: null, host, port }, token, false, command, target, value, (opts && opts.session) || null, (opts && opts.ttl))\n    return this._requestToPromise(req, opts)\n  }\n\n  session () {\n    return new Session(this)\n  }\n\n  _requestToPromise (req, opts) {\n    if (req === null) return Promise.reject(new Error('Node destroyed'))\n\n    if (opts && opts.socket) req.socket = opts.socket\n    if (opts && opts.retry === false) req.retries = 0\n\n    return new Promise((resolve, reject) => {\n      req.onresponse = resolve\n      req.onerror = reject\n      req.send()\n    })\n  }\n\n  async _bootstrap () {\n    const self = this\n\n    await Promise.resolve() // wait a tick, so apis can be used from the outside\n    await this.io.bind()\n\n    this.emit('listening')\n\n    // TODO: some papers describe more advanced ways of bootstrapping - we should prob look into that\n\n    let first = this.firewalled && this._quickFirewall && !this._forcePersistent\n    let testNat = false\n\n    const onlyFirewall = !this._forcePersistent\n\n    for (let i = 0; i < 2; i++) {\n      await this._backgroundQuery(this.table.id).on('data', ondata).finished()\n\n      if (this.bootstrapped || (!testNat && !this._forcePersistent)) break\n      if (!(await this._updateNetworkState(onlyFirewall))) break\n    }\n\n    if (this.bootstrapped) return\n    this.bootstrapped = true\n\n    this.emit('ready')\n\n    function ondata (data) {\n      // Simple QUICK nat heuristic.\n      // If we get ONE positive nat ping before the bootstrap query finishes\n      // then we always to a nat test, no matter if we are adaptive...\n      // This should be expanded in the future to try more than one node etc, not always hit the first etc\n      // If this fails, then nbd, as the onstable hook will pick it up later.\n\n      if (!first) return\n      first = false\n\n      const value = b4a.allocUnsafe(2)\n      c.uint16.encode({ start: 0, end: 2, buffer: value }, self.io.serverSocket.address().port)\n\n      self._request(data.from, true, PING_NAT, null, value, null, () => { testNat = true }, noop)\n    }\n  }\n\n  refresh () {\n    const node = this.table.random()\n    this._backgroundQuery(node ? node.id : this.table.id).on('error', noop)\n  }\n\n  async destroy () {\n    const emitClose = !this.destroyed\n    this.destroyed = true\n    clearInterval(this._tickInterval)\n    await this.io.destroy()\n    if (emitClose) this.emit('close')\n  }\n\n  _request (to, internal, command, target, value, session, onresponse, onerror) {\n    const req = this.io.createRequest(to, null, internal, command, target, value, session)\n    if (req === null) return null\n\n    req.onresponse = onresponse\n    req.onerror = onerror\n    req.send()\n\n    return req\n  }\n\n  _natAdd (host, port) {\n    const prevHost = this._nat.host\n    const prevPort = this._nat.port\n\n    this._nat.add(host, port)\n\n    if (prevHost === this._nat.host && prevPort === this._nat.port) return\n\n    this.emit('nat-update', this._nat.host, this._nat.port)\n  }\n\n  // we don't check that this is a bootstrap node but we limit the sample size to very few nodes, so fine\n  _sampleBootstrapMaybe (from, to) {\n    if (this._nonePersistentSamples.length >= Math.max(1, this.bootstrapNodes.length)) return\n    const id = from.host + ':' + from.port\n    if (this._nonePersistentSamples.indexOf(id) > -1) return\n    this._nonePersistentSamples.push(id)\n    this._natAdd(to.host, to.port)\n  }\n\n  _addNodeFromNetwork (sample, from, to) {\n    if (this._filterNode !== null && !this._filterNode(from)) {\n      return\n    }\n\n    if (from.id === null) {\n      this._sampleBootstrapMaybe(from, to)\n      return\n    }\n\n    const oldNode = this.table.get(from.id)\n\n    // refresh it, if we've seen this before\n    if (oldNode) {\n      if (sample && (oldNode.sampled === 0 || (this._tick - oldNode.sampled) >= OLD_NODE)) {\n        oldNode.to = to\n        oldNode.sampled = this._tick\n        this._natAdd(to.host, to.port)\n      }\n\n      oldNode.pinged = oldNode.seen = this._tick\n      this.nodes.add(oldNode)\n      return\n    }\n\n    this._addNode({\n      id: from.id,\n      port: from.port,\n      host: from.host,\n      to,\n      sampled: 0,\n      added: this._tick,\n      pinged: this._tick, // last time we interacted with them\n      seen: this._tick, // last time we heard from them\n      downHints: 0,\n      prev: null,\n      next: null\n    })\n  }\n\n  _addNode (node) {\n    if (this.nodes.has(node) || b4a.equals(node.id, this.table.id)) return\n\n    node.added = node.pinged = node.seen = this._tick\n\n    if (!this.table.add(node)) return\n    this.nodes.add(node)\n\n    if (node.to && node.sampled === 0) {\n      node.sampled = this._tick\n      this._natAdd(node.to.host, node.to.port)\n    }\n\n    this.emit('add-node', node)\n  }\n\n  _removeStaleNode (node, lastSeen) {\n    if (node.seen <= lastSeen) this._removeNode(node)\n  }\n\n  _removeNode (node) {\n    if (!this.nodes.has(node)) return\n\n    this.table.remove(node.id)\n    this.nodes.remove(node)\n\n    this.emit('remove-node', node)\n  }\n\n  _onwakeup () {\n    this._tick += 2 * OLD_NODE // bump the tick enough that everything appears old.\n    this._tick += 8 - (this._tick & 7) - 2 // triggers a series of pings in two ticks\n    this._stableTicks = MORE_STABLE_TICKS\n    this._refreshTicks = 1 // triggers a refresh next tick (allow network time to wake up also)\n    this._lastHost = null // clear network cache check\n\n    if (this.adaptive) {\n      // TODO: re-enable this as soon as we find out why this is over triggering in some edge cases\n      // this.firewalled = true\n      // this.io.firewalled = true\n\n      if (!this.ephemeral) {\n        this.ephemeral = true\n        this.io.ephemeral = true\n        this.emit('ephemeral')\n      }\n    }\n\n    this.emit('wakeup')\n  }\n\n  _onfullrow (newNode, row) {\n    if (!this.bootstrapped || this._repinging >= 3) return\n\n    let oldest = null\n    for (const node of row.nodes) {\n      if (node.pinged === this._tick) continue\n      if (oldest === null || oldest.pinged > node.pinged || (oldest.pinged === node.pinged && oldest.added > node.added)) oldest = node\n    }\n\n    if (oldest === null) return\n    if ((this._tick - oldest.pinged) < RECENT_NODE && (this._tick - oldest.added) > OLD_NODE) return\n\n    this._repingAndSwap(newNode, oldest)\n  }\n\n  _onnetworkchange (interfaces) {\n    this.emit('network-change', interfaces)\n    this.emit('network-update')\n  }\n\n  _repingAndSwap (newNode, oldNode) {\n    const self = this\n    const lastSeen = oldNode.seen\n\n    oldNode.pinged = this._tick\n\n    this._repinging++\n    this._request({ id: null, host: oldNode.host, port: oldNode.port }, true, PING, null, null, null, onsuccess, onswap)\n\n    function onsuccess (m) {\n      if (oldNode.seen <= lastSeen) return onswap()\n      self._repinging--\n    }\n\n    function onswap (e) {\n      self._repinging--\n      self._removeNode(oldNode)\n      self._addNode(newNode)\n    }\n  }\n\n  _onrequest (req, external) {\n    if (req.from.id !== null) {\n      this._addNodeFromNetwork(!external, req.from, req.to)\n    }\n\n    if (req.internal) {\n      switch (req.command) {\n        // standard keep alive call\n        case PING: {\n          req.sendReply(0, null, false, false)\n          return\n        }\n        // check if the other side can receive a message to their other socket\n        case PING_NAT: {\n          if (req.value === null || req.value.byteLength < 2) return\n          const port = c.uint16.decode({ start: 0, end: 2, buffer: req.value })\n          if (port === 0) return\n          req.from.port = port\n          req.sendReply(0, null, false, false)\n          return\n        }\n        // empty dht reply back\n        case FIND_NODE: {\n          if (!req.target) return\n          req.sendReply(0, null, false, true)\n          return\n        }\n        // \"this is node you sent me is down\" - let's try to ping it\n        case DOWN_HINT: {\n          if (req.value === null || req.value.byteLength < 6) return\n          if (this._checks < 10) {\n            sodium.crypto_generichash(TMP, req.value.subarray(0, 6))\n            const node = this.table.get(TMP)\n            if (node && (node.pinged < this._tick || node.downHints === 0)) {\n              node.downHints++\n              this._check(node)\n            }\n          }\n          req.sendReply(0, null, false, false)\n          return\n        }\n      }\n\n      req.sendReply(UNKNOWN_COMMAND, null, false, req.target !== null)\n      return\n    }\n\n    // ask the user to handle it or reply back with a bad command\n    if (this.onrequest(req) === false) {\n      req.sendReply(UNKNOWN_COMMAND, null, false, req.target !== null)\n    }\n  }\n\n  onrequest (req) {\n    return this.emit('request', req)\n  }\n\n  _onresponse (res, external) {\n    this._addNodeFromNetwork(!external, res.from, res.to)\n  }\n\n  _ontimeout (req) {\n    if (!req.to.id) return\n    const node = this.table.get(req.to.id)\n    if (node) this._removeNode(node)\n  }\n\n  _pingSome () {\n    let cnt = this.io.inflight.length > 2 ? 3 : 5\n    let oldest = this.nodes.oldest\n\n    // tiny dht, pinged the bootstrap again\n    if (!oldest) {\n      this.refresh()\n      return\n    }\n\n    // we've recently pinged the oldest one, so only trigger a couple of repings\n    if ((this._tick - oldest.pinged) < RECENT_NODE) {\n      cnt = 2\n    }\n\n    while (cnt--) {\n      if (!oldest || this._tick === oldest.pinged) continue\n      this._check(oldest)\n      oldest = oldest.next\n    }\n  }\n\n  _check (node) {\n    node.pinged = this._tick\n\n    const lastSeen = node.seen\n    const onresponse = () => {\n      this._checks--\n      this._removeStaleNode(node, lastSeen)\n    }\n    const onerror = () => {\n      this._checks--\n      this._removeNode(node)\n    }\n\n    this._checks++\n    this._request({ id: null, host: node.host, port: node.port }, true, PING, null, null, null, onresponse, onerror)\n  }\n\n  _ontick () {\n    const time = Date.now()\n\n    if (time - this._lastTick > SLEEPING_INTERVAL && this.suspended === false) {\n      this._onwakeup()\n    } else {\n      this._tick++\n    }\n\n    this._lastTick = time\n\n    if (!this.bootstrapped || this.suspended) return\n\n    if (this.adaptive && this.ephemeral && --this._stableTicks <= 0) {\n      if (this._lastHost === this._nat.host) { // do not recheck the same network...\n        this._stableTicks = MORE_STABLE_TICKS\n      } else {\n        this._updateNetworkState() // the promise returned here never fails so just ignore it\n      }\n    }\n\n    if ((this._tick & 7) === 0) {\n      this._pingSome()\n    }\n\n    if (((this._tick & 63) === 0 && this.nodes.length < this.table.k) || --this._refreshTicks <= 0) {\n      this.refresh()\n    }\n  }\n\n  async _updateNetworkState (onlyFirewall = false) {\n    if (!this.ephemeral) return false\n    if (onlyFirewall && !this.firewalled) return false\n\n    const { host, port } = this._nat\n\n    if (!onlyFirewall) {\n      // remember what host we checked and reset the counter\n      this._stableTicks = MORE_STABLE_TICKS\n      this._lastHost = host\n    }\n\n    // check if we have a consistent host and port\n    if (host === null || port === 0) {\n      return false\n    }\n\n    const natSampler = this.firewalled ? new NatSampler() : this._nat\n\n    // ask remote nodes to ping us on our server socket to see if we have the port open\n    const firewalled = this.firewalled && await this._checkIfFirewalled(natSampler)\n    if (firewalled) return false\n\n    this.firewalled = this.io.firewalled = false\n\n    // incase it's called in parallel for some reason, or if our nat status somehow changed\n    if (!this.ephemeral || host !== this._nat.host || port !== this._nat.port) return false\n    // if the firewall probe returned a different host / non consistent port, bail as well\n    if (natSampler.host !== host || natSampler.port === 0) return false\n\n    const id = peer.id(natSampler.host, natSampler.port)\n\n    if (!onlyFirewall) {\n      this.ephemeral = this.io.ephemeral = false\n    }\n\n    if (natSampler !== this._nat) {\n      const prevHost = this._nat.host\n      const prevPort = this._nat.port\n\n      this._nonePersistentSamples = []\n      this._nat = natSampler\n\n      if (prevHost !== this._nat.host || prevPort !== this._nat.port) {\n        this.emit('nat-update', this._nat.host, this._nat.port)\n      }\n    }\n\n    // TODO: we should make this a bit more defensive in terms of using more\n    // resources to make sure that the new routing table contains as many alive nodes\n    // as possible, vs blindly copying them over...\n\n    // all good! copy over the old routing table to the new one\n    if (!b4a.equals(this.table.id, id)) {\n      const nodes = this.table.toArray()\n\n      this.table = this.io.table = new Table(id)\n\n      for (const node of nodes) {\n        if (b4a.equals(node.id, id)) continue\n        if (!this.table.add(node)) this.nodes.remove(node)\n      }\n\n      this.table.on('row', this._onrow)\n\n      // we need to rebootstrap/refresh since we updated our id\n      if (this.bootstrapped) this.refresh()\n    }\n\n    if (!this.ephemeral) {\n      this.emit('persistent')\n    }\n\n    return true\n  }\n\n  async * _resolveBootstrapNodes () {\n    for (let { host, port } of this.bootstrapNodes) {\n      let doLookup = false\n\n      if (host.indexOf('@') === -1) {\n        doLookup = true\n      } else {\n        const [suggestedIP, fallbackHost] = host.split('@')\n        try {\n          await this.ping({ host: suggestedIP, port })\n          host = suggestedIP\n        } catch {\n          host = fallbackHost\n          doLookup = true\n        }\n      }\n\n      if (doLookup) {\n        try {\n          host = UDX.isIPv4(host) ? host : (await this.udx.lookup(host, { family: 4 })).host\n        } catch {\n          continue\n        }\n      }\n\n      yield {\n        id: peer.id(host, port),\n        host,\n        port\n      }\n    }\n  }\n\n  async _addBootstrapNodes (nodes) {\n    for await (const node of this._resolveBootstrapNodes()) {\n      nodes.push(node)\n    }\n  }\n\n  async _checkIfFirewalled (natSampler = new NatSampler()) {\n    const nodes = []\n    for (let node = this.nodes.latest; node && nodes.length < 5; node = node.prev) {\n      nodes.push(node)\n    }\n\n    if (nodes.length < 5) await this._addBootstrapNodes(nodes)\n    // if no nodes are available, including bootstrappers - bail\n    if (nodes.length === 0) return true\n\n    const hosts = new Set()\n    const value = b4a.allocUnsafe(2)\n\n    c.uint16.encode({ start: 0, end: 2, buffer: value }, this.io.serverSocket.address().port)\n\n    // double check they actually came on the server socket...\n    this.io.serverSocket.on('message', onmessage)\n\n    const pongs = await requestAll(this, true, PING_NAT, value, nodes)\n\n    let count = 0\n    for (const res of pongs) {\n      if (hosts.has(res.from.host)) {\n        count++\n        natSampler.add(res.to.host, res.to.port)\n      }\n    }\n\n    this.io.serverSocket.removeListener('message', onmessage)\n\n    // if we got no or very few replies, consider it a fluke\n    if (count < (nodes.length >= 5 ? 3 : 1)) return true\n\n    // check that the server socket has the same ip as the client socket\n    if (natSampler.host === null || this._nat.host !== natSampler.host) return true\n\n    // check that the local port of the server socket is the same as the remote port\n    // TODO: we might want a flag to opt out of this heuristic for specific remapped port servers\n    if (natSampler.port === 0 || natSampler.port !== this.io.serverSocket.address().port) return true\n\n    return false\n\n    function onmessage (_, { host }) {\n      hosts.add(host)\n    }\n  }\n\n  _backgroundQuery (target) {\n    this._refreshTicks = REFRESH_TICKS\n\n    const backgroundCon = Math.min(this.concurrency, Math.max(2, (this.concurrency / 8) | 0))\n    const q = new Query(this, target, true, FIND_NODE, null, { concurrency: backgroundCon, maxSlow: 0 })\n\n    q.on('data', () => {\n      // yield to other traffic\n      q.concurrency = this.io.inflight.length < 3\n        ? this.concurrency\n        : backgroundCon\n    })\n\n    return q\n  }\n\n  // called by the query\n  _online () {\n    if (this.online) return\n    this.online = true\n    this.emit('network-update')\n  }\n\n  // called by the query\n  _offline () {\n    if (!this.online) return\n    this.online = false\n    this.emit('network-update')\n  }\n}\n\nDHT.OK = 0\nDHT.ERROR_UNKNOWN_COMMAND = UNKNOWN_COMMAND\nDHT.ERROR_INVALID_TOKEN = INVALID_TOKEN\n\nmodule.exports = DHT\n\nfunction localIP (udx, family = 4) {\n  let host = null\n\n  for (const n of udx.networkInterfaces()) {\n    if (n.family !== family || n.internal) continue\n\n    // mac really likes en0, mb a better way but this shouldnt be bad anywhere so return now\n    if (n.name === 'en0') return n.host\n\n    // otherwise pick the first non internal host (let the loop continue in case we see en0)\n    if (host === null) host = n.host\n  }\n\n  return host || (family === 4 ? '127.0.0.1' : '::1')\n}\n\nfunction parseNode (s) {\n  if (typeof s === 'object') return s\n  if (typeof s === 'number') return { host: '127.0.0.1', port: s }\n  const [host, port] = s.split(':')\n  if (!port) throw new Error('Bootstrap node format is host:port')\n\n  return {\n    host,\n    port: Number(port)\n  }\n}\n\nfunction randomBytes (n) {\n  const b = b4a.alloc(n)\n  sodium.randombytes_buf(b)\n  return b\n}\n\nfunction randomOffset (n) {\n  return n - ((Math.random() * 0.5 * n) | 0)\n}\n\nfunction requestAll (dht, internal, command, value, nodes) {\n  let missing = nodes.length\n  const replies = []\n\n  return new Promise((resolve) => {\n    for (const node of nodes) {\n      const req = dht._request(node, internal, command, null, value, null, onsuccess, onerror)\n      if (!req) return resolve(replies)\n    }\n\n    function onsuccess (res) {\n      replies.push(res)\n      if (--missing === 0) resolve(replies)\n    }\n\n    function onerror () {\n      if (--missing === 0) resolve(replies)\n    }\n  })\n}\n\nfunction noop () {}\nexports.PING = 0\nexports.PING_NAT = 1\nexports.FIND_NODE = 2\nexports.DOWN_HINT = 3\nmodule.exports = class DHTError extends Error {\n  constructor (msg, code, fn = DHTError) {\n    super(`${code}: ${msg}`)\n    this.code = code\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, fn)\n    }\n  }\n\n  get name () {\n    return 'DHTError'\n  }\n\n  static UNKNOWN_COMMAND = 1\n  static INVALID_TOKEN = 2\n\n  static REQUEST_TIMEOUT (msg = 'Request timed out') {\n    return new DHTError(msg, 'REQUEST_TIMEOUT', DHTError.REQUEST_TIMEOUT)\n  }\n\n  static REQUEST_DESTROYED (msg = 'Request destroyed') {\n    return new DHTError(msg, 'REQUEST_DESTROYED', DHTError.REQUEST_DESTROYED)\n  }\n\n  static IO_SUSPENDED (msg = 'I/O suspended') {\n    return new DHTError(msg, 'IO_SUSPENDED', DHTError.IO_SUSPENDED)\n  }\n}\nconst FIFO = require('fast-fifo')\nconst sodium = require('sodium-universal')\nconst c = require('compact-encoding')\nconst b4a = require('b4a')\nconst peer = require('./peer')\nconst {\n  INVALID_TOKEN,\n  REQUEST_TIMEOUT,\n  REQUEST_DESTROYED,\n  IO_SUSPENDED\n} = require('./errors')\n\nconst VERSION = 0b11\nconst RESPONSE_ID = (0b0001 << 4) | VERSION\nconst REQUEST_ID = (0b0000 << 4) | VERSION\nconst EMPTY_ARRAY = []\n\nmodule.exports = class IO {\n  constructor (table, udx, { maxWindow = 80, port = 0, host = '0.0.0.0', anyPort = true, firewalled = true, onrequest, onresponse = noop, ontimeout = noop } = {}) {\n    this.table = table\n    this.udx = udx\n    this.inflight = []\n    this.clientSocket = null\n    this.serverSocket = null\n    this.firewalled = firewalled !== false\n    this.ephemeral = true\n    this.congestion = new CongestionWindow(maxWindow)\n    this.networkInterfaces = udx.watchNetworkInterfaces()\n    this.suspended = false\n\n    this.stats = {\n      commands: [\n        { tx: 0, rx: 0 }, // tx = transmitted, rx = received\n        { tx: 0, rx: 0 },\n        { tx: 0, rx: 0 },\n        { tx: 0, rx: 0 }\n      ]\n    }\n\n    this.onrequest = onrequest\n    this.onresponse = onresponse\n    this.ontimeout = ontimeout\n\n    this._pending = new FIFO()\n    this._rotateSecrets = 10\n    this._tid = (Math.random() * 65536) | 0\n    this._secrets = null\n    this._drainInterval = null\n    this._destroying = null\n    this._binding = null\n\n    // port can be a number or a range [start, to]\n    this.portRange = port.length\n      ? port\n      : port === 0 ? [0, 0] : [port, port + 5]\n\n    this._host = host\n    this._anyPort = anyPort !== false\n    this._boundServerPort = 0\n    this._boundClientPort = 0\n  }\n\n  onmessage (socket, buffer, { host, port }) {\n    if (buffer.byteLength < 2 || !(port > 0 && port < 65536) || this.suspended === true) return\n\n    const from = { id: null, host, port }\n    const state = { start: 1, end: buffer.byteLength, buffer }\n    const expectedSocket = this.firewalled ? this.clientSocket : this.serverSocket\n    const external = socket !== expectedSocket\n\n    if (buffer[0] === REQUEST_ID) {\n      const req = Request.decode(this, socket, from, state)\n      if (req === null) return\n      if (req.token !== null && !b4a.equals(req.token, this.token(req.from, 1)) && !b4a.equals(req.token, this.token(req.from, 0))) {\n        req.error(INVALID_TOKEN, { token: true })\n        return\n      }\n      this.onrequest(req, external)\n      return\n    }\n\n    if (buffer[0] === RESPONSE_ID) {\n      const res = decodeReply(from, state)\n      if (res === null) return\n\n      for (let i = 0; i < this.inflight.length; i++) {\n        const req = this.inflight[i]\n        if (req.tid !== res.tid) continue\n\n        res.rtt = Date.now() - req._timestamp\n\n        if (i === this.inflight.length - 1) this.inflight.pop()\n        else this.inflight[i] = this.inflight.pop()\n\n        if (req.session) req.session._detach(req)\n\n        // TODO: Auto retry here if errors.INVALID_TOKEN is returned?\n\n        if (req._timeout) {\n          clearTimeout(req._timeout)\n          req._timeout = null\n        }\n\n        this.congestion.recv()\n\n        if (req.internal && req.command < this.stats.commands.length) {\n          this.stats.commands[req.command].rx++\n        }\n\n        this.onresponse(res, external)\n        req.onresponse(res, req)\n        break\n      }\n    }\n  }\n\n  token (addr, i) {\n    if (this._secrets === null) {\n      const buf = b4a.alloc(64)\n      this._secrets = [buf.subarray(0, 32), buf.subarray(32, 64)]\n      sodium.randombytes_buf(this._secrets[0])\n      sodium.randombytes_buf(this._secrets[1])\n    }\n\n    const token = b4a.allocUnsafe(32)\n    sodium.crypto_generichash(token, b4a.from(addr.host), this._secrets[i])\n    return token\n  }\n\n  async destroy () {\n    if (this._destroying) return this._destroying\n    this._destroying = this._destroy()\n    return this._destroying\n  }\n\n  async _destroy () {\n    // simplifies timing to await the bind here also, although it might be unneeded\n    await this.bind()\n    await this._clear(false)\n  }\n\n  async _clear (suspended) {\n    if (this._drainInterval) {\n      clearInterval(this._drainInterval)\n      this._drainInterval = null\n    }\n\n    while (this.inflight.length) {\n      const req = this.inflight.pop()\n      if (req._timeout) clearTimeout(req._timeout)\n      req._timeout = null\n      req.destroyed = true\n\n      if (req.session) req.session._detach(req)\n\n      req.onerror(suspended ? IO_SUSPENDED() : REQUEST_DESTROYED(), req)\n    }\n\n    await Promise.allSettled([\n      this.serverSocket.close(),\n      this.clientSocket.close()\n    ])\n\n    if (!suspended) this.networkInterfaces.destroy()\n  }\n\n  async _rebind (binding) {\n    if (binding) await binding\n    if (this._destroying) return this._destroying\n    await this._clear(true)\n    await this._bindSockets()\n  }\n\n  suspend () {\n    this.suspended = true\n    if (this._drainInterval) {\n      clearInterval(this._drainInterval)\n      this._drainInterval = null\n    }\n  }\n\n  resume () {\n    this.suspended = false\n    const binding = this._binding\n    this._binding = this._rebind(binding)\n    return this._binding\n  }\n\n  bind () {\n    if (this._binding) return this._binding\n    this._binding = this._bindSockets()\n    return this._binding\n  }\n\n  async _bindSockets () {\n    const serverSocket = this.udx.createSocket()\n\n    const candidatePorts = []\n\n    // Retrying previous port always has precedence\n    if (this._boundServerPort) candidatePorts.push(this._boundServerPort)\n\n    for (let i = this.portRange[0]; i < this.portRange[1]; i++) candidatePorts.push(i)\n\n    for (const port of candidatePorts) {\n      if (serverSocket.bound) break\n\n      try {\n        serverSocket.bind(port, this._host)\n      } catch (err) {\n        if (!this._anyPort) {\n          await serverSocket.close()\n          throw err\n        }\n      }\n    }\n\n    if (!serverSocket.bound) {\n      try {\n        serverSocket.bind(0, this._host)\n      } catch (err) {\n        await serverSocket.close()\n        throw err\n      }\n    }\n\n    const clientSocket = this.udx.createSocket()\n\n    try {\n      clientSocket.bind(this._boundClientPort || 0, this._host)\n    } catch {\n      try {\n        clientSocket.bind(0, this._host)\n      } catch (err) {\n        await serverSocket.close()\n        await clientSocket.close()\n        throw err\n      }\n    }\n\n    this._boundServerPort = serverSocket.address().port\n    this._boundClientPort = clientSocket.address().port\n\n    this.clientSocket = clientSocket\n    this.serverSocket = serverSocket\n\n    this.serverSocket.on('message', this.onmessage.bind(this, this.serverSocket))\n    this.clientSocket.on('message', this.onmessage.bind(this, this.clientSocket))\n\n    if (this._drainInterval === null) {\n      this._drainInterval = setInterval(this._drain.bind(this), 750)\n      if (this._drainInterval.unref) this._drainInterval.unref()\n    }\n\n    for (const req of this.inflight) {\n      if (!req.socket) req.socket = this.firewalled ? this.clientSocket : this.serverSocket\n      req.sent = 0\n      req.send(false)\n    }\n  }\n\n  _drain () {\n    if (this._secrets !== null && --this._rotateSecrets === 0) {\n      this._rotateSecrets = 10\n      const tmp = this._secrets[0]\n      this._secrets[0] = this._secrets[1]\n      this._secrets[1] = tmp\n      sodium.crypto_generichash(tmp, tmp)\n    }\n\n    this.congestion.drain()\n\n    while (!this.congestion.isFull()) {\n      const p = this._pending.shift()\n      if (p === undefined) return\n      p._sendNow()\n    }\n  }\n\n  createRequest (to, token, internal, command, target, value, session, ttl) {\n    if (this._destroying !== null) return null\n\n    if (this._tid === 65536) this._tid = 0\n\n    const tid = this._tid++\n    const socket = this.firewalled ? this.clientSocket : this.serverSocket\n\n    const req = new Request(this, socket, tid, null, to, token, internal, command, target, value, session, ttl || 0)\n    this.inflight.push(req)\n    if (session) session._attach(req)\n\n    if (internal && command < this.stats.commands.length) {\n      this.stats.commands[command].tx++\n    }\n\n    return req\n  }\n}\n\nclass Request {\n  constructor (io, socket, tid, from, to, token, internal, command, target, value, session, ttl) {\n    this.socket = socket\n    this.tid = tid\n    this.from = from\n    this.to = to\n    this.token = token\n    this.command = command\n    this.target = target\n    this.value = value\n    this.internal = internal\n    this.session = session\n    this.ttl = ttl\n    this.index = -1\n    this.sent = 0\n    this.retries = 3\n    this.destroyed = false\n\n    this.oncycle = noop\n    this.onerror = noop\n    this.onresponse = noop\n\n    this._buffer = null\n    this._io = io\n    this._timeout = null\n    this._timestamp = Date.now()\n  }\n\n  static decode (io, socket, from, state) {\n    try {\n      const flags = c.uint.decode(state)\n      const tid = c.uint16.decode(state)\n      const to = peer.ipv4.decode(state)\n      const id = flags & 1 ? c.fixed32.decode(state) : null\n      const token = flags & 2 ? c.fixed32.decode(state) : null\n      const internal = (flags & 4) !== 0\n      const command = c.uint.decode(state)\n      const target = flags & 8 ? c.fixed32.decode(state) : null\n      const value = flags & 16 ? c.buffer.decode(state) : null\n\n      if (id !== null) from.id = validateId(id, from)\n\n      return new Request(io, socket, tid, from, to, token, internal, command, target, value, null, 0)\n    } catch {\n      return null\n    }\n  }\n\n  reply (value, opts = {}) {\n    const socket = opts.socket || this.socket\n    const to = opts.to || this.from\n    this._sendReply(0, value || null, opts.token !== false, opts.closerNodes !== false, to, socket)\n  }\n\n  error (code, opts = {}) {\n    const socket = opts.socket || this.socket\n    const to = opts.to || this.from\n    this._sendReply(code, null, opts.token === true, opts.closerNodes !== false, to, socket)\n  }\n\n  relay (value, to, opts) {\n    const socket = (opts && opts.socket) || this.socket\n    const buffer = this._encodeRequest(null, value, to, socket)\n    socket.trySend(buffer, to.port, to.host, this.ttl)\n  }\n\n  send (force = false) {\n    if (this.destroyed) return\n\n    if (this.socket === null) return\n    if (this._buffer === null) this._buffer = this._encodeRequest(this.token, this.value, this.to, this.socket)\n\n    if (!force && this._io.congestion.isFull()) {\n      this._io._pending.push(this)\n      return\n    }\n\n    this._sendNow()\n  }\n\n  sendReply (error, value, token, hasCloserNodes) {\n    this._sendReply(error, value, token, hasCloserNodes, this.from, this.socket, null)\n  }\n\n  _sendNow () {\n    if (this.destroyed) return\n    this.sent++\n    this._io.congestion.send()\n    this.socket.trySend(this._buffer, this.to.port, this.to.host, this.ttl)\n    if (this._timeout) clearTimeout(this._timeout)\n    this._timeout = setTimeout(oncycle, 1000, this)\n  }\n\n  destroy (err) {\n    if (this.destroyed) return\n    this.destroyed = true\n\n    if (this._timeout) {\n      clearTimeout(this._timeout)\n      this._timeout = null\n    }\n\n    const i = this._io.inflight.indexOf(this)\n    if (i === -1) return\n\n    if (i === this._io.inflight.length - 1) this._io.inflight.pop()\n    else this._io.inflight[i] = this._io.inflight.pop()\n\n    if (this.session) this.session._detach(this)\n\n    this.onerror(err || REQUEST_DESTROYED(), this)\n  }\n\n  _sendReply (error, value, token, hasCloserNodes, from, socket) {\n    if (socket === null || this.destroyed) return\n\n    const id = this._io.ephemeral === false && socket === this._io.serverSocket\n    const closerNodes = (this.target !== null && hasCloserNodes) ? this._io.table.closest(this.target) : EMPTY_ARRAY\n    const state = { start: 0, end: 1 + 1 + 6 + 2, buffer: null } // (type | version) + flags + to + tid\n\n    if (id) state.end += 32\n    if (token) state.end += 32\n    if (closerNodes.length > 0) peer.ipv4Array.preencode(state, closerNodes)\n    if (error > 0) c.uint.preencode(state, error)\n    if (value) c.buffer.preencode(state, value)\n\n    state.buffer = b4a.allocUnsafe(state.end)\n    state.buffer[state.start++] = RESPONSE_ID\n    state.buffer[state.start++] = (id ? 1 : 0) | (token ? 2 : 0) | (closerNodes.length > 0 ? 4 : 0) | (error > 0 ? 8 : 0) | (value ? 16 : 0)\n\n    c.uint16.encode(state, this.tid)\n    peer.ipv4.encode(state, from)\n\n    if (id) c.fixed32.encode(state, this._io.table.id)\n    if (token) c.fixed32.encode(state, this._io.token(from, 1))\n    if (closerNodes.length > 0) peer.ipv4Array.encode(state, closerNodes)\n    if (error > 0) c.uint.encode(state, error)\n    if (value) c.buffer.encode(state, value)\n\n    socket.trySend(state.buffer, from.port, from.host, this.ttl)\n  }\n\n  _encodeRequest (token, value, to, socket) {\n    const id = this._io.ephemeral === false && socket === this._io.serverSocket\n    const state = { start: 0, end: 1 + 1 + 6 + 2, buffer: null } // (type | version) + flags + to + tid\n\n    if (id) state.end += 32\n    if (token) state.end += 32\n\n    c.uint.preencode(state, this.command)\n\n    if (this.target) state.end += 32\n    if (value) c.buffer.preencode(state, value)\n\n    state.buffer = b4a.allocUnsafe(state.end)\n    state.buffer[state.start++] = REQUEST_ID\n    state.buffer[state.start++] = (id ? 1 : 0) | (token ? 2 : 0) | (this.internal ? 4 : 0) | (this.target ? 8 : 0) | (value ? 16 : 0)\n\n    c.uint16.encode(state, this.tid)\n    peer.ipv4.encode(state, to)\n\n    if (id) c.fixed32.encode(state, this._io.table.id)\n    if (token) c.fixed32.encode(state, token)\n\n    c.uint.encode(state, this.command)\n\n    if (this.target) c.fixed32.encode(state, this.target)\n    if (value) c.buffer.encode(state, value)\n\n    return state.buffer\n  }\n}\n\nclass CongestionWindow {\n  constructor (maxWindow) {\n    this._i = 0\n    this._total = 0\n    this._window = [0, 0, 0, 0]\n    this._maxWindow = maxWindow\n  }\n\n  isFull () {\n    return this._total >= 2 * this._maxWindow || this._window[this._i] >= this._maxWindow\n  }\n\n  recv () {\n    if (this._window[this._i] > 0) {\n      this._window[this._i]--\n      this._total--\n    }\n  }\n\n  send () {\n    this._total++\n    this._window[this._i]++\n  }\n\n  drain () {\n    this._i = (this._i + 1) & 3\n    this._total -= this._window[this._i]\n    this._window[this._i] = 0 // clear oldest\n  }\n}\n\nfunction noop () {}\n\nfunction oncycle (req) {\n  req._timeout = null\n  req.oncycle(req)\n  if (req.sent >= req.retries) {\n    req.destroy(REQUEST_TIMEOUT())\n    req._io.ontimeout(req)\n  } else {\n    req.send()\n  }\n}\n\nfunction decodeReply (from, state) {\n  try {\n    const flags = c.uint.decode(state)\n    const tid = c.uint16.decode(state)\n    const to = peer.ipv4.decode(state)\n    const id = flags & 1 ? c.fixed32.decode(state) : null\n    const token = flags & 2 ? c.fixed32.decode(state) : null\n    const closerNodes = flags & 4 ? peer.ipv4Array.decode(state) : null\n    const error = flags & 8 ? c.uint.decode(state) : 0\n    const value = flags & 16 ? c.buffer.decode(state) : null\n\n    if (id !== null) from.id = validateId(id, from)\n\n    return { tid, rtt: 0, from, to, token, closerNodes, error, value }\n  } catch {\n    return null\n  }\n}\n\nfunction validateId (id, from) {\n  const expected = peer.id(from.host, from.port)\n  return b4a.equals(expected, id) ? expected : null\n}\nconst sodium = require('sodium-universal')\nconst c = require('compact-encoding')\nconst net = require('compact-encoding-net')\nconst b4a = require('b4a')\n\nconst ipv4 = {\n  ...net.ipv4Address,\n  decode (state) {\n    const ip = net.ipv4Address.decode(state)\n    return {\n      id: null, // populated by the callee\n      host: ip.host,\n      port: ip.port\n    }\n  }\n}\n\nmodule.exports = { id, ipv4, ipv4Array: c.array(ipv4) }\n\nfunction id (host, port, out = b4a.allocUnsafeSlow(32)) {\n  const addr = out.subarray(0, 6)\n  ipv4.encode(\n    { start: 0, end: 6, buffer: addr },\n    { host, port }\n  )\n  sodium.crypto_generichash(out, addr)\n  return out\n}\nconst { Readable } = require('streamx')\nconst b4a = require('b4a')\nconst peer = require('./peer')\nconst { DOWN_HINT } = require('./commands')\n\nconst DONE = []\nconst DOWN = []\n\nmodule.exports = class Query extends Readable {\n  constructor (dht, target, internal, command, value, opts = {}) {\n    super()\n\n    dht.stats.queries.total++\n    dht.stats.queries.active++\n\n    this.dht = dht\n    this.k = this.dht.table.k\n    this.target = target\n    this.internal = internal\n    this.command = command\n    this.value = value\n    this.errors = 0\n    this.successes = 0\n    this.concurrency = opts.concurrency || this.dht.concurrency\n    this.inflight = 0\n    this.map = opts.map || defaultMap\n    this.maxSlow = opts.maxSlow === 0 ? 0 : (opts.maxSlow || 5)\n    this.closestReplies = []\n\n    this._slow = 0\n    this._online = false\n    this._slowdown = false\n    this._seen = new Map()\n    this._pending = []\n    this._fromTable = false\n    this._commit = opts.commit === true ? autoCommit : (opts.commit || null)\n    this._commiting = false\n    this._session = opts.session || dht.session()\n    this._autoDestroySession = !opts.session\n    this._onlyClosestNodes = false\n\n    this._onvisitbound = this._onvisit.bind(this)\n    this._onerrorbound = this._onerror.bind(this)\n    this._oncyclebound = this._oncycle.bind(this)\n\n    const nodes = opts.nodes || opts.closestNodes\n    const replies = opts.replies || opts.closestReplies\n\n    // add them reverse as we pop below\n    if (nodes) {\n      for (let i = nodes.length - 1; i >= 0; i--) {\n        const node = nodes[i]\n        this._addPending({ id: node.id || peer.id(node.host, node.port), host: node.host, port: node.port }, null)\n      }\n    } else if (replies) {\n      for (let i = replies.length - 1; i >= 0; i--) {\n        this._addPending(replies[i].from, null)\n      }\n    }\n\n    if (opts.onlyClosestNodes) this._onlyClosestNodes = true\n  }\n\n  get closestNodes () {\n    const nodes = new Array(this.closestReplies.length)\n\n    for (let i = 0; i < nodes.length; i++) {\n      nodes[i] = this.closestReplies[i].from\n    }\n\n    return nodes\n  }\n\n  finished () {\n    return new Promise((resolve, reject) => {\n      const self = this\n      let error = null\n\n      this.resume()\n      this.on('error', onerror)\n      this.on('close', onclose)\n\n      function onclose () {\n        self.removeListener('error', onerror)\n        self.removeListener('close', onclose)\n        if (error) reject(error)\n        else resolve()\n      }\n\n      function onerror (err) {\n        error = err\n      }\n    })\n  }\n\n  _addFromTable () {\n    if (this._pending.length >= this.k) return\n    this._fromTable = true\n\n    const closest = this.dht.table.closest(this.target, this.k - this._pending.length)\n\n    for (const node of closest) {\n      this._addPending({ id: node.id, host: node.host, port: node.port }, null)\n    }\n  }\n\n  async _open (cb) {\n    this._addFromTable()\n    if (this._pending.length >= this.k) return cb(null)\n\n    for await (const node of this.dht._resolveBootstrapNodes()) {\n      this._addPending(node, null)\n    }\n\n    cb(null)\n  }\n\n  _isCloser (id) {\n    return this.closestReplies.length < this.k || this._compare(id, this.closestReplies[this.closestReplies.length - 1].from.id) < 0\n  }\n\n  _addPending (node, ref) {\n    if (this._onlyClosestNodes) return false\n\n    const addr = node.host + ':' + node.port\n    const refs = this._seen.get(addr)\n    const isCloser = this._isCloser(node.id)\n\n    if (refs === DONE) {\n      return isCloser\n    }\n\n    if (refs === DOWN) {\n      if (ref) this._downHint(ref, node)\n      return isCloser\n    }\n\n    if (refs) {\n      if (ref !== null) refs.push(ref)\n      return isCloser\n    }\n\n    if (!isCloser) {\n      return false\n    }\n\n    this._seen.set(addr, ref === null ? [] : [ref])\n    this._pending.push(node)\n\n    return true\n  }\n\n  _read (cb) {\n    this._readMore()\n    cb(null)\n  }\n\n  _readMore () {\n    if (this.destroying || this._commiting) return\n\n    const concurrency = (this._slowdown ? 3 : this.concurrency) + this._slow\n\n    while (this.inflight < concurrency && this._pending.length > 0) {\n      const next = this._pending.pop()\n      if (next && next.id && !this._isCloser(next.id)) continue\n      this._visit(next)\n    }\n\n    // if reusing closest nodes, slow down after the first readMore tick to allow\n    // the closest node a chance to reply before going broad to question more\n    if (!this._fromTable && this.successes === 0 && this.errors === 0) {\n      this._slowdown = true\n    }\n\n    if (this._pending.length > 0) return\n\n    // if no inflight OR all the queries we are waiting on are marked as slow (within our limits) and we have a full result.\n    if (this.inflight === 0 || (this._slow <= this.maxSlow && this._slow === this.inflight && this.closestReplies.length >= this.k)) {\n      // if more than 3/4 failed and we only used cached nodes, try again from the routing table\n      if (!this._fromTable && this.successes < this.k / 4) {\n        this._addFromTable()\n        this._readMore()\n        return\n      }\n\n      this._flush()\n    }\n  }\n\n  _flush () {\n    if (this._commiting) return\n    this._commiting = true\n\n    if (this._commit === null) {\n      this.push(null)\n      return\n    }\n\n    const p = []\n    for (const m of this.closestReplies) p.push(this._commit(m, this.dht, this))\n    this._endAfterCommit(p)\n  }\n\n  _endAfterCommit (ps) {\n    if (!ps.length) {\n      this.destroy(new Error('Too few nodes responded'))\n      return\n    }\n\n    const self = this\n\n    let pending = ps.length\n    let success = 0\n\n    for (const p of ps) p.then(ondone, onerror)\n\n    function ondone () {\n      success++\n      if (--pending === 0) self.push(null)\n    }\n\n    function onerror (err) {\n      if (--pending > 0) return\n      if (success) self.push(null)\n      else self.destroy(err)\n    }\n  }\n\n  _dec (req) {\n    if (req.oncycle === noop) {\n      this._slow--\n    } else {\n      req.oncycle = noop\n    }\n    this.inflight--\n  }\n\n  _onvisit (m, req) {\n    this._dec(req)\n\n    this._online = true\n    if (!this.dht.online) this.dht._online()\n\n    const addr = req.to.host + ':' + req.to.port\n    this._seen.set(addr, DONE)\n\n    if (this._commiting) return\n\n    if (m.error === 0) this.successes++\n    else this.errors++\n\n    if (m.error === 0 && m.from.id !== null && this._isCloser(m.from.id)) this._pushClosest(m)\n\n    if (m.closerNodes !== null) {\n      for (const node of m.closerNodes) {\n        node.id = peer.id(node.host, node.port)\n        if (this.dht._filterNode !== null && !this.dht._filterNode(node)) continue\n        if (b4a.equals(node.id, this.dht.table.id)) continue\n        // TODO: we could continue here instead of breaking to ensure that one of the nodes in the closer list\n        // is later marked as DOWN that we gossip that back\n        if (!this._addPending(node, m.from)) break\n      }\n    }\n\n    if (!this._fromTable && this.successes + this.errors >= this.concurrency) {\n      this._slowdown = false\n    }\n\n    if (m.error !== 0) {\n      this._readMore()\n      return\n    }\n\n    const data = this.map(m)\n    if (!data || this.push(data) !== false) {\n      this._readMore()\n    }\n  }\n\n  _onerror (err, req) {\n    const addr = req.to.host + ':' + req.to.port\n    const refs = this._seen.get(addr)\n\n    if (err.code === 'REQUEST_TIMEOUT') {\n      this._seen.set(addr, DOWN)\n      for (const node of refs) this._downHint(node, req.to)\n    }\n\n    this._dec(req)\n    this.errors++\n    this._readMore()\n  }\n\n  _oncycle (req) {\n    req.oncycle = noop\n    this._slow++\n    this._readMore()\n  }\n\n  _downHint (node, down) {\n    const state = { start: 0, end: 6, buffer: b4a.allocUnsafe(6) }\n    peer.ipv4.encode(state, down)\n    this.dht._request(node, true, DOWN_HINT, null, state.buffer, this._session, noop, noop)\n  }\n\n  _pushClosest (m) {\n    this.closestReplies.push(m)\n    for (let i = this.closestReplies.length - 2; i >= 0; i--) {\n      const prev = this.closestReplies[i]\n      const cmp = this._compare(prev.from.id, m.from.id)\n      // if sorted, done!\n      if (cmp < 0) break\n      // if dup, splice it out (rare)\n      if (cmp === 0) {\n        this.closestReplies.splice(i + 1, 1)\n        break\n      }\n      // swap and continue down\n      this.closestReplies[i + 1] = prev\n      this.closestReplies[i] = m\n    }\n    if (this.closestReplies.length > this.k) this.closestReplies.pop()\n  }\n\n  _compare (a, b) {\n    for (let i = 0; i < a.length; i++) {\n      if (a[i] === b[i]) continue\n      const t = this.target[i]\n      return (t ^ a[i]) - (t ^ b[i])\n    }\n    return 0\n  }\n\n  _visit (to) {\n    this.inflight++\n\n    const req = this.dht._request(to, this.internal, this.command, this.target, this.value, this._session, this._onvisitbound, this._onerrorbound)\n    if (req === null) {\n      this.destroy(new Error('Node was destroyed'))\n      return\n    }\n    req.oncycle = this._oncyclebound\n  }\n\n  _destroy (cb) {\n    this.dht.stats.queries.active--\n    if (!this._online && this.dht.online) this.dht._offline()\n    if (this._autoDestroySession) this._session.destroy()\n    cb(null)\n  }\n}\n\nfunction autoCommit (reply, dht, query) {\n  if (!reply.token) return Promise.reject(new Error('No token received for closest node'))\n  return dht.request({ token: reply.token, target: query.target, command: query.command, value: query.value }, reply.from)\n}\n\nfunction defaultMap (m) {\n  return m\n}\n\nfunction noop () {}\nmodule.exports = class Session {\n  constructor (dht) {\n    this.dht = dht\n    this.inflight = []\n  }\n\n  _attach (req) {\n    req.index = this.inflight.push(req) - 1\n  }\n\n  _detach (req) {\n    const i = req.index\n    if (i === -1) return\n    req.index = -1\n\n    if (i === this.inflight.length - 1) this.inflight.pop()\n    else {\n      const req = this.inflight[i] = this.inflight.pop()\n      req.index = i\n    }\n  }\n\n  query ({ target, command, value }, opts = {}) {\n    return this.dht.query({ target, command, value }, { ...opts, session: this })\n  }\n\n  request ({ token, command, target, value }, { host, port }, opts = {}) {\n    return this.dht.request({ token, command, target, value }, { host, port }, { ...opts, session: this })\n  }\n\n  ping ({ host, port }, opts = {}) {\n    return this.dht.ping({ host, port }, { ...opts, session: this })\n  }\n\n  destroy (err) {\n    while (this.inflight.length) {\n      const req = this.inflight[0]\n      // prevent destroyed requests from contributing to congestion counts\n      this.dht.io.congestion.recv()\n      req.destroy(err)\n    }\n  }\n}\n{\n  \"name\": \"dht-rpc\",\n  \"version\": \"6.16.2\",\n  \"description\": \"Make RPC calls over a Kademlia based DHT\",\n  \"main\": \"index.js\",\n  \"files\": [\n    \"index.js\",\n    \"lib/*.js\"\n  ],\n  \"imports\": {\n    \"events\": {\n      \"bare\": \"bare-events\",\n      \"default\": \"events\"\n    }\n  },\n  \"dependencies\": {\n    \"b4a\": \"^1.6.1\",\n    \"bare-events\": \"^2.2.0\",\n    \"compact-encoding\": \"^2.11.0\",\n    \"compact-encoding-net\": \"^1.2.0\",\n    \"fast-fifo\": \"^1.1.0\",\n    \"kademlia-routing-table\": \"^1.0.1\",\n    \"nat-sampler\": \"^1.0.1\",\n    \"sodium-universal\": \"^4.0.0\",\n    \"streamx\": \"^2.13.2\",\n    \"time-ordered-set\": \"^2.0.0\",\n    \"udx-native\": \"^1.5.3\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^3.0.0\",\n    \"standard\": \"^17.0.0\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && brittle test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mafintosh/dht-rpc.git\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mafintosh/dht-rpc/issues\"\n  },\n  \"homepage\": \"https://github.com/mafintosh/dht-rpc\"\n}\nmodule.exports = class FixedFIFO {\n  constructor (hwm) {\n    if (!(hwm > 0) || ((hwm - 1) & hwm) !== 0) throw new Error('Max size for a FixedFIFO should be a power of two')\n    this.buffer = new Array(hwm)\n    this.mask = hwm - 1\n    this.top = 0\n    this.btm = 0\n    this.next = null\n  }\n\n  clear () {\n    this.top = this.btm = 0\n    this.next = null\n    this.buffer.fill(undefined)\n  }\n\n  push (data) {\n    if (this.buffer[this.top] !== undefined) return false\n    this.buffer[this.top] = data\n    this.top = (this.top + 1) & this.mask\n    return true\n  }\n\n  shift () {\n    const last = this.buffer[this.btm]\n    if (last === undefined) return undefined\n    this.buffer[this.btm] = undefined\n    this.btm = (this.btm + 1) & this.mask\n    return last\n  }\n\n  peek () {\n    return this.buffer[this.btm]\n  }\n\n  isEmpty () {\n    return this.buffer[this.btm] === undefined\n  }\n}\nconst FixedFIFO = require('./fixed-size')\n\nmodule.exports = class FastFIFO {\n  constructor (hwm) {\n    this.hwm = hwm || 16\n    this.head = new FixedFIFO(this.hwm)\n    this.tail = this.head\n    this.length = 0\n  }\n\n  clear () {\n    this.head = this.tail\n    this.head.clear()\n    this.length = 0\n  }\n\n  push (val) {\n    this.length++\n    if (!this.head.push(val)) {\n      const prev = this.head\n      this.head = prev.next = new FixedFIFO(2 * this.head.buffer.length)\n      this.head.push(val)\n    }\n  }\n\n  shift () {\n    if (this.length !== 0) this.length--\n    const val = this.tail.shift()\n    if (val === undefined && this.tail.next) {\n      const next = this.tail.next\n      this.tail.next = null\n      this.tail = next\n      return this.tail.shift()\n    }\n\n    return val\n  }\n\n  peek () {\n    const val = this.tail.peek()\n    if (val === undefined && this.tail.next) return this.tail.next.peek()\n    return val\n  }\n\n  isEmpty () {\n    return this.length === 0\n  }\n}\n{\n  \"name\": \"fast-fifo\",\n  \"version\": \"1.3.2\",\n  \"description\": \"A fast fifo implementation similar to the one powering nextTick in Node.js core\",\n  \"main\": \"index.js\",\n  \"files\": [\n    \"./index.js\",\n    \"./fixed-size.js\"\n  ],\n  \"dependencies\": {},\n  \"devDependencies\": {\n    \"standard\": \"^17.1.0\",\n    \"brittle\": \"^3.3.2\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && brittle test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mafintosh/fast-fifo.git\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mafintosh/fast-fifo/issues\"\n  },\n  \"homepage\": \"https://github.com/mafintosh/fast-fifo\"\n}\nexports.fullRoots = function (index, result) {\n  if (index & 1) throw new Error('You can only look up roots for depth(0) blocks')\n  if (!result) result = []\n\n  index /= 2\n\n  let offset = 0\n  let factor = 1\n\n  while (true) {\n    if (!index) return result\n    while (factor * 2 <= index) factor *= 2\n    result.push(offset + factor - 1)\n    offset = offset + 2 * factor\n    index -= factor\n    factor = 1\n  }\n}\n\nexports.futureRoots = function (index, result) {\n  if (index & 1) throw new Error('You can only look up future roots for depth(0) blocks')\n  if (!result) result = []\n\n  let factor = 1\n\n  // make first root\n  while (factor * 2 <= index) factor *= 2\n\n  // full factor of 2 - done\n  if (factor * 2 - 2 === index) return result\n\n  let pos = factor / 2 - 1\n\n  // while its not a full tree\n  while ((pos + factor / 2 - 1) !== index) {\n    pos += factor\n\n    // read too far, to to left child\n    while ((pos + factor / 2 - 1) > index) {\n      factor /= 2\n      pos -= factor / 2\n    }\n\n    // the \"gap\" is a future root\n    result.push(pos - factor / 2)\n  }\n\n  return result\n}\n\nexports.patch = function (from, to) {\n  if (from === 0 || from >= to) return []\n\n  const roots = exports.fullRoots(from)\n  const target = exports.fullRoots(to)\n\n  // first find the first root that is different\n\n  let i = 0\n  for (; i < target.length; i++) {\n    if (i >= roots.length || roots[i] !== target[i]) break\n  }\n\n  const patch = []\n\n  if (i < roots.length) {\n    // now we need to grow the newest root until it hits the diff one\n    let prev = roots.length - 1\n\n    const ite = exports.iterator(roots[prev--])\n\n    while (ite.index !== target[i]) {\n      ite.sibling()\n\n      if (prev >= 0 && ite.index === roots[prev]) {\n        prev--\n      } else {\n        patch.push(ite.index)\n      }\n\n      patch.push(ite.parent())\n    }\n\n    i++ // patched to next root, so inc\n  }\n\n  // include the rest\n\n  for (; i < target.length; i++) patch.push(target[i])\n\n  return patch\n}\n\nexports.depth = function (index) {\n  let depth = 0\n\n  index += 1\n  while (!(index & 1)) {\n    depth++\n    index = rightShift(index)\n  }\n\n  return depth\n}\n\nexports.sibling = function (index, depth) {\n  if (!depth) depth = exports.depth(index)\n  const offset = exports.offset(index, depth)\n\n  return exports.index(depth, offset & 1 ? offset - 1 : offset + 1)\n}\n\nexports.parent = function (index, depth) {\n  if (!depth) depth = exports.depth(index)\n  const offset = exports.offset(index, depth)\n\n  return exports.index(depth + 1, rightShift(offset))\n}\n\nexports.leftChild = function (index, depth) {\n  if (!(index & 1)) return -1\n  if (!depth) depth = exports.depth(index)\n  return exports.index(depth - 1, exports.offset(index, depth) * 2)\n}\n\nexports.rightChild = function (index, depth) {\n  if (!(index & 1)) return -1\n  if (!depth) depth = exports.depth(index)\n  return exports.index(depth - 1, 1 + (exports.offset(index, depth) * 2))\n}\n\nexports.children = function (index, depth) {\n  if (!(index & 1)) return null\n\n  if (!depth) depth = exports.depth(index)\n  const offset = exports.offset(index, depth) * 2\n\n  return [\n    exports.index(depth - 1, offset),\n    exports.index(depth - 1, offset + 1)\n  ]\n}\n\nexports.leftSpan = function (index, depth) {\n  if (!(index & 1)) return index\n  if (!depth) depth = exports.depth(index)\n  return exports.offset(index, depth) * twoPow(depth + 1)\n}\n\nexports.rightSpan = function (index, depth) {\n  if (!(index & 1)) return index\n  if (!depth) depth = exports.depth(index)\n  return (exports.offset(index, depth) + 1) * twoPow(depth + 1) - 2\n}\n\nexports.nextLeaf = function (index) {\n  let factor = 1\n  let r = index\n\n  while ((r & 1) === 1) {\n    r = (r - 1) / 2\n    factor *= 2\n  }\n\n  return index + factor + 1\n}\n\nexports.count = function (index, depth) {\n  if (!(index & 1)) return 1\n  if (!depth) depth = exports.depth(index)\n  return twoPow(depth + 1) - 1\n}\n\nexports.countLeaves = function (index) {\n  return (exports.count(index) + 1) / 2\n}\n\nexports.spans = function (index, depth) {\n  if (!(index & 1)) return [index, index]\n  if (!depth) depth = exports.depth(index)\n\n  const offset = exports.offset(index, depth)\n  const width = twoPow(depth + 1)\n\n  return [offset * width, (offset + 1) * width - 2]\n}\n\nexports.index = function (depth, offset) {\n  return (1 + 2 * offset) * twoPow(depth) - 1\n}\n\nexports.offset = function (index, depth) {\n  if (!(index & 1)) return index / 2\n  if (!depth) depth = exports.depth(index)\n\n  return ((index + 1) / twoPow(depth) - 1) / 2\n}\n\nexports.iterator = function (index) {\n  const ite = new Iterator()\n  ite.seek(index || 0)\n  return ite\n}\n\nfunction twoPow (n) {\n  return n < 31 ? 1 << n : ((1 << 30) * (1 << (n - 30)))\n}\n\nfunction rightShift (n) {\n  return (n - (n & 1)) / 2\n}\n\nfunction Iterator () {\n  this.index = 0\n  this.offset = 0\n  this.factor = 0\n}\n\nIterator.prototype.seek = function (index) {\n  this.index = index\n  if (this.index & 1) {\n    this.offset = exports.offset(index)\n    this.factor = twoPow(exports.depth(index) + 1)\n  } else {\n    this.offset = index / 2\n    this.factor = 2\n  }\n}\n\nIterator.prototype.isLeft = function () {\n  return (this.offset & 1) === 0\n}\n\nIterator.prototype.isRight = function () {\n  return (this.offset & 1) === 1\n}\n\nIterator.prototype.contains = function (index) {\n  return index > this.index\n    ? index < (this.index + this.factor / 2)\n    : index < this.index\n      ? index > (this.index - this.factor / 2)\n      : true\n}\n\nIterator.prototype.prev = function () {\n  if (!this.offset) return this.index\n  this.offset--\n  this.index -= this.factor\n  return this.index\n}\n\nIterator.prototype.next = function () {\n  this.offset++\n  this.index += this.factor\n  return this.index\n}\n\nIterator.prototype.count = function () {\n  if (!(this.index & 1)) return 1\n  return this.factor - 1\n}\n\nIterator.prototype.countLeaves = function () {\n  return (this.count() + 1) / 2\n}\n\nIterator.prototype.sibling = function () {\n  return this.isLeft() ? this.next() : this.prev()\n}\n\nIterator.prototype.parent = function () {\n  if (this.offset & 1) {\n    this.index -= this.factor / 2\n    this.offset = (this.offset - 1) / 2\n  } else {\n    this.index += this.factor / 2\n    this.offset /= 2\n  }\n  this.factor *= 2\n  return this.index\n}\n\nIterator.prototype.leftSpan = function () {\n  this.index = this.index - this.factor / 2 + 1\n  this.offset = this.index / 2\n  this.factor = 2\n  return this.index\n}\n\nIterator.prototype.rightSpan = function () {\n  this.index = this.index + this.factor / 2 - 1\n  this.offset = this.index / 2\n  this.factor = 2\n  return this.index\n}\n\nIterator.prototype.leftChild = function () {\n  if (this.factor === 2) return this.index\n  this.factor /= 2\n  this.index -= this.factor / 2\n  this.offset *= 2\n  return this.index\n}\n\nIterator.prototype.rightChild = function () {\n  if (this.factor === 2) return this.index\n  this.factor /= 2\n  this.index += this.factor / 2\n  this.offset = 2 * this.offset + 1\n  return this.index\n}\n\nIterator.prototype.nextTree = function () {\n  this.index = this.index + this.factor / 2 + 1\n  this.offset = this.index / 2\n  this.factor = 2\n  return this.index\n}\n\nIterator.prototype.prevTree = function () {\n  if (!this.offset) {\n    this.index = 0\n    this.factor = 2\n  } else {\n    this.index = this.index - this.factor / 2 - 1\n    this.offset = this.index / 2\n    this.factor = 2\n  }\n  return this.index\n}\n\nIterator.prototype.fullRoot = function (index) {\n  if (index <= this.index || (this.index & 1) > 0) return false\n  while (index > this.index + this.factor + this.factor / 2) {\n    this.index += this.factor / 2\n    this.factor *= 2\n    this.offset /= 2\n  }\n  return true\n}\n{\n  \"name\": \"flat-tree\",\n  \"version\": \"1.12.1\",\n  \"description\": \"A series of functions to map a binary tree to a list\",\n  \"main\": \"index.js\",\n  \"files\": [\n    \"index.js\"\n  ],\n  \"dependencies\": {},\n  \"devDependencies\": {\n    \"brittle\": \"^3.3.2\",\n    \"standard\": \"^17.1.0\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && brittle test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mafintosh/flat-tree.git\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mafintosh/flat-tree/issues\"\n  },\n  \"homepage\": \"https://github.com/mafintosh/flat-tree\"\n}\nmodule.exports = require('node-gyp-build')(__dirname)\nconst { isWindows } = require('which-runtime')\nconst binding = require('./binding')\n\nfunction onwork (err) {\n  if (err) this.reject(err)\n  else this.resolve()\n}\n\nexports.tryLock = function tryLock (fd, offset = 0, length = 0, opts = {}) {\n  if (typeof offset === 'object') {\n    opts = offset\n    offset = 0\n  }\n\n  if (typeof length === 'object') {\n    opts = length\n    length = 0\n  }\n\n  if (typeof opts !== 'object') {\n    opts = {}\n  }\n\n  try {\n    binding.fs_ext_napi_try_lock(fd, offset, length, opts.shared ? 0 : 1)\n  } catch (err) {\n    if (err.code === 'EAGAIN') return false\n    throw err\n  }\n\n  return true\n}\n\nexports.waitForLock = function waitForLock (fd, offset = 0, length = 0, opts = {}) {\n  if (typeof offset === 'object') {\n    opts = offset\n    offset = 0\n  }\n\n  if (typeof length === 'object') {\n    opts = length\n    length = 0\n  }\n\n  if (typeof opts !== 'object') {\n    opts = {}\n  }\n\n  const req = Buffer.alloc(binding.sizeof_fs_ext_napi_lock_t)\n  const ctx = {\n    req,\n    resolve: null,\n    reject: null\n  }\n\n  const promise = new Promise((resolve, reject) => {\n    ctx.resolve = resolve\n    ctx.reject = reject\n  })\n\n  try {\n    binding.fs_ext_napi_wait_for_lock(req, fd, offset, length, opts.shared ? 0 : 1, ctx, onwork)\n  } catch (err) {\n    return Promise.reject(err)\n  }\n\n  return promise\n}\n\nexports.tryDowngradeLock = function tryDowngradeLock (fd, offset = 0, length = 0) {\n  try {\n    binding.fs_ext_napi_try_downgrade_lock(fd, offset, length)\n  } catch (err) {\n    if (err.code === 'EAGAIN') return false\n    throw err\n  }\n\n  return true\n}\n\nexports.waitForDowngradeLock = function downgradeLock (fd, offset = 0, length = 0) {\n  const req = Buffer.alloc(binding.sizeof_fs_ext_napi_lock_t)\n  const ctx = {\n    req,\n    resolve: null,\n    reject: null\n  }\n\n  const promise = new Promise((resolve, reject) => {\n    ctx.resolve = resolve\n    ctx.reject = reject\n  })\n\n  try {\n    binding.fs_ext_napi_wait_for_downgrade_lock(req, fd, offset, length, ctx, onwork)\n  } catch (err) {\n    return Promise.reject(err)\n  }\n\n  return promise\n}\n\nexports.tryUpgradeLock = function tryUpgradeLock (fd, offset = 0, length = 0) {\n  try {\n    binding.fs_ext_napi_try_upgrade_lock(fd, offset, length)\n  } catch (err) {\n    if (err.code === 'EAGAIN') return false\n    throw err\n  }\n\n  return true\n}\n\nexports.waitForUpgradeLock = function upgradeLock (fd, offset = 0, length = 0) {\n  const req = Buffer.alloc(binding.sizeof_fs_ext_napi_lock_t)\n  const ctx = {\n    req,\n    resolve: null,\n    reject: null\n  }\n\n  const promise = new Promise((resolve, reject) => {\n    ctx.resolve = resolve\n    ctx.reject = reject\n  })\n\n  try {\n    binding.fs_ext_napi_wait_for_upgrade_lock(req, fd, offset, length, ctx, onwork)\n  } catch (err) {\n    return Promise.reject(err)\n  }\n\n  return promise\n}\n\nexports.unlock = function unlock (fd, offset = 0, length = 0) {\n  binding.fs_ext_napi_unlock(fd, offset, length)\n}\n\nexports.trim = function trim (fd, offset, length) {\n  const req = Buffer.alloc(binding.sizeof_fs_ext_napi_trim_t)\n  const ctx = {\n    req,\n    resolve: null,\n    reject: null\n  }\n\n  const promise = new Promise((resolve, reject) => {\n    ctx.resolve = resolve\n    ctx.reject = reject\n  })\n\n  try {\n    binding.fs_ext_napi_trim(req, fd, offset, length, ctx, onwork)\n  } catch (err) {\n    return Promise.reject(err)\n  }\n\n  return promise\n}\n\nexports.sparse = function sparse (fd) {\n  // Short circuit on everything but Windows\n  if (!isWindows) return Promise.resolve()\n\n  const req = Buffer.alloc(binding.sizeof_fs_ext_napi_sparse_t)\n  const ctx = {\n    req,\n    resolve: null,\n    reject: null\n  }\n\n  const promise = new Promise((resolve, reject) => {\n    ctx.resolve = resolve\n    ctx.reject = reject\n  })\n\n  try {\n    binding.fs_ext_napi_sparse(req, fd, ctx, onwork)\n  } catch (err) {\n    return Promise.reject(err)\n  }\n\n  return promise\n}\n\nexports.swap = function swap (from, to) {\n  const req = Buffer.alloc(binding.sizeof_fs_ext_napi_swap_t)\n  const ctx = {\n    req,\n    resolve: null,\n    reject: null\n  }\n\n  const promise = new Promise((resolve, reject) => {\n    ctx.resolve = resolve\n    ctx.reject = reject\n  })\n\n  try {\n    binding.fs_ext_napi_swap(req, from, to, ctx, onwork)\n  } catch (err) {\n    return Promise.reject(err)\n  }\n\n  return promise\n}\n{\n  \"name\": \"fs-native-extensions\",\n  \"version\": \"1.3.3\",\n  \"description\": \"Native file system extensions for advanced file operations\",\n  \"main\": \"index.js\",\n  \"files\": [\n    \"index.js\",\n    \"macros.h\",\n    \"binding.c\",\n    \"binding.js\",\n    \"CMakeLists.txt\",\n    \"include\",\n    \"src\",\n    \"prebuilds\"\n  ],\n  \"imports\": {\n    \"child_process\": {\n      \"bare\": \"bare-subprocess\",\n      \"default\": \"child_process\"\n    },\n    \"fs\": {\n      \"bare\": \"bare-fs\",\n      \"default\": \"fs\"\n    },\n    \"fs/*\": {\n      \"bare\": \"bare-fs/*\",\n      \"default\": \"fs/*\"\n    },\n    \"path\": {\n      \"bare\": \"bare-path\",\n      \"default\": \"path\"\n    }\n  },\n  \"addon\": true,\n  \"scripts\": {\n    \"test\": \"npm run lint && npm run test:bare && npm run test:node\",\n    \"test:bare\": \"bare test/all.mjs\",\n    \"test:node\": \"node test/all.mjs\",\n    \"lint\": \"standard\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/holepunchto/fs-native-extensions.git\"\n  },\n  \"author\": \"Kasper Isager Dalsgarð <kasper@funktionel.co>\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/fs-native-extensions/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/fs-native-extensions#readme\",\n  \"dependencies\": {\n    \"node-gyp-build\": \"^4.8.2\",\n    \"which-runtime\": \"^1.2.0\"\n  },\n  \"devDependencies\": {\n    \"bare-fs\": \"^3.0.2\",\n    \"bare-path\": \"^3.0.0\",\n    \"bare-subprocess\": \"^4.0.1\",\n    \"brittle\": \"^3.1.1\",\n    \"cmake-bare\": \"^1.1.10\",\n    \"cmake-napi\": \"^1.0.5\",\n    \"minimist\": \"^1.2.6\",\n    \"standard\": \"^17.0.0\",\n    \"test-tmp\": \"^1.2.1\"\n  }\n}\nconst codecs = require('codecs')\nconst { Readable } = require('streamx')\nconst mutexify = require('mutexify/promise')\nconst b4a = require('b4a')\nconst safetyCatch = require('safety-catch')\nconst ReadyResource = require('ready-resource')\nconst debounce = require('debounceify')\nconst Rache = require('rache')\n\nconst { all: unslabAll } = require('unslab')\n\nconst RangeIterator = require('./iterators/range')\nconst HistoryIterator = require('./iterators/history')\nconst DiffIterator = require('./iterators/diff')\nconst Extension = require('./lib/extension')\nconst { YoloIndex, Node, Header } = require('./lib/messages')\nconst { BLOCK_NOT_AVAILABLE, DECODING_ERROR } = require('hypercore-errors')\n\nconst T = 5\nconst MIN_KEYS = T - 1\nconst MAX_CHILDREN = MIN_KEYS * 2 + 1\n\nconst SEP = b4a.alloc(1)\nconst EMPTY = b4a.alloc(0)\n\nclass Key {\n  constructor (seq, value) {\n    this.seq = seq\n    this.value = value\n  }\n}\n\nclass Child {\n  constructor (seq, offset, value) {\n    this.seq = seq\n    this.offset = offset\n    this.value = value\n  }\n}\n\nclass Cache {\n  constructor (rache) {\n    this.keys = rache\n    this.length = 0\n  }\n\n  get (seq) {\n    return this.keys.get(seq) || null\n  }\n\n  set (seq, key) {\n    this.keys.set(seq, key)\n    if (seq >= this.length) this.length = seq + 1\n  }\n\n  gc (length) {\n    // if we need to \"work\" more than 128 ticks, just bust the cache...\n    if (this.length - length > 128) {\n      this.keys.clear()\n    } else {\n      for (let i = length; i < this.length; i++) {\n        this.keys.delete(i)\n      }\n    }\n\n    this.length = length\n  }\n}\n\nclass Pointers {\n  constructor (decoded) {\n    this.levels = decoded.levels.map(l => {\n      const children = []\n      const keys = []\n\n      for (let i = 0; i < l.keys.length; i++) {\n        keys.push(new Key(l.keys[i], null))\n      }\n\n      for (let i = 0; i < l.children.length; i += 2) {\n        children.push(new Child(l.children[i], l.children[i + 1], null))\n      }\n\n      return { keys, children }\n    })\n  }\n\n  get (i) {\n    return this.levels[i]\n  }\n\n  hasKey (seq) {\n    for (const lvl of this.levels) {\n      for (const key of lvl.keys) {\n        if (key.seq === seq) return true\n      }\n    }\n    return false\n  }\n}\n\nfunction inflate (entry) {\n  if (entry.inflated === null) {\n    entry.inflated = YoloIndex.decode(entry.index)\n    entry.index = null\n  }\n  return new Pointers(entry.inflated)\n}\n\nfunction deflate (index) {\n  const levels = index.map(l => {\n    const keys = []\n    const children = []\n\n    for (let i = 0; i < l.value.keys.length; i++) {\n      keys.push(l.value.keys[i].seq)\n    }\n\n    for (let i = 0; i < l.value.children.length; i++) {\n      children.push(l.value.children[i].seq, l.value.children[i].offset)\n    }\n\n    return { keys, children }\n  })\n\n  return YoloIndex.encode({ levels })\n}\n\nfunction preloadBlock (core, index) {\n  if (core.replicator._blocks.get(index)) return\n  core.get(index).catch(safetyCatch)\n}\n\nclass TreeNode {\n  constructor (block, keys, children, offset) {\n    this.block = block\n    this.offset = offset\n    this.keys = keys\n    this.children = children\n    this.changed = false\n\n    this.preload()\n  }\n\n  preload () {\n    if (this.block === null) return\n\n    const core = getBackingCore(this.block.tree.core)\n    if (!core) return\n\n    const bitfield = core.core.bitfield\n\n    for (let i = 0; i < this.keys.length; i++) {\n      const k = this.keys[i]\n      if (k.value) continue\n      if (k.seq >= core.signedLength || (bitfield && bitfield.get(k.seq))) continue\n      preloadBlock(core, k.seq)\n    }\n    for (let i = 0; i < this.children.length; i++) {\n      const c = this.children[i]\n      if (c.value) continue\n      if (c.seq >= core.signedLength || (bitfield && bitfield.get(c.seq))) continue\n      preloadBlock(core, c.seq)\n    }\n  }\n\n  async insertKey (key, value, child, node, encoding, cas) {\n    let s = 0\n    let e = this.keys.length\n    let c\n\n    while (s < e) {\n      const mid = (s + e) >> 1\n      c = b4a.compare(key.value, await this.getKey(mid))\n\n      if (c === 0) {\n        if (cas) {\n          const prev = await this.getKeyNode(mid)\n          if (!(await cas(prev.final(encoding), node))) return true\n        }\n        if (!this.block.tree.tree.alwaysDuplicate) {\n          const prev = await this.getKeyNode(mid)\n          if (sameValue(prev.value, value)) return true\n        }\n        this.changed = true\n        this.keys[mid] = key\n        return true\n      }\n\n      if (c < 0) e = mid\n      else s = mid + 1\n    }\n\n    const i = c < 0 ? e : s\n    this.keys.splice(i, 0, key)\n    if (child) this.children.splice(i + 1, 0, new Child(0, 0, child))\n    this.changed = true\n\n    return this.keys.length < MAX_CHILDREN\n  }\n\n  removeKey (index) {\n    this.keys.splice(index, 1)\n    if (this.children.length) {\n      this.children[index + 1].seq = 0 // mark as freed\n      this.children.splice(index + 1, 1)\n    }\n    this.changed = true\n  }\n\n  async siblings (parent) {\n    for (let i = 0; i < parent.children.length; i++) {\n      if (parent.children[i].value === this) {\n        const [left, right] = await Promise.all([\n          i ? parent.getChildNode(i - 1) : null,\n          i < parent.children.length - 1 ? parent.getChildNode(i + 1) : null\n        ])\n        return { left, index: i, right }\n      }\n    }\n\n    throw new Error('Bad parent')\n  }\n\n  merge (node, median) {\n    this.changed = true\n    this.keys.push(median)\n    for (let i = 0; i < node.keys.length; i++) this.keys.push(node.keys[i])\n    for (let i = 0; i < node.children.length; i++) this.children.push(node.children[i])\n  }\n\n  async split () {\n    const len = this.keys.length >> 1\n    const right = TreeNode.create(this.block)\n\n    while (right.keys.length < len) right.keys.push(this.keys.pop())\n    right.keys.reverse()\n\n    await this.getKey(this.keys.length - 1) // make sure the median is loaded\n    const median = this.keys.pop()\n\n    if (this.children.length) {\n      while (right.children.length < len + 1) right.children.push(this.children.pop())\n      right.children.reverse()\n    }\n\n    this.changed = true\n\n    return {\n      left: this,\n      median,\n      right\n    }\n  }\n\n  getKeyNode (index) {\n    return this.block.tree.getBlock(this.keys[index].seq)\n  }\n\n  async getChildNode (index) {\n    const child = this.children[index]\n    if (child.value) return child.value\n    const block = child.seq === this.block.seq ? this.block : await this.block.tree.getBlock(child.seq)\n    return (child.value = block.getTreeNode(child.offset))\n  }\n\n  setKey (index, key) {\n    this.keys[index] = key\n    this.changed = true\n  }\n\n  async getKey (index) {\n    const key = this.keys[index]\n    if (key.value) return key.value\n    const k = key.seq === this.block.seq ? this.block.key : await this.block.tree.getKey(key.seq)\n    return (key.value = k)\n  }\n\n  indexChanges (index, seq) {\n    const offset = index.push(null) - 1\n    this.changed = false\n\n    for (const child of this.children) {\n      if (!child.value || !child.value.changed) continue\n      child.seq = seq\n      child.offset = child.value.indexChanges(index, seq)\n      index[child.offset] = child\n    }\n\n    return offset\n  }\n\n  updateChildren (seq, block) {\n    for (const child of this.children) {\n      if (!child.value || child.seq !== seq) continue\n      child.value.block = block\n      child.value.updateChildren(seq, block)\n    }\n  }\n\n  static create (block) {\n    const node = new TreeNode(block, [], [], 0)\n    node.changed = true\n    return node\n  }\n}\n\nclass BlockEntry {\n  constructor (seq, tree, entry) {\n    this.seq = seq\n    this.tree = tree\n    this.index = null\n    this.entry = entry\n    this.key = entry.key\n    this.value = entry.value\n  }\n\n  isTarget (key) {\n    return b4a.equals(this.key, key)\n  }\n\n  isDeletion () {\n    if (this.value !== null) return false\n\n    if (this.index === null) {\n      this.index = inflate(this.entry)\n    }\n\n    return !this.index.hasKey(this.seq)\n  }\n\n  final (encoding) {\n    return {\n      seq: this.seq,\n      key: encoding.key ? encoding.key.decode(this.key) : this.key,\n      value: this.value && (encoding.value ? encoding.value.decode(this.value) : this.value)\n    }\n  }\n\n  getTreeNode (offset) {\n    if (this.index === null) {\n      this.index = inflate(this.entry)\n    }\n    const entry = this.index.get(offset)\n    return new TreeNode(this, entry.keys, entry.children, offset)\n  }\n}\n\nclass BatchEntry extends BlockEntry {\n  constructor (seq, tree, key, value, index) {\n    super(seq, tree, { key, value, index: null, inflated: null })\n    this.pendingIndex = index\n  }\n\n  isTarget (key) {\n    return false\n  }\n\n  getTreeNode (offset) {\n    return this.pendingIndex[offset].value\n  }\n}\n\nclass Hyperbee extends ReadyResource {\n  constructor (core, opts = {}) {\n    super()\n    // this.feed is now deprecated, and will be this.core going forward\n    this.feed = core\n    this.core = core\n\n    this.keyEncoding = opts.keyEncoding ? codecs(opts.keyEncoding) : null\n    this.valueEncoding = opts.valueEncoding ? codecs(opts.valueEncoding) : null\n    this.extension = opts.extension !== false ? opts.extension || Extension.register(this) : null\n    this.metadata = opts.metadata || null\n    this.lock = opts.lock || mutexify()\n    this.sep = opts.sep || SEP\n    this.readonly = !!opts.readonly\n    this.prefix = opts.prefix || null\n\n    // In a future version, this should be false by default\n    this.alwaysDuplicate = opts.alwaysDuplicate !== false\n\n    this._unprefixedKeyEncoding = this.keyEncoding\n    this._sub = !!this.prefix\n    this._checkout = opts.checkout || 0\n    this._view = !!opts._view\n\n    this._onappendBound = this._view ? null : this._onappend.bind(this)\n    this._ontruncateBound = this._view ? null : this._ontruncate.bind(this)\n    this._watchers = this._onappendBound ? [] : null\n    this._entryWatchers = this._onappendBound ? [] : null\n    this._sessions = opts.sessions !== false\n\n    this._keyCache = null\n    this._nodeCache = null\n\n    this._batches = []\n\n    if (this._watchers) {\n      this.core.on('append', this._onappendBound)\n      this.core.on('truncate', this._ontruncateBound)\n    }\n\n    if (this.prefix && opts._sub) {\n      this.keyEncoding = prefixEncoding(this.prefix, this.keyEncoding)\n    }\n\n    this.ready().catch(safetyCatch)\n  }\n\n  async _open () {\n    if (this.core.opened === false) await this.core.ready()\n\n    // snapshot\n    if (this._checkout === -1) this._checkout = Math.max(1, this.core.length)\n\n    const baseCache = Rache.from(this.core.globalCache)\n    this._keyCache = new Cache(baseCache)\n    this._nodeCache = new Cache(Rache.from(baseCache))\n  }\n\n  get version () {\n    return Math.max(1, this._checkout || this.core.length)\n  }\n\n  get id () {\n    return this.core.id\n  }\n\n  get key () {\n    return this.core.key\n  }\n\n  get discoveryKey () {\n    return this.core.discoveryKey\n  }\n\n  get writable () {\n    return this.core.writable\n  }\n\n  get readable () {\n    return this.core.readable\n  }\n\n  replicate (isInitiator, opts) {\n    return this.core.replicate(isInitiator, opts)\n  }\n\n  update (opts) {\n    return this.core.update(opts)\n  }\n\n  peek (range, opts) {\n    return iteratorPeek(this.createRangeIterator(range, { ...opts, limit: 1 }))\n  }\n\n  createRangeIterator (range, opts = {}) {\n    // backwards compat range arg\n    opts = opts ? { ...opts, ...range } : range\n\n    const extension = (opts.extension === false && opts.limit !== 0) ? null : this.extension\n    const keyEncoding = opts.keyEncoding ? codecs(opts.keyEncoding) : this.keyEncoding\n\n    if (extension) {\n      const { onseq, onwait } = opts\n      let version = 0\n      let next = 0\n\n      opts = encRange(keyEncoding, {\n        ...opts,\n        sub: this._sub,\n        onseq (seq) {\n          if (!version) version = seq + 1\n          if (next) next--\n          if (onseq) onseq(seq)\n        },\n        onwait (seq) {\n          if (!next) {\n            next = Extension.BATCH_SIZE\n            extension.iterator(ite.snapshot(version))\n          }\n          if (onwait) onwait(seq)\n        }\n      })\n    } else {\n      opts = encRange(keyEncoding, { ...opts, sub: this._sub })\n    }\n\n    const ite = new RangeIterator(new Batch(this, this._makeSnapshot(), null, false, opts), null, opts)\n    return ite\n  }\n\n  createReadStream (range, opts) {\n    const signal = (opts && opts.signal) || null\n    return iteratorToStream(this.createRangeIterator(range, opts), signal)\n  }\n\n  createHistoryStream (opts) {\n    const session = (opts && opts.live) ? this.core.session() : this._makeSnapshot()\n    const signal = (opts && opts.signal) || null\n    return iteratorToStream(new HistoryIterator(new Batch(this, session, null, false, opts), opts), signal)\n  }\n\n  createDiffStream (right, range, opts) {\n    if (typeof right === 'number') right = this.checkout(Math.max(1, right), { reuseSession: true })\n\n    // backwards compat range arg\n    opts = opts ? { ...opts, ...range } : range\n\n    const snapshot = right.version > this.version ? right._makeSnapshot() : this._makeSnapshot()\n    const signal = (opts && opts.signal) || null\n\n    const keyEncoding = opts && opts.keyEncoding ? codecs(opts.keyEncoding) : this.keyEncoding\n    if (keyEncoding) opts = encRange(keyEncoding, { ...opts, sub: this._sub })\n\n    return iteratorToStream(new DiffIterator(new Batch(this, snapshot, null, false, opts), new Batch(right, snapshot, null, false, opts), opts), signal)\n  }\n\n  get (key, opts) {\n    const b = new Batch(this, this._makeSnapshot(), null, true, opts)\n    return b.get(key)\n  }\n\n  getBySeq (seq, opts) {\n    const b = new Batch(this, this._makeSnapshot(), null, true, opts)\n    return b.getBySeq(seq)\n  }\n\n  put (key, value, opts) {\n    const b = new Batch(this, this.core, null, true, opts)\n    return b.put(key, value, opts)\n  }\n\n  batch (opts) {\n    return new Batch(this, this.core, mutexify(), true, opts)\n  }\n\n  del (key, opts) {\n    const b = new Batch(this, this.core, null, true, opts)\n    return b.del(key, opts)\n  }\n\n  watch (range, opts) {\n    if (!this._watchers) throw new Error('Can only watch the main bee instance')\n    return new Watcher(this, range, opts)\n  }\n\n  async getAndWatch (key, opts) {\n    if (!this._watchers) throw new Error('Can only watch the main bee instance')\n\n    const watcher = new EntryWatcher(this, key, opts)\n    await watcher._debouncedUpdate()\n\n    if (this.closing) {\n      await watcher.close()\n      throw new Error('Bee closed')\n    }\n\n    return watcher\n  }\n\n  _onappend () {\n    for (const watcher of this._watchers) {\n      watcher._onappend()\n    }\n\n    for (const watcher of this._entryWatchers) {\n      watcher._onappend()\n    }\n  }\n\n  _ontruncate (length) {\n    for (const watcher of this._watchers) {\n      watcher._ontruncate()\n    }\n\n    for (const watcher of this._entryWatchers) {\n      watcher._ontruncate()\n    }\n\n    this._nodeCache.gc(length)\n    this._keyCache.gc(length)\n  }\n\n  _makeSnapshot () {\n    if (this._sessions === false) return this.core\n    // TODO: better if we could encapsulate this in hypercore in the future\n    return (this._checkout <= this.core.length || this._checkout <= 1) ? this.core.snapshot() : this.core.session({ snapshot: false })\n  }\n\n  checkout (version, opts = {}) {\n    if (version === 0) version = 1\n\n    // same as above, just checkout isn't set yet...\n    const snap = (opts.reuseSession || this._sessions === false)\n      ? this.core\n      : (version <= this.core.length || version <= 1) ? this.core.snapshot() : this.core.session({ snapshot: false })\n\n    return new Hyperbee(snap, {\n      _view: true,\n      _sub: false,\n      prefix: this.prefix,\n      sep: this.sep,\n      lock: this.lock,\n      checkout: version,\n      keyEncoding: opts.keyEncoding || this.keyEncoding,\n      valueEncoding: opts.valueEncoding || this.valueEncoding,\n      extension: this.extension !== null ? this.extension : false\n    })\n  }\n\n  snapshot (opts) {\n    return this.checkout(this.core.opened === false ? -1 : Math.max(1, this.version), opts)\n  }\n\n  sub (prefix, opts = {}) {\n    let sep = opts.sep || this.sep\n    if (!b4a.isBuffer(sep)) sep = b4a.from(sep)\n\n    prefix = b4a.concat([this.prefix || EMPTY, b4a.from(prefix), sep])\n\n    const valueEncoding = codecs(opts.valueEncoding || this.valueEncoding)\n    const keyEncoding = codecs(opts.keyEncoding || this._unprefixedKeyEncoding)\n\n    return new Hyperbee(this.core, {\n      _view: true,\n      _sub: true,\n      prefix,\n      sep: this.sep,\n      lock: this.lock,\n      checkout: this._checkout,\n      valueEncoding,\n      keyEncoding,\n      extension: this.extension !== null ? this.extension : false,\n      metadata: this.metadata\n    })\n  }\n\n  async getHeader (opts) {\n    const blk = await this.core.get(0, opts)\n    try {\n      return blk && Header.decode(blk)\n    } catch {\n      throw DECODING_ERROR()\n    }\n  }\n\n  async _close () {\n    if (this._watchers) {\n      this.core.off('append', this._onappendBound)\n      this.core.off('truncate', this._ontruncateBound)\n\n      while (this._watchers.length) {\n        await this._watchers[this._watchers.length - 1].close()\n      }\n    }\n\n    if (this._entryWatchers) {\n      while (this._entryWatchers.length) {\n        await this._entryWatchers[this._entryWatchers.length - 1].close()\n      }\n    }\n\n    while (this._batches.length) {\n      await this._batches[this._batches.length - 1].close()\n    }\n\n    return this.core.close()\n  }\n\n  static async isHyperbee (core, opts) {\n    await core.ready()\n\n    const blk0 = await core.get(0, opts)\n    if (blk0 === null) throw BLOCK_NOT_AVAILABLE()\n\n    try {\n      return Header.decode(blk0).protocol === 'hyperbee'\n    } catch (err) { // undecodable\n      return false\n    }\n  }\n}\n\nclass Batch {\n  constructor (tree, core, batchLock, cache, options = {}) {\n    this.tree = tree\n    // this.feed is now deprecated, and will be this.core going forward\n    this.feed = core\n    this.core = core\n    this.index = tree._batches.push(this) - 1\n    this.blocks = cache ? new Map() : null\n    this.autoFlush = !batchLock\n    this.rootSeq = 0\n    this.root = null\n    this.length = 0\n    this.options = options\n    this.locked = null\n    this.batchLock = batchLock\n    this.onseq = this.options.onseq || noop\n    this.appending = null\n    this.isSnapshot = this.core !== this.tree.core\n    this.shouldUpdate = this.options.update !== false\n    this.updating = null\n    this.encoding = {\n      key: options.keyEncoding ? codecs(options.keyEncoding) : tree.keyEncoding,\n      value: options.valueEncoding ? codecs(options.valueEncoding) : tree.valueEncoding\n    }\n  }\n\n  ready () {\n    return this.tree.ready()\n  }\n\n  async lock () {\n    if (this.tree.readonly) throw new Error('Hyperbee is marked as read-only')\n    if (this.locked === null) this.locked = await this.tree.lock()\n  }\n\n  get version () {\n    return Math.max(1, this.tree._checkout ? this.tree._checkout : this.core.length + this.length)\n  }\n\n  async getRoot (ensureHeader) {\n    await this.ready()\n    if (ensureHeader) {\n      if (this.core.length === 0 && this.core.writable && !this.tree.readonly) {\n        await this.core.append(Header.encode({\n          protocol: 'hyperbee',\n          metadata: this.tree.metadata\n        }))\n      }\n    }\n    if (this.tree._checkout === 0 && this.shouldUpdate) {\n      if (this.updating === null) this.updating = this.core.update()\n      await this.updating\n    }\n    if (this.version < 2) return null\n    return (await this.getBlock(this.version - 1)).getTreeNode(0)\n  }\n\n  async getKey (seq) {\n    const k = this.core.fork === this.tree.core.fork ? this.tree._keyCache.get(seq) : null\n    if (k !== null) return k\n    const key = (await this.getBlock(seq)).key\n    if (this.core.fork === this.tree.core.fork) this.tree._keyCache.set(seq, key)\n    return key\n  }\n\n  async _getNode (seq) {\n    const cached = (this.tree._nodeCache !== null && this.core.fork === this.tree.core.fork) ? this.tree._nodeCache.get(seq) : null\n    if (cached !== null) return cached\n    const entry = await this.core.get(seq, { ...this.options, valueEncoding: Node })\n    if (entry === null) throw BLOCK_NOT_AVAILABLE()\n    const wrap = copyEntry(entry)\n    if (this.core.fork === this.tree.core.fork && this.tree._nodeCache !== null) this.tree._nodeCache.set(seq, wrap)\n    return wrap\n  }\n\n  async getBlock (seq) {\n    if (this.rootSeq === 0) this.rootSeq = seq\n    let b = this.blocks && this.blocks.get(seq)\n    if (b) return b\n    this.onseq(seq)\n    const entry = await this._getNode(seq)\n    b = new BlockEntry(seq, this, entry)\n    if (this.blocks && (this.blocks.size - this.length) < 128) this.blocks.set(seq, b)\n    return b\n  }\n\n  _onwait (key) {\n    this.options.onwait = null\n    this.tree.extension.get(this.rootSeq + 1, key)\n  }\n\n  _getEncoding (opts) {\n    if (!opts) return this.encoding\n    return {\n      key: opts.keyEncoding ? codecs(opts.keyEncoding) : this.encoding.key,\n      value: opts.valueEncoding ? codecs(opts.valueEncoding) : this.encoding.value\n    }\n  }\n\n  peek (range, opts) {\n    return iteratorPeek(this.createRangeIterator(range, { ...opts, limit: 1 }))\n  }\n\n  createRangeIterator (range, opts = {}) {\n    // backwards compat range arg\n    opts = opts ? { ...opts, ...range } : range\n\n    const encoding = this._getEncoding(opts)\n    return new RangeIterator(this, encoding, encRange(encoding.key, { ...opts, sub: this.tree._sub }))\n  }\n\n  createReadStream (range, opts) {\n    const signal = (opts && opts.signal) || null\n    return iteratorToStream(this.createRangeIterator(range, opts), signal)\n  }\n\n  async getBySeq (seq, opts) {\n    const encoding = this._getEncoding(opts)\n\n    try {\n      const block = (await this.getBlock(seq)).final(encoding)\n      return { key: block.key, value: block.value }\n    } finally {\n      await this._closeSnapshot()\n    }\n  }\n\n  async get (key, opts) {\n    const encoding = this._getEncoding(opts)\n\n    try {\n      return await this._get(key, encoding)\n    } finally {\n      await this._closeSnapshot()\n    }\n  }\n\n  async _get (key, encoding) {\n    key = enc(encoding.key, key)\n\n    if (this.tree.extension !== null && this.options.extension !== false) {\n      this.options.onwait = this._onwait.bind(this, key)\n    }\n\n    let node = await this.getRoot(false)\n    if (!node) return null\n\n    while (true) {\n      if (node.block.isTarget(key)) {\n        return node.block.isDeletion() ? null : node.block.final(encoding)\n      }\n\n      let s = 0\n      let e = node.keys.length\n      let c\n\n      while (s < e) {\n        const mid = (s + e) >> 1\n\n        c = b4a.compare(key, await node.getKey(mid))\n\n        if (c === 0) return (await this.getBlock(node.keys[mid].seq)).final(encoding)\n\n        if (c < 0) e = mid\n        else s = mid + 1\n      }\n\n      if (!node.children.length) return null\n\n      const i = c < 0 ? e : s\n      node = await node.getChildNode(i)\n    }\n  }\n\n  async put (key, value, opts) {\n    const release = this.batchLock ? await this.batchLock() : null\n\n    const cas = (opts && opts.cas) || null\n    const encoding = this._getEncoding(opts)\n\n    if (!this.locked) await this.lock()\n    if (!release) return this._put(key, value, encoding, cas)\n\n    try {\n      return await this._put(key, value, encoding, cas)\n    } finally {\n      release()\n    }\n  }\n\n  async _put (key, value, encoding, cas) {\n    const newNode = {\n      seq: 0,\n      key,\n      value\n    }\n    key = enc(encoding.key, key)\n    value = enc(encoding.value, value)\n\n    const stack = []\n\n    let root\n    let node = root = await this.getRoot(true)\n    if (!node) node = root = TreeNode.create(null)\n\n    const seq = newNode.seq = this.core.length + this.length\n    const target = new Key(seq, key)\n\n    while (node.children.length) {\n      stack.push(node)\n      node.changed = true // changed, but compressible\n\n      let s = 0\n      let e = node.keys.length\n      let c\n\n      while (s < e) {\n        const mid = (s + e) >> 1\n        c = b4a.compare(target.value, await node.getKey(mid))\n\n        if (c === 0) {\n          if (cas) {\n            const prev = await node.getKeyNode(mid)\n            if (!(await cas(prev.final(encoding), newNode))) return this._unlockMaybe()\n          }\n          if (!this.tree.alwaysDuplicate) {\n            const prev = await node.getKeyNode(mid)\n            if (sameValue(prev.value, value)) return this._unlockMaybe()\n          }\n          node.setKey(mid, target)\n          return this._append(root, seq, key, value)\n        }\n\n        if (c < 0) e = mid\n        else s = mid + 1\n      }\n\n      const i = c < 0 ? e : s\n      node = await node.getChildNode(i)\n    }\n\n    let needsSplit = !(await node.insertKey(target, value, null, newNode, encoding, cas))\n    if (!node.changed) return this._unlockMaybe()\n\n    while (needsSplit) {\n      const parent = stack.pop()\n      const { median, right } = await node.split()\n\n      if (parent) {\n        needsSplit = !(await parent.insertKey(median, value, right, null, encoding, null))\n        node = parent\n      } else {\n        root = TreeNode.create(node.block)\n        root.changed = true\n        root.keys.push(median)\n        root.children.push(new Child(0, 0, node), new Child(0, 0, right))\n        needsSplit = false\n      }\n    }\n\n    return this._append(root, seq, key, value)\n  }\n\n  async del (key, opts) {\n    const release = this.batchLock ? await this.batchLock() : null\n    const cas = (opts && opts.cas) || null\n    const encoding = this._getEncoding(opts)\n\n    if (!this.locked) await this.lock()\n    if (!release) return this._del(key, encoding, cas)\n\n    try {\n      return await this._del(key, encoding, cas)\n    } finally {\n      release()\n    }\n  }\n\n  async _del (key, encoding, cas) {\n    const delNode = {\n      seq: 0,\n      key,\n      value: null\n    }\n\n    key = enc(encoding.key, key)\n\n    const stack = []\n\n    let node = await this.getRoot(true)\n    if (!node) return this._unlockMaybe()\n\n    const seq = delNode.seq = this.core.length + this.length\n\n    while (true) {\n      stack.push(node)\n\n      let s = 0\n      let e = node.keys.length\n      let c\n\n      while (s < e) {\n        const mid = (s + e) >> 1\n        c = b4a.compare(key, await node.getKey(mid))\n\n        if (c === 0) {\n          if (cas) {\n            const prev = await node.getKeyNode(mid)\n            if (!(await cas(prev.final(encoding), delNode))) return this._unlockMaybe()\n          }\n          if (node.children.length) await setKeyToNearestLeaf(node, mid, stack)\n          else node.removeKey(mid)\n          // we mark these as changed late, so we don't rewrite them if it is a 404\n          for (const node of stack) node.changed = true\n          return this._append(await rebalance(stack), seq, key, null)\n        }\n\n        if (c < 0) e = mid\n        else s = mid + 1\n      }\n\n      if (!node.children.length) return this._unlockMaybe()\n\n      const i = c < 0 ? e : s\n      node = await node.getChildNode(i)\n    }\n  }\n\n  async _closeSnapshot () {\n    if (this.isSnapshot) {\n      await this.core.close()\n      this._finalize()\n    }\n  }\n\n  async close () {\n    if (this.isSnapshot) return this._closeSnapshot()\n\n    this.root = null\n    if (this.blocks) this.blocks.clear()\n    this.length = 0\n    this._unlock()\n  }\n\n  destroy () { // compat, remove later\n    this.close().catch(noop)\n  }\n\n  toBlocks () {\n    if (this.appending) return this.appending\n\n    const batch = new Array(this.length)\n\n    for (let i = 0; i < this.length; i++) {\n      const seq = this.core.length + i\n      const { pendingIndex, key, value } = this.blocks.get(seq)\n\n      if (i < this.length - 1) {\n        pendingIndex[0] = null\n        let j = 0\n\n        while (j < pendingIndex.length) {\n          const idx = pendingIndex[j]\n          if (idx !== null && idx.seq === seq) {\n            idx.offset = j++\n            continue\n          }\n          if (j === pendingIndex.length - 1) pendingIndex.pop()\n          else pendingIndex[j] = pendingIndex.pop()\n        }\n      }\n\n      batch[i] = Node.encode({\n        key,\n        value,\n        index: deflate(pendingIndex)\n      })\n    }\n\n    this.appending = batch\n    return batch\n  }\n\n  flush () {\n    if (!this.length) return this.close()\n\n    const batch = this.toBlocks()\n\n    this.root = null\n    this.blocks.clear()\n    this.length = 0\n\n    return this._appendBatch(batch)\n  }\n\n  _unlockMaybe () {\n    if (this.autoFlush) this._unlock()\n  }\n\n  _unlock () {\n    const locked = this.locked\n    this.locked = null\n    if (locked !== null) locked()\n    this._finalize()\n  }\n\n  _finalize () {\n    // technically finalize can be called more than once, so here we just check if we already have been removed\n    if (this.index >= this.tree._batches.length || this.tree._batches[this.index] !== this) return\n    const top = this.tree._batches.pop()\n    if (top === this) return\n    top.index = this.index\n    this.tree._batches[top.index] = top\n  }\n\n  _append (root, seq, key, value) {\n    const index = []\n    root.indexChanges(index, seq)\n    index[0] = new Child(seq, 0, root)\n\n    if (!this.autoFlush) {\n      const block = new BatchEntry(seq, this, key, value, index)\n      root.block = block\n      this.root = root\n      this.length++\n      this.blocks.set(seq, block)\n\n      root.updateChildren(seq, block)\n      return\n    }\n\n    return this._appendBatch(Node.encode({\n      key,\n      value,\n      index: deflate(index)\n    }))\n  }\n\n  async _appendBatch (raw) {\n    try {\n      await this.core.append(raw)\n    } finally {\n      this._unlock()\n    }\n  }\n}\n\nclass EntryWatcher extends ReadyResource {\n  constructor (bee, key, opts = {}) {\n    super()\n\n    this.keyEncoding = opts.keyEncoding || bee.keyEncoding\n    this.valueEncoding = opts.valueEncoding || bee.valueEncoding\n\n    this.index = bee._entryWatchers.push(this) - 1\n    this.bee = bee\n\n    this.key = key\n    this.node = null\n\n    this._forceUpdate = false\n    this._debouncedUpdate = debounce(this._processUpdate.bind(this))\n    this._updateOnce = !!opts.updateOnce\n  }\n\n  _close () {\n    const top = this.bee._entryWatchers.pop()\n    if (top !== this) {\n      top.index = this.index\n      this.bee._entryWatchers[top.index] = top\n    }\n  }\n\n  _onappend () {\n    this._debouncedUpdate()\n  }\n\n  _ontruncate () {\n    this._forceUpdate = true\n    this._debouncedUpdate()\n  }\n\n  async _processUpdate () {\n    const force = this._forceUpdate\n    this._forceUpdate = false\n\n    if (this._updateOnce) {\n      this._updateOnce = false\n      await this.bee.update({ wait: true })\n    }\n\n    let newNode\n    try {\n      newNode = await this.bee.get(this.key, {\n        keyEncoding: this.keyEncoding,\n        valueEncoding: this.valueEncoding\n      })\n    } catch (e) {\n      if (e.code === 'SNAPSHOT_NOT_AVAILABLE') {\n        // There was a truncate event before the get resolved\n        // So this handler will run again anyway\n        return\n      } else if (this.bee.closing) {\n        this.close().catch(safetyCatch)\n        return\n      }\n      this.emit('error', e)\n      return\n    }\n\n    if (force || newNode?.seq !== this.node?.seq) {\n      this.node = newNode\n      this.emit('update')\n    }\n  }\n}\n\nclass Watcher extends ReadyResource {\n  constructor (bee, range, opts = {}) {\n    super()\n\n    this.keyEncoding = opts.keyEncoding || bee.keyEncoding\n    this.valueEncoding = opts.valueEncoding || bee.valueEncoding\n    this.index = bee._watchers.push(this) - 1\n    this.bee = bee\n    this.core = bee.core\n\n    this.latestDiff = 0\n    this.range = range\n    this.map = opts.map || defaultWatchMap\n\n    this.current = null\n    this.previous = null\n    this.currentMapped = null\n    this.previousMapped = null\n    this.stream = null\n\n    this._lock = mutexify()\n    this._flowing = false\n    this._resolveOnChange = null\n    this._differ = opts.differ || defaultDiffer\n    this._eager = !!opts.eager\n    this._updateOnce = !!opts.updateOnce\n    this._onchange = opts.onchange || null\n    this._flush = opts.flush !== false && this.core.isAutobase\n\n    this.on('newListener', autoFlowOnUpdate)\n\n    this.ready().catch(safetyCatch)\n  }\n\n  async _consume () {\n    if (this._flowing) return\n    try {\n      for await (const _ of this) {} // eslint-disable-line\n    } catch {}\n  }\n\n  async _open () {\n    await this.bee.ready()\n\n    const opts = {\n      keyEncoding: this.keyEncoding,\n      valueEncoding: this.valueEncoding\n    }\n\n    // Point from which to start watching\n    this.current = this._eager ? this.bee.checkout(1, opts) : this.bee.snapshot(opts)\n\n    if (this._onchange) {\n      if (this._eager) await this._onchange()\n      this._consume()\n    }\n  }\n\n  [Symbol.asyncIterator] () {\n    this._flowing = true\n    return this\n  }\n\n  _ontruncate () {\n    if (this.core.isAutobase) this._onappend()\n  }\n\n  _onappend () {\n    const resolve = this._resolveOnChange\n    this._resolveOnChange = null\n    if (resolve) resolve()\n  }\n\n  async _waitForChanges () {\n    if (this.current.version < this.bee.version || this.closing) return\n\n    await new Promise(resolve => {\n      this._resolveOnChange = resolve\n    })\n  }\n\n  async next () {\n    try {\n      return await this._next()\n    } catch (err) {\n      if (this.closing) return { value: undefined, done: true }\n      await this.close()\n      throw err\n    }\n  }\n\n  async _next () {\n    const release = await this._lock()\n\n    try {\n      if (this.closing) return { value: undefined, done: true }\n\n      if (!this.opened) await this.ready()\n\n      while (true) {\n        await this._waitForChanges()\n\n        if (this.closing) return { value: undefined, done: true }\n\n        if (this._updateOnce) {\n          this._updateOnce = false\n          await this.bee.update({ wait: true })\n        }\n\n        if (this._flush) await this.core.base.flush()\n        if (this.closing) return { value: undefined, done: true }\n\n        await this._closePrevious()\n        this.previous = this.current.snapshot()\n\n        await this._closeCurrent()\n        this.current = this.bee.snapshot({\n          keyEncoding: this.keyEncoding,\n          valueEncoding: this.valueEncoding\n        })\n\n        if (this.current.core.fork !== this.previous.core.fork) {\n          return await this._yield()\n        }\n\n        this.stream = this._differ(this.current, this.previous, this.range)\n\n        try {\n          for await (const data of this.stream) { // eslint-disable-line\n            return await this._yield()\n          }\n        } finally {\n          this.stream = null\n        }\n      }\n    } finally {\n      release()\n    }\n  }\n\n  async _yield () {\n    this.currentMapped = this.map(this.current)\n    this.previousMapped = this.map(this.previous)\n\n    if (this._onchange) {\n      try {\n        await this._onchange()\n      } catch (err) {\n        safetyCatch(err)\n      }\n    }\n\n    this.emit('update')\n    return { done: false, value: [this.currentMapped, this.previousMapped] }\n  }\n\n  async return () {\n    await this.close()\n    return { done: true }\n  }\n\n  async _close () {\n    const top = this.bee._watchers.pop()\n    if (top !== this) {\n      top.index = this.index\n      this.bee._watchers[top.index] = top\n    }\n\n    if (this.stream && !this.stream.destroying) {\n      this.stream.destroy()\n    }\n\n    this._onappend() // Continue execution being closed\n\n    await this._closeCurrent().catch(safetyCatch)\n    await this._closePrevious().catch(safetyCatch)\n\n    const release = await this._lock()\n    release()\n  }\n\n  destroy () {\n    return this.close()\n  }\n\n  async _closeCurrent () {\n    if (this.currentMapped) await this.currentMapped.close()\n    if (this.current) await this.current.close()\n    this.current = this.currentMapped = null\n  }\n\n  async _closePrevious () {\n    if (this.previousMapped) await this.previousMapped.close()\n    if (this.previous) await this.previous.close()\n    this.previous = this.previousMapped = null\n  }\n}\n\nfunction autoFlowOnUpdate (name) {\n  if (name === 'update') this._consume()\n}\n\nfunction defaultWatchMap (snapshot) {\n  return snapshot\n}\n\nasync function leafSize (node, goLeft) {\n  while (node.children.length) node = await node.getChildNode(goLeft ? 0 : node.children.length - 1)\n  return node.keys.length\n}\n\nasync function setKeyToNearestLeaf (node, index, stack) {\n  let [left, right] = await Promise.all([node.getChildNode(index), node.getChildNode(index + 1)])\n  const [ls, rs] = await Promise.all([leafSize(left, false), leafSize(right, true)])\n\n  if (ls < rs) { // if fewer leaves on the left\n    stack.push(right)\n    while (right.children.length) stack.push(right = right.children[0].value)\n    node.keys[index] = right.keys.shift()\n  } else { // if fewer leaves on the right\n    stack.push(left)\n    while (left.children.length) stack.push(left = left.children[left.children.length - 1].value)\n    node.keys[index] = left.keys.pop()\n  }\n}\n\nasync function rebalance (stack) {\n  const root = stack[0]\n\n  while (stack.length > 1) {\n    const node = stack.pop()\n    const parent = stack[stack.length - 1]\n\n    if (node.keys.length >= MIN_KEYS) return root\n\n    let { left, index, right } = await node.siblings(parent)\n\n    // maybe borrow from left sibling?\n    if (left && left.keys.length > MIN_KEYS) {\n      left.changed = true\n      node.keys.unshift(parent.keys[index - 1])\n      if (left.children.length) node.children.unshift(left.children.pop())\n      parent.keys[index - 1] = left.keys.pop()\n      return root\n    }\n\n    // maybe borrow from right sibling?\n    if (right && right.keys.length > MIN_KEYS) {\n      right.changed = true\n      node.keys.push(parent.keys[index])\n      if (right.children.length) node.children.push(right.children.shift())\n      parent.keys[index] = right.keys.shift()\n      return root\n    }\n\n    // merge node with another sibling\n    if (left) {\n      index--\n      right = node\n    } else {\n      left = node\n    }\n\n    left.merge(right, parent.keys[index])\n    parent.removeKey(index)\n  }\n\n  // check if the tree shrunk\n  if (!root.keys.length && root.children.length) return root.getChildNode(0)\n  return root\n}\n\nfunction iteratorToStream (ite, signal) {\n  let done\n  let closing\n\n  const rs = new Readable({\n    signal,\n    open (cb) {\n      done = cb\n      ite.open().then(fin, fin)\n    },\n    read (cb) {\n      done = cb\n      ite.next().then(push, fin)\n    },\n    predestroy () {\n      closing = ite.close()\n      closing.catch(noop)\n    },\n    destroy (cb) {\n      done = cb\n      if (!closing) closing = ite.close()\n      closing.then(fin, fin)\n    }\n  })\n\n  return rs\n\n  function fin (err) {\n    done(err)\n  }\n\n  function push (val) {\n    rs.push(val)\n    done(null)\n  }\n}\n\nasync function iteratorPeek (ite) {\n  try {\n    await ite.open()\n    return await ite.next()\n  } finally {\n    await ite.close()\n  }\n}\n\nfunction encRange (e, opts) {\n  if (!e) return opts\n\n  if (e.encodeRange) {\n    const r = e.encodeRange({ gt: opts.gt, gte: opts.gte, lt: opts.lt, lte: opts.lte })\n    opts.gt = r.gt\n    opts.gte = r.gte\n    opts.lt = r.lt\n    opts.lte = r.lte\n    return opts\n  }\n\n  if (opts.gt !== undefined) opts.gt = enc(e, opts.gt)\n  if (opts.gte !== undefined) opts.gte = enc(e, opts.gte)\n  if (opts.lt !== undefined) opts.lt = enc(e, opts.lt)\n  if (opts.lte !== undefined) opts.lte = enc(e, opts.lte)\n  if (opts.sub && !opts.gt && !opts.gte) opts.gt = enc(e, SEP)\n  if (opts.sub && !opts.lt && !opts.lte) opts.lt = bump(enc(e, EMPTY))\n\n  return opts\n}\n\nfunction bump (key) {\n  // key should have been copied by enc above before hitting this\n  key[key.length - 1]++\n  return key\n}\n\nfunction enc (e, v) {\n  if (v === undefined || v === null) return null\n  if (e !== null) return e.encode(v)\n  if (typeof v === 'string') return b4a.from(v)\n  return v\n}\n\nfunction prefixEncoding (prefix, keyEncoding) {\n  return {\n    encode (key) {\n      return b4a.concat([prefix, b4a.isBuffer(key) ? key : enc(keyEncoding, key)])\n    },\n    decode (key) {\n      const sliced = key.slice(prefix.length, key.length)\n      return keyEncoding ? keyEncoding.decode(sliced) : sliced\n    }\n  }\n}\n\nfunction copyEntry (entry) {\n  let key = entry.key\n  let value = entry.value\n  let index = entry.index\n\n  // key, value and index all refer to the same buffer (one hypercore block)\n  // If together they are larger than half the buffer's byteLength,\n  // this means that they got their own private slab (see Buffer.allocUnsafe docs)\n  // so no need to unslab\n  const size = key.byteLength + (value === null ? 0 : value.byteLength) + (index === null ? 0 : index.byteLength)\n  if (2 * size < key.buffer.byteLength) {\n    const [newKey, newValue, newIndex] = unslabAll([entry.key, entry.value, entry.index])\n    key = newKey\n    value = newValue\n    index = newIndex\n  }\n\n  return {\n    key,\n    value,\n    index,\n    inflated: null\n  }\n}\n\nfunction defaultDiffer (currentSnap, previousSnap, opts) {\n  return currentSnap.createDiffStream(previousSnap, opts)\n}\n\nfunction getBackingCore (core) {\n  if (core.core) return core\n  if (core.getBackingCore) return core.getBackingCore().session\n  return null\n}\n\nfunction sameValue (a, b) {\n  return a === b || (a !== null && b !== null && b4a.equals(a, b))\n}\n\nfunction noop () {}\n\nmodule.exports = Hyperbee\nconst b4a = require('b4a')\n\nclass SubTree {\n  constructor (node, parent) {\n    this.node = node\n    this.parent = parent\n\n    this.isKey = node.children.length === 0\n    this.i = this.isKey ? 1 : 0\n    this.n = 0\n\n    const child = this.isKey ? null : this.node.children[0]\n    this.seq = child !== null ? child.seq : this.node.keys[0].seq\n    this.offset = child !== null ? child.offset : 0\n  }\n\n  next () {\n    this.i++\n    this.isKey = (this.i & 1) === 1\n    if (!this.isKey && !this.node.children.length) this.i++\n    return this.update()\n  }\n\n  async bisect (key, incl) {\n    let s = 0\n    let e = this.node.keys.length\n    let c\n\n    while (s < e) {\n      const mid = (s + e) >> 1\n      c = cmp(key, await this.node.getKey(mid))\n\n      if (c === 0) {\n        if (incl) this.i = mid * 2 + 1\n        else this.i = mid * 2 + (this.node.children.length ? 2 : 3)\n        return true\n      }\n\n      if (c < 0) e = mid\n      else s = mid + 1\n    }\n\n    const i = c < 0 ? e : s\n    this.i = 2 * i + (this.node.children.length ? 0 : 1)\n    return this.node.children.length === 0\n  }\n\n  update () {\n    this.isKey = (this.i & 1) === 1\n    this.n = this.i >> 1\n    if (this.n >= (this.isKey ? this.node.keys.length : this.node.children.length)) return false\n    const child = this.isKey ? null : this.node.children[this.n]\n    this.seq = child !== null ? child.seq : this.node.keys[this.n].seq\n    this.offset = child !== null ? child.offset : 0\n    return true\n  }\n\n  async key () {\n    return this.n < this.node.keys.length ? this.node.getKey(this.n) : (this.parent && this.parent.key())\n  }\n\n  async compare (tree) {\n    const [a, b] = await Promise.all([this.key(), tree.key()])\n    return cmp(a, b)\n  }\n}\n\nclass TreeIterator {\n  constructor (batch, opts) {\n    this.batch = batch\n    this.stack = []\n    this.lt = opts.lt || opts.lte || null\n    this.lte = !!opts.lte\n    this.gt = opts.gt || opts.gte || null\n    this.gte = !!opts.gte\n    this.seeking = !!this.gt\n    this.encoding = opts.encoding || batch.encoding\n  }\n\n  async open () {\n    const node = await this.batch.getRoot(false)\n    if (!node || !node.keys.length) return\n    const tree = new SubTree(node, null)\n    if (this.seeking && !(await this._seek(tree))) return\n    this.stack.push(tree)\n  }\n\n  async _seek (tree) {\n    const done = await tree.bisect(this.gt, this.gte)\n    const oob = !tree.update()\n    if (done || oob) {\n      this.seeking = false\n      if (oob) return false\n    }\n    return true\n  }\n\n  peek () {\n    if (!this.stack.length) return null\n    return this.stack[this.stack.length - 1]\n  }\n\n  skip () {\n    if (!this.stack.length) return\n    if (!this.stack[this.stack.length - 1].next()) this.stack.pop()\n  }\n\n  async nextKey () {\n    let n = null\n    while (this.stack.length && n === null) n = await this.next()\n    if (n === null) return null\n    if (!this.lt) return n.final(this.encoding)\n\n    const c = cmp(n.key, this.lt)\n    if (this.lte ? c <= 0 : c < 0) return n.final(this.encoding)\n    this.stack = []\n    return null\n  }\n\n  async next () {\n    if (!this.stack.length) return null\n\n    const top = this.stack[this.stack.length - 1]\n    const { isKey, n, seq } = top\n\n    if (!top.next()) {\n      this.stack.pop()\n    }\n\n    if (isKey) {\n      this.seeking = false\n      return this.batch.getBlock(seq)\n    }\n\n    const child = await top.node.getChildNode(n)\n    top.node.children[n] = null // unlink to save memory\n    const tree = new SubTree(child, top)\n    if (this.seeking && !(await this._seek(tree))) return null\n    this.stack.push(tree)\n\n    return null\n  }\n\n  close () {\n    return this.batch._closeSnapshot()\n  }\n}\n\nmodule.exports = class DiffIterator {\n  constructor (left, right, opts = {}) {\n    this.left = new TreeIterator(left, opts)\n    this.right = new TreeIterator(right, opts)\n    this.limit = typeof opts.limit === 'number' ? opts.limit : -1\n  }\n\n  async open () {\n    await Promise.all([this.left.open(), this.right.open()])\n  }\n\n  async next () {\n    if (this.limit === 0) return null\n    const res = await this._next()\n    if (!res || (res.left === null && res.right === null)) return null\n    this.limit--\n    return res\n  }\n\n  async _next () {\n    const a = this.left\n    const b = this.right\n\n    while (true) {\n      const [l, r] = await Promise.all([a.peek(), b.peek()])\n\n      if (!l && !r) return null\n      if (!l) return { left: null, right: await b.nextKey() }\n      if (!r) return { left: await a.nextKey(), right: null }\n\n      if (l.seq === r.seq && l.isKey === r.isKey && l.offset === r.offset) {\n        a.skip()\n        b.skip()\n        continue\n      }\n\n      const c = await l.compare(r)\n\n      if (l.isKey && !r.isKey) {\n        await b.next()\n        continue\n      }\n\n      if (!l.isKey && r.isKey) {\n        await a.next()\n        continue\n      }\n\n      if (l.isKey && r.isKey) {\n        if (c === 0) return { left: await a.nextKey(), right: await b.nextKey() }\n        if (c < 0) return { left: await a.nextKey(), right: null }\n        return { left: null, right: await b.nextKey() }\n      }\n\n      if (c === 0) await Promise.all([a.next(), b.next()])\n      else if (c < 0) await b.next()\n      else await a.next()\n    }\n  }\n\n  async close () {\n    await Promise.all([this.left.close(), this.right.close()])\n  }\n}\n\nfunction cmp (a, b) {\n  if (!a) return b ? 1 : 0\n  if (!b) return a ? -1 : 0\n  return b4a.compare(a, b)\n}\nmodule.exports = class HistoryIterator {\n  constructor (batch, opts = {}) {\n    this.batch = batch\n    this.options = opts\n    this.live = !!opts.live\n    this.gte = 0\n    this.lt = 0\n    this.reverse = !!opts.reverse\n    this.limit = typeof opts.limit === 'number' ? opts.limit : -1\n    this.encoding = opts.encoding || batch.encoding\n    if (this.live && this.reverse) {\n      throw new Error('Cannot have both live and reverse enabled')\n    }\n  }\n\n  async open () {\n    await this.batch.getRoot(false) // does the update dance\n    this.gte = gte(this.options, this.batch.version)\n    this.lt = this.live ? Infinity : lt(this.options, this.batch.version)\n  }\n\n  async next () {\n    if (this.limit === 0) return null\n    if (this.limit > 0) this.limit--\n\n    if (this.gte >= this.lt) return null\n\n    if (this.reverse) {\n      if (this.lt <= 1) return null\n      return final(await this.batch.getBlock(--this.lt), this.encoding)\n    }\n\n    return final(await this.batch.getBlock(this.gte++), this.encoding)\n  }\n\n  close () {\n    return this.batch._closeSnapshot()\n  }\n}\n\nfunction final (node, encoding) {\n  const type = node.isDeletion() ? 'del' : 'put'\n  return { type, ...node.final(encoding) }\n}\n\nfunction gte (opts, version) {\n  if (opts.gt) return (opts.gt < 0 ? (opts.gt + version) : opts.gt) + 1\n  const gte = opts.gte || opts.since || 1\n  return gte < 0 ? gte + version : gte\n}\n\nfunction lt (opts, version) {\n  if (opts.lte === 0 || opts.lt === 0 || opts.end === 0) return 0\n  if (opts.lte) return (opts.lte < 0 ? (opts.lte + version) : opts.lte) + 1\n  const lt = opts.lt || opts.end || version\n  return lt < 0 ? lt + version : lt\n}\nconst b4a = require('b4a')\n\nmodule.exports = class RangeIterator {\n  constructor (batch, encoding, opts = {}) {\n    this.batch = batch\n    this.stack = []\n    this.opened = false\n    this.encoding = encoding || batch.encoding\n\n    this._limit = typeof opts.limit === 'number' ? opts.limit : -1\n    this._gIncl = !opts.gt\n    this._gKey = opts.gt || opts.gte || null\n    this._lIncl = !opts.lt\n    this._lKey = opts.lt || opts.lte || null\n    this._reverse = !!opts.reverse\n    this._version = 0\n    this._checkpoint = (opts.checkpoint && opts.checkpoint.length) ? opts.checkpoint : null\n    this._nexting = false\n  }\n\n  snapshot (version = this.batch.version) {\n    const checkpoint = []\n    for (const s of this.stack) {\n      let { node, i } = s\n      if (this._nexting && s === this.stack[this.stack.length - 1]) i = this._reverse ? i + 1 : i - 1\n      if (!node.block) continue\n      if (i < 0) continue\n      checkpoint.push(node.block.seq, node.offset, i)\n    }\n\n    return {\n      version,\n      gte: this._gIncl ? this._gKey : null,\n      gt: this._gIncl ? null : this._gKey,\n      lte: this._lIncl ? this._lKey : null,\n      lt: this._lIncl ? null : this._lKey,\n      limit: this._limit,\n      reverse: this._reverse,\n      ended: this.opened && !checkpoint.length,\n      checkpoint: this.opened ? checkpoint : []\n    }\n  }\n\n  async open () {\n    await this._open()\n    this.opened = true\n  }\n\n  async _open () {\n    if (this._checkpoint) {\n      for (let j = 0; j < this._checkpoint.length; j += 3) {\n        const seq = this._checkpoint[j]\n        const offset = this._checkpoint[j + 1]\n        const i = this._checkpoint[j + 2]\n        this.stack.push({\n          node: (await this.batch.getBlock(seq)).getTreeNode(offset),\n          i\n        })\n      }\n      return\n    }\n\n    this._nexting = true\n\n    let node = await this.batch.getRoot(false)\n    if (!node) {\n      this._nexting = false\n      return\n    }\n\n    const incl = this._reverse ? this._lIncl : this._gIncl\n    const start = this._reverse ? this._lKey : this._gKey\n\n    if (!start) {\n      this.stack.push({ node, i: this._reverse ? node.keys.length << 1 : 0 })\n      this._nexting = false\n      return\n    }\n\n    while (true) {\n      const entry = { node, i: this._reverse ? node.keys.length << 1 : 0 }\n\n      let s = 0\n      let e = node.keys.length\n      let c\n\n      while (s < e) {\n        const mid = (s + e) >> 1\n        c = b4a.compare(start, await node.getKey(mid))\n\n        if (c === 0) {\n          if (incl) entry.i = mid * 2 + 1\n          else entry.i = mid * 2 + (this._reverse ? 0 : 2)\n          this.stack.push(entry)\n          this._nexting = false\n          return\n        }\n\n        if (c < 0) e = mid\n        else s = mid + 1\n      }\n\n      const i = c < 0 ? e : s\n      entry.i = 2 * i + (this._reverse ? -1 : 1)\n\n      if (entry.i >= 0 && entry.i <= (node.keys.length << 1)) this.stack.push(entry)\n      if (!node.children.length) {\n        this._nexting = false\n        return\n      }\n\n      node = await node.getChildNode(i)\n    }\n  }\n\n  async next () {\n    // TODO: this nexting flag is only needed if someone asks for a snapshot during\n    // a lookup (ie the extension, pretty important...).\n    // A better solution would be to refactor this so top.i is incremented eagerly\n    // to get the current block instead of the way it is done now (++i vs i++)\n    this._nexting = true\n\n    const end = this._reverse ? this._gKey : this._lKey\n    const incl = this._reverse ? this._gIncl : this._lIncl\n\n    while (this.stack.length && (this._limit === -1 || this._limit > 0)) {\n      const top = this.stack[this.stack.length - 1]\n      const isKey = (top.i & 1) === 1\n      const n = this._reverse\n        ? (top.i < 0 ? top.node.keys.length : top.i-- >> 1)\n        : top.i++ >> 1\n\n      if (!isKey) {\n        if (!top.node.children.length) continue\n        const node = await top.node.getChildNode(n)\n        if (top.node.block.seq < this.batch.core.length) {\n          top.node.children[n].value = null // unlink it to save memory\n        }\n        this.stack.push({ i: this._reverse ? node.keys.length << 1 : 0, node })\n        continue\n      }\n\n      if (n >= top.node.keys.length) {\n        this.stack.pop()\n        continue\n      }\n\n      const key = top.node.keys[n]\n      const block = await this.batch.getBlock(key.seq)\n      if (end) {\n        const c = b4a.compare(block.key, end)\n        if (c === 0 ? !incl : (this._reverse ? c < 0 : c > 0)) {\n          this._limit = 0\n          break\n        }\n      }\n      if (this._limit > 0) this._limit--\n      this._nexting = false\n      return block.final(this.encoding)\n    }\n\n    this._nexting = false\n    return null\n  }\n\n  close () {\n    return this.batch._closeSnapshot()\n  }\n}\nconst { Extension } = require('./messages')\n\n// const MAX_ACTIVE = 32\nconst FLUSH_BATCH = 128\nconst MAX_PASSIVE_BATCH = 2048\nconst MAX_ACTIVE_BATCH = MAX_PASSIVE_BATCH + FLUSH_BATCH\n\nclass Batch {\n  constructor (outgoing, from) {\n    this.blocks = []\n    this.start = 0\n    this.end = 0\n    this.outgoing = outgoing\n    this.from = from\n  }\n\n  push (seq) {\n    const len = this.blocks.push(seq)\n    if (len === 1 || seq < this.start) this.start = seq\n    if (len === 1 || seq >= this.end) this.end = seq + 1\n    if (len >= FLUSH_BATCH) {\n      this.send()\n      this.clear()\n    }\n  }\n\n  send () {\n    if (!this.blocks.length) return\n    this.outgoing.send(Extension.encode({ cache: { blocks: this.blocks, start: this.start, end: this.end } }), this.from)\n  }\n\n  clear () {\n    this.start = this.end = 0\n    this.blocks = []\n  }\n}\n\nclass HyperbeeExtension {\n  constructor (db) {\n    this.encoding = null\n    this.outgoing = null\n    this.db = db\n    this.active = 0\n  }\n\n  get (version, key) {\n    this.outgoing.broadcast(Extension.encode({ get: { version, key } }))\n  }\n\n  iterator (snapshot) {\n    if (snapshot.ended) return\n    if (snapshot.limit === 0) return\n    if (snapshot.limit === -1) snapshot.limit = 0\n    this.outgoing.broadcast(Extension.encode({ iterator: snapshot }))\n  }\n\n  onmessage (buf, from) {\n    // TODO: handle max active extension messages\n    // this.active++\n\n    const message = decode(buf)\n    if (!message) return\n\n    if (message.cache) this.oncache(message.cache, from)\n    if (message.get) this.onget(message.get, from)\n    if (message.iterator) this.oniterator(message.iterator, from)\n  }\n\n  oncache (message, from) {\n    if (!message.blocks.length) return\n    this.db.core.download(message)\n  }\n\n  onget (message, from) {\n    if (!message.version || message.version > this.db.version) return\n\n    const b = new Batch(this.outgoing, from)\n    const db = this.db.checkout(message.version)\n\n    db.get(message.key, { extension: false, wait: false, update: false, onseq }).then(done, done)\n\n    function done () {\n      db.close().catch(noop)\n      b.send()\n    }\n\n    function onseq (seq) {\n      b.push(seq)\n    }\n  }\n\n  async oniterator (message, from) {\n    if (!message.version || message.version > this.db.version) return\n\n    const b = new Batch(this.outgoing, from)\n    const seqs = new Set()\n\n    let skip = message.checkpoint.length\n    let work = 0\n\n    const db = this.db.checkout(message.version)\n    const ite = db.createRangeIterator({\n      ...message,\n      wait: false,\n      extension: false,\n      update: false,\n      limit: message.limit === 0 ? -1 : message.limit,\n      onseq (seq) {\n        if (skip && skip--) return\n        if (seqs.has(seq)) return\n        work++\n        seqs.add(seq)\n        b.push(seq)\n      }\n    })\n\n    try {\n      await ite.open()\n      // eslint-disable-next-line no-unmodified-loop-condition\n      while (work < MAX_ACTIVE_BATCH) {\n        if (!(await ite.next())) break\n      }\n    } catch (_) {\n      // do nothing\n    } finally {\n      ite.close().catch(noop)\n      db.close().catch(noop)\n      b.send()\n    }\n  }\n\n  static register (db) {\n    const e = new this(db)\n    e.outgoing = db.core.registerExtension('hyperbee', e)\n    return e\n  }\n}\n\nHyperbeeExtension.BATCH_SIZE = MAX_PASSIVE_BATCH\n\nmodule.exports = HyperbeeExtension\n\nfunction decode (buf) {\n  try {\n    return Extension.decode(buf)\n  } catch (err) {\n    return null\n  }\n}\n\nfunction noop () {}\n// This file is auto generated by the protocol-buffers compiler\n\n/* eslint-disable quotes */\n/* eslint-disable indent */\n/* eslint-disable no-redeclare */\n/* eslint-disable camelcase */\n/* eslint-disable no-var */\n\n// Remember to `npm install --save protocol-buffers-encodings`\nvar encodings = require('protocol-buffers-encodings')\nvar b4a = require('b4a')\nvar varint = encodings.varint\nvar skip = encodings.skip\n\nvar YoloIndex = exports.YoloIndex = {\n  buffer: true,\n  encodingLength: null,\n  encode: null,\n  decode: null\n}\n\nvar Header = exports.Header = {\n  buffer: true,\n  encodingLength: null,\n  encode: null,\n  decode: null\n}\n\nvar Node = exports.Node = {\n  buffer: true,\n  encodingLength: null,\n  encode: null,\n  decode: null\n}\n\nvar Extension = exports.Extension = {\n  buffer: true,\n  encodingLength: null,\n  encode: null,\n  decode: null\n}\n\ndefineYoloIndex()\ndefineHeader()\ndefineNode()\ndefineExtension()\n\nfunction defineYoloIndex () {\n  var Level = YoloIndex.Level = {\n    buffer: true,\n    encodingLength: null,\n    encode: null,\n    decode: null\n  }\n\n  defineLevel()\n\n  function defineLevel () {\n    Level.encodingLength = encodingLength\n    Level.encode = encode\n    Level.decode = decode\n\n    function encodingLength (obj) {\n      var length = 0\n      if (defined(obj.keys)) {\n        var packedLen = 0\n        for (var i = 0; i < obj.keys.length; i++) {\n          if (!defined(obj.keys[i])) continue\n          var len = encodings.varint.encodingLength(obj.keys[i])\n          packedLen += len\n        }\n        if (packedLen) {\n          length += 1 + packedLen + varint.encodingLength(packedLen)\n        }\n      }\n      if (defined(obj.children)) {\n        var packedLen = 0\n        for (var i = 0; i < obj.children.length; i++) {\n          if (!defined(obj.children[i])) continue\n          var len = encodings.varint.encodingLength(obj.children[i])\n          packedLen += len\n        }\n        if (packedLen) {\n          length += 1 + packedLen + varint.encodingLength(packedLen)\n        }\n      }\n      return length\n    }\n\n    function encode (obj, buf, offset) {\n      if (!offset) offset = 0\n      if (!buf) buf = b4a.allocUnsafe(encodingLength(obj))\n      var oldOffset = offset\n      if (defined(obj.keys)) {\n        var packedLen = 0\n        for (var i = 0; i < obj.keys.length; i++) {\n          if (!defined(obj.keys[i])) continue\n          packedLen += encodings.varint.encodingLength(obj.keys[i])\n        }\n        if (packedLen) {\n          buf[offset++] = 10\n          varint.encode(packedLen, buf, offset)\n          offset += varint.encode.bytes\n        }\n        for (var i = 0; i < obj.keys.length; i++) {\n          if (!defined(obj.keys[i])) continue\n          encodings.varint.encode(obj.keys[i], buf, offset)\n          offset += encodings.varint.encode.bytes\n        }\n      }\n      if (defined(obj.children)) {\n        var packedLen = 0\n        for (var i = 0; i < obj.children.length; i++) {\n          if (!defined(obj.children[i])) continue\n          packedLen += encodings.varint.encodingLength(obj.children[i])\n        }\n        if (packedLen) {\n          buf[offset++] = 18\n          varint.encode(packedLen, buf, offset)\n          offset += varint.encode.bytes\n        }\n        for (var i = 0; i < obj.children.length; i++) {\n          if (!defined(obj.children[i])) continue\n          encodings.varint.encode(obj.children[i], buf, offset)\n          offset += encodings.varint.encode.bytes\n        }\n      }\n      encode.bytes = offset - oldOffset\n      return buf\n    }\n\n    function decode (buf, offset, end) {\n      if (!offset) offset = 0\n      if (!end) end = buf.length\n      if (!(end <= buf.length && offset <= buf.length)) throw new Error(\"Decoded message is not valid\")\n      var oldOffset = offset\n      var obj = {\n        keys: [],\n        children: []\n      }\n      while (true) {\n        if (end <= offset) {\n          decode.bytes = offset - oldOffset\n          return obj\n        }\n        var prefix = varint.decode(buf, offset)\n        offset += varint.decode.bytes\n        var tag = prefix >> 3\n        switch (tag) {\n          case 1:\n          var packedEnd = varint.decode(buf, offset)\n          offset += varint.decode.bytes\n          packedEnd += offset\n          while (offset < packedEnd) {\n            obj.keys.push(encodings.varint.decode(buf, offset))\n            offset += encodings.varint.decode.bytes\n          }\n          break\n          case 2:\n          var packedEnd = varint.decode(buf, offset)\n          offset += varint.decode.bytes\n          packedEnd += offset\n          while (offset < packedEnd) {\n            obj.children.push(encodings.varint.decode(buf, offset))\n            offset += encodings.varint.decode.bytes\n          }\n          break\n          default:\n          offset = skip(prefix & 7, buf, offset)\n        }\n      }\n    }\n  }\n\n  YoloIndex.encodingLength = encodingLength\n  YoloIndex.encode = encode\n  YoloIndex.decode = decode\n\n  function encodingLength (obj) {\n    var length = 0\n    if (defined(obj.levels)) {\n      for (var i = 0; i < obj.levels.length; i++) {\n        if (!defined(obj.levels[i])) continue\n        var len = Level.encodingLength(obj.levels[i])\n        length += varint.encodingLength(len)\n        length += 1 + len\n      }\n    }\n    return length\n  }\n\n  function encode (obj, buf, offset) {\n    if (!offset) offset = 0\n    if (!buf) buf = b4a.allocUnsafe(encodingLength(obj))\n    var oldOffset = offset\n    if (defined(obj.levels)) {\n      for (var i = 0; i < obj.levels.length; i++) {\n        if (!defined(obj.levels[i])) continue\n        buf[offset++] = 10\n        varint.encode(Level.encodingLength(obj.levels[i]), buf, offset)\n        offset += varint.encode.bytes\n        Level.encode(obj.levels[i], buf, offset)\n        offset += Level.encode.bytes\n      }\n    }\n    encode.bytes = offset - oldOffset\n    return buf\n  }\n\n  function decode (buf, offset, end) {\n    if (!offset) offset = 0\n    if (!end) end = buf.length\n    if (!(end <= buf.length && offset <= buf.length)) throw new Error(\"Decoded message is not valid\")\n    var oldOffset = offset\n    var obj = {\n      levels: []\n    }\n    while (true) {\n      if (end <= offset) {\n        decode.bytes = offset - oldOffset\n        return obj\n      }\n      var prefix = varint.decode(buf, offset)\n      offset += varint.decode.bytes\n      var tag = prefix >> 3\n      switch (tag) {\n        case 1:\n        var len = varint.decode(buf, offset)\n        offset += varint.decode.bytes\n        obj.levels.push(Level.decode(buf, offset, offset + len))\n        offset += Level.decode.bytes\n        break\n        default:\n        offset = skip(prefix & 7, buf, offset)\n      }\n    }\n  }\n}\n\nfunction defineHeader () {\n  var Metadata = Header.Metadata = {\n    buffer: true,\n    encodingLength: null,\n    encode: null,\n    decode: null\n  }\n\n  defineMetadata()\n\n  function defineMetadata () {\n    Metadata.encodingLength = encodingLength\n    Metadata.encode = encode\n    Metadata.decode = decode\n\n    function encodingLength (obj) {\n      var length = 0\n      if (defined(obj.contentFeed)) {\n        var len = encodings.bytes.encodingLength(obj.contentFeed)\n        length += 1 + len\n      }\n      if (defined(obj.userData)) {\n        var len = encodings.bytes.encodingLength(obj.userData)\n        length += 1 + len\n      }\n      return length\n    }\n\n    function encode (obj, buf, offset) {\n      if (!offset) offset = 0\n      if (!buf) buf = b4a.allocUnsafe(encodingLength(obj))\n      var oldOffset = offset\n      if (defined(obj.contentFeed)) {\n        buf[offset++] = 10\n        encodings.bytes.encode(obj.contentFeed, buf, offset)\n        offset += encodings.bytes.encode.bytes\n      }\n      if (defined(obj.userData)) {\n        buf[offset++] = 18\n        encodings.bytes.encode(obj.userData, buf, offset)\n        offset += encodings.bytes.encode.bytes\n      }\n      encode.bytes = offset - oldOffset\n      return buf\n    }\n\n    function decode (buf, offset, end) {\n      if (!offset) offset = 0\n      if (!end) end = buf.length\n      if (!(end <= buf.length && offset <= buf.length)) throw new Error(\"Decoded message is not valid\")\n      var oldOffset = offset\n      var obj = {\n        contentFeed: null,\n        userData: null\n      }\n      while (true) {\n        if (end <= offset) {\n          decode.bytes = offset - oldOffset\n          return obj\n        }\n        var prefix = varint.decode(buf, offset)\n        offset += varint.decode.bytes\n        var tag = prefix >> 3\n        switch (tag) {\n          case 1:\n          obj.contentFeed = encodings.bytes.decode(buf, offset)\n          offset += encodings.bytes.decode.bytes\n          break\n          case 2:\n          obj.userData = encodings.bytes.decode(buf, offset)\n          offset += encodings.bytes.decode.bytes\n          break\n          default:\n          offset = skip(prefix & 7, buf, offset)\n        }\n      }\n    }\n  }\n\n  Header.encodingLength = encodingLength\n  Header.encode = encode\n  Header.decode = decode\n\n  function encodingLength (obj) {\n    var length = 0\n    if (!defined(obj.protocol)) throw new Error(\"protocol is required\")\n    var len = encodings.string.encodingLength(obj.protocol)\n    length += 1 + len\n    if (defined(obj.metadata)) {\n      var len = Metadata.encodingLength(obj.metadata)\n      length += varint.encodingLength(len)\n      length += 1 + len\n    }\n    return length\n  }\n\n  function encode (obj, buf, offset) {\n    if (!offset) offset = 0\n    if (!buf) buf = b4a.allocUnsafe(encodingLength(obj))\n    var oldOffset = offset\n    if (!defined(obj.protocol)) throw new Error(\"protocol is required\")\n    buf[offset++] = 10\n    encodings.string.encode(obj.protocol, buf, offset)\n    offset += encodings.string.encode.bytes\n    if (defined(obj.metadata)) {\n      buf[offset++] = 18\n      varint.encode(Metadata.encodingLength(obj.metadata), buf, offset)\n      offset += varint.encode.bytes\n      Metadata.encode(obj.metadata, buf, offset)\n      offset += Metadata.encode.bytes\n    }\n    encode.bytes = offset - oldOffset\n    return buf\n  }\n\n  function decode (buf, offset, end) {\n    if (!offset) offset = 0\n    if (!end) end = buf.length\n    if (!(end <= buf.length && offset <= buf.length)) throw new Error(\"Decoded message is not valid\")\n    var oldOffset = offset\n    var obj = {\n      protocol: \"\",\n      metadata: null\n    }\n    var found0 = false\n    while (true) {\n      if (end <= offset) {\n        if (!found0) throw new Error(\"Decoded message is not valid\")\n        decode.bytes = offset - oldOffset\n        return obj\n      }\n      var prefix = varint.decode(buf, offset)\n      offset += varint.decode.bytes\n      var tag = prefix >> 3\n      switch (tag) {\n        case 1:\n        obj.protocol = encodings.string.decode(buf, offset)\n        offset += encodings.string.decode.bytes\n        found0 = true\n        break\n        case 2:\n        var len = varint.decode(buf, offset)\n        offset += varint.decode.bytes\n        obj.metadata = Metadata.decode(buf, offset, offset + len)\n        offset += Metadata.decode.bytes\n        break\n        default:\n        offset = skip(prefix & 7, buf, offset)\n      }\n    }\n  }\n}\n\nfunction defineNode () {\n  Node.encodingLength = encodingLength\n  Node.encode = encode\n  Node.decode = decode\n\n  function encodingLength (obj) {\n    var length = 0\n    if (!defined(obj.index)) throw new Error(\"index is required\")\n    var len = encodings.bytes.encodingLength(obj.index)\n    length += 1 + len\n    if (!defined(obj.key)) throw new Error(\"key is required\")\n    var len = encodings.bytes.encodingLength(obj.key)\n    length += 1 + len\n    if (defined(obj.value)) {\n      var len = encodings.bytes.encodingLength(obj.value)\n      length += 1 + len\n    }\n    return length\n  }\n\n  function encode (obj, buf, offset) {\n    if (!offset) offset = 0\n    if (!buf) buf = b4a.allocUnsafe(encodingLength(obj))\n    var oldOffset = offset\n    if (!defined(obj.index)) throw new Error(\"index is required\")\n    buf[offset++] = 10\n    encodings.bytes.encode(obj.index, buf, offset)\n    offset += encodings.bytes.encode.bytes\n    if (!defined(obj.key)) throw new Error(\"key is required\")\n    buf[offset++] = 18\n    encodings.bytes.encode(obj.key, buf, offset)\n    offset += encodings.bytes.encode.bytes\n    if (defined(obj.value)) {\n      buf[offset++] = 26\n      encodings.bytes.encode(obj.value, buf, offset)\n      offset += encodings.bytes.encode.bytes\n    }\n    encode.bytes = offset - oldOffset\n    return buf\n  }\n\n  function decode (buf, offset, end) {\n    if (!offset) offset = 0\n    if (!end) end = buf.length\n    if (!(end <= buf.length && offset <= buf.length)) throw new Error(\"Decoded message is not valid\")\n    var oldOffset = offset\n    var obj = {\n      index: null,\n      key: null,\n      value: null\n    }\n    var found0 = false\n    var found1 = false\n    while (true) {\n      if (end <= offset) {\n        if (!found0 || !found1) throw new Error(\"Decoded message is not valid\")\n        decode.bytes = offset - oldOffset\n        return obj\n      }\n      var prefix = varint.decode(buf, offset)\n      offset += varint.decode.bytes\n      var tag = prefix >> 3\n      switch (tag) {\n        case 1:\n        obj.index = encodings.bytes.decode(buf, offset)\n        offset += encodings.bytes.decode.bytes\n        found0 = true\n        break\n        case 2:\n        obj.key = encodings.bytes.decode(buf, offset)\n        offset += encodings.bytes.decode.bytes\n        found1 = true\n        break\n        case 3:\n        obj.value = encodings.bytes.decode(buf, offset)\n        offset += encodings.bytes.decode.bytes\n        break\n        default:\n        offset = skip(prefix & 7, buf, offset)\n      }\n    }\n  }\n}\n\nfunction defineExtension () {\n  var Get = Extension.Get = {\n    buffer: true,\n    encodingLength: null,\n    encode: null,\n    decode: null\n  }\n\n  var Iterator = Extension.Iterator = {\n    buffer: true,\n    encodingLength: null,\n    encode: null,\n    decode: null\n  }\n\n  var Cache = Extension.Cache = {\n    buffer: true,\n    encodingLength: null,\n    encode: null,\n    decode: null\n  }\n\n  defineGet()\n  defineIterator()\n  defineCache()\n\n  function defineGet () {\n    Get.encodingLength = encodingLength\n    Get.encode = encode\n    Get.decode = decode\n\n    function encodingLength (obj) {\n      var length = 0\n      if (defined(obj.version)) {\n        var len = encodings.varint.encodingLength(obj.version)\n        length += 1 + len\n      }\n      if (defined(obj.key)) {\n        var len = encodings.bytes.encodingLength(obj.key)\n        length += 1 + len\n      }\n      return length\n    }\n\n    function encode (obj, buf, offset) {\n      if (!offset) offset = 0\n      if (!buf) buf = b4a.allocUnsafe(encodingLength(obj))\n      var oldOffset = offset\n      if (defined(obj.version)) {\n        buf[offset++] = 8\n        encodings.varint.encode(obj.version, buf, offset)\n        offset += encodings.varint.encode.bytes\n      }\n      if (defined(obj.key)) {\n        buf[offset++] = 18\n        encodings.bytes.encode(obj.key, buf, offset)\n        offset += encodings.bytes.encode.bytes\n      }\n      encode.bytes = offset - oldOffset\n      return buf\n    }\n\n    function decode (buf, offset, end) {\n      if (!offset) offset = 0\n      if (!end) end = buf.length\n      if (!(end <= buf.length && offset <= buf.length)) throw new Error(\"Decoded message is not valid\")\n      var oldOffset = offset\n      var obj = {\n        version: 0,\n        key: null\n      }\n      while (true) {\n        if (end <= offset) {\n          decode.bytes = offset - oldOffset\n          return obj\n        }\n        var prefix = varint.decode(buf, offset)\n        offset += varint.decode.bytes\n        var tag = prefix >> 3\n        switch (tag) {\n          case 1:\n          obj.version = encodings.varint.decode(buf, offset)\n          offset += encodings.varint.decode.bytes\n          break\n          case 2:\n          obj.key = encodings.bytes.decode(buf, offset)\n          offset += encodings.bytes.decode.bytes\n          break\n          default:\n          offset = skip(prefix & 7, buf, offset)\n        }\n      }\n    }\n  }\n\n  function defineIterator () {\n    Iterator.encodingLength = encodingLength\n    Iterator.encode = encode\n    Iterator.decode = decode\n\n    function encodingLength (obj) {\n      var length = 0\n      if (defined(obj.version)) {\n        var len = encodings.varint.encodingLength(obj.version)\n        length += 1 + len\n      }\n      if (defined(obj.gte)) {\n        var len = encodings.bytes.encodingLength(obj.gte)\n        length += 1 + len\n      }\n      if (defined(obj.gt)) {\n        var len = encodings.bytes.encodingLength(obj.gt)\n        length += 1 + len\n      }\n      if (defined(obj.lte)) {\n        var len = encodings.bytes.encodingLength(obj.lte)\n        length += 1 + len\n      }\n      if (defined(obj.lt)) {\n        var len = encodings.bytes.encodingLength(obj.lt)\n        length += 1 + len\n      }\n      if (defined(obj.limit)) {\n        var len = encodings.varint.encodingLength(obj.limit)\n        length += 1 + len\n      }\n      if (defined(obj.reverse)) {\n        var len = encodings.bool.encodingLength(obj.reverse)\n        length += 1 + len\n      }\n      if (defined(obj.checkpoint)) {\n        var packedLen = 0\n        for (var i = 0; i < obj.checkpoint.length; i++) {\n          if (!defined(obj.checkpoint[i])) continue\n          var len = encodings.varint.encodingLength(obj.checkpoint[i])\n          packedLen += len\n        }\n        if (packedLen) {\n          length += 1 + packedLen + varint.encodingLength(packedLen)\n        }\n      }\n      return length\n    }\n\n    function encode (obj, buf, offset) {\n      if (!offset) offset = 0\n      if (!buf) buf = b4a.allocUnsafe(encodingLength(obj))\n      var oldOffset = offset\n      if (defined(obj.version)) {\n        buf[offset++] = 8\n        encodings.varint.encode(obj.version, buf, offset)\n        offset += encodings.varint.encode.bytes\n      }\n      if (defined(obj.gte)) {\n        buf[offset++] = 18\n        encodings.bytes.encode(obj.gte, buf, offset)\n        offset += encodings.bytes.encode.bytes\n      }\n      if (defined(obj.gt)) {\n        buf[offset++] = 26\n        encodings.bytes.encode(obj.gt, buf, offset)\n        offset += encodings.bytes.encode.bytes\n      }\n      if (defined(obj.lte)) {\n        buf[offset++] = 34\n        encodings.bytes.encode(obj.lte, buf, offset)\n        offset += encodings.bytes.encode.bytes\n      }\n      if (defined(obj.lt)) {\n        buf[offset++] = 42\n        encodings.bytes.encode(obj.lt, buf, offset)\n        offset += encodings.bytes.encode.bytes\n      }\n      if (defined(obj.limit)) {\n        buf[offset++] = 48\n        encodings.varint.encode(obj.limit, buf, offset)\n        offset += encodings.varint.encode.bytes\n      }\n      if (defined(obj.reverse)) {\n        buf[offset++] = 56\n        encodings.bool.encode(obj.reverse, buf, offset)\n        offset += encodings.bool.encode.bytes\n      }\n      if (defined(obj.checkpoint)) {\n        var packedLen = 0\n        for (var i = 0; i < obj.checkpoint.length; i++) {\n          if (!defined(obj.checkpoint[i])) continue\n          packedLen += encodings.varint.encodingLength(obj.checkpoint[i])\n        }\n        if (packedLen) {\n          buf[offset++] = 66\n          varint.encode(packedLen, buf, offset)\n          offset += varint.encode.bytes\n        }\n        for (var i = 0; i < obj.checkpoint.length; i++) {\n          if (!defined(obj.checkpoint[i])) continue\n          encodings.varint.encode(obj.checkpoint[i], buf, offset)\n          offset += encodings.varint.encode.bytes\n        }\n      }\n      encode.bytes = offset - oldOffset\n      return buf\n    }\n\n    function decode (buf, offset, end) {\n      if (!offset) offset = 0\n      if (!end) end = buf.length\n      if (!(end <= buf.length && offset <= buf.length)) throw new Error(\"Decoded message is not valid\")\n      var oldOffset = offset\n      var obj = {\n        version: 0,\n        gte: null,\n        gt: null,\n        lte: null,\n        lt: null,\n        limit: 0,\n        reverse: false,\n        checkpoint: []\n      }\n      while (true) {\n        if (end <= offset) {\n          decode.bytes = offset - oldOffset\n          return obj\n        }\n        var prefix = varint.decode(buf, offset)\n        offset += varint.decode.bytes\n        var tag = prefix >> 3\n        switch (tag) {\n          case 1:\n          obj.version = encodings.varint.decode(buf, offset)\n          offset += encodings.varint.decode.bytes\n          break\n          case 2:\n          obj.gte = encodings.bytes.decode(buf, offset)\n          offset += encodings.bytes.decode.bytes\n          break\n          case 3:\n          obj.gt = encodings.bytes.decode(buf, offset)\n          offset += encodings.bytes.decode.bytes\n          break\n          case 4:\n          obj.lte = encodings.bytes.decode(buf, offset)\n          offset += encodings.bytes.decode.bytes\n          break\n          case 5:\n          obj.lt = encodings.bytes.decode(buf, offset)\n          offset += encodings.bytes.decode.bytes\n          break\n          case 6:\n          obj.limit = encodings.varint.decode(buf, offset)\n          offset += encodings.varint.decode.bytes\n          break\n          case 7:\n          obj.reverse = encodings.bool.decode(buf, offset)\n          offset += encodings.bool.decode.bytes\n          break\n          case 8:\n          var packedEnd = varint.decode(buf, offset)\n          offset += varint.decode.bytes\n          packedEnd += offset\n          while (offset < packedEnd) {\n            obj.checkpoint.push(encodings.varint.decode(buf, offset))\n            offset += encodings.varint.decode.bytes\n          }\n          break\n          default:\n          offset = skip(prefix & 7, buf, offset)\n        }\n      }\n    }\n  }\n\n  function defineCache () {\n    Cache.encodingLength = encodingLength\n    Cache.encode = encode\n    Cache.decode = decode\n\n    function encodingLength (obj) {\n      var length = 0\n      if (!defined(obj.start)) throw new Error(\"start is required\")\n      var len = encodings.varint.encodingLength(obj.start)\n      length += 1 + len\n      if (!defined(obj.end)) throw new Error(\"end is required\")\n      var len = encodings.varint.encodingLength(obj.end)\n      length += 1 + len\n      if (defined(obj.blocks)) {\n        var packedLen = 0\n        for (var i = 0; i < obj.blocks.length; i++) {\n          if (!defined(obj.blocks[i])) continue\n          var len = encodings.varint.encodingLength(obj.blocks[i])\n          packedLen += len\n        }\n        if (packedLen) {\n          length += 1 + packedLen + varint.encodingLength(packedLen)\n        }\n      }\n      return length\n    }\n\n    function encode (obj, buf, offset) {\n      if (!offset) offset = 0\n      if (!buf) buf = b4a.allocUnsafe(encodingLength(obj))\n      var oldOffset = offset\n      if (!defined(obj.start)) throw new Error(\"start is required\")\n      buf[offset++] = 8\n      encodings.varint.encode(obj.start, buf, offset)\n      offset += encodings.varint.encode.bytes\n      if (!defined(obj.end)) throw new Error(\"end is required\")\n      buf[offset++] = 16\n      encodings.varint.encode(obj.end, buf, offset)\n      offset += encodings.varint.encode.bytes\n      if (defined(obj.blocks)) {\n        var packedLen = 0\n        for (var i = 0; i < obj.blocks.length; i++) {\n          if (!defined(obj.blocks[i])) continue\n          packedLen += encodings.varint.encodingLength(obj.blocks[i])\n        }\n        if (packedLen) {\n          buf[offset++] = 26\n          varint.encode(packedLen, buf, offset)\n          offset += varint.encode.bytes\n        }\n        for (var i = 0; i < obj.blocks.length; i++) {\n          if (!defined(obj.blocks[i])) continue\n          encodings.varint.encode(obj.blocks[i], buf, offset)\n          offset += encodings.varint.encode.bytes\n        }\n      }\n      encode.bytes = offset - oldOffset\n      return buf\n    }\n\n    function decode (buf, offset, end) {\n      if (!offset) offset = 0\n      if (!end) end = buf.length\n      if (!(end <= buf.length && offset <= buf.length)) throw new Error(\"Decoded message is not valid\")\n      var oldOffset = offset\n      var obj = {\n        start: 0,\n        end: 0,\n        blocks: []\n      }\n      var found0 = false\n      var found1 = false\n      while (true) {\n        if (end <= offset) {\n          if (!found0 || !found1) throw new Error(\"Decoded message is not valid\")\n          decode.bytes = offset - oldOffset\n          return obj\n        }\n        var prefix = varint.decode(buf, offset)\n        offset += varint.decode.bytes\n        var tag = prefix >> 3\n        switch (tag) {\n          case 1:\n          obj.start = encodings.varint.decode(buf, offset)\n          offset += encodings.varint.decode.bytes\n          found0 = true\n          break\n          case 2:\n          obj.end = encodings.varint.decode(buf, offset)\n          offset += encodings.varint.decode.bytes\n          found1 = true\n          break\n          case 3:\n          var packedEnd = varint.decode(buf, offset)\n          offset += varint.decode.bytes\n          packedEnd += offset\n          while (offset < packedEnd) {\n            obj.blocks.push(encodings.varint.decode(buf, offset))\n            offset += encodings.varint.decode.bytes\n          }\n          break\n          default:\n          offset = skip(prefix & 7, buf, offset)\n        }\n      }\n    }\n  }\n\n  Extension.encodingLength = encodingLength\n  Extension.encode = encode\n  Extension.decode = decode\n\n  function encodingLength (obj) {\n    var length = 0\n    if (defined(obj.cache)) {\n      var len = Cache.encodingLength(obj.cache)\n      length += varint.encodingLength(len)\n      length += 1 + len\n    }\n    if (defined(obj.get)) {\n      var len = Get.encodingLength(obj.get)\n      length += varint.encodingLength(len)\n      length += 1 + len\n    }\n    if (defined(obj.iterator)) {\n      var len = Iterator.encodingLength(obj.iterator)\n      length += varint.encodingLength(len)\n      length += 1 + len\n    }\n    return length\n  }\n\n  function encode (obj, buf, offset) {\n    if (!offset) offset = 0\n    if (!buf) buf = b4a.allocUnsafe(encodingLength(obj))\n    var oldOffset = offset\n    if (defined(obj.cache)) {\n      buf[offset++] = 10\n      varint.encode(Cache.encodingLength(obj.cache), buf, offset)\n      offset += varint.encode.bytes\n      Cache.encode(obj.cache, buf, offset)\n      offset += Cache.encode.bytes\n    }\n    if (defined(obj.get)) {\n      buf[offset++] = 18\n      varint.encode(Get.encodingLength(obj.get), buf, offset)\n      offset += varint.encode.bytes\n      Get.encode(obj.get, buf, offset)\n      offset += Get.encode.bytes\n    }\n    if (defined(obj.iterator)) {\n      buf[offset++] = 26\n      varint.encode(Iterator.encodingLength(obj.iterator), buf, offset)\n      offset += varint.encode.bytes\n      Iterator.encode(obj.iterator, buf, offset)\n      offset += Iterator.encode.bytes\n    }\n    encode.bytes = offset - oldOffset\n    return buf\n  }\n\n  function decode (buf, offset, end) {\n    if (!offset) offset = 0\n    if (!end) end = buf.length\n    if (!(end <= buf.length && offset <= buf.length)) throw new Error(\"Decoded message is not valid\")\n    var oldOffset = offset\n    var obj = {\n      cache: null,\n      get: null,\n      iterator: null\n    }\n    while (true) {\n      if (end <= offset) {\n        decode.bytes = offset - oldOffset\n        return obj\n      }\n      var prefix = varint.decode(buf, offset)\n      offset += varint.decode.bytes\n      var tag = prefix >> 3\n      switch (tag) {\n        case 1:\n        var len = varint.decode(buf, offset)\n        offset += varint.decode.bytes\n        obj.cache = Cache.decode(buf, offset, offset + len)\n        offset += Cache.decode.bytes\n        break\n        case 2:\n        var len = varint.decode(buf, offset)\n        offset += varint.decode.bytes\n        obj.get = Get.decode(buf, offset, offset + len)\n        offset += Get.decode.bytes\n        break\n        case 3:\n        var len = varint.decode(buf, offset)\n        offset += varint.decode.bytes\n        obj.iterator = Iterator.decode(buf, offset, offset + len)\n        offset += Iterator.decode.bytes\n        break\n        default:\n        offset = skip(prefix & 7, buf, offset)\n      }\n    }\n  }\n}\n\nfunction defined (val) {\n  return val !== null && val !== undefined && (typeof val !== 'number' || !isNaN(val))\n}\n{\n  \"name\": \"hyperbee\",\n  \"version\": \"2.21.3\",\n  \"description\": \"An append-only B-tree running on a Hypercore.\",\n  \"main\": \"index.js\",\n  \"files\": [\n    \"index.js\",\n    \"lib/**.js\",\n    \"iterators/**.js\"\n  ],\n  \"dependencies\": {\n    \"b4a\": \"^1.6.0\",\n    \"codecs\": \"^3.0.0\",\n    \"debounceify\": \"^1.0.0\",\n    \"hypercore-errors\": \"^1.0.0\",\n    \"mutexify\": \"^1.4.0\",\n    \"protocol-buffers-encodings\": \"^1.2.0\",\n    \"rache\": \"^1.0.0\",\n    \"ready-resource\": \"^1.0.0\",\n    \"safety-catch\": \"^1.0.2\",\n    \"streamx\": \"^2.12.4\",\n    \"unslab\": \"^1.2.0\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^3.1.0\",\n    \"hypercore\": \"^10.37.10\",\n    \"protocol-buffers\": \"^4.2.0\",\n    \"random-access-memory\": \"^6.0.0\",\n    \"standard\": \"^17.0.0\",\n    \"sub-encoder\": \"^1.0.6\",\n    \"test-tmp\": \"^1.2.1\",\n    \"tree-to-string\": \"^1.1.1\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && brittle test/*.js\",\n    \"protobuf\": \"protocol-buffers schema.proto -o ./lib/messages.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/holepunchto/hyperbee.git\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/hyperbee/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/hyperbee\"\n}\nconst sodium = require('sodium-universal')\nconst c = require('compact-encoding')\nconst b4a = require('b4a')\n\n// https://en.wikipedia.org/wiki/Merkle_tree#Second_preimage_attack\nconst LEAF_TYPE = b4a.from([0])\nconst PARENT_TYPE = b4a.from([1])\nconst ROOT_TYPE = b4a.from([2])\n\nconst HYPERCORE = b4a.from('hypercore')\n\nexports.keyPair = function (seed) {\n  // key pairs might stay around for a while, so better not to use a default slab to avoid retaining it completely\n  const slab = b4a.allocUnsafeSlow(sodium.crypto_sign_PUBLICKEYBYTES + sodium.crypto_sign_SECRETKEYBYTES)\n  const publicKey = slab.subarray(0, sodium.crypto_sign_PUBLICKEYBYTES)\n  const secretKey = slab.subarray(sodium.crypto_sign_PUBLICKEYBYTES)\n\n  if (seed) sodium.crypto_sign_seed_keypair(publicKey, secretKey, seed)\n  else sodium.crypto_sign_keypair(publicKey, secretKey)\n\n  return {\n    publicKey,\n    secretKey\n  }\n}\n\nexports.validateKeyPair = function (keyPair) {\n  const pk = b4a.allocUnsafe(sodium.crypto_sign_PUBLICKEYBYTES)\n  sodium.crypto_sign_ed25519_sk_to_pk(pk, keyPair.secretKey)\n  return b4a.equals(pk, keyPair.publicKey)\n}\n\nexports.sign = function (message, secretKey) {\n  // Dedicated slab for the signature, to avoid retaining unneeded mem and for security\n  const signature = b4a.allocUnsafeSlow(sodium.crypto_sign_BYTES)\n  sodium.crypto_sign_detached(signature, message, secretKey)\n  return signature\n}\n\nexports.verify = function (message, signature, publicKey) {\n  return sodium.crypto_sign_verify_detached(signature, message, publicKey)\n}\n\nexports.encrypt = function (message, publicKey) {\n  const ciphertext = b4a.alloc(message.byteLength + sodium.crypto_box_SEALBYTES)\n  sodium.crypto_box_seal(ciphertext, message, publicKey)\n  return ciphertext\n}\n\nexports.decrypt = function (ciphertext, keyPair) {\n  if (ciphertext.byteLength < sodium.crypto_box_SEALBYTES) return null\n\n  const plaintext = b4a.alloc(ciphertext.byteLength - sodium.crypto_box_SEALBYTES)\n\n  if (!sodium.crypto_box_seal_open(plaintext, ciphertext, keyPair.publicKey, keyPair.secretKey)) {\n    return null\n  }\n\n  return plaintext\n}\n\nexports.encryptionKeyPair = function (seed) {\n  const publicKey = b4a.alloc(sodium.crypto_box_PUBLICKEYBYTES)\n  const secretKey = b4a.alloc(sodium.crypto_box_SECRETKEYBYTES)\n\n  if (seed) {\n    sodium.crypto_box_seed_keypair(publicKey, secretKey, seed)\n  } else {\n    sodium.crypto_box_keypair(publicKey, secretKey)\n  }\n\n  return {\n    publicKey,\n    secretKey\n  }\n}\n\nexports.data = function (data) {\n  const out = b4a.allocUnsafe(32)\n\n  sodium.crypto_generichash_batch(out, [\n    LEAF_TYPE,\n    c.encode(c.uint64, data.byteLength),\n    data\n  ])\n\n  return out\n}\n\nexports.parent = function (a, b) {\n  if (a.index > b.index) {\n    const tmp = a\n    a = b\n    b = tmp\n  }\n\n  const out = b4a.allocUnsafe(32)\n\n  sodium.crypto_generichash_batch(out, [\n    PARENT_TYPE,\n    c.encode(c.uint64, a.size + b.size),\n    a.hash,\n    b.hash\n  ])\n\n  return out\n}\n\nexports.tree = function (roots, out) {\n  const buffers = new Array(3 * roots.length + 1)\n  let j = 0\n\n  buffers[j++] = ROOT_TYPE\n\n  for (let i = 0; i < roots.length; i++) {\n    const r = roots[i]\n    buffers[j++] = r.hash\n    buffers[j++] = c.encode(c.uint64, r.index)\n    buffers[j++] = c.encode(c.uint64, r.size)\n  }\n\n  if (!out) out = b4a.allocUnsafe(32)\n  sodium.crypto_generichash_batch(out, buffers)\n  return out\n}\n\nexports.hash = function (data, out) {\n  if (!out) out = b4a.allocUnsafe(32)\n  if (!Array.isArray(data)) data = [data]\n\n  sodium.crypto_generichash_batch(out, data)\n\n  return out\n}\n\nexports.randomBytes = function (n) {\n  const buf = b4a.allocUnsafe(n)\n  sodium.randombytes_buf(buf)\n  return buf\n}\n\nexports.discoveryKey = function (publicKey) {\n  // Discovery keys might stay around for a while, so better not to use slab memory (for better gc)\n  const digest = b4a.allocUnsafeSlow(32)\n  sodium.crypto_generichash(digest, HYPERCORE, publicKey)\n  return digest\n}\n\nif (sodium.sodium_free) {\n  exports.free = function (secureBuf) {\n    if (secureBuf.secure) sodium.sodium_free(secureBuf)\n  }\n} else {\n  exports.free = function () {}\n}\n\nexports.namespace = function (name, count) {\n  const ids = typeof count === 'number' ? range(count) : count\n\n  // Namespaces are long-lived, so better to use a dedicated slab\n  const buf = b4a.allocUnsafeSlow(32 * ids.length)\n\n  const list = new Array(ids.length)\n\n  // ns is emhemeral, so default slab\n  const ns = b4a.allocUnsafe(33)\n  sodium.crypto_generichash(ns.subarray(0, 32), typeof name === 'string' ? b4a.from(name) : name)\n\n  for (let i = 0; i < list.length; i++) {\n    list[i] = buf.subarray(32 * i, 32 * i + 32)\n    ns[32] = ids[i]\n    sodium.crypto_generichash(list[i], ns)\n  }\n\n  return list\n}\n\nfunction range (count) {\n  const arr = new Array(count)\n  for (let i = 0; i < count; i++) arr[i] = i\n  return arr\n}\n{\n  \"name\": \"hypercore-crypto\",\n  \"version\": \"3.5.0\",\n  \"description\": \"The crypto primitives used in hypercore, extracted into a separate module\",\n  \"main\": \"index.js\",\n  \"files\": [\n    \"index.js\"\n  ],\n  \"dependencies\": {\n    \"b4a\": \"^1.6.6\",\n    \"compact-encoding\": \"^2.15.0\",\n    \"sodium-universal\": \"^4.0.1\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^3.5.0\",\n    \"standard\": \"^17.1.0\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && brittle test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mafintosh/hypercore-crypto.git\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mafintosh/hypercore-crypto/issues\"\n  },\n  \"homepage\": \"https://github.com/mafintosh/hypercore-crypto\"\n}\nmodule.exports = class HypercoreError extends Error {\n  constructor (msg, code, fn = HypercoreError) {\n    super(`${code}: ${msg}`)\n    this.code = code\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, fn)\n    }\n  }\n\n  get name () {\n    return 'HypercoreError'\n  }\n\n  static ASSERTION (msg) { // ERR_ASSERTION is picked up by safety-catch also\n    return new HypercoreError(msg, 'ERR_ASSERTION', HypercoreError.ASSERT)\n  }\n\n  static BAD_ARGUMENT (msg) {\n    return new HypercoreError(msg, 'BAD_ARGUMENT', HypercoreError.BAD_ARGUMENT)\n  }\n\n  static STORAGE_EMPTY (msg) {\n    return new HypercoreError(msg, 'STORAGE_EMPTY', HypercoreError.STORAGE_EMPTY)\n  }\n\n  static STORAGE_CONFLICT (msg) {\n    return new HypercoreError(msg, 'STORAGE_CONFLICT', HypercoreError.STORAGE_CONFLICT)\n  }\n\n  static INVALID_SIGNATURE (msg) {\n    return new HypercoreError(msg, 'INVALID_SIGNATURE', HypercoreError.INVALID_SIGNATURE)\n  }\n\n  static INVALID_CAPABILITY (msg) {\n    return new HypercoreError(msg, 'INVALID_CAPABILITY', HypercoreError.INVALID_CAPABILITY)\n  }\n\n  static INVALID_CHECKSUM (msg = 'Invalid checksum') {\n    return new HypercoreError(msg, 'INVALID_CHECKSUM', HypercoreError.INVALID_CHECKSUM)\n  }\n\n  static INVALID_OPERATION (msg) {\n    return new HypercoreError(msg, 'INVALID_OPERATION', HypercoreError.INVALID_OPERATION)\n  }\n\n  static INVALID_PROOF (msg = 'Proof not verifiable') {\n    return new HypercoreError(msg, 'INVALID_PROOF', HypercoreError.INVALID_PROOF)\n  }\n\n  static BLOCK_NOT_AVAILABLE (msg = 'Block is not available') {\n    return new HypercoreError(msg, 'BLOCK_NOT_AVAILABLE', HypercoreError.BLOCK_NOT_AVAILABLE)\n  }\n\n  static SNAPSHOT_NOT_AVAILABLE (msg = 'Snapshot is not available') {\n    return new HypercoreError(msg, 'SNAPSHOT_NOT_AVAILABLE', HypercoreError.SNAPSHOT_NOT_AVAILABLE)\n  }\n\n  static REQUEST_CANCELLED (msg = 'Request was cancelled') {\n    return new HypercoreError(msg, 'REQUEST_CANCELLED', HypercoreError.REQUEST_CANCELLED)\n  }\n\n  static REQUEST_TIMEOUT (msg = 'Request timed out') {\n    return new HypercoreError(msg, 'REQUEST_TIMEOUT', HypercoreError.REQUEST_TIMEOUT)\n  }\n\n  static SESSION_NOT_WRITABLE (msg = 'Session is not writable') {\n    return new HypercoreError(msg, 'SESSION_NOT_WRITABLE', HypercoreError.SESSION_NOT_WRITABLE)\n  }\n\n  static SESSION_CLOSED (msg = 'Session is closed') {\n    return new HypercoreError(msg, 'SESSION_CLOSED', HypercoreError.SESSION_CLOSED)\n  }\n\n  static BATCH_UNFLUSHED (msg = 'Batch not yet flushed') {\n    return new HypercoreError(msg, 'BATCH_UNFLUSHED', HypercoreError.BATCH_UNFLUSHED)\n  }\n\n  static BATCH_ALREADY_EXISTS (msg = 'Batch already exists') {\n    return new HypercoreError(msg, 'BATCH_ALREADY_EXISTS', HypercoreError.BATCH_ALREADY_EXISTS)\n  }\n\n  static BATCH_ALREADY_FLUSHED (msg = 'Batch has already been flushed') {\n    return new HypercoreError(msg, 'BATCH_ALREADY_FLUSHED', HypercoreError.BATCH_ALREADY_FLUSHED)\n  }\n\n  static OPLOG_CORRUPT (msg = 'Oplog file appears corrupt or out of date') {\n    return new HypercoreError(msg, 'OPLOG_CORRUPT', HypercoreError.OPLOG_CORRUPT)\n  }\n\n  static OPLOG_HEADER_OVERFLOW (msg = 'Oplog header exceeds page size') {\n    return new HypercoreError(msg, 'OPLOG_HEADER_OVERFLOW', HypercoreError.OPLOG_HEADER_OVERFLOW)\n  }\n\n  static INVALID_OPLOG_VERSION (msg = 'Invalid header version') {\n    return new HypercoreError(msg, 'INVALID_OPLOG_VERSION', HypercoreError.INVALID_OPLOG_VERSION)\n  }\n\n  static WRITE_FAILED (msg = 'Write to storage failed') {\n    return new HypercoreError(msg, 'WRITE_FAILED', HypercoreError.WRITE_FAILED)\n  }\n\n  static DECODING_ERROR (msg = 'Decoding error') {\n    return new HypercoreError(msg, 'DECODING_ERROR', HypercoreError.DECODING_ERROR)\n  }\n\n  static SESSION_MOVED (msg = 'Session moved') {\n    return new HypercoreError(msg, 'SESSION_MOVED', HypercoreError.SESSION_MOVED)\n  }\n}\n{\n  \"name\": \"hypercore-errors\",\n  \"version\": \"1.4.0\",\n  \"description\": \"Hypercore errors\",\n  \"main\": \"index.js\",\n  \"files\": [\n    \"index.js\"\n  ],\n  \"scripts\": {\n    \"test\": \"standard && brittle test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/holepunchto/hypercore-errors.git\"\n  },\n  \"author\": \"Holepunch\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/hypercore-errors/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/hypercore-errors#readme\",\n  \"devDependencies\": {\n    \"brittle\": \"^3.1.3\",\n    \"standard\": \"^17.0.0\"\n  }\n}\nconst z32 = require('z32')\nconst b4a = require('b4a')\n\nmodule.exports = {\n  encode,\n  decode,\n  normalize,\n  isValid\n}\n\nfunction encode (key) {\n  if (!b4a.isBuffer(key)) throw new Error('Key must be a Buffer')\n  if (key.byteLength !== 32) throw new Error('Key must be 32-bytes long')\n  return z32.encode(key)\n}\n\nfunction decode (id) {\n  if (b4a.isBuffer(id)) {\n    if (id.byteLength !== 32) throw new Error('ID must be 32-bytes long')\n    return id\n  }\n  if (typeof id === 'string') {\n    if (id.startsWith('pear://')) id = id.slice(7).split('/')[0]\n    if (id.length === 52) return z32.decode(id)\n    if (id.length === 64) {\n      const buf = b4a.from(id, 'hex')\n      if (buf.byteLength === 32) return buf\n    }\n  }\n  throw new Error('Invalid Hypercore key')\n}\n\nfunction normalize (any) {\n  return encode(decode(any))\n}\n\nfunction isValid (any) {\n  try {\n    decode(any)\n    return true\n  } catch {\n    return false\n  }\n}\n{\n  \"name\": \"hypercore-id-encoding\",\n  \"version\": \"1.3.0\",\n  \"description\": \"Convert Hypercore keys to/from z-base32 or hex\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"standard && brittle test.js\"\n  },\n  \"files\": [\n    \"index.js\"\n  ],\n  \"dependencies\": {\n    \"b4a\": \"^1.5.3\",\n    \"z32\": \"^1.0.0\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^3.1.1\",\n    \"hypercore\": \"^10.0.0\",\n    \"random-access-memory\": \"^6.0.0\",\n    \"standard\": \"^17.1.0\"\n  },\n  \"license\": \"Apache-2.0\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/holepunchto/hypercore-id-encoding.git\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/hypercore-id-encoding/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/hypercore-id-encoding#readme\"\n}\nconst { EventEmitter } = require('events')\nconst RAF = require('random-access-file')\nconst isOptions = require('is-options')\nconst hypercoreCrypto = require('hypercore-crypto')\nconst c = require('compact-encoding')\nconst b4a = require('b4a')\nconst Xache = require('xache')\nconst NoiseSecretStream = require('@hyperswarm/secret-stream')\nconst Protomux = require('protomux')\nconst z32 = require('z32')\nconst id = require('hypercore-id-encoding')\nconst safetyCatch = require('safety-catch')\nconst unslab = require('unslab')\n\nconst Replicator = require('./lib/replicator')\nconst Core = require('./lib/core')\nconst BlockEncryption = require('./lib/block-encryption')\nconst Info = require('./lib/info')\nconst Download = require('./lib/download')\nconst Batch = require('./lib/batch')\nconst { manifestHash, createManifest } = require('./lib/verifier')\nconst { ReadStream, WriteStream, ByteStream } = require('./lib/streams')\nconst {\n  ASSERTION,\n  BAD_ARGUMENT,\n  SESSION_CLOSED,\n  SESSION_NOT_WRITABLE,\n  SNAPSHOT_NOT_AVAILABLE,\n  DECODING_ERROR\n} = require('hypercore-errors')\n\nconst promises = Symbol.for('hypercore.promises')\nconst inspect = Symbol.for('nodejs.util.inspect.custom')\n\n// Hypercore actually does not have any notion of max/min block sizes\n// but we enforce 15mb to ensure smooth replication (each block is transmitted atomically)\nconst MAX_SUGGESTED_BLOCK_SIZE = 15 * 1024 * 1024\n\nmodule.exports = class Hypercore extends EventEmitter {\n  constructor (storage, key, opts) {\n    super()\n\n    if (isOptions(storage)) {\n      opts = storage\n      storage = null\n      key = opts.key || null\n    } else if (isOptions(key)) {\n      opts = key\n      key = opts.key || null\n    }\n\n    if (key && typeof key === 'string') key = id.decode(key)\n    if (!opts) opts = {}\n\n    if (!storage) storage = opts.storage\n\n    this[promises] = true\n\n    this.storage = null\n    this.crypto = opts.crypto || hypercoreCrypto\n    this.core = null\n    this.replicator = null\n    this.encryption = null\n    this.extensions = new Map()\n    this.cache = createCache(opts.cache)\n\n    this.valueEncoding = null\n    this.encodeBatch = null\n    this.activeRequests = []\n\n    this.id = null\n    this.key = key || null\n    this.keyPair = opts.keyPair || null\n    this.readable = true\n    this.writable = false\n    this.opened = false\n    this.closed = false\n    this.snapshotted = !!opts.snapshot\n    this.sparse = opts.sparse !== false\n    this.sessions = opts._sessions || [this]\n    this.autoClose = !!opts.autoClose\n    this.onwait = opts.onwait || null\n    this.wait = opts.wait !== false\n    this.timeout = opts.timeout || 0\n    this.closing = null\n    this.opening = null\n\n    this._readonly = opts.writable === false\n    this._preappend = preappend.bind(this)\n    this._snapshot = null\n    this._findingPeers = 0\n    this._active = opts.active !== false\n\n    this.opening = this._openSession(key, storage, opts)\n    this.opening.catch(safetyCatch)\n  }\n\n  [inspect] (depth, opts) {\n    let indent = ''\n    if (typeof opts.indentationLvl === 'number') {\n      while (indent.length < opts.indentationLvl) indent += ' '\n    }\n\n    let peers = ''\n    const min = Math.min(this.peers.length, 5)\n\n    for (let i = 0; i < min; i++) {\n      const peer = this.peers[i]\n\n      peers += indent + '    Peer(\\n'\n      peers += indent + '      remotePublicKey: ' + opts.stylize(toHex(peer.remotePublicKey), 'string') + '\\n'\n      peers += indent + '      remoteLength: ' + opts.stylize(peer.remoteLength, 'number') + '\\n'\n      peers += indent + '      remoteFork: ' + opts.stylize(peer.remoteFork, 'number') + '\\n'\n      peers += indent + '      remoteCanUpgrade: ' + opts.stylize(peer.remoteCanUpgrade, 'boolean') + '\\n'\n      peers += indent + '    )' + '\\n'\n    }\n\n    if (this.peers.length > 5) {\n      peers += indent + '  ... and ' + (this.peers.length - 5) + ' more\\n'\n    }\n\n    if (peers) peers = '[\\n' + peers + indent + '  ]'\n    else peers = '[ ' + opts.stylize(0, 'number') + ' ]'\n\n    return this.constructor.name + '(\\n' +\n      indent + '  id: ' + opts.stylize(this.id, 'string') + '\\n' +\n      indent + '  key: ' + opts.stylize(toHex(this.key), 'string') + '\\n' +\n      indent + '  discoveryKey: ' + opts.stylize(toHex(this.discoveryKey), 'string') + '\\n' +\n      indent + '  opened: ' + opts.stylize(this.opened, 'boolean') + '\\n' +\n      indent + '  closed: ' + opts.stylize(this.closed, 'boolean') + '\\n' +\n      indent + '  snapshotted: ' + opts.stylize(this.snapshotted, 'boolean') + '\\n' +\n      indent + '  sparse: ' + opts.stylize(this.sparse, 'boolean') + '\\n' +\n      indent + '  writable: ' + opts.stylize(this.writable, 'boolean') + '\\n' +\n      indent + '  length: ' + opts.stylize(this.length, 'number') + '\\n' +\n      indent + '  fork: ' + opts.stylize(this.fork, 'number') + '\\n' +\n      indent + '  sessions: [ ' + opts.stylize(this.sessions.length, 'number') + ' ]\\n' +\n      indent + '  activeRequests: [ ' + opts.stylize(this.activeRequests.length, 'number') + ' ]\\n' +\n      indent + '  peers: ' + peers + '\\n' +\n      indent + ')'\n  }\n\n  static MAX_SUGGESTED_BLOCK_SIZE = MAX_SUGGESTED_BLOCK_SIZE\n\n  static key (manifest, { compat, version, namespace } = {}) {\n    if (b4a.isBuffer(manifest)) manifest = { version, signers: [{ publicKey: manifest, namespace }] }\n    return compat ? manifest.signers[0].publicKey : manifestHash(createManifest(manifest))\n  }\n\n  static discoveryKey (key) {\n    return hypercoreCrypto.discoveryKey(key)\n  }\n\n  static getProtocolMuxer (stream) {\n    return stream.noiseStream.userData\n  }\n\n  static createProtocolStream (isInitiator, opts = {}) {\n    let outerStream = Protomux.isProtomux(isInitiator)\n      ? isInitiator.stream\n      : isStream(isInitiator)\n        ? isInitiator\n        : opts.stream\n\n    let noiseStream = null\n\n    if (outerStream) {\n      noiseStream = outerStream.noiseStream\n    } else {\n      noiseStream = new NoiseSecretStream(isInitiator, null, opts)\n      outerStream = noiseStream.rawStream\n    }\n    if (!noiseStream) throw BAD_ARGUMENT('Invalid stream')\n\n    if (!noiseStream.userData) {\n      const protocol = Protomux.from(noiseStream)\n\n      if (opts.keepAlive !== false) {\n        noiseStream.setKeepAlive(5000)\n      }\n      noiseStream.userData = protocol\n    }\n\n    if (opts.ondiscoverykey) {\n      noiseStream.userData.pair({ protocol: 'hypercore/alpha' }, opts.ondiscoverykey)\n    }\n\n    return outerStream\n  }\n\n  static defaultStorage (storage, opts = {}) {\n    if (typeof storage !== 'string') {\n      if (!isRandomAccessClass(storage)) return storage\n      const Cls = storage // just to satisfy standard...\n      return name => new Cls(name)\n    }\n\n    const directory = storage\n    const toLock = opts.unlocked ? null : (opts.lock || 'oplog')\n    const pool = opts.pool || (opts.poolSize ? RAF.createPool(opts.poolSize) : null)\n    const rmdir = !!opts.rmdir\n    const writable = opts.writable !== false\n\n    return createFile\n\n    function createFile (name) {\n      const lock = toLock === null ? false : isFile(name, toLock)\n      const sparse = isFile(name, 'data') || isFile(name, 'bitfield') || isFile(name, 'tree')\n      return new RAF(name, { directory, lock, sparse, pool: lock ? null : pool, rmdir, writable })\n    }\n\n    function isFile (name, n) {\n      return name === n || name.endsWith('/' + n)\n    }\n  }\n\n  snapshot (opts) {\n    return this.session({ ...opts, snapshot: true })\n  }\n\n  session (opts = {}) {\n    if (this.closing) {\n      // This makes the closing logic a lot easier. If this turns out to be a problem\n      // in practice, open an issue and we'll try to make a solution for it.\n      throw SESSION_CLOSED('Cannot make sessions on a closing core')\n    }\n\n    const sparse = opts.sparse === false ? false : this.sparse\n    const wait = opts.wait === false ? false : this.wait\n    const writable = opts.writable === false ? false : !this._readonly\n    const onwait = opts.onwait === undefined ? this.onwait : opts.onwait\n    const timeout = opts.timeout === undefined ? this.timeout : opts.timeout\n    const Clz = opts.class || Hypercore\n    const s = new Clz(this.storage, this.key, {\n      ...opts,\n      sparse,\n      wait,\n      onwait,\n      timeout,\n      writable,\n      _opening: this.opening,\n      _sessions: this.sessions\n    })\n\n    s._passCapabilities(this)\n\n    // Configure the cache unless explicitly disabled.\n    if (opts.cache !== false) {\n      s.cache = opts.cache === true || !opts.cache ? this.cache : opts.cache\n    }\n\n    if (this.opened) ensureEncryption(s, opts)\n    this._addSession(s)\n\n    return s\n  }\n\n  _addSession (s) {\n    this.sessions.push(s)\n    if (this.core) this.core.active++\n  }\n\n  async setEncryptionKey (encryptionKey, opts) {\n    if (!this.opened) await this.opening\n    this.encryption = encryptionKey ? new BlockEncryption(encryptionKey, this.key, { compat: this.core.compat, ...opts }) : null\n  }\n\n  setKeyPair (keyPair) {\n    this.keyPair = keyPair\n    this.writable = this._isWritable()\n  }\n\n  setActive (bool) {\n    const active = !!bool\n    if (active === this._active || this.closing) return\n    this._active = active\n    if (!this.opened) return\n    this.replicator.updateActivity(this._active ? 1 : -1)\n  }\n\n  _passCapabilities (o) {\n    if (!this.keyPair) this.keyPair = o.keyPair\n    this.crypto = o.crypto\n    this.id = o.id\n    this.key = o.key\n    this.core = o.core\n    this.replicator = o.replicator\n    this.encryption = o.encryption\n    this.writable = this._isWritable()\n    this.autoClose = o.autoClose\n\n    if (this.snapshotted && this.core && !this._snapshot) this._updateSnapshot()\n  }\n\n  async _openFromExisting (from, opts) {\n    if (!from.opened) await from.opening\n\n    // includes ourself as well, so the loop below also updates us\n    const sessions = this.sessions\n\n    for (const s of sessions) {\n      s.sessions = from.sessions\n      s._passCapabilities(from)\n      s._addSession(s)\n    }\n\n    this.storage = from.storage\n    this.replicator.findingPeers += this._findingPeers\n\n    ensureEncryption(this, opts)\n\n    // we need to manually fwd the encryption cap as the above removes it potentially\n    if (this.encryption && !from.encryption) {\n      for (const s of sessions) s.encryption = this.encryption\n    }\n  }\n\n  async _openSession (key, storage, opts) {\n    const isFirst = !opts._opening\n\n    if (!isFirst) {\n      await opts._opening\n    }\n    if (opts.preload) opts = { ...opts, ...(await this._retryPreload(opts.preload)) }\n    if (this.cache === null && opts.cache) this.cache = createCache(opts.cache)\n\n    if (isFirst) {\n      await this._openCapabilities(key, storage, opts)\n\n      // check we are the actual root and not a opts.from session\n      if (!opts.from) {\n        // Only the root session should pass capabilities to other sessions.\n        for (let i = 0; i < this.sessions.length; i++) {\n          const s = this.sessions[i]\n          if (s !== this) s._passCapabilities(this)\n        }\n      }\n    } else {\n      ensureEncryption(this, opts)\n    }\n\n    if (opts.manifest && !this.core.header.manifest) {\n      await this.core.setManifest(opts.manifest)\n    }\n\n    this.writable = this._isWritable()\n\n    if (opts.valueEncoding) {\n      this.valueEncoding = c.from(opts.valueEncoding)\n    }\n    if (opts.encodeBatch) {\n      this.encodeBatch = opts.encodeBatch\n    }\n\n    // Start continous replication if not in sparse mode.\n    if (!this.sparse) this.download({ start: 0, end: -1 })\n\n    // This is a hidden option that's only used by Corestore.\n    // It's required so that corestore can load a name from userData before 'ready' is emitted.\n    if (opts._preready) await opts._preready(this)\n\n    this.replicator.updateActivity(this._active ? 1 : 0)\n\n    this.opened = true\n    this.emit('ready')\n  }\n\n  async _retryPreload (preload) {\n    while (true) { // TODO: better long term fix is allowing lib/core.js creation from the outside...\n      const result = await preload()\n      const from = result && result.from\n      if (from) {\n        if (!from.opened) await from.ready()\n        if (from.closing) continue\n      }\n      return result\n    }\n  }\n\n  async _openCapabilities (key, storage, opts) {\n    if (opts.from) return this._openFromExisting(opts.from, opts)\n\n    const unlocked = !!opts.unlocked\n    this.storage = Hypercore.defaultStorage(opts.storage || storage, { unlocked, writable: !unlocked })\n\n    this.core = await Core.open(this.storage, {\n      compat: opts.compat,\n      force: opts.force,\n      sessions: this.sessions,\n      createIfMissing: opts.createIfMissing,\n      readonly: unlocked,\n      overwrite: opts.overwrite,\n      key,\n      keyPair: opts.keyPair,\n      crypto: this.crypto,\n      legacy: opts.legacy,\n      manifest: opts.manifest,\n      globalCache: opts.globalCache || null, // This is a temp option, not to be relied on unless you know what you are doing (no semver guarantees)\n      onupdate: this._oncoreupdate.bind(this),\n      onconflict: this._oncoreconflict.bind(this)\n    })\n\n    if (opts.userData) {\n      for (const [key, value] of Object.entries(opts.userData)) {\n        await this.core.userData(key, value)\n      }\n    }\n\n    this.key = this.core.header.key\n    this.keyPair = this.core.header.keyPair\n    this.id = z32.encode(this.key)\n\n    this.replicator = new Replicator(this.core, this.key, {\n      eagerUpgrade: true,\n      notDownloadingLinger: opts.notDownloadingLinger,\n      allowFork: opts.allowFork !== false,\n      inflightRange: opts.inflightRange,\n      onpeerupdate: this._onpeerupdate.bind(this),\n      onupload: this._onupload.bind(this),\n      oninvalid: this._oninvalid.bind(this)\n    })\n\n    this.replicator.findingPeers += this._findingPeers\n\n    if (!this.encryption && opts.encryptionKey) {\n      this.encryption = new BlockEncryption(opts.encryptionKey, this.key, { compat: this.core.compat, isBlockKey: opts.isBlockKey })\n    }\n  }\n\n  _getSnapshot () {\n    if (this.sparse) {\n      return {\n        length: this.core.tree.length,\n        byteLength: this.core.tree.byteLength,\n        fork: this.core.tree.fork,\n        compatLength: this.core.tree.length\n      }\n    }\n\n    return {\n      length: this.core.header.hints.contiguousLength,\n      byteLength: 0,\n      fork: this.core.tree.fork,\n      compatLength: this.core.header.hints.contiguousLength\n    }\n  }\n\n  _updateSnapshot () {\n    const prev = this._snapshot\n    const next = this._snapshot = this._getSnapshot()\n\n    if (!prev) return true\n    return prev.length !== next.length || prev.fork !== next.fork\n  }\n\n  _isWritable () {\n    return !this._readonly && !!(this.keyPair && this.keyPair.secretKey)\n  }\n\n  close (err) {\n    if (this.closing) return this.closing\n    this.closing = this._close(err || null)\n    return this.closing\n  }\n\n  async _close (err) {\n    if (this.opened === false) await this.opening\n\n    const i = this.sessions.indexOf(this)\n    if (i === -1) return\n\n    this.sessions.splice(i, 1)\n    this.core.active--\n    this.readable = false\n    this.writable = false\n    this.closed = true\n    this.opened = false\n\n    const gc = []\n    for (const ext of this.extensions.values()) {\n      if (ext.session === this) gc.push(ext)\n    }\n    for (const ext of gc) ext.destroy()\n\n    if (this.replicator !== null) {\n      this.replicator.findingPeers -= this._findingPeers\n      this.replicator.clearRequests(this.activeRequests, err)\n      this.replicator.updateActivity(this._active ? -1 : 0)\n    }\n\n    this._findingPeers = 0\n\n    if (this.sessions.length || this.core.active > 0) {\n      // if this is the last session and we are auto closing, trigger that first to enforce error handling\n      if (this.sessions.length === 1 && this.core.active === 1 && this.autoClose) await this.sessions[0].close(err)\n      // emit \"fake\" close as this is a session\n      this.emit('close', false)\n      return\n    }\n\n    if (this.replicator !== null) {\n      await this.replicator.destroy()\n    }\n\n    await this.core.close()\n\n    this.emit('close', true)\n  }\n\n  replicate (isInitiator, opts = {}) {\n    // Only limitation here is that ondiscoverykey doesn't work atm when passing a muxer directly,\n    // because it doesn't really make a lot of sense.\n    if (Protomux.isProtomux(isInitiator)) return this._attachToMuxer(isInitiator, opts)\n\n    // if same stream is passed twice, ignore the 2nd one before we make sessions etc\n    if (isStream(isInitiator) && this._isAttached(isInitiator)) return isInitiator\n\n    const protocolStream = Hypercore.createProtocolStream(isInitiator, opts)\n    const noiseStream = protocolStream.noiseStream\n    const protocol = noiseStream.userData\n    const useSession = !!opts.session\n\n    this._attachToMuxer(protocol, useSession)\n\n    return protocolStream\n  }\n\n  _isAttached (stream) {\n    return stream.userData && this.replicator && this.replicator.attached(stream.userData)\n  }\n\n  _attachToMuxer (mux, useSession) {\n    if (this.opened) {\n      this._attachToMuxerOpened(mux, useSession)\n    } else {\n      this.opening.then(this._attachToMuxerOpened.bind(this, mux, useSession), mux.destroy.bind(mux))\n    }\n\n    return mux\n  }\n\n  _attachToMuxerOpened (mux, useSession) {\n    // If the user wants to, we can make this replication run in a session\n    // that way the core wont close \"under them\" during replication\n    this.replicator.attachTo(mux, useSession)\n  }\n\n  get discoveryKey () {\n    return this.replicator === null ? null : this.replicator.discoveryKey\n  }\n\n  get manifest () {\n    return this.core === null ? null : this.core.header.manifest\n  }\n\n  get length () {\n    if (this._snapshot) return this._snapshot.length\n    if (this.core === null) return 0\n    if (!this.sparse) return this.contiguousLength\n    return this.core.tree.length\n  }\n\n  get signedLength () {\n    return this.length\n  }\n\n  get indexedLength () {\n    return this.length\n  }\n\n  /**\n   * Deprecated. Use `const { byteLength } = await core.info()`.\n   */\n  get byteLength () {\n    if (this._snapshot) return this._snapshot.byteLength\n    if (this.core === null) return 0\n    if (!this.sparse) return this.contiguousByteLength\n    return this.core.tree.byteLength - (this.core.tree.length * this.padding)\n  }\n\n  get contiguousLength () {\n    return this.core === null ? 0 : Math.min(this.core.tree.length, this.core.header.hints.contiguousLength)\n  }\n\n  get contiguousByteLength () {\n    return 0\n  }\n\n  get fork () {\n    return this.core === null ? 0 : this.core.tree.fork\n  }\n\n  get peers () {\n    return this.replicator === null ? [] : this.replicator.peers\n  }\n\n  get encryptionKey () {\n    return this.encryption && this.encryption.key\n  }\n\n  get padding () {\n    return this.encryption === null ? 0 : this.encryption.padding\n  }\n\n  get globalCache () {\n    return this.core && this.core.globalCache\n  }\n\n  ready () {\n    return this.opening\n  }\n\n  _onupload (index, value, from) {\n    const byteLength = value.byteLength - this.padding\n\n    for (let i = 0; i < this.sessions.length; i++) {\n      this.sessions[i].emit('upload', index, byteLength, from)\n    }\n  }\n\n  _oninvalid (err, req, res, from) {\n    for (let i = 0; i < this.sessions.length; i++) {\n      this.sessions[i].emit('verification-error', err, req, res, from)\n    }\n  }\n\n  async _oncoreconflict (proof, from) {\n    await this.replicator.onconflict(from)\n\n    for (const s of this.sessions) s.emit('conflict', proof.upgrade.length, proof.fork, proof)\n\n    const err = new Error('Two conflicting signatures exist for length ' + proof.upgrade.length)\n    await this._closeAllSessions(err)\n  }\n\n  async _closeAllSessions (err) {\n    // this.sessions modifies itself when a session closes\n    // This way we ensure we indeed iterate over all sessions\n    const sessions = [...this.sessions]\n\n    const all = []\n    for (const s of sessions) all.push(s.close(err))\n    await Promise.allSettled(all)\n  }\n\n  _oncoreupdate (status, bitfield, value, from) {\n    if (status !== 0) {\n      const truncatedNonSparse = (status & 0b1000) !== 0\n      const appendedNonSparse = (status & 0b0100) !== 0\n      const truncated = (status & 0b0010) !== 0\n      const appended = (status & 0b0001) !== 0\n\n      if (truncated) {\n        this.replicator.ontruncate(bitfield.start, bitfield.length)\n      }\n\n      if ((status & 0b10011) !== 0) {\n        this.replicator.onupgrade()\n      }\n\n      if (status & 0b10000) {\n        for (let i = 0; i < this.sessions.length; i++) {\n          const s = this.sessions[i]\n\n          if (s.encryption && s.encryption.compat !== this.core.compat) {\n            s.encryption = new BlockEncryption(s.encryption.key, this.key, { compat: this.core.compat, isBlockKey: s.encryption.isBlockKey })\n          }\n        }\n\n        for (let i = 0; i < this.sessions.length; i++) {\n          this.sessions[i].emit('manifest')\n        }\n      }\n\n      for (let i = 0; i < this.sessions.length; i++) {\n        const s = this.sessions[i]\n\n        if (truncated) {\n          if (s.cache) s.cache.clear()\n\n          // If snapshotted, make sure to update our compat so we can fail gets\n          if (s._snapshot && bitfield.start < s._snapshot.compatLength) s._snapshot.compatLength = bitfield.start\n        }\n\n        if (s.sparse ? truncated : truncatedNonSparse) {\n          s.emit('truncate', bitfield.start, this.core.tree.fork)\n        }\n\n        // For sparse sessions, immediately emit appends. If non-sparse, emit if contig length has updated\n        if (s.sparse ? appended : appendedNonSparse) {\n          s.emit('append')\n        }\n      }\n\n      const contig = this.core.header.hints.contiguousLength\n\n      // When the contig length catches up, broadcast the non-sparse length to peers\n      if (appendedNonSparse && contig === this.core.tree.length) {\n        for (const peer of this.peers) {\n          if (peer.broadcastedNonSparse) continue\n\n          peer.broadcastRange(0, contig)\n          peer.broadcastedNonSparse = true\n        }\n      }\n    }\n\n    if (bitfield) {\n      this.replicator.onhave(bitfield.start, bitfield.length, bitfield.drop)\n    }\n\n    if (value) {\n      const byteLength = value.byteLength - this.padding\n\n      for (let i = 0; i < this.sessions.length; i++) {\n        this.sessions[i].emit('download', bitfield.start, byteLength, from)\n      }\n    }\n  }\n\n  _onpeerupdate (added, peer) {\n    const name = added ? 'peer-add' : 'peer-remove'\n\n    for (let i = 0; i < this.sessions.length; i++) {\n      this.sessions[i].emit(name, peer)\n\n      if (added) {\n        for (const ext of this.sessions[i].extensions.values()) {\n          peer.extensions.set(ext.name, ext)\n        }\n      }\n    }\n  }\n\n  async setUserData (key, value, { flush = false } = {}) {\n    if (this.opened === false) await this.opening\n    return this.core.userData(key, value, flush)\n  }\n\n  async getUserData (key) {\n    if (this.opened === false) await this.opening\n    for (const { key: savedKey, value } of this.core.header.userData) {\n      if (key === savedKey) return value\n    }\n    return null\n  }\n\n  createTreeBatch () {\n    return this.core.tree.batch()\n  }\n\n  findingPeers () {\n    this._findingPeers++\n    if (this.replicator !== null && !this.closing) this.replicator.findingPeers++\n\n    let once = true\n\n    return () => {\n      if (this.closing || !once) return\n      once = false\n      this._findingPeers--\n      if (this.replicator !== null && --this.replicator.findingPeers === 0) {\n        this.replicator.updateAll()\n      }\n    }\n  }\n\n  async info (opts) {\n    if (this.opened === false) await this.opening\n\n    return Info.from(this, opts)\n  }\n\n  async update (opts) {\n    if (this.opened === false) await this.opening\n    if (this.closing !== null) return false\n\n    if (this.writable && (!opts || opts.force !== true)) {\n      if (!this.snapshotted) return false\n      return this._updateSnapshot()\n    }\n\n    const remoteWait = this._shouldWait(opts, this.replicator.findingPeers > 0)\n\n    let upgraded = false\n\n    if (await this.replicator.applyPendingReorg()) {\n      upgraded = true\n    }\n\n    if (!upgraded && remoteWait) {\n      const activeRequests = (opts && opts.activeRequests) || this.activeRequests\n      const req = this.replicator.addUpgrade(activeRequests)\n\n      upgraded = await req.promise\n    }\n\n    if (!upgraded) return false\n    if (this.snapshotted) return this._updateSnapshot()\n    return true\n  }\n\n  batch ({ checkout = -1, autoClose = true, session = true, restore = false, clear = false } = {}) {\n    return new Batch(session ? this.session() : this, checkout, autoClose, restore, clear)\n  }\n\n  async seek (bytes, opts) {\n    if (this.opened === false) await this.opening\n    if (!isValidIndex(bytes)) throw ASSERTION('seek is invalid')\n\n    const tree = (opts && opts.tree) || this.core.tree\n    const s = tree.seek(bytes, this.padding)\n\n    const offset = await s.update()\n    if (offset) return offset\n\n    if (this.closing !== null) throw SESSION_CLOSED()\n\n    if (!this._shouldWait(opts, this.wait)) return null\n\n    const activeRequests = (opts && opts.activeRequests) || this.activeRequests\n    const req = this.replicator.addSeek(activeRequests, s)\n\n    const timeout = opts && opts.timeout !== undefined ? opts.timeout : this.timeout\n    if (timeout) req.context.setTimeout(req, timeout)\n\n    return req.promise\n  }\n\n  async has (start, end = start + 1) {\n    if (this.opened === false) await this.opening\n    if (!isValidIndex(start) || !isValidIndex(end)) throw ASSERTION('has range is invalid')\n\n    if (end === start + 1) return this.core.bitfield.get(start)\n\n    const i = this.core.bitfield.firstUnset(start)\n    return i === -1 || i >= end\n  }\n\n  async get (index, opts) {\n    if (this.opened === false) await this.opening\n    if (!isValidIndex(index)) throw ASSERTION('block index is invalid')\n\n    if (this.closing !== null) throw SESSION_CLOSED()\n    if (this._snapshot !== null && index >= this._snapshot.compatLength) throw SNAPSHOT_NOT_AVAILABLE()\n\n    const encoding = (opts && opts.valueEncoding && c.from(opts.valueEncoding)) || this.valueEncoding\n\n    let req = this.cache && this.cache.get(index)\n    if (!req) req = this._get(index, opts)\n\n    let block = await req\n    if (!block) return null\n\n    if (opts && opts.raw) return block\n\n    if (this.encryption && (!opts || opts.decrypt !== false)) {\n      // Copy the block as it might be shared with other sessions.\n      block = b4a.from(block)\n\n      this.encryption.decrypt(index, block)\n    }\n\n    return this._decode(encoding, block)\n  }\n\n  async clear (start, end = start + 1, opts) {\n    if (this.opened === false) await this.opening\n    if (this.closing !== null) throw SESSION_CLOSED()\n\n    if (typeof end === 'object') {\n      opts = end\n      end = start + 1\n    }\n\n    if (!isValidIndex(start) || !isValidIndex(end)) throw ASSERTION('clear range is invalid')\n\n    const cleared = (opts && opts.diff) ? { blocks: 0 } : null\n\n    if (start >= end) return cleared\n    if (start >= this.length) return cleared\n\n    await this.core.clear(start, end, cleared)\n\n    return cleared\n  }\n\n  async purge () {\n    await this._closeAllSessions(null)\n    await this.core.purge()\n  }\n\n  async _get (index, opts) {\n    let block\n\n    if (this.core.bitfield.get(index)) {\n      const tree = (opts && opts.tree) || this.core.tree\n      block = this.core.blocks.get(index, tree)\n\n      if (this.cache) this.cache.set(index, block)\n    } else {\n      if (!this._shouldWait(opts, this.wait)) return null\n\n      if (opts && opts.onwait) opts.onwait(index, this)\n      if (this.onwait) this.onwait(index, this)\n\n      const activeRequests = (opts && opts.activeRequests) || this.activeRequests\n\n      const req = this.replicator.addBlock(activeRequests, index)\n      req.snapshot = index < this.length\n\n      const timeout = opts && opts.timeout !== undefined ? opts.timeout : this.timeout\n      if (timeout) req.context.setTimeout(req, timeout)\n\n      block = this._cacheOnResolve(index, req.promise, this.core.tree.fork)\n    }\n\n    return block\n  }\n\n  async _cacheOnResolve (index, req, fork) {\n    const resolved = await req\n\n    // Unslab only when it takes up less then half the slab\n    const block = resolved !== null && 2 * resolved.byteLength < resolved.buffer.byteLength\n      ? unslab(resolved)\n      : resolved\n\n    if (this.cache && fork === this.core.tree.fork) {\n      this.cache.set(index, Promise.resolve(block))\n    }\n\n    return block\n  }\n\n  _shouldWait (opts, defaultValue) {\n    if (opts) {\n      if (opts.wait === false) return false\n      if (opts.wait === true) return true\n    }\n    return defaultValue\n  }\n\n  createReadStream (opts) {\n    return new ReadStream(this, opts)\n  }\n\n  createWriteStream (opts) {\n    return new WriteStream(this, opts)\n  }\n\n  createByteStream (opts) {\n    return new ByteStream(this, opts)\n  }\n\n  download (range) {\n    const req = this._download(range)\n\n    // do not crash in the background...\n    req.catch(safetyCatch)\n\n    return new Download(req)\n  }\n\n  async _download (range) {\n    if (this.opened === false) await this.opening\n\n    const activeRequests = (range && range.activeRequests) || this.activeRequests\n    return this.replicator.addRange(activeRequests, range)\n  }\n\n  // TODO: get rid of this / deprecate it?\n  undownload (range) {\n    range.destroy(null)\n  }\n\n  // TODO: get rid of this / deprecate it?\n  cancel (request) {\n    // Do nothing for now\n  }\n\n  async truncate (newLength = 0, opts = {}) {\n    if (this.opened === false) await this.opening\n\n    const {\n      fork = this.core.tree.fork + 1,\n      keyPair = this.keyPair,\n      signature = null\n    } = typeof opts === 'number' ? { fork: opts } : opts\n\n    const writable = !this._readonly && !!(signature || (keyPair && keyPair.secretKey))\n    if (writable === false && (newLength > 0 || fork !== this.core.tree.fork)) throw SESSION_NOT_WRITABLE()\n\n    await this.core.truncate(newLength, fork, { keyPair, signature })\n\n    // TODO: Should propagate from an event triggered by the oplog\n    this.replicator.updateAll()\n  }\n\n  async append (blocks, opts = {}) {\n    if (this.opened === false) await this.opening\n\n    const { keyPair = this.keyPair, signature = null } = opts\n    const writable = !this._readonly && !!(signature || (keyPair && keyPair.secretKey))\n\n    if (writable === false) throw SESSION_NOT_WRITABLE()\n\n    blocks = Array.isArray(blocks) ? blocks : [blocks]\n\n    const preappend = this.encryption && this._preappend\n\n    const buffers = this.encodeBatch !== null ? this.encodeBatch(blocks) : new Array(blocks.length)\n\n    if (this.encodeBatch === null) {\n      for (let i = 0; i < blocks.length; i++) {\n        buffers[i] = this._encode(this.valueEncoding, blocks[i])\n      }\n    }\n    for (const b of buffers) {\n      if (b.byteLength > MAX_SUGGESTED_BLOCK_SIZE) {\n        throw BAD_ARGUMENT('Appended block exceeds the maximum suggested block size')\n      }\n    }\n\n    return this.core.append(buffers, { keyPair, signature, preappend })\n  }\n\n  async treeHash (length) {\n    if (length === undefined) {\n      await this.ready()\n      length = this.core.tree.length\n    }\n\n    const roots = await this.core.tree.getRoots(length)\n    return this.crypto.tree(roots)\n  }\n\n  registerExtension (name, handlers = {}) {\n    if (this.extensions.has(name)) {\n      const ext = this.extensions.get(name)\n      ext.handlers = handlers\n      ext.encoding = c.from(handlers.encoding || c.buffer)\n      ext.session = this\n      return ext\n    }\n\n    const ext = {\n      name,\n      handlers,\n      encoding: c.from(handlers.encoding || c.buffer),\n      session: this,\n      send (message, peer) {\n        const buffer = c.encode(this.encoding, message)\n        peer.extension(name, buffer)\n      },\n      broadcast (message) {\n        const buffer = c.encode(this.encoding, message)\n        for (const peer of this.session.peers) {\n          peer.extension(name, buffer)\n        }\n      },\n      destroy () {\n        for (const peer of this.session.peers) {\n          if (peer.extensions.get(name) === ext) peer.extensions.delete(name)\n        }\n        this.session.extensions.delete(name)\n      },\n      _onmessage (state, peer) {\n        const m = this.encoding.decode(state)\n        if (this.handlers.onmessage) this.handlers.onmessage(m, peer)\n      }\n    }\n\n    this.extensions.set(name, ext)\n    for (const peer of this.peers) {\n      peer.extensions.set(name, ext)\n    }\n\n    return ext\n  }\n\n  _encode (enc, val) {\n    const state = { start: this.padding, end: this.padding, buffer: null }\n\n    if (b4a.isBuffer(val)) {\n      if (state.start === 0) return val\n      state.end += val.byteLength\n    } else if (enc) {\n      enc.preencode(state, val)\n    } else {\n      val = b4a.from(val)\n      if (state.start === 0) return val\n      state.end += val.byteLength\n    }\n\n    state.buffer = b4a.allocUnsafe(state.end)\n\n    if (enc) enc.encode(state, val)\n    else state.buffer.set(val, state.start)\n\n    return state.buffer\n  }\n\n  _decode (enc, block) {\n    if (this.padding) block = block.subarray(this.padding)\n    try {\n      if (enc) return c.decode(enc, block)\n    } catch {\n      throw DECODING_ERROR()\n    }\n    return block\n  }\n}\n\nfunction isStream (s) {\n  return typeof s === 'object' && s && typeof s.pipe === 'function'\n}\n\nfunction isRandomAccessClass (fn) {\n  return !!(typeof fn === 'function' && fn.prototype && typeof fn.prototype.open === 'function')\n}\n\nfunction toHex (buf) {\n  return buf && b4a.toString(buf, 'hex')\n}\n\nfunction preappend (blocks) {\n  const offset = this.core.tree.length\n  const fork = this.core.tree.fork\n\n  for (let i = 0; i < blocks.length; i++) {\n    this.encryption.encrypt(offset + i, blocks[i], fork)\n  }\n}\n\nfunction ensureEncryption (core, opts) {\n  if (!opts.encryptionKey) return\n  // Only override the block encryption if it's either not already set or if\n  // the caller provided a different key.\n  if (core.encryption && b4a.equals(core.encryption.key, opts.encryptionKey) && core.encryption.compat === core.core.compat) return\n  core.encryption = new BlockEncryption(opts.encryptionKey, core.key, { compat: core.core ? core.core.compat : true, isBlockKey: opts.isBlockKey })\n}\n\nfunction createCache (cache) {\n  return cache === true ? new Xache({ maxSize: 65536, maxAge: 0 }) : (cache || null)\n}\n\nfunction isValidIndex (index) {\n  return index === 0 || index > 0\n}\nconst hypercoreCrypto = require('hypercore-crypto')\nconst flat = require('flat-tree')\nconst c = require('compact-encoding')\nconst b4a = require('b4a')\n\nconst empty = b4a.alloc(32)\n\n// this is optimised for speed over mem atm\n// can be tweaked in the future\n\nmodule.exports = async function auditCore (core) {\n  const corrections = {\n    tree: 0,\n    blocks: 0\n  }\n\n  const length = core.header.tree.length\n\n  const data = await readFullStorage(core.blocks.storage)\n  const tree = await readFullStorage(core.tree.storage)\n\n  const valid = new Uint8Array(Math.ceil(tree.byteLength / 40))\n  const stack = []\n\n  for (const r of core.tree.roots) {\n    valid[r.index] = 1\n    stack.push(r)\n  }\n\n  while (stack.length > 0) {\n    const node = stack.pop()\n    if ((node.index & 1) === 0) continue\n\n    const [left, right] = flat.children(node.index)\n    const leftNode = getNode(left)\n    const rightNode = getNode(right)\n\n    if (!rightNode && !leftNode) continue\n\n    stack.push(leftNode, rightNode)\n\n    if (valid[node.index]) {\n      const hash = hypercoreCrypto.parent(leftNode, rightNode)\n      if (b4a.equals(hash, node.hash) && node.size === (leftNode.size + rightNode.size)) {\n        valid[leftNode.index] = 1\n        valid[rightNode.index] = 1\n        continue\n      }\n    }\n\n    if (leftNode.size) clearNode(leftNode)\n    if (rightNode.size) clearNode(rightNode)\n  }\n\n  if (corrections.tree) {\n    core.tree.cache.clear()\n  }\n\n  let i = 0\n  let nextOffset = -1\n  while (i < length) {\n    const has = core.bitfield.get(i)\n\n    if (!has) {\n      if (i + 1 === length) break\n      i = core.bitfield.findFirst(true, i + 1)\n      if (i < 0) break\n      nextOffset = -1\n      continue\n    }\n\n    if (nextOffset === -1) {\n      try {\n        nextOffset = await core.tree.byteOffset(i * 2)\n      } catch {\n        core._setBitfield(i, false)\n        corrections.blocks++\n        i++\n        continue\n      }\n    }\n\n    const node = getNode(i * 2)\n    const blk = data.subarray(nextOffset, nextOffset + node.size)\n    const hash = hypercoreCrypto.data(blk)\n\n    nextOffset += blk.byteLength\n\n    if (!b4a.equals(hash, node.hash)) {\n      core._setBitfield(i, false)\n      corrections.blocks++\n    }\n\n    i++\n  }\n\n  return corrections\n\n  function getNode (index) {\n    if (index * 40 + 40 > tree.byteLength) return null\n    const state = { start: index * 40, end: index * 40 + 40, buffer: tree }\n    const size = c.uint64.decode(state)\n    const hash = c.fixed32.decode(state)\n    if (size === 0 && hash.equals(empty)) return null\n    return { index, size, hash }\n  }\n\n  function clearNode (node) {\n    valid[node.index] = 0\n\n    if (node.size) {\n      b4a.fill(tree, 0, node.index * 40, node.index * 40 + 40)\n      core.tree.unflushed.set(node.index, core.tree.blankNode(node.index))\n      corrections.tree++\n    }\n  }\n}\n\nfunction readFullStorage (storage) {\n  return new Promise((resolve, reject) => {\n    storage.stat((_, st) => {\n      if (!st) return resolve(b4a.alloc(0))\n      storage.read(0, st.size, (err, data) => {\n        if (err) reject(err)\n        else resolve(data)\n      })\n    })\n  })\n}\nconst { BLOCK_NOT_AVAILABLE, SESSION_CLOSED } = require('hypercore-errors')\nconst EventEmitter = require('events')\nconst c = require('compact-encoding')\nconst b4a = require('b4a')\nconst safetyCatch = require('safety-catch')\n\nmodule.exports = class HypercoreBatch extends EventEmitter {\n  constructor (session, checkoutLength, autoClose, restore, clear) {\n    super()\n\n    this.session = session\n    this.opened = false\n    this.closed = false\n    this.opening = null\n    this.closing = null\n    this.writable = true // always writable...\n    this.autoClose = autoClose\n    this.restore = restore\n    this.fork = 0\n\n    this._appends = []\n    this._appendsActual = null\n    this._checkoutLength = checkoutLength\n    this._byteLength = 0\n    this._sessionLength = 0\n    this._sessionByteLength = 0\n    this._sessionBatch = null\n    this._cachedBatch = null\n    this._flushing = null\n    this._clear = clear\n\n    this.opening = this._open()\n    this.opening.catch(safetyCatch)\n  }\n\n  get id () {\n    return this.session.id\n  }\n\n  get key () {\n    return this.session.key\n  }\n\n  get discoveryKey () {\n    return this.session.discoveryKey\n  }\n\n  get indexedLength () {\n    return Math.min(this._sessionLength, this.session.core === null ? 0 : this.session.core.tree.length)\n  }\n\n  get flushedLength () {\n    return this._sessionLength\n  }\n\n  get indexedByteLength () {\n    return this._sessionByteLength\n  }\n\n  get length () {\n    return this._sessionLength + this._appends.length\n  }\n\n  get byteLength () {\n    return this._sessionByteLength + this._byteLength\n  }\n\n  get core () {\n    return this.session.core\n  }\n\n  get manifest () {\n    return this.session.manifest\n  }\n\n  ready () {\n    return this.opening\n  }\n\n  async _open () {\n    await this.session.ready()\n\n    if (this._clear) this._checkoutLength = this.core.tree.length\n\n    if (this._checkoutLength !== -1) {\n      const batch = await this.session.core.tree.restoreBatch(this._checkoutLength)\n      batch.treeLength = this._checkoutLength\n      this._sessionLength = batch.length\n      this._sessionByteLength = batch.byteLength\n      this._sessionBatch = batch\n      if (this._clear) await this.core.clearBatch()\n    } else {\n      const last = this.restore ? this.session.core.bitfield.findFirst(false, this.session.length) : 0\n\n      if (last > this.session.length) {\n        const batch = await this.session.core.tree.restoreBatch(last)\n        this._sessionLength = batch.length\n        this._sessionByteLength = batch.byteLength - this.session.padding * batch.length\n        this._sessionBatch = batch\n      } else {\n        this._sessionLength = this.session.length\n        this._sessionByteLength = this.session.byteLength\n        this._sessionBatch = this.session.createTreeBatch()\n      }\n    }\n\n    this._appendsActual = this.session.encryption ? [] : this._appends\n    this.fork = this.session.fork\n    this.opened = true\n    this.emit('ready')\n  }\n\n  async has (index) {\n    if (this.opened === false) await this.ready()\n    if (index >= this._sessionLength) return index < this.length\n    return this.session.has(index)\n  }\n\n  async update (opts) {\n    if (this.opened === false) await this.ready()\n    await this.session.update(opts)\n  }\n\n  treeHash () {\n    return this._sessionBatch.hash()\n  }\n\n  setUserData (key, value, opts) {\n    return this.session.setUserData(key, value, opts)\n  }\n\n  getUserData (key, opts) {\n    return this.session.getUserData(key, opts)\n  }\n\n  async info (opts) {\n    const session = this.session\n    const info = await session.info(opts)\n\n    info.length = this._sessionLength\n\n    if (info.contiguousLength >= info.length) {\n      info.contiguousLength = info.length += this._appends.length\n    } else {\n      info.length += this._appends.length\n    }\n\n    info.byteLength = this._sessionByteLength + this._byteLength\n\n    return info\n  }\n\n  async seek (bytes, opts = {}) {\n    if (this.opened === false) await this.opening\n    if (this.closing) throw SESSION_CLOSED()\n\n    if (bytes < this._sessionByteLength) return await this.session.seek(bytes, { ...opts, tree: this._sessionBatch })\n\n    bytes -= this._sessionByteLength\n\n    let i = 0\n\n    for (const blk of this._appends) {\n      if (bytes < blk.byteLength) return [this._sessionLength + i, bytes]\n      i++\n      bytes -= blk.byteLength\n    }\n\n    if (bytes === 0) return [this._sessionLength + i, 0]\n\n    throw BLOCK_NOT_AVAILABLE()\n  }\n\n  async get (index, opts = {}) {\n    if (this.opened === false) await this.opening\n    if (this.closing) throw SESSION_CLOSED()\n\n    const length = this._sessionLength\n\n    if (index < length) {\n      return this.session.get(index, { ...opts, tree: this._sessionBatch })\n    }\n\n    if (opts && opts.raw) {\n      return this._appendsActual[index - length] || null\n    }\n\n    const buffer = this._appends[index - length] || null\n    if (!buffer) throw BLOCK_NOT_AVAILABLE()\n\n    const encoding = (opts && opts.valueEncoding && c.from(opts.valueEncoding)) || this.session.valueEncoding\n    if (!encoding) return buffer\n\n    return c.decode(encoding, buffer)\n  }\n\n  async _waitForFlush () {\n    // wait for any pending flush...\n    while (this._flushing) {\n      await this._flushing\n      await Promise.resolve() // yield in case a new flush is queued\n    }\n  }\n\n  async restoreBatch (length, blocks) {\n    if (this.opened === false) await this.opening\n    if (length >= this._sessionLength) return this.createTreeBatch(length, blocks)\n    return this.session.core.tree.restoreBatch(length)\n  }\n\n  _catchupBatch (clone) {\n    if (this._cachedBatch === null) this._cachedBatch = this._sessionBatch.clone()\n\n    if (this.length > this._cachedBatch.length) {\n      const offset = this._cachedBatch.length - this._sessionBatch.length\n\n      for (let i = offset; i < this._appendsActual.length; i++) {\n        this._cachedBatch.append(this._appendsActual[i])\n      }\n    }\n\n    return clone ? this._cachedBatch.clone() : this._cachedBatch\n  }\n\n  createTreeBatch (length, opts = {}) {\n    if (Array.isArray(opts)) opts = { blocks: opts }\n\n    const { blocks = [], clone = true } = opts\n    if (!length && length !== 0) length = this.length + blocks.length\n\n    const maxLength = this.length + blocks.length\n    const b = this._catchupBatch(clone || (blocks.length > 0 || length !== this.length))\n    const len = Math.min(length, this.length)\n\n    if (len < this._sessionLength || length > maxLength) return null\n    if (len < b.length) b.checkout(len, this._sessionBatch.roots)\n\n    for (let i = 0; i < length - len; i++) {\n      b.append(this._appendsActual === this._appends ? blocks[i] : this._encrypt(b.length, blocks[i]))\n    }\n\n    return b\n  }\n\n  async truncate (newLength = 0, opts = {}) {\n    if (this.opened === false) await this.opening\n    if (this.closing) throw SESSION_CLOSED()\n\n    // wait for any pending flush... (prop needs a lock)\n    await this._waitForFlush()\n\n    if (typeof opts === 'number') opts = { fork: opts }\n    const { fork = this.fork + 1, force = false } = opts\n\n    this._cachedBatch = null\n\n    const length = this._sessionLength\n    if (newLength < length) {\n      if (!force) throw new Error('Cannot truncate committed blocks')\n      this._appends.length = 0\n      this._byteLength = 0\n      await this.session.truncate(newLength, { fork, force: true, ...opts })\n      this._sessionLength = this.session.length\n      this._sessionByteLength = this.session.byteLength\n      this._sessionBatch = this.session.createTreeBatch()\n    } else {\n      for (let i = newLength - length; i < this._appends.length; i++) this._byteLength -= this._appends[i].byteLength\n      this._appends.length = newLength - length\n    }\n\n    this.fork = fork\n\n    this.emit('truncate', newLength, this.fork)\n  }\n\n  async append (blocks) {\n    const session = this.session\n\n    if (this.opened === false) await this.opening\n    if (this.closing) throw SESSION_CLOSED()\n\n    // wait for any pending flush... (prop needs a lock)\n    await this._waitForFlush()\n\n    blocks = Array.isArray(blocks) ? blocks : [blocks]\n\n    const buffers = session.encodeBatch !== null\n      ? session.encodeBatch(blocks)\n      : new Array(blocks.length)\n\n    if (session.encodeBatch === null) {\n      for (let i = 0; i < blocks.length; i++) {\n        const buffer = this._encode(session.valueEncoding, blocks[i])\n        buffers[i] = buffer\n        this._byteLength += buffer.byteLength\n      }\n    }\n    if (this._appends !== this._appendsActual) {\n      for (let i = 0; i < buffers.length; i++) {\n        this._appendsActual.push(this._encrypt(this._sessionLength + this._appendsActual.length, buffers[i]))\n      }\n    }\n\n    for (const b of buffers) this._appends.push(b)\n\n    const info = { length: this.length, byteLength: this.byteLength }\n    this.emit('append')\n\n    return info\n  }\n\n  _encode (enc, val) {\n    const state = { start: 0, end: 0, buffer: null }\n\n    if (b4a.isBuffer(val)) {\n      if (state.start === 0) return val\n      state.end += val.byteLength\n    } else if (enc) {\n      enc.preencode(state, val)\n    } else {\n      val = b4a.from(val)\n      if (state.start === 0) return val\n      state.end += val.byteLength\n    }\n\n    state.buffer = b4a.allocUnsafe(state.end)\n\n    if (enc) enc.encode(state, val)\n    else state.buffer.set(val, state.start)\n\n    return state.buffer\n  }\n\n  _encrypt (index, buffer) {\n    const block = b4a.allocUnsafe(buffer.byteLength + 8)\n    block.set(buffer, 8)\n    this.session.encryption.encrypt(index, block, this.fork)\n    return block\n  }\n\n  async flush (opts = {}) {\n    if (this.opened === false) await this.opening\n    if (this.closing) throw SESSION_CLOSED()\n\n    const { length = this.length, keyPair = this.session.keyPair, signature = null, pending = !signature && !keyPair } = opts\n\n    while (this._flushing) await this._flushing\n    this._flushing = this._flush(length, keyPair, signature, pending)\n\n    let flushed = false\n\n    try {\n      flushed = await this._flushing\n    } finally {\n      this._flushing = null\n    }\n\n    if (this.autoClose) await this.close()\n\n    return flushed\n  }\n\n  async _flush (length, keyPair, signature, pending) { // TODO: make this safe to interact with a parallel truncate...\n    if (this._sessionBatch.fork !== this.session.fork) return false // no truncs supported atm\n\n    if (this.session.replicator._upgrade) {\n      for (const req of this.session.replicator._upgrade.inflight) {\n        // yield to the remote inflight upgrade, TODO: if the remote upgrade fails, retry flushing...\n        if (req.upgrade && (req.upgrade.start + req.upgrade.length) > length) {\n          return false\n        }\n      }\n    }\n\n    const flushingLength = Math.min(length - this._sessionLength, this._appends.length)\n    if (flushingLength <= 0) {\n      if (this._sessionLength > this.core.tree.length && length > this.core.tree.length && !pending) {\n        const batch = await this.restoreBatch(length)\n        const info = await this.core.insertBatch(batch, [], { keyPair, signature, pending, treeLength: length })\n        return info !== null\n      }\n      return true\n    }\n\n    const batch = this.createTreeBatch(this._sessionLength + flushingLength)\n    if (batch === null) return false\n\n    const info = await this.core.insertBatch(batch, this._appendsActual, { keyPair, signature, pending, treeLength: this._sessionLength })\n    if (info === null) return false\n\n    const delta = info.byteLength - this._sessionByteLength\n    const newBatch = info.length !== this.session.length ? await this.session.core.tree.restoreBatch(info.length) : this.session.createTreeBatch()\n\n    this._sessionLength = info.length\n    this._sessionByteLength = info.byteLength\n    this._sessionBatch = newBatch\n\n    if (this._cachedBatch !== null) this._cachedBatch.prune(info.length)\n\n    const same = this._appends === this._appendsActual\n\n    this._appends = this._appends.slice(flushingLength)\n    this._appendsActual = same ? this._appends : this._appendsActual.slice(flushingLength)\n    this._byteLength -= delta\n\n    this.emit('flush')\n\n    return true\n  }\n\n  close () {\n    if (!this.closing) this.closing = this._close()\n    return this.closing\n  }\n\n  async _close () {\n    this._clearAppends()\n\n    await this.session.close()\n\n    this.closed = true\n    this.emit('close')\n  }\n\n  _clearAppends () {\n    this._appends = []\n    this._appendsActual = []\n    this._byteLength = 0\n    this.fork = 0\n  }\n}\nconst c = require('compact-encoding')\nconst { oplog } = require('./messages')\n\nmodule.exports = class BigHeader {\n  constructor (storage) {\n    this.storage = storage\n  }\n\n  async load (external) {\n    const buf = await new Promise((resolve, reject) => {\n      this.storage.read(external.start, external.length, (err, buf) => {\n        if (err) return reject(err)\n        resolve(buf)\n      })\n    })\n\n    const header = c.decode(oplog.header, buf)\n    header.external = external\n    return header\n  }\n\n  async flush (header) {\n    const external = header.external || { start: 0, length: 0 }\n    header.external = null\n\n    const buf = c.encode(oplog.header, header)\n\n    let start = 0\n    if (buf.byteLength > external.start) {\n      start = external.start + external.length\n      const rem = start & 4095\n      if (rem > 0) start += (4096 - rem)\n    }\n\n    header.external = { start, length: buf.byteLength }\n\n    await new Promise((resolve, reject) => {\n      this.storage.write(start, buf, (err) => {\n        if (err) return reject(err)\n        resolve()\n      })\n    })\n\n    return header\n  }\n\n  close () {\n    return new Promise((resolve, reject) => {\n      this.storage.close((err) => {\n        if (err) return reject(err)\n        resolve()\n      })\n    })\n  }\n}\nconst BigSparseArray = require('big-sparse-array')\nconst b4a = require('b4a')\nconst quickbit = require('./compat').quickbit\n\nconst BITS_PER_PAGE = 32768\nconst BYTES_PER_PAGE = BITS_PER_PAGE / 8\nconst WORDS_PER_PAGE = BYTES_PER_PAGE / 4\nconst BITS_PER_SEGMENT = 2097152\nconst BYTES_PER_SEGMENT = BITS_PER_SEGMENT / 8\nconst WORDS_PER_SEGMENT = BYTES_PER_SEGMENT / 4\nconst INITIAL_WORDS_PER_SEGMENT = 1024\nconst PAGES_PER_SEGMENT = BITS_PER_SEGMENT / BITS_PER_PAGE\nconst SEGMENT_GROWTH_FACTOR = 4\n\nclass BitfieldPage {\n  constructor (index, segment) {\n    this.dirty = false\n    this.index = index\n    this.offset = index * BYTES_PER_PAGE - segment.offset\n    this.bitfield = null\n    this.segment = segment\n\n    segment.add(this)\n  }\n\n  get tree () {\n    return this.segment.tree\n  }\n\n  get (index) {\n    return quickbit.get(this.bitfield, index)\n  }\n\n  set (index, val) {\n    if (quickbit.set(this.bitfield, index, val)) {\n      this.tree.update(this.offset * 8 + index)\n    }\n  }\n\n  setRange (start, length, val) {\n    quickbit.fill(this.bitfield, val, start, start + length)\n\n    let i = Math.floor(start / 128)\n    const n = i + Math.ceil(length / 128)\n\n    while (i <= n) this.tree.update(this.offset * 8 + i++ * 128)\n  }\n\n  findFirst (val, position) {\n    return quickbit.findFirst(this.bitfield, val, position)\n  }\n\n  findLast (val, position) {\n    return quickbit.findLast(this.bitfield, val, position)\n  }\n\n  count (start, length, val) {\n    const end = start + length\n\n    let i = start\n    let c = 0\n\n    while (length > 0) {\n      const l = this.findFirst(val, i)\n      if (l === -1 || l >= end) return c\n\n      const h = this.findFirst(!val, l + 1)\n      if (h === -1 || h >= end) return c + end - l\n\n      c += h - l\n      length -= h - i\n      i = h\n    }\n\n    return c\n  }\n}\n\nclass BitfieldSegment {\n  constructor (index, bitfield) {\n    this.index = index\n    this.offset = index * BYTES_PER_SEGMENT\n    this.tree = quickbit.Index.from(bitfield, BYTES_PER_SEGMENT)\n    this.pages = new Array(PAGES_PER_SEGMENT)\n  }\n\n  get bitfield () {\n    return this.tree.field\n  }\n\n  add (page) {\n    const i = page.index - this.index * PAGES_PER_SEGMENT\n    this.pages[i] = page\n\n    const start = i * WORDS_PER_PAGE\n    const end = start + WORDS_PER_PAGE\n\n    if (end >= this.bitfield.length) this.reallocate(end)\n\n    page.bitfield = this.bitfield.subarray(start, end)\n  }\n\n  reallocate (length) {\n    let target = this.bitfield.length\n    while (target < length) target *= SEGMENT_GROWTH_FACTOR\n\n    const bitfield = new Uint32Array(target)\n    bitfield.set(this.bitfield)\n\n    this.tree = quickbit.Index.from(bitfield, BYTES_PER_SEGMENT)\n\n    for (let i = 0; i < this.pages.length; i++) {\n      const page = this.pages[i]\n      if (!page) continue\n\n      const start = i * WORDS_PER_PAGE\n      const end = start + WORDS_PER_PAGE\n\n      page.bitfield = bitfield.subarray(start, end)\n    }\n  }\n\n  findFirst (val, position) {\n    position = this.tree.skipFirst(!val, position)\n\n    let j = position & (BITS_PER_PAGE - 1)\n    let i = (position - j) / BITS_PER_PAGE\n\n    if (i >= PAGES_PER_SEGMENT) return -1\n\n    while (i < this.pages.length) {\n      const p = this.pages[i]\n\n      let index = -1\n\n      if (p) index = p.findFirst(val, j)\n      else if (!val) index = j\n\n      if (index !== -1) return i * BITS_PER_PAGE + index\n\n      j = 0\n      i++\n    }\n\n    return -1\n  }\n\n  findLast (val, position) {\n    position = this.tree.skipLast(!val, position)\n\n    let j = position & (BITS_PER_PAGE - 1)\n    let i = (position - j) / BITS_PER_PAGE\n\n    if (i >= PAGES_PER_SEGMENT) return -1\n\n    while (i >= 0) {\n      const p = this.pages[i]\n\n      let index = -1\n\n      if (p) index = p.findLast(val, j)\n      else if (!val) index = j\n\n      if (index !== -1) return i * BITS_PER_PAGE + index\n\n      j = BITS_PER_PAGE - 1\n      i--\n    }\n\n    return -1\n  }\n}\n\nmodule.exports = class Bitfield {\n  constructor (storage, buffer) {\n    this.unflushed = []\n    this.storage = storage\n    this.resumed = !!(buffer && buffer.byteLength >= 4)\n\n    this._pages = new BigSparseArray()\n    this._segments = new BigSparseArray()\n\n    const view = this.resumed\n      ? new Uint32Array(\n        buffer.buffer,\n        buffer.byteOffset,\n        Math.floor(buffer.byteLength / 4)\n      )\n      : new Uint32Array(INITIAL_WORDS_PER_SEGMENT)\n\n    for (let i = 0; i < view.length; i += WORDS_PER_SEGMENT) {\n      let bitfield = view.subarray(i, i + (WORDS_PER_SEGMENT))\n      let length = WORDS_PER_SEGMENT\n\n      if (i === 0) {\n        length = INITIAL_WORDS_PER_SEGMENT\n        while (length < bitfield.length) length *= SEGMENT_GROWTH_FACTOR\n      }\n\n      if (bitfield.length !== length) {\n        const copy = new Uint32Array(length)\n        copy.set(bitfield, 0)\n        bitfield = copy\n      }\n\n      const segment = new BitfieldSegment(i / (WORDS_PER_SEGMENT), bitfield)\n      this._segments.set(segment.index, segment)\n\n      for (let j = 0; j < bitfield.length; j += WORDS_PER_PAGE) {\n        const page = new BitfieldPage((i + j) / WORDS_PER_PAGE, segment)\n        this._pages.set(page.index, page)\n      }\n    }\n  }\n\n  toBuffer (length) {\n    const pages = Math.ceil(length / BITS_PER_PAGE)\n    const buffer = b4a.allocUnsafe(pages * BYTES_PER_PAGE)\n\n    for (let i = 0; i < pages; i++) {\n      const page = this._pages.get(i)\n      const offset = i * BYTES_PER_PAGE\n\n      if (page) {\n        const buf = b4a.from(\n          page.bitfield.buffer,\n          page.bitfield.byteOffset,\n          page.bitfield.byteLength\n        )\n\n        buffer.set(buf, offset)\n      } else {\n        buffer.fill(0, offset, offset + BYTES_PER_PAGE)\n      }\n    }\n\n    return buffer\n  }\n\n  getBitfield (index) {\n    const j = index & (BITS_PER_PAGE - 1)\n    const i = (index - j) / BITS_PER_PAGE\n\n    const p = this._pages.get(i)\n    return p || null\n  }\n\n  get (index) {\n    const j = index & (BITS_PER_PAGE - 1)\n    const i = (index - j) / BITS_PER_PAGE\n\n    const p = this._pages.get(i)\n\n    return p ? p.get(j) : false\n  }\n\n  set (index, val) {\n    const j = index & (BITS_PER_PAGE - 1)\n    const i = (index - j) / BITS_PER_PAGE\n\n    let p = this._pages.get(i)\n\n    if (!p && val) {\n      const k = Math.floor(i / PAGES_PER_SEGMENT)\n      const s = this._segments.get(k) || this._segments.set(k, new BitfieldSegment(k, new Uint32Array(k === 0 ? INITIAL_WORDS_PER_SEGMENT : WORDS_PER_SEGMENT)))\n\n      p = this._pages.set(i, new BitfieldPage(i, s))\n    }\n\n    if (p) {\n      p.set(j, val)\n\n      if (!p.dirty) {\n        p.dirty = true\n        this.unflushed.push(p)\n      }\n    }\n  }\n\n  setRange (start, length, val) {\n    let j = start & (BITS_PER_PAGE - 1)\n    let i = (start - j) / BITS_PER_PAGE\n\n    while (length > 0) {\n      let p = this._pages.get(i)\n\n      if (!p && val) {\n        const k = Math.floor(i / PAGES_PER_SEGMENT)\n        const s = this._segments.get(k) || this._segments.set(k, new BitfieldSegment(k, new Uint32Array(k === 0 ? INITIAL_WORDS_PER_SEGMENT : WORDS_PER_SEGMENT)))\n\n        p = this._pages.set(i, new BitfieldPage(i, s))\n      }\n\n      const end = Math.min(j + length, BITS_PER_PAGE)\n      const range = end - j\n\n      if (p) {\n        p.setRange(j, range, val)\n\n        if (!p.dirty) {\n          p.dirty = true\n          this.unflushed.push(p)\n        }\n      }\n\n      j = 0\n      i++\n      length -= range\n    }\n  }\n\n  findFirst (val, position) {\n    let j = position & (BITS_PER_SEGMENT - 1)\n    let i = (position - j) / BITS_PER_SEGMENT\n\n    while (i < this._segments.maxLength) {\n      const s = this._segments.get(i)\n\n      let index = -1\n\n      if (s) index = s.findFirst(val, j)\n      else if (!val) index = j\n\n      if (index !== -1) return i * BITS_PER_SEGMENT + index\n\n      j = 0\n      i++\n    }\n\n    return val ? -1 : this._segments.maxLength * BITS_PER_SEGMENT\n  }\n\n  firstSet (position) {\n    return this.findFirst(true, position)\n  }\n\n  firstUnset (position) {\n    return this.findFirst(false, position)\n  }\n\n  findLast (val, position) {\n    let j = position & (BITS_PER_SEGMENT - 1)\n    let i = (position - j) / BITS_PER_SEGMENT\n\n    while (i >= 0) {\n      const s = this._segments.get(i)\n\n      let index = -1\n\n      if (s) index = s.findLast(val, j)\n      else if (!val) index = j\n\n      if (index !== -1) return i * BITS_PER_SEGMENT + index\n\n      j = BITS_PER_SEGMENT - 1\n      i--\n    }\n\n    return -1\n  }\n\n  lastSet (position) {\n    return this.findLast(true, position)\n  }\n\n  lastUnset (position) {\n    return this.findLast(false, position)\n  }\n\n  count (start, length, val) {\n    let j = start & (BITS_PER_PAGE - 1)\n    let i = (start - j) / BITS_PER_PAGE\n    let c = 0\n\n    while (length > 0) {\n      const p = this._pages.get(i)\n\n      const end = Math.min(j + length, BITS_PER_PAGE)\n      const range = end - j\n\n      if (p) c += p.count(j, range, val)\n      else if (!val) c += range\n\n      j = 0\n      i++\n      length -= range\n    }\n\n    return c\n  }\n\n  countSet (start, length) {\n    return this.count(start, length, true)\n  }\n\n  countUnset (start, length) {\n    return this.count(start, length, false)\n  }\n\n  * want (start, length) {\n    const j = start & (BITS_PER_SEGMENT - 1)\n    let i = (start - j) / BITS_PER_SEGMENT\n\n    while (length > 0) {\n      const s = this._segments.get(i)\n\n      if (s) {\n        // We always send at least 4 KiB worth of bitfield in a want, rounding\n        // to the nearest 4 KiB.\n        const end = ceilTo(clamp(length / 8, 4096, BYTES_PER_SEGMENT), 4096)\n\n        yield {\n          start: i * BITS_PER_SEGMENT,\n          bitfield: s.bitfield.subarray(0, end / 4)\n        }\n      }\n\n      i++\n      length -= BITS_PER_SEGMENT\n    }\n  }\n\n  clear () {\n    return new Promise((resolve, reject) => {\n      this.storage.truncate(0, (err) => {\n        if (err) return reject(err)\n        this._pages = new BigSparseArray()\n        this.unflushed = []\n        resolve()\n      })\n    })\n  }\n\n  close () {\n    return new Promise((resolve, reject) => {\n      this.storage.close((err) => {\n        if (err) reject(err)\n        else resolve()\n      })\n    })\n  }\n\n  flush () {\n    return new Promise((resolve, reject) => {\n      if (!this.unflushed.length) return resolve()\n\n      const self = this\n      let missing = this.unflushed.length\n      let error = null\n\n      for (const page of this.unflushed) {\n        const buf = b4a.from(\n          page.bitfield.buffer,\n          page.bitfield.byteOffset,\n          page.bitfield.byteLength\n        )\n\n        page.dirty = false\n        this.storage.write(page.index * BYTES_PER_PAGE, buf, done)\n      }\n\n      function done (err) {\n        if (err) error = err\n        if (--missing) return\n        if (error) return reject(error)\n        self.unflushed = []\n        resolve()\n      }\n    })\n  }\n\n  static open (storage, tree = null) {\n    return new Promise((resolve, reject) => {\n      storage.stat((err, st) => {\n        if (err) return resolve(new Bitfield(storage, null))\n        let size = st.size - (st.size & 3)\n        if (!size) return resolve(new Bitfield(storage, null))\n        if (tree) size = Math.min(size, ceilTo(tree.length / 8, 4096))\n        storage.read(0, size, (err, data) => {\n          if (err) return reject(err)\n          resolve(new Bitfield(storage, data))\n        })\n      })\n    })\n  }\n}\n\nfunction clamp (n, min, max) {\n  return Math.min(Math.max(n, min), max)\n}\n\nfunction ceilTo (n, multiple = 1) {\n  const remainder = n % multiple\n  if (remainder === 0) return n\n  return n + multiple - remainder\n}\nconst sodium = require('sodium-universal')\nconst c = require('compact-encoding')\nconst b4a = require('b4a')\nconst { BLOCK_ENCRYPTION } = require('./caps')\n\nconst nonce = b4a.alloc(sodium.crypto_stream_NONCEBYTES)\n\nmodule.exports = class BlockEncryption {\n  constructor (encryptionKey, hypercoreKey, { isBlockKey = false, compat = true } = {}) {\n    const subKeys = b4a.alloc(2 * sodium.crypto_stream_KEYBYTES)\n\n    this.key = encryptionKey\n    this.blockKey = isBlockKey ? encryptionKey : subKeys.subarray(0, sodium.crypto_stream_KEYBYTES)\n    this.blindingKey = subKeys.subarray(sodium.crypto_stream_KEYBYTES)\n    this.padding = 8\n    this.compat = compat\n    this.isBlockKey = isBlockKey\n\n    if (!isBlockKey) {\n      if (compat) sodium.crypto_generichash_batch(this.blockKey, [encryptionKey], hypercoreKey)\n      else sodium.crypto_generichash_batch(this.blockKey, [BLOCK_ENCRYPTION, hypercoreKey, encryptionKey])\n    }\n\n    sodium.crypto_generichash(this.blindingKey, this.blockKey)\n  }\n\n  encrypt (index, block, fork) {\n    const padding = block.subarray(0, this.padding)\n    block = block.subarray(this.padding)\n\n    c.uint64.encode({ start: 0, end: 8, buffer: padding }, fork)\n    c.uint64.encode({ start: 0, end: 8, buffer: nonce }, index)\n\n    // Zero out any previous padding.\n    nonce.fill(0, 8, 8 + padding.byteLength)\n\n    // Blind the fork ID, possibly risking reusing the nonce on a reorg of the\n    // Hypercore. This is fine as the blinding is best-effort and the latest\n    // fork ID shared on replication anyway.\n    sodium.crypto_stream_xor(\n      padding,\n      padding,\n      nonce,\n      this.blindingKey\n    )\n\n    nonce.set(padding, 8)\n\n    // The combination of a (blinded) fork ID and a block index is unique for a\n    // given Hypercore and is therefore a valid nonce for encrypting the block.\n    sodium.crypto_stream_xor(\n      block,\n      block,\n      nonce,\n      this.blockKey\n    )\n  }\n\n  decrypt (index, block) {\n    const padding = block.subarray(0, this.padding)\n    block = block.subarray(this.padding)\n\n    c.uint64.encode({ start: 0, end: 8, buffer: nonce }, index)\n\n    nonce.set(padding, 8)\n\n    // Decrypt the block using the blinded fork ID.\n    sodium.crypto_stream_xor(\n      block,\n      block,\n      nonce,\n      this.blockKey\n    )\n  }\n}\nconst b4a = require('b4a')\nconst { WRITE_FAILED } = require('hypercore-errors')\n\nmodule.exports = class BlockStore {\n  constructor (storage, tree) {\n    this.storage = storage\n    this.tree = tree\n  }\n\n  async get (i, tree) {\n    if (!tree) tree = this.tree\n    const [offset, size] = await tree.byteRange(2 * i)\n    return this._read(offset, size)\n  }\n\n  async put (i, data, offset) {\n    return this._write(offset, data)\n  }\n\n  putBatch (i, batch, offset) {\n    if (batch.length === 0) return Promise.resolve()\n    return this.put(i, batch.length === 1 ? batch[0] : b4a.concat(batch), offset)\n  }\n\n  clear (offset = 0, length = -1) {\n    return new Promise((resolve, reject) => {\n      if (length === -1) this.storage.truncate(offset, done)\n      else this.storage.del(offset, length, done)\n\n      function done (err) {\n        if (err) reject(err)\n        else resolve()\n      }\n    })\n  }\n\n  close () {\n    return new Promise((resolve, reject) => {\n      this.storage.close((err) => {\n        if (err) reject(err)\n        else resolve()\n      })\n    })\n  }\n\n  _read (offset, size) {\n    return new Promise((resolve, reject) => {\n      this.storage.read(offset, size, (err, data) => {\n        if (err) reject(err)\n        else resolve(data)\n      })\n    })\n  }\n\n  _write (offset, data) {\n    return new Promise((resolve, reject) => {\n      this.storage.write(offset, data, (err) => {\n        if (err) reject(WRITE_FAILED(err.message))\n        else resolve(offset + data.byteLength)\n      })\n    })\n  }\n}\nconst crypto = require('hypercore-crypto')\nconst sodium = require('sodium-universal')\nconst b4a = require('b4a')\nconst c = require('compact-encoding')\n\n// TODO: rename this to \"crypto\" and move everything hashing related etc in here\n// Also lets move the tree stuff from hypercore-crypto here\n\nconst [\n  TREE,\n  REPLICATE_INITIATOR,\n  REPLICATE_RESPONDER,\n  MANIFEST,\n  DEFAULT_NAMESPACE,\n  BLOCK_ENCRYPTION\n] = crypto.namespace('hypercore', 6)\n\nexports.MANIFEST = MANIFEST\nexports.DEFAULT_NAMESPACE = DEFAULT_NAMESPACE\nexports.BLOCK_ENCRYPTION = BLOCK_ENCRYPTION\n\nexports.replicate = function (isInitiator, key, handshakeHash) {\n  const out = b4a.allocUnsafe(32)\n  sodium.crypto_generichash_batch(out, [isInitiator ? REPLICATE_INITIATOR : REPLICATE_RESPONDER, key], handshakeHash)\n  return out\n}\n\nexports.treeSignable = function (manifestHash, treeHash, length, fork) {\n  const state = { start: 0, end: 112, buffer: b4a.allocUnsafe(112) }\n  c.fixed32.encode(state, TREE)\n  c.fixed32.encode(state, manifestHash)\n  c.fixed32.encode(state, treeHash)\n  c.uint64.encode(state, length)\n  c.uint64.encode(state, fork)\n  return state.buffer\n}\n\nexports.treeSignableCompat = function (hash, length, fork, noHeader) {\n  const end = noHeader ? 48 : 80\n  const state = { start: 0, end, buffer: b4a.allocUnsafe(end) }\n  if (!noHeader) c.fixed32.encode(state, TREE) // ultra legacy mode, kill in future major\n  c.fixed32.encode(state, hash)\n  c.uint64.encode(state, length)\n  c.uint64.encode(state, fork)\n  return state.buffer\n}\n// Export the appropriate version of `quickbit-universal` as the plain import\n// may resolve to an older version in some environments\nlet quickbit = require('quickbit-universal')\nif (\n  typeof quickbit.findFirst !== 'function' ||\n  typeof quickbit.findLast !== 'function' ||\n  typeof quickbit.clear !== 'function'\n) {\n  // This should always load the fallback from the locally installed version\n  quickbit = require('quickbit-universal/fallback')\n}\nexports.quickbit = quickbit\nconst hypercoreCrypto = require('hypercore-crypto')\nconst b4a = require('b4a')\nconst unslab = require('unslab')\nconst Oplog = require('./oplog')\nconst BigHeader = require('./big-header')\nconst Mutex = require('./mutex')\nconst MerkleTree = require('./merkle-tree')\nconst BlockStore = require('./block-store')\nconst Bitfield = require('./bitfield')\nconst RemoteBitfield = require('./remote-bitfield')\nconst Info = require('./info')\nconst { BAD_ARGUMENT, STORAGE_EMPTY, STORAGE_CONFLICT, INVALID_OPERATION, INVALID_SIGNATURE, INVALID_CHECKSUM } = require('hypercore-errors')\nconst m = require('./messages')\nconst Verifier = require('./verifier')\nconst audit = require('./audit')\n\nmodule.exports = class Core {\n  constructor (header, compat, crypto, oplog, bigHeader, tree, blocks, bitfield, verifier, sessions, legacy, globalCache, onupdate, onconflict) {\n    this.onupdate = onupdate\n    this.onconflict = onconflict\n    this.preupdate = null\n    this.header = header\n    this.compat = compat\n    this.crypto = crypto\n    this.oplog = oplog\n    this.bigHeader = bigHeader\n    this.tree = tree\n    this.blocks = blocks\n    this.bitfield = bitfield\n    this.verifier = verifier\n    this.truncating = 0\n    this.updating = false\n    this.closed = false\n    this.skipBitfield = null\n    this.active = sessions.length\n    this.sessions = sessions\n    this.globalCache = globalCache\n\n    this._manifestFlushed = !!header.manifest\n    this._maxOplogSize = 65536\n    this._autoFlush = 1\n    this._verifies = null\n    this._verifiesFlushed = null\n    this._mutex = new Mutex()\n    this._legacy = legacy\n  }\n\n  static async open (storage, opts = {}) {\n    const oplogFile = storage('oplog')\n    const treeFile = storage('tree')\n    const bitfieldFile = storage('bitfield')\n    const dataFile = storage('data')\n    const headerFile = storage('header')\n\n    try {\n      return await this.resume(oplogFile, treeFile, bitfieldFile, dataFile, headerFile, opts)\n    } catch (err) {\n      await closeAll(oplogFile, treeFile, bitfieldFile, dataFile, headerFile)\n      throw err\n    }\n  }\n\n  static async resume (oplogFile, treeFile, bitfieldFile, dataFile, headerFile, opts) {\n    let overwrite = opts.overwrite === true\n\n    const force = opts.force === true\n    const createIfMissing = opts.createIfMissing !== false\n    const crypto = opts.crypto || hypercoreCrypto\n    // kill this flag soon\n    const legacy = !!opts.legacy\n\n    const oplog = new Oplog(oplogFile, {\n      headerEncoding: m.oplog.header,\n      entryEncoding: m.oplog.entry,\n      readonly: opts.readonly\n    })\n\n    // default to true for now if no manifest is provided\n    let compat = opts.compat === true || (opts.compat !== false && !opts.manifest)\n\n    let { header, entries } = await oplog.open()\n\n    if (force && opts.key && header && !b4a.equals(header.key, opts.key)) {\n      overwrite = true\n    }\n\n    const bigHeader = new BigHeader(headerFile)\n\n    if (!header || overwrite) {\n      if (!createIfMissing) {\n        throw STORAGE_EMPTY('No Hypercore is stored here')\n      }\n\n      if (compat) {\n        if (opts.key && opts.keyPair && !b4a.equals(opts.key, opts.keyPair.publicKey)) {\n          throw BAD_ARGUMENT('Key must match publicKey when in compat mode')\n        }\n      }\n\n      const keyPair = opts.keyPair || (opts.key ? null : crypto.keyPair())\n      const defaultManifest = !opts.manifest && (!!opts.compat || !opts.key || !!(keyPair && b4a.equals(opts.key, keyPair.publicKey)))\n      const manifest = defaultManifest ? Verifier.defaultSignerManifest(opts.key || keyPair.publicKey) : Verifier.createManifest(opts.manifest)\n\n      header = {\n        external: null,\n        key: opts.key || (compat ? manifest.signers[0].publicKey : Verifier.manifestHash(manifest)),\n        manifest,\n        keyPair: keyPair ? { publicKey: keyPair.publicKey, secretKey: keyPair.secretKey || null } : null,\n        userData: [],\n        tree: {\n          fork: 0,\n          length: 0,\n          rootHash: null,\n          signature: null\n        },\n        hints: {\n          reorgs: [],\n          contiguousLength: 0\n        }\n      }\n\n      await flushHeader(oplog, bigHeader, header)\n    } else if (header.external) {\n      header = await bigHeader.load(header.external)\n    }\n\n    // unslab the long lived buffers to avoid keeping the slab alive\n    header.key = unslab(header.key)\n    header.tree.rootHash = unslab(header.tree.rootHash)\n    header.tree.signature = unslab(header.tree.signature)\n\n    if (header.keyPair) {\n      header.keyPair.publicKey = unslab(header.keyPair.publicKey)\n      header.keyPair.secretKey = unslab(header.keyPair.secretKey)\n    }\n\n    if (opts.manifest) {\n      // if we provide a manifest and no key, verify that the stored key is the same\n      if (!opts.key && !Verifier.isValidManifest(header.key, Verifier.createManifest(opts.manifest))) {\n        throw STORAGE_CONFLICT('Manifest does not hash to provided key')\n      }\n\n      if (!header.manifest) header.manifest = opts.manifest\n    }\n\n    if (opts.key && !b4a.equals(header.key, opts.key)) {\n      throw STORAGE_CONFLICT('Another Hypercore is stored here')\n    }\n\n    // if we signalled compat, but already now this core isn't disable it\n    if (compat && header.manifest && !Verifier.isCompat(header.key, header.manifest)) {\n      compat = false\n    } else if (!compat && header.manifest && Verifier.isCompat(header.key, header.manifest)) {\n      compat = true\n    }\n\n    const prologue = header.manifest ? header.manifest.prologue : null\n\n    const tree = await MerkleTree.open(treeFile, { crypto, prologue, ...header.tree })\n    const bitfield = await Bitfield.open(bitfieldFile)\n    const blocks = new BlockStore(dataFile, tree)\n\n    if (overwrite) {\n      await tree.clear()\n      await blocks.clear()\n      await bitfield.clear()\n      entries = []\n    }\n\n    // compat from earlier version that do not store contig length\n    if (header.hints.contiguousLength === 0) {\n      while (bitfield.get(header.hints.contiguousLength)) header.hints.contiguousLength++\n    }\n\n    // to unslab\n    if (header.manifest) header.manifest = Verifier.createManifest(header.manifest)\n\n    const verifier = header.manifest ? new Verifier(header.key, header.manifest, { crypto, legacy }) : null\n\n    for (const e of entries) {\n      if (e.userData) {\n        updateUserData(header.userData, e.userData.key, e.userData.value)\n      }\n\n      if (e.treeNodes) {\n        for (const node of e.treeNodes) {\n          tree.addNode(node)\n        }\n      }\n\n      if (e.bitfield) {\n        bitfield.setRange(e.bitfield.start, e.bitfield.length, !e.bitfield.drop)\n        updateContig(header, e.bitfield, bitfield)\n      }\n\n      if (e.treeUpgrade) {\n        const batch = await tree.truncate(e.treeUpgrade.length, e.treeUpgrade.fork)\n        batch.ancestors = e.treeUpgrade.ancestors\n        batch.signature = unslab(e.treeUpgrade.signature)\n        addReorgHint(header.hints.reorgs, tree, batch)\n        batch.commit()\n\n        header.tree.length = tree.length\n        header.tree.fork = tree.fork\n        header.tree.rootHash = tree.hash()\n        header.tree.signature = tree.signature\n      }\n    }\n\n    for (const entry of header.userData) {\n      entry.value = unslab(entry.value)\n    }\n\n    return new this(header, compat, crypto, oplog, bigHeader, tree, blocks, bitfield, verifier, opts.sessions || [], legacy, opts.globalCache || null, opts.onupdate || noop, opts.onconflict || noop)\n  }\n\n  async audit () {\n    await this._mutex.lock()\n\n    try {\n      await this._flushOplog()\n      const corrections = await audit(this)\n      if (corrections.blocks || corrections.tree) await this._flushOplog()\n      return corrections\n    } finally {\n      await this._mutex.unlock()\n    }\n  }\n\n  async setManifest (manifest) {\n    await this._mutex.lock()\n\n    try {\n      if (manifest && this.header.manifest === null) {\n        if (!Verifier.isValidManifest(this.header.key, manifest)) throw INVALID_CHECKSUM('Manifest hash does not match')\n        this._setManifest(Verifier.createManifest(manifest), null)\n        await this._flushOplog()\n      }\n    } finally {\n      this._mutex.unlock()\n    }\n  }\n\n  _setManifest (manifest, keyPair) {\n    if (!manifest && b4a.equals(keyPair.publicKey, this.header.key)) manifest = Verifier.defaultSignerManifest(this.header.key)\n    if (!manifest) return\n\n    const verifier = new Verifier(this.header.key, manifest, { crypto: this.crypto, legacy: this._legacy })\n\n    if (verifier.prologue) this.tree.setPrologue(verifier.prologue)\n\n    this.header.manifest = manifest\n    this.compat = verifier.compat\n    this.verifier = verifier\n    this._manifestFlushed = false\n\n    this.onupdate(0b10000, null, null, null)\n  }\n\n  _shouldFlush () {\n    // TODO: make something more fancy for auto flush mode (like fibonacci etc)\n    if (--this._autoFlush <= 0 || this.oplog.byteLength >= this._maxOplogSize) {\n      this._autoFlush = 4\n      return true\n    }\n\n    if (!this._manifestFlushed && this.header.manifest) {\n      this._manifestFlushed = true\n      return true\n    }\n\n    return false\n  }\n\n  async copyPrologue (src, { additional = [] } = {}) {\n    await this._mutex.lock()\n\n    try {\n      await src._mutex.lock()\n    } catch (err) {\n      this._mutex.unlock()\n      throw err\n    }\n\n    try {\n      const prologue = this.header.manifest && this.header.manifest.prologue\n      if (!prologue) throw INVALID_OPERATION('No prologue present')\n\n      const srcLength = prologue.length - additional.length\n      const srcBatch = srcLength !== src.tree.length ? await src.tree.truncate(srcLength) : src.tree.batch()\n      const srcRoots = srcBatch.roots.slice(0)\n      const srcByteLength = srcBatch.byteLength\n\n      for (const blk of additional) srcBatch.append(blk)\n\n      if (!b4a.equals(srcBatch.hash(), prologue.hash)) throw INVALID_OPERATION('Source tree is conflicting')\n\n      // all hashes are correct, lets copy\n\n      const entry = {\n        userData: null,\n        treeNodes: srcRoots,\n        treeUpgrade: null,\n        bitfield: null\n      }\n\n      if (additional.length) {\n        await this.blocks.putBatch(srcLength, additional, srcByteLength)\n        entry.treeNodes = entry.treeNodes.concat(srcBatch.nodes)\n        entry.bitfield = {\n          drop: false,\n          start: srcLength,\n          length: additional.length\n        }\n      }\n\n      await this.oplog.append([entry], false)\n      this.tree.addNodes(entry.treeNodes)\n\n      if (this.header.tree.length < srcBatch.length) {\n        this.header.tree.length = srcBatch.length\n        this.header.tree.rootHash = srcBatch.hash()\n\n        this.tree.length = srcBatch.length\n        this.tree.byteLength = srcBatch.byteLength\n        this.tree.roots = srcBatch.roots\n        this.onupdate(0b0001, null, null, null)\n      }\n\n      if (entry.bitfield) {\n        this._setBitfieldRange(entry.bitfield.start, entry.bitfield.length, true)\n        this.onupdate(0, entry.bitfield, null, null)\n      }\n\n      await this._flushOplog()\n\n      // no more additional blocks now and we should be consistant on disk\n      // copy over all existing segments...\n\n      let segmentEnd = 0\n\n      while (segmentEnd < srcLength) {\n        const segmentStart = maximumSegmentStart(segmentEnd, src.bitfield, this.bitfield)\n        if (segmentStart >= srcLength || segmentStart < 0) break\n\n        // max segment is 65536 to avoid running out of memory\n        segmentEnd = Math.min(segmentStart + 65536, srcLength, minimumSegmentEnd(segmentStart, src.bitfield, this.bitfield))\n\n        const treeNodes = await src.tree.getNeededNodes(srcLength, segmentStart, segmentEnd)\n        const bitfield = {\n          drop: false,\n          start: segmentStart,\n          length: segmentEnd - segmentStart\n        }\n\n        const segment = []\n        for (let i = segmentStart; i < segmentEnd; i++) {\n          const blk = await src.blocks.get(i)\n          segment.push(blk)\n        }\n\n        const offset = await src.tree.byteOffset(2 * segmentStart)\n        await this.blocks.putBatch(segmentStart, segment, offset)\n\n        const entry = {\n          userData: null,\n          treeNodes,\n          treeUpgrade: null,\n          bitfield\n        }\n\n        await this.oplog.append([entry], false)\n        this.tree.addNodes(treeNodes)\n        this._setBitfieldRange(bitfield.start, bitfield.length, true)\n        this.onupdate(0, bitfield, null, null)\n        await this._flushOplog()\n      }\n\n      this.header.userData = src.header.userData.slice(0)\n      const contig = Math.min(src.header.hints.contiguousLength, srcBatch.length)\n      if (this.header.hints.contiguousLength < contig) this.header.hints.contiguousLength = contig\n\n      await this._flushOplog()\n    } finally {\n      src._mutex.unlock()\n      this._mutex.unlock()\n    }\n  }\n\n  async flush () {\n    await this._mutex.lock()\n    try {\n      this._manifestFlushed = true\n      this._autoFlush = 4\n      await this._flushOplog()\n    } finally {\n      this._mutex.unlock()\n    }\n  }\n\n  async _flushOplog () {\n    // TODO: the apis using this, actually do not need to wait for the bitfields, tree etc to flush\n    // as their mutations are already stored in the oplog. We could potentially just run this in the\n    // background. Might be easier to impl that where it is called instead and keep this one simple.\n    await this.bitfield.flush()\n    await this.tree.flush()\n\n    return flushHeader(this.oplog, this.bigHeader, this.header)\n  }\n\n  _appendBlocks (values) {\n    return this.blocks.putBatch(this.tree.length, values, this.tree.byteLength)\n  }\n\n  async _writeBlock (batch, index, value) {\n    const byteOffset = await batch.byteOffset(index * 2)\n    await this.blocks.put(index, value, byteOffset)\n  }\n\n  async userData (key, value, flush) {\n    // TODO: each oplog append can set user data, so we should have a way\n    // to just hitch a ride on one of the other ongoing appends?\n    await this._mutex.lock()\n\n    try {\n      let empty = true\n\n      for (const u of this.header.userData) {\n        if (u.key !== key) continue\n        if (value && b4a.equals(u.value, value)) return\n        empty = false\n        break\n      }\n\n      if (empty && !value) return\n\n      const entry = {\n        userData: { key, value },\n        treeNodes: null,\n        treeUpgrade: null,\n        bitfield: null\n      }\n\n      await this.oplog.append([entry], false)\n\n      updateUserData(this.header.userData, key, value)\n\n      if (this._shouldFlush() || flush) await this._flushOplog()\n    } finally {\n      this._mutex.unlock()\n    }\n  }\n\n  async truncate (length, fork, { signature, keyPair = this.header.keyPair } = {}) {\n    if (this.tree.prologue && length < this.tree.prologue.length) {\n      throw INVALID_OPERATION('Truncation breaks prologue')\n    }\n\n    this.truncating++\n    await this._mutex.lock()\n\n    // upsert compat manifest\n    if (this.verifier === null && keyPair) this._setManifest(null, keyPair)\n\n    try {\n      const batch = await this.tree.truncate(length, fork)\n      if (length > 0) batch.signature = signature || this.verifier.sign(batch, keyPair)\n      await this._truncate(batch, null)\n    } finally {\n      this.truncating--\n      this._mutex.unlock()\n    }\n  }\n\n  async clearBatch () {\n    await this._mutex.lock()\n\n    try {\n      const len = this.bitfield.findFirst(false, this.tree.length)\n      if (len <= this.tree.length) return\n\n      const batch = await this.tree.truncate(this.tree.length, this.tree.fork)\n\n      batch.signature = this.tree.signature // same sig\n\n      const entry = {\n        userData: null,\n        treeNodes: batch.nodes,\n        treeUpgrade: batch,\n        bitfield: {\n          drop: true,\n          start: batch.ancestors,\n          length: len - batch.ancestors\n        }\n      }\n\n      await this.oplog.append([entry], false)\n\n      this._setBitfieldRange(batch.ancestors, len - batch.ancestors, false)\n      batch.commit()\n\n      // TODO: (see below todo)\n      await this._flushOplog()\n    } finally {\n      this._mutex.unlock()\n    }\n  }\n\n  async clear (start, end, cleared) {\n    await this._mutex.lock()\n\n    try {\n      const entry = {\n        userData: null,\n        treeNodes: null,\n        treeUpgrade: null,\n        bitfield: {\n          start,\n          length: end - start,\n          drop: true\n        }\n      }\n\n      await this.oplog.append([entry], false)\n\n      this._setBitfieldRange(start, end - start, false)\n\n      if (start < this.header.hints.contiguousLength) {\n        this.header.hints.contiguousLength = start\n      }\n\n      start = this.bitfield.lastSet(start) + 1\n      end = this.bitfield.firstSet(end)\n\n      if (end === -1) end = this.tree.length\n      if (start >= end || start >= this.tree.length) return\n\n      const offset = await this.tree.byteOffset(start * 2)\n      const endOffset = await this.tree.byteOffset(end * 2)\n      const length = endOffset - offset\n\n      const before = cleared ? await Info.bytesUsed(this.blocks.storage) : null\n\n      await this.blocks.clear(offset, length)\n\n      const after = cleared ? await Info.bytesUsed(this.blocks.storage) : null\n\n      if (cleared) cleared.blocks = Math.max(before - after, 0)\n\n      this.onupdate(0, entry.bitfield, null, null)\n\n      if (this._shouldFlush()) await this._flushOplog()\n    } finally {\n      this._mutex.unlock()\n    }\n  }\n\n  async purge () {\n    return new Promise((resolve, reject) => {\n      let missing = 4\n      let error = null\n\n      this.oplog.storage.unlink(done)\n      this.tree.storage.unlink(done)\n      this.bitfield.storage.unlink(done)\n      this.blocks.storage.unlink(done)\n\n      function done (err) {\n        if (err) error = err\n        if (--missing) return\n        if (error) reject(error)\n        else resolve()\n      }\n    })\n  }\n\n  async insertBatch (batch, values, { signature, keyPair = this.header.keyPair, pending = false, treeLength = batch.treeLength } = {}) {\n    await this._mutex.lock()\n\n    try {\n      // upsert compat manifest\n      if (this.verifier === null && keyPair) this._setManifest(null, keyPair)\n\n      if (this.tree.fork !== batch.fork) return null\n\n      if (this.tree.length > batch.treeLength) {\n        if (this.tree.length > batch.length) return null // TODO: partial commit in the future if possible\n\n        for (const root of this.tree.roots) {\n          const batchRoot = await batch.get(root.index)\n          if (batchRoot.size !== root.size || !b4a.equals(batchRoot.hash, root.hash)) {\n            return null\n          }\n        }\n      }\n\n      const adding = batch.length - treeLength\n\n      batch.upgraded = !pending && batch.length > this.tree.length\n      batch.treeLength = this.tree.length\n      batch.ancestors = this.tree.length\n      if (batch.upgraded && !pending) batch.signature = signature || this.verifier.sign(batch, keyPair)\n\n      let byteOffset = batch.byteLength\n      for (let i = 0; i < adding; i++) byteOffset -= values[i].byteLength\n\n      if (pending === true) batch.upgraded = false\n\n      const entry = {\n        userData: null,\n        treeNodes: batch.nodes,\n        treeUpgrade: batch.upgraded ? batch : null,\n        bitfield: {\n          drop: false,\n          start: treeLength,\n          length: adding\n        }\n      }\n\n      await this.blocks.putBatch(treeLength, adding < values.length ? values.slice(0, adding) : values, byteOffset)\n      await this.oplog.append([entry], false)\n\n      this._setBitfieldRange(entry.bitfield.start, entry.bitfield.length, true)\n      batch.commit()\n\n      if (batch.upgraded) {\n        this.header.tree.length = batch.length\n        this.header.tree.rootHash = batch.hash()\n        this.header.tree.signature = batch.signature\n      }\n\n      const status = (batch.upgraded ? 0b0001 : 0) | updateContig(this.header, entry.bitfield, this.bitfield)\n      if (!pending) {\n        // we already commit this, and now we signed it, so tell others\n        if (entry.treeUpgrade && treeLength > batch.treeLength) {\n          entry.bitfield.start = batch.treeLength\n          entry.bitfield.length = treeLength - batch.treeLength\n        }\n\n        this.onupdate(status, entry.bitfield, null, null)\n      }\n\n      if (this._shouldFlush()) await this._flushOplog()\n    } finally {\n      this._mutex.unlock()\n    }\n\n    return { length: batch.length, byteLength: batch.byteLength }\n  }\n\n  async append (values, { signature, keyPair = this.header.keyPair, preappend } = {}) {\n    await this._mutex.lock()\n\n    try {\n      // upsert compat manifest\n      if (this.verifier === null && keyPair) this._setManifest(null, keyPair)\n\n      if (preappend) await preappend(values)\n\n      if (!values.length) {\n        return { length: this.tree.length, byteLength: this.tree.byteLength }\n      }\n\n      const batch = this.tree.batch()\n      for (const val of values) batch.append(val)\n\n      // only multisig can have prologue so signature is always present\n      if (this.tree.prologue && batch.length < this.tree.prologue.length) {\n        throw INVALID_OPERATION('Append is not consistent with prologue')\n      }\n\n      batch.signature = signature || this.verifier.sign(batch, keyPair)\n\n      const entry = {\n        userData: null,\n        treeNodes: batch.nodes,\n        treeUpgrade: batch,\n        bitfield: {\n          drop: false,\n          start: batch.ancestors,\n          length: values.length\n        }\n      }\n\n      const byteLength = await this._appendBlocks(values)\n\n      await this.oplog.append([entry], false)\n\n      this._setBitfieldRange(batch.ancestors, batch.length - batch.ancestors, true)\n      batch.commit()\n\n      this.header.tree.length = batch.length\n      this.header.tree.rootHash = batch.hash()\n      this.header.tree.signature = batch.signature\n\n      const status = 0b0001 | updateContig(this.header, entry.bitfield, this.bitfield)\n      this.onupdate(status, entry.bitfield, null, null)\n\n      if (this._shouldFlush()) await this._flushOplog()\n\n      return { length: batch.length, byteLength }\n    } finally {\n      this._mutex.unlock()\n    }\n  }\n\n  _verifyBatchUpgrade (batch, manifest) {\n    if (!this.header.manifest) {\n      if (!manifest && this.compat) manifest = Verifier.defaultSignerManifest(this.header.key)\n\n      if (!manifest || !(Verifier.isValidManifest(this.header.key, manifest) || (this.compat && Verifier.isCompat(this.header.key, manifest)))) {\n        throw INVALID_SIGNATURE('Proof contains an invalid manifest') // TODO: proper error type\n      }\n    }\n\n    manifest = Verifier.createManifest(manifest) // To unslab\n\n    const verifier = this.verifier || new Verifier(this.header.key, manifest, { crypto: this.crypto, legacy: this._legacy })\n\n    if (!verifier.verify(batch, batch.signature)) {\n      throw INVALID_SIGNATURE('Proof contains an invalid signature')\n    }\n\n    if (!this.header.manifest) {\n      this.header.manifest = manifest\n      this.compat = verifier.compat\n      this.verifier = verifier\n      this.onupdate(0b10000, null, null, null)\n    }\n  }\n\n  async _verifyExclusive ({ batch, bitfield, value, manifest, from }) {\n    this._verifyBatchUpgrade(batch, manifest)\n\n    await this._mutex.lock()\n\n    try {\n      if (!batch.commitable()) return false\n      this.updating = true\n\n      const entry = {\n        userData: null,\n        treeNodes: batch.nodes,\n        treeUpgrade: batch,\n        bitfield\n      }\n\n      if (this.preupdate !== null) await this.preupdate(batch, this.header.key)\n      if (bitfield) await this._writeBlock(batch, bitfield.start, value)\n\n      await this.oplog.append([entry], false)\n\n      let status = 0b0001\n\n      if (bitfield) {\n        this._setBitfield(bitfield.start, true)\n        status |= updateContig(this.header, bitfield, this.bitfield)\n      }\n\n      batch.commit()\n\n      this.header.tree.fork = batch.fork\n      this.header.tree.length = batch.length\n      this.header.tree.rootHash = batch.hash()\n      this.header.tree.signature = batch.signature\n\n      this.onupdate(status, bitfield, value, from)\n\n      if (this._shouldFlush()) await this._flushOplog()\n    } finally {\n      this.updating = false\n      this._mutex.unlock()\n    }\n\n    return true\n  }\n\n  async _verifyShared () {\n    if (!this._verifies.length) return false\n\n    await this._mutex.lock()\n\n    const verifies = this._verifies\n    this._verifies = null\n    this._verified = null\n\n    try {\n      const entries = []\n\n      for (const { batch, bitfield, value } of verifies) {\n        if (!batch.commitable()) continue\n\n        if (bitfield) {\n          await this._writeBlock(batch, bitfield.start, value)\n        }\n\n        entries.push({\n          userData: null,\n          treeNodes: batch.nodes,\n          treeUpgrade: null,\n          bitfield\n        })\n      }\n\n      await this.oplog.append(entries, false)\n\n      for (let i = 0; i < verifies.length; i++) {\n        const { batch, bitfield, value, manifest, from } = verifies[i]\n\n        if (!batch.commitable()) {\n          verifies[i] = null // signal that we cannot commit this one\n          continue\n        }\n\n        let status = 0\n\n        if (bitfield) {\n          this._setBitfield(bitfield.start, true)\n          status = updateContig(this.header, bitfield, this.bitfield)\n        }\n\n        // if we got a manifest AND its strictly a non compat one, lets store it\n        if (manifest && this.header.manifest === null) {\n          if (!Verifier.isValidManifest(this.header.key, manifest)) throw INVALID_CHECKSUM('Manifest hash does not match')\n          this._setManifest(manifest, null)\n        }\n\n        batch.commit()\n\n        this.onupdate(status, bitfield, value, from)\n      }\n\n      if (this._shouldFlush()) await this._flushOplog()\n    } finally {\n      this._mutex.unlock()\n    }\n\n    return verifies[0] !== null\n  }\n\n  async checkConflict (proof, from) {\n    if (this.tree.length < proof.upgrade.length || proof.fork !== this.tree.fork) {\n      // out of date this proof - ignore for now\n      return false\n    }\n\n    const batch = this.tree.verifyFullyRemote(proof)\n\n    try {\n      this._verifyBatchUpgrade(batch, proof.manifest)\n    } catch {\n      return true\n    }\n\n    const remoteTreeHash = this.crypto.tree(proof.upgrade.nodes)\n    const localTreeHash = this.crypto.tree(await this.tree.getRoots(proof.upgrade.length))\n\n    if (b4a.equals(localTreeHash, remoteTreeHash)) return false\n\n    await this.onconflict(proof)\n    return true\n  }\n\n  async verifyReorg (proof) {\n    const batch = await this.tree.reorg(proof)\n\n    this._verifyBatchUpgrade(batch, proof.manifest)\n\n    return batch\n  }\n\n  async verify (proof, from) {\n    // We cannot apply \"other forks\" atm.\n    // We should probably still try and they are likely super similar for non upgrades\n    // but this is easy atm (and the above layer will just retry)\n    if (proof.fork !== this.tree.fork) return false\n\n    const batch = await this.tree.verify(proof)\n    if (!batch.commitable()) return false\n\n    const value = (proof.block && proof.block.value) || null\n    const op = {\n      batch,\n      bitfield: value && { drop: false, start: proof.block.index, length: 1 },\n      value,\n      manifest: proof.manifest,\n      from\n    }\n\n    if (batch.upgraded) return this._verifyExclusive(op)\n\n    if (this._verifies !== null) {\n      const verifies = this._verifies\n      const i = verifies.push(op)\n      await this._verified\n      return verifies[i] !== null\n    }\n\n    this._verifies = [op]\n    this._verified = this._verifyShared()\n    return this._verified\n  }\n\n  async reorg (batch, from) {\n    if (!batch.commitable()) return false\n\n    this.truncating++\n    await this._mutex.lock()\n\n    try {\n      if (!batch.commitable()) return false\n      await this._truncate(batch, from)\n    } finally {\n      this.truncating--\n      this._mutex.unlock()\n    }\n\n    return true\n  }\n\n  async _truncate (batch, from) {\n    const entry = {\n      userData: null,\n      treeNodes: batch.nodes,\n      treeUpgrade: batch,\n      bitfield: {\n        drop: true,\n        start: batch.ancestors,\n        length: this.tree.length - batch.ancestors\n      }\n    }\n\n    await this.oplog.append([entry], false)\n\n    this._setBitfieldRange(batch.ancestors, this.tree.length - batch.ancestors, false)\n    addReorgHint(this.header.hints.reorgs, this.tree, batch)\n    batch.commit()\n\n    const contigStatus = updateContig(this.header, entry.bitfield, this.bitfield)\n    const status = ((batch.length > batch.ancestors) ? 0b0011 : 0b0010) | contigStatus\n\n    this.header.tree.fork = batch.fork\n    this.header.tree.length = batch.length\n    this.header.tree.rootHash = batch.hash()\n    this.header.tree.signature = batch.signature\n\n    this.onupdate(status, entry.bitfield, null, from)\n\n    // TODO: there is a bug in the merkle tree atm where it cannot handle unflushed\n    // truncates if we append or download anything after the truncation point later on\n    // This is because tree.get checks the truncated flag. We should fix this so we can do\n    // the later flush here as well\n    // if (this._shouldFlush()) await this._flushOplog()\n    await this._flushOplog()\n  }\n\n  openSkipBitfield () {\n    if (this.skipBitfield !== null) return this.skipBitfield\n    this.skipBitfield = new RemoteBitfield()\n    const buf = this.bitfield.toBuffer(this.tree.length)\n    const bitfield = new Uint32Array(buf.buffer, buf.byteOffset, buf.byteLength / 4)\n    this.skipBitfield.insert(0, bitfield)\n    return this.skipBitfield\n  }\n\n  _setBitfield (index, value) {\n    this.bitfield.set(index, value)\n    if (this.skipBitfield !== null) this.skipBitfield.set(index, value)\n  }\n\n  _setBitfieldRange (start, length, value) {\n    this.bitfield.setRange(start, length, value)\n    if (this.skipBitfield !== null) this.skipBitfield.setRange(start, length, value)\n  }\n\n  async close () {\n    this.closed = true\n    await this._mutex.destroy()\n    await Promise.allSettled([\n      this.oplog.close(),\n      this.bitfield.close(),\n      this.tree.close(),\n      this.blocks.close(),\n      this.bigHeader.close()\n    ])\n  }\n}\n\nfunction updateContig (header, upd, bitfield) {\n  const end = upd.start + upd.length\n\n  let c = header.hints.contiguousLength\n\n  if (upd.drop) {\n    // If we dropped a block in the current contig range, \"downgrade\" it\n    if (c <= end && c > upd.start) {\n      c = upd.start\n    }\n  } else {\n    if (c <= end && c >= upd.start) {\n      c = end\n      while (bitfield.get(c)) c++\n    }\n  }\n\n  if (c === header.hints.contiguousLength) {\n    return 0b0000\n  }\n\n  if (c > header.hints.contiguousLength) {\n    header.hints.contiguousLength = c\n    return 0b0100\n  }\n\n  header.hints.contiguousLength = c\n  return 0b1000\n}\n\nfunction addReorgHint (list, tree, batch) {\n  if (tree.length === 0 || tree.fork === batch.fork) return\n\n  while (list.length >= 4) list.shift() // 4 here is arbitrary, just want it to be small (hints only)\n  while (list.length > 0) {\n    if (list[list.length - 1].ancestors > batch.ancestors) list.pop()\n    else break\n  }\n\n  list.push({ from: tree.fork, to: batch.fork, ancestors: batch.ancestors })\n}\n\nfunction updateUserData (list, key, value) {\n  value = unslab(value)\n\n  for (let i = 0; i < list.length; i++) {\n    if (list[i].key === key) {\n      if (value) list[i].value = value\n      else list.splice(i, 1)\n      return\n    }\n  }\n  if (value) list.push({ key, value })\n}\n\nfunction closeAll (...storages) {\n  let missing = 1\n  let error = null\n\n  return new Promise((resolve, reject) => {\n    for (const s of storages) {\n      missing++\n      s.close(done)\n    }\n\n    done(null)\n\n    function done (err) {\n      if (err) error = err\n      if (--missing) return\n      if (error) reject(error)\n      else resolve()\n    }\n  })\n}\n\nasync function flushHeader (oplog, bigHeader, header) {\n  if (header.external) {\n    await bigHeader.flush(header)\n  }\n\n  try {\n    await oplog.flush(header)\n  } catch (err) {\n    if (err.code !== 'OPLOG_HEADER_OVERFLOW') throw err\n    await bigHeader.flush(header)\n    await oplog.flush(header)\n  }\n}\n\nfunction noop () {}\n\nfunction maximumSegmentStart (start, src, dst) {\n  while (true) {\n    const a = src.firstSet(start)\n    const b = dst.firstUnset(start)\n\n    if (a === -1) return -1\n    if (b === -1) return a\n\n    // if dst has the segment, restart\n    if (a < b) {\n      start = b\n      continue\n    }\n\n    return a\n  }\n}\n\nfunction minimumSegmentEnd (start, src, dst) {\n  const a = src.firstUnset(start)\n  const b = dst.firstSet(start)\n\n  if (a === -1) return -1\n  if (b === -1) return a\n  return a < b ? a : b\n}\nmodule.exports = class Download {\n  constructor (req) {\n    this.req = req\n  }\n\n  async done () {\n    return (await this.req).promise\n  }\n\n  /**\n   * Deprecated. Use `range.done()`.\n   */\n  downloaded () {\n    return this.done()\n  }\n\n  destroy () {\n    this.req.then(req => req.context && req.context.detach(req), noop)\n  }\n}\n\nfunction noop () {}\nconst TICKS = 16\n\nmodule.exports = class HotswapQueue {\n  constructor () {\n    this.priorities = [[], [], []]\n  }\n\n  * pick (peer) {\n    for (let i = 0; i < this.priorities.length; i++) {\n      // try first one more than second one etc etc\n      let ticks = (this.priorities.length - i) * TICKS\n      const queue = this.priorities[i]\n\n      for (let j = 0; j < queue.length; j++) {\n        const r = j + Math.floor(Math.random() * queue.length - j)\n        const a = queue[j]\n        const b = queue[r]\n\n        if (r !== j) {\n          queue[(b.hotswap.index = j)] = b\n          queue[(a.hotswap.index = r)] = a\n        }\n\n        if (hasInflight(b, peer)) continue\n\n        yield b\n\n        if (--ticks <= 0) break\n      }\n    }\n  }\n\n  add (block) {\n    if (block.hotswap !== null) this.remove(block)\n    if (block.inflight.length === 0 || block.inflight.length >= 3) return\n\n    // TODO: also use other stuff to determine queue prio\n    const queue = this.priorities[block.inflight.length - 1]\n\n    const index = queue.push(block) - 1\n    block.hotswap = { ref: this, queue, index }\n  }\n\n  remove (block) {\n    const hotswap = block.hotswap\n    if (hotswap === null) return\n\n    block.hotswap = null\n    const head = hotswap.queue.pop()\n    if (head === block) return\n    hotswap.queue[(head.hotswap.index = hotswap.index)] = head\n  }\n}\n\nfunction hasInflight (block, peer) {\n  for (let j = 0; j < block.inflight.length; j++) {\n    if (block.inflight[j].peer === peer) return true\n  }\n  return false\n}\nmodule.exports = class Info {\n  constructor (opts = {}) {\n    this.key = opts.key\n    this.discoveryKey = opts.discoveryKey\n    this.length = opts.length || 0\n    this.contiguousLength = opts.contiguousLength || 0\n    this.byteLength = opts.byteLength || 0\n    this.fork = opts.fork || 0\n    this.padding = opts.padding || 0\n    this.storage = opts.storage || null\n  }\n\n  static async from (session, opts = {}) {\n    return new Info({\n      key: session.key,\n      discoveryKey: session.discoveryKey,\n      length: session.length,\n      contiguousLength: session.contiguousLength,\n      byteLength: session.byteLength,\n      fork: session.fork,\n      padding: session.padding,\n      storage: opts.storage ? await this.storage(session) : null\n    })\n  }\n\n  static async storage (session) {\n    const { oplog, tree, blocks, bitfield } = session.core\n    try {\n      return {\n        oplog: await Info.bytesUsed(oplog.storage),\n        tree: await Info.bytesUsed(tree.storage),\n        blocks: await Info.bytesUsed(blocks.storage),\n        bitfield: await Info.bytesUsed(bitfield.storage)\n      }\n    } catch {\n      return null\n    }\n  }\n\n  static bytesUsed (file) {\n    return new Promise((resolve, reject) => {\n      file.stat((err, st) => {\n        if (err) {\n          resolve(0) // prob just file not found (TODO, improve)\n        } else if (typeof st.blocks !== 'number') {\n          reject(new Error('cannot determine bytes used'))\n        } else {\n          resolve(st.blocks * 512)\n        }\n      })\n    })\n  }\n}\nconst flat = require('flat-tree')\nconst crypto = require('hypercore-crypto')\nconst c = require('compact-encoding')\nconst Xache = require('xache')\nconst b4a = require('b4a')\nconst unslab = require('unslab')\nconst caps = require('./caps')\nconst { INVALID_PROOF, INVALID_CHECKSUM, INVALID_OPERATION, BAD_ARGUMENT, ASSERTION } = require('hypercore-errors')\n\nconst BLANK_HASH = b4a.alloc(32)\nconst OLD_TREE = b4a.from([5, 2, 87, 2, 0, 0, 40, 7, 66, 76, 65, 75, 69, 50, 98])\nconst TREE_CACHE = 128 // speeds up linear scans by A LOT\n\nclass NodeQueue {\n  constructor (nodes, extra = null) {\n    this.i = 0\n    this.nodes = nodes\n    this.extra = extra\n    this.length = nodes.length + (this.extra === null ? 0 : 1)\n  }\n\n  shift (index) {\n    if (this.extra !== null && this.extra.index === index) {\n      const node = this.extra\n      this.extra = null\n      this.length--\n      return node\n    }\n\n    if (this.i >= this.nodes.length) {\n      throw INVALID_OPERATION('Expected node ' + index + ', got (nil)')\n    }\n\n    const node = this.nodes[this.i++]\n    if (node.index !== index) {\n      throw INVALID_OPERATION('Expected node ' + index + ', got node ' + node.index)\n    }\n\n    this.length--\n    return node\n  }\n}\n\nclass MerkleTreeBatch {\n  constructor (tree) {\n    this.fork = tree.fork\n    this.roots = [...tree.roots]\n    this.length = tree.length\n    this.ancestors = tree.length\n    this.byteLength = tree.byteLength\n    this.signature = null\n    this.hashCached = null\n\n    this.treeLength = tree.length\n    this.treeFork = tree.fork\n    this.tree = tree\n    this.nodes = []\n    this.upgraded = false\n  }\n\n  checkout (length, additionalRoots) {\n    const roots = []\n    let r = 0\n\n    const head = 2 * length - 2\n    const gaps = new Set()\n    const all = new Map()\n\n    // additional roots is so the original roots can be passed (we mutate the array in appendRoot)\n    if (additionalRoots) {\n      for (const node of additionalRoots) all.set(node.index, node)\n    }\n\n    for (const node of this.nodes) all.set(node.index, node)\n\n    for (const index of flat.fullRoots(head + 2)) {\n      const left = flat.leftSpan(index)\n      if (left !== 0) gaps.add(left - 1)\n\n      if (r < this.roots.length && this.roots[r].index === index) {\n        roots.push(this.roots[r++])\n        continue\n      }\n      const node = all.get(index)\n      if (!node) throw new BAD_ARGUMENT('root missing for given length')\n      roots.push(node)\n    }\n\n    this.roots = roots\n    this.length = length\n    this.byteLength = totalSize(roots)\n    this.hashCached = null\n    this.signature = null\n\n    for (let i = 0; i < this.nodes.length; i++) {\n      const index = this.nodes[i].index\n      if (index <= head && !gaps.has(index)) continue\n      const last = this.nodes.pop()\n      if (i < this.nodes.length) this.nodes[i--] = last\n    }\n  }\n\n  prune (length) {\n    if (length === 0) return\n\n    const head = 2 * length - 2\n    const gaps = new Set()\n\n    // TODO: make a function for this in flat-tree\n    for (const index of flat.fullRoots(head + 2)) {\n      const left = flat.leftSpan(index)\n      if (left !== 0) gaps.add(left - 1)\n    }\n\n    for (let i = 0; i < this.nodes.length; i++) {\n      const index = this.nodes[i].index\n      if (index > head || gaps.has(index)) continue\n      const last = this.nodes.pop()\n      if (i < this.nodes.length) this.nodes[i--] = last\n    }\n  }\n\n  clone () {\n    const b = new MerkleTreeBatch(this.tree)\n\n    b.fork = this.fork\n    b.roots = [...this.roots]\n    b.length = this.length\n    b.byteLength = this.byteLength\n    b.signature = this.signature\n    b.treeLength = this.treeLength\n    b.treeFork = this.treeFork\n    b.tree = this.tree\n    b.nodes = [...this.nodes]\n    b.upgraded = this.upgraded\n\n    return b\n  }\n\n  hash () {\n    if (this.hashCached === null) this.hashCached = unslab(this.tree.crypto.tree(this.roots))\n    return this.hashCached\n  }\n\n  signable (manifestHash) {\n    return caps.treeSignable(manifestHash, this.hash(), this.length, this.fork)\n  }\n\n  signableCompat (noHeader) {\n    return caps.treeSignableCompat(this.hash(), this.length, this.fork, noHeader)\n  }\n\n  get (index, error) {\n    if (index >= this.length * 2) {\n      return null\n    }\n\n    for (const n of this.nodes) {\n      if (n.index === index) return n\n    }\n\n    return this.tree.get(index, error)\n  }\n\n  proof ({ block, hash, seek, upgrade }) {\n    return generateProof(this, block, hash, seek, upgrade)\n  }\n\n  verifyUpgrade (proof) {\n    const unverified = verifyTree(proof, this.tree.crypto, this.nodes)\n\n    if (!proof.upgrade) throw INVALID_OPERATION('Expected upgrade proof')\n\n    return verifyUpgrade(proof, unverified, this)\n  }\n\n  append (buf) {\n    const head = this.length * 2\n    const ite = flat.iterator(head)\n    const node = blockNode(this.tree.crypto, head, buf)\n\n    this.appendRoot(node, ite)\n  }\n\n  appendRoot (node, ite) {\n    node = unslabNode(node)\n    this.hashCached = null\n    this.upgraded = true\n    this.length += ite.factor / 2\n    this.byteLength += node.size\n    this.roots.push(node)\n    this.nodes.push(node)\n\n    while (this.roots.length > 1) {\n      const a = this.roots[this.roots.length - 1]\n      const b = this.roots[this.roots.length - 2]\n\n      // TODO: just have a peek sibling instead? (pretty sure it's always the left sib as well)\n      if (ite.sibling() !== b.index) {\n        ite.sibling() // unset so it always points to last root\n        break\n      }\n\n      const node = unslabNode(parentNode(this.tree.crypto, ite.parent(), a, b))\n      this.nodes.push(node)\n      this.roots.pop()\n      this.roots.pop()\n      this.roots.push(node)\n    }\n  }\n\n  commitable () {\n    return this.treeFork === this.tree.fork && (\n      this.upgraded\n        ? this.treeLength === this.tree.length\n        : this.treeLength <= this.tree.length\n    )\n  }\n\n  commit () {\n    if (!this.commitable()) throw INVALID_OPERATION('Tree was modified during batch, refusing to commit')\n\n    if (this.upgraded) this._commitUpgrade()\n\n    for (let i = 0; i < this.nodes.length; i++) {\n      const node = this.nodes[i]\n      this.tree.unflushed.set(node.index, node)\n    }\n  }\n\n  _commitUpgrade () {\n    // TODO: If easy to detect, we should refuse an trunc+append here without a fork id\n    // change. Will only happen on user error so mostly to prevent that.\n\n    if (this.ancestors < this.treeLength) {\n      if (this.ancestors > 0) {\n        const head = 2 * this.ancestors\n        const ite = flat.iterator(head - 2)\n\n        while (true) {\n          if (ite.contains(head) && ite.index < head) {\n            this.tree.unflushed.set(ite.index, blankNode(ite.index))\n          }\n          if (ite.offset === 0) break\n          ite.parent()\n        }\n      }\n\n      this.tree.truncateTo = this.tree.truncated\n        ? Math.min(this.tree.truncateTo, this.ancestors)\n        : this.ancestors\n\n      this.tree.truncated = true\n      this.tree.cache = new Xache({ maxSize: this.tree.cache.maxSize })\n      truncateMap(this.tree.unflushed, this.ancestors)\n      if (this.tree.flushing !== null) truncateMap(this.tree.flushing, this.ancestors)\n    }\n\n    this.tree.roots = this.roots\n    this.tree.length = this.length\n    this.tree.byteLength = this.byteLength\n    this.tree.fork = this.fork\n    this.tree.signature = this.signature\n  }\n\n  seek (bytes, padding) {\n    return new ByteSeeker(this, bytes, padding)\n  }\n\n  byteRange (index) {\n    return getByteRange(this, index)\n  }\n\n  byteOffset (index) {\n    if (index === 2 * this.tree.length) return this.tree.byteLength\n    return getByteOffset(this, index)\n  }\n}\n\nclass ReorgBatch extends MerkleTreeBatch {\n  constructor (tree) {\n    super(tree)\n    this.roots = []\n    this.length = 0\n    this.byteLength = 0\n    this.diff = null\n    this.ancestors = 0\n    // We set upgraded because reorgs are signed so hit will\n    // hit the same code paths (like the treeLength check in commit)\n    this.upgraded = true\n    this.want = {\n      nodes: 0,\n      start: 0,\n      end: 0\n    }\n  }\n\n  get finished () {\n    return this.want === null\n  }\n\n  update (proof) {\n    if (this.want === null) return true\n\n    const nodes = []\n    const root = verifyTree(proof, this.tree.crypto, nodes)\n\n    if (root === null || !b4a.equals(root.hash, this.diff.hash)) return false\n\n    this.nodes.push(...nodes)\n    return this._update(nodes)\n  }\n\n  async _update (nodes) {\n    const n = new Map()\n    for (const node of nodes) n.set(node.index, node)\n\n    let diff = null\n    const ite = flat.iterator(this.diff.index)\n    const startingDiff = this.diff\n\n    while ((ite.index & 1) !== 0) {\n      const left = n.get(ite.leftChild())\n      if (!left) break\n\n      const existing = await this.tree.get(left.index, false)\n      if (!existing || !b4a.equals(existing.hash, left.hash)) {\n        diff = left\n      } else {\n        diff = n.get(ite.sibling())\n      }\n    }\n\n    if ((this.diff.index & 1) === 0) return true\n    if (diff === null) return false\n    if (startingDiff !== this.diff) return false\n\n    return this._updateDiffRoot(diff)\n  }\n\n  _updateDiffRoot (diff) {\n    if (this.want === null) return true\n\n    const spans = flat.spans(diff.index)\n    const start = spans[0] / 2\n    const end = Math.min(this.treeLength, spans[1] / 2 + 1)\n    const len = end - start\n\n    this.ancestors = start\n    this.diff = diff\n\n    if ((diff.index & 1) === 0 || this.want.start >= this.treeLength || len <= 0) {\n      this.want = null\n      return true\n    }\n\n    this.want.start = start\n    this.want.end = end\n    this.want.nodes = log2(spans[1] - spans[0] + 2) - 1\n\n    return false\n  }\n}\n\nclass ByteSeeker {\n  constructor (tree, bytes, padding = 0) {\n    this.tree = tree\n    this.bytes = bytes\n    this.padding = padding\n\n    const size = tree.byteLength - (tree.length * padding)\n\n    this.start = bytes >= size ? tree.length : 0\n    this.end = bytes < size ? tree.length : 0\n  }\n\n  async _seek (bytes) {\n    if (!bytes) return [0, 0]\n\n    for (const node of this.tree.roots) { // all async ticks happen once we find the root so safe\n      const size = getUnpaddedSize(node, this.padding, null)\n\n      if (bytes === size) return [flat.rightSpan(node.index) + 2, 0]\n      if (bytes > size) {\n        bytes -= size\n        continue\n      }\n\n      const ite = flat.iterator(node.index)\n\n      while ((ite.index & 1) !== 0) {\n        const l = await this.tree.get(ite.leftChild(), false)\n\n        if (l) {\n          const size = getUnpaddedSize(l, this.padding, ite)\n\n          if (size === bytes) return [ite.rightSpan() + 2, 0]\n          if (size > bytes) continue\n          bytes -= size\n          ite.sibling()\n        } else {\n          ite.parent()\n          return [ite.index, bytes]\n        }\n      }\n\n      return [ite.index, bytes]\n    }\n\n    return null\n  }\n\n  async update () { // TODO: combine _seek and this, much simpler\n    const res = await this._seek(this.bytes)\n    if (!res) return null\n    if ((res[0] & 1) === 0) return [res[0] / 2, res[1]]\n\n    const span = flat.spans(res[0])\n    this.start = span[0] / 2\n    this.end = span[1] / 2 + 1\n\n    return null\n  }\n}\n\nmodule.exports = class MerkleTree {\n  constructor (storage, roots, fork, signature, prologue) {\n    this.crypto = crypto\n    this.fork = fork\n    this.roots = roots\n    this.length = roots.length ? totalSpan(roots) / 2 : 0\n    this.byteLength = totalSize(roots)\n    this.signature = signature\n    this.prologue = prologue\n\n    this.storage = storage\n    this.unflushed = new Map()\n    this.cache = new Xache({ maxSize: TREE_CACHE })\n    this.flushing = null\n    this.truncated = false\n    this.truncateTo = 0\n  }\n\n  addNode (node) {\n    if (node.size === 0 && b4a.equals(node.hash, BLANK_HASH)) node = blankNode(node.index)\n    this.unflushed.set(node.index, node)\n  }\n\n  batch () {\n    return new MerkleTreeBatch(this)\n  }\n\n  async restoreBatch (length) {\n    const batch = new MerkleTreeBatch(this)\n    if (length === this.length) return batch\n\n    const roots = unslabNodes(await this.getRoots(length))\n\n    batch.roots = roots\n    batch.length = length\n    batch.byteLength = 0\n    batch.ancestors = length\n\n    for (const node of roots) batch.byteLength += node.size\n\n    return batch\n  }\n\n  seek (bytes, padding) {\n    return new ByteSeeker(this, bytes, padding)\n  }\n\n  hash () {\n    return unslab(this.crypto.tree(this.roots))\n  }\n\n  signable (namespace) {\n    return caps.treeSignable(namespace, this.hash(), this.length, this.fork)\n  }\n\n  getRoots (length) {\n    const indexes = flat.fullRoots(2 * length)\n    const roots = new Array(indexes.length)\n\n    for (let i = 0; i < indexes.length; i++) {\n      roots[i] = this.get(indexes[i], true)\n    }\n\n    return Promise.all(roots)\n  }\n\n  setPrologue ({ hash, length }) {\n    this.prologue = { hash, length }\n  }\n\n  addNodes (nodes) {\n    for (let i = 0; i < nodes.length; i++) {\n      const node = nodes[i]\n      this.unflushed.set(node.index, node)\n    }\n  }\n\n  getNeededNodes (length, start, end) {\n    const nodes = new Map()\n    const head = length * 2\n\n    for (let i = start; i < end; i++) {\n      const ite = flat.iterator(i * 2)\n\n      while (true) {\n        if (nodes.has(ite.index)) break\n        nodes.set(ite.index, this.get(ite.index, true))\n\n        const sibling = ite.sibling()\n\n        ite.parent()\n        if (ite.contains(head)) break\n\n        if (nodes.has(sibling)) break\n        nodes.set(sibling, this.get(sibling, true))\n      }\n    }\n\n    return Promise.all([...nodes.values()])\n  }\n\n  async upgradeable (length) {\n    const indexes = flat.fullRoots(2 * length)\n    const roots = new Array(indexes.length)\n\n    for (let i = 0; i < indexes.length; i++) {\n      roots[i] = this.get(indexes[i], false)\n    }\n\n    for (const node of await Promise.all(roots)) {\n      if (node === null) return false\n    }\n\n    return true\n  }\n\n  blankNode (index) {\n    return blankNode(index)\n  }\n\n  get (index, error = true) {\n    const c = this.cache.get(index)\n    if (c) return c\n\n    let node = this.unflushed.get(index)\n\n    if (this.flushing !== null && node === undefined) {\n      node = this.flushing.get(index)\n    }\n\n    // TODO: test this\n    if (this.truncated && node !== undefined && node.index >= 2 * this.truncateTo) {\n      node = blankNode(index)\n    }\n\n    if (node !== undefined) {\n      if (node.hash === BLANK_HASH) {\n        if (error) throw INVALID_OPERATION('Could not load node: ' + index)\n        return Promise.resolve(null)\n      }\n      return Promise.resolve(node)\n    }\n\n    return getStoredNode(this.storage, index, this.cache, error)\n  }\n\n  async flush () {\n    this.flushing = this.unflushed\n    this.unflushed = new Map()\n\n    try {\n      if (this.truncated) await this._flushTruncation()\n      await this._flushNodes()\n    } catch (err) {\n      for (const node of this.flushing.values()) {\n        if (!this.unflushed.has(node.index)) this.unflushed.set(node.index, node)\n      }\n      throw err\n    } finally {\n      this.flushing = null\n    }\n  }\n\n  _flushTruncation () {\n    return new Promise((resolve, reject) => {\n      const t = this.truncateTo\n      const offset = t === 0 ? 0 : (t - 1) * 80 + 40\n\n      this.storage.truncate(offset, (err) => {\n        if (err) return reject(err)\n\n        if (this.truncateTo === t) {\n          this.truncateTo = 0\n          this.truncated = false\n        }\n\n        resolve()\n      })\n    })\n  }\n\n  _flushNodes () {\n    // TODO: write neighbors together etc etc\n    // TODO: bench loading a full disk page and copy to that instead\n    return new Promise((resolve, reject) => {\n      const slab = b4a.allocUnsafe(40 * this.flushing.size)\n\n      let error = null\n      let missing = this.flushing.size + 1\n      let offset = 0\n\n      for (const node of this.flushing.values()) {\n        const state = {\n          start: 0,\n          end: 40,\n          buffer: slab.subarray(offset, offset += 40)\n        }\n\n        c.uint64.encode(state, node.size)\n        c.raw.encode(state, node.hash)\n\n        this.storage.write(node.index * 40, state.buffer, done)\n      }\n\n      done(null)\n\n      function done (err) {\n        if (err) error = err\n        if (--missing > 0) return\n        if (error) reject(error)\n        else resolve()\n      }\n    })\n  }\n\n  clear () {\n    this.cache = new Xache({ maxSize: this.cache.maxSize })\n    this.truncated = true\n    this.truncateTo = 0\n    this.roots = []\n    this.length = 0\n    this.byteLength = 0\n    this.fork = 0\n    this.signature = null\n    if (this.flushing !== null) this.flushing.clear()\n    this.unflushed.clear()\n    return this.flush()\n  }\n\n  close () {\n    return new Promise((resolve, reject) => {\n      this.storage.close(err => {\n        if (err) reject(err)\n        else resolve()\n      })\n    })\n  }\n\n  async truncate (length, fork = this.fork) {\n    const head = length * 2\n    const batch = new MerkleTreeBatch(this)\n    const fullRoots = flat.fullRoots(head)\n\n    for (let i = 0; i < fullRoots.length; i++) {\n      const root = fullRoots[i]\n      if (i < batch.roots.length && batch.roots[i].index === root) continue\n\n      while (batch.roots.length > i) batch.roots.pop()\n      batch.roots.push(unslabNode(await this.get(root)))\n    }\n\n    while (batch.roots.length > fullRoots.length) {\n      batch.roots.pop()\n    }\n\n    batch.fork = fork\n    batch.length = length\n    batch.ancestors = length\n    batch.byteLength = totalSize(batch.roots)\n    batch.upgraded = true\n\n    return batch\n  }\n\n  async reorg (proof) {\n    const batch = new ReorgBatch(this)\n\n    let unverified = null\n\n    if (proof.block || proof.hash || proof.seek) {\n      unverified = verifyTree(proof, this.crypto, batch.nodes)\n    }\n\n    if (!verifyUpgrade(proof, unverified, batch)) {\n      throw INVALID_PROOF('Fork proof not verifiable')\n    }\n\n    for (const root of batch.roots) {\n      const existing = await this.get(root.index, false)\n      if (existing && b4a.equals(existing.hash, root.hash)) continue\n      batch._updateDiffRoot(root)\n      break\n    }\n\n    if (batch.diff !== null) {\n      await batch._update(batch.nodes)\n    } else {\n      batch.want = null\n      batch.ancestors = batch.length\n    }\n\n    return batch\n  }\n\n  verifyFullyRemote (proof) {\n    // TODO: impl this less hackishly\n    const batch = new MerkleTreeBatch(this)\n\n    batch.fork = proof.fork\n    batch.roots = []\n    batch.length = 0\n    batch.ancestors = 0\n    batch.byteLength = 0\n\n    let unverified = verifyTree(proof, this.crypto, batch.nodes)\n\n    if (proof.upgrade) {\n      if (verifyUpgrade(proof, unverified, batch)) {\n        unverified = null\n      }\n    }\n\n    return batch\n  }\n\n  async verify (proof) {\n    const batch = new MerkleTreeBatch(this)\n\n    let unverified = verifyTree(proof, this.crypto, batch.nodes)\n\n    if (proof.upgrade) {\n      if (verifyUpgrade(proof, unverified, batch)) {\n        unverified = null\n      }\n    }\n\n    if (unverified) {\n      const verified = await this.get(unverified.index)\n      if (!b4a.equals(verified.hash, unverified.hash)) {\n        throw INVALID_CHECKSUM('Invalid checksum at node ' + unverified.index)\n      }\n    }\n\n    return batch\n  }\n\n  proof ({ block, hash, seek, upgrade }) {\n    return generateProof(this, block, hash, seek, upgrade)\n  }\n\n  // Successor to .nodes()\n  async missingNodes (index) {\n    const head = 2 * this.length\n    const ite = flat.iterator(index)\n\n    // See iterator.rightSpan()\n    const iteRightSpan = ite.index + ite.factor / 2 - 1\n    // If the index is not in the current tree, we do not know how many missing nodes there are...\n    if (iteRightSpan >= head) return 0\n\n    let cnt = 0\n    while (!ite.contains(head) && (await this.get(ite.index, false)) === null) {\n      cnt++\n      ite.parent()\n    }\n\n    return cnt\n  }\n\n  // Deprecated\n  async nodes (index) {\n    const head = 2 * this.length\n    const ite = flat.iterator(index)\n\n    let cnt = 0\n    while (!ite.contains(head) && (await this.get(ite.index, false)) === null) {\n      cnt++\n      ite.parent()\n    }\n\n    return cnt\n  }\n\n  byteRange (index) {\n    return getByteRange(this, index)\n  }\n\n  byteOffset (index) {\n    return getByteOffset(this, index)\n  }\n\n  static async open (storage, opts = {}) {\n    await new Promise((resolve, reject) => {\n      storage.read(0, OLD_TREE.length, (err, buf) => {\n        if (err) return resolve()\n        if (b4a.equals(buf, OLD_TREE)) return reject(new Error('Storage contains an incompatible merkle tree'))\n        resolve()\n      })\n    })\n\n    const length = typeof opts.length === 'number'\n      ? opts.length\n      : await autoLength(storage)\n\n    const roots = []\n    for (const index of flat.fullRoots(2 * length)) {\n      roots.push(unslabNode(await getStoredNode(storage, index, null, true)))\n    }\n\n    return new MerkleTree(storage, roots, opts.fork || 0, opts.signature || null, opts.prologue || null)\n  }\n}\n\nasync function getByteRange (tree, index) {\n  const head = 2 * tree.length\n  if (((index & 1) === 0 ? index : flat.rightSpan(index)) >= head) {\n    throw BAD_ARGUMENT('Index is out of bounds')\n  }\n  return [await tree.byteOffset(index), (await tree.get(index)).size]\n}\n\nasync function getByteOffset (tree, index) {\n  if (index === 2 * tree.length) return tree.byteLength\n  if ((index & 1) === 1) index = flat.leftSpan(index)\n\n  let head = 0\n  let offset = 0\n\n  for (const node of tree.roots) { // all async ticks happen once we find the root so safe\n    head += 2 * ((node.index - head) + 1)\n\n    if (index >= head) {\n      offset += node.size\n      continue\n    }\n\n    const ite = flat.iterator(node.index)\n\n    while (ite.index !== index) {\n      if (index < ite.index) {\n        ite.leftChild()\n      } else {\n        offset += (await tree.get(ite.leftChild())).size\n        ite.sibling()\n      }\n    }\n\n    return offset\n  }\n\n  throw ASSERTION('Failed to find offset')\n}\n\n// All the methods needed for proof verification\n\nfunction verifyTree ({ block, hash, seek }, crypto, nodes) {\n  const untrustedNode = block\n    ? { index: 2 * block.index, value: block.value, nodes: block.nodes }\n    : hash\n      ? { index: hash.index, value: null, nodes: hash.nodes }\n      : null\n\n  if (untrustedNode === null && (!seek || !seek.nodes.length)) return null\n\n  let root = null\n\n  if (seek && seek.nodes.length) {\n    const ite = flat.iterator(seek.nodes[0].index)\n    const q = new NodeQueue(seek.nodes)\n\n    root = q.shift(ite.index)\n    nodes.push(root)\n\n    while (q.length > 0) {\n      const node = q.shift(ite.sibling())\n\n      root = parentNode(crypto, ite.parent(), root, node)\n      nodes.push(node)\n      nodes.push(root)\n    }\n  }\n\n  if (untrustedNode === null) return root\n\n  const ite = flat.iterator(untrustedNode.index)\n  const blockHash = untrustedNode.value && blockNode(crypto, ite.index, untrustedNode.value)\n\n  const q = new NodeQueue(untrustedNode.nodes, root)\n\n  root = blockHash || q.shift(ite.index)\n  nodes.push(root)\n\n  while (q.length > 0) {\n    const node = q.shift(ite.sibling())\n\n    root = parentNode(crypto, ite.parent(), root, node)\n    nodes.push(node)\n    nodes.push(root)\n  }\n\n  return root\n}\n\nfunction verifyUpgrade ({ fork, upgrade }, blockRoot, batch) {\n  const prologue = batch.tree.prologue\n\n  if (prologue) {\n    const { start, length } = upgrade\n    if (start < prologue.length && (start !== 0 || length < prologue.length)) {\n      throw INVALID_PROOF('Upgrade does not satisfy prologue')\n    }\n  }\n\n  const q = new NodeQueue(upgrade.nodes, blockRoot)\n\n  let grow = batch.roots.length > 0\n  let i = 0\n\n  const to = 2 * (upgrade.start + upgrade.length)\n  const ite = flat.iterator(0)\n\n  for (; ite.fullRoot(to); ite.nextTree()) {\n    if (i < batch.roots.length && batch.roots[i].index === ite.index) {\n      i++\n      continue\n    }\n\n    if (grow) {\n      grow = false\n      const root = ite.index\n      if (i < batch.roots.length) {\n        ite.seek(batch.roots[batch.roots.length - 1].index)\n        while (ite.index !== root) {\n          batch.appendRoot(q.shift(ite.sibling()), ite)\n        }\n        continue\n      }\n    }\n\n    batch.appendRoot(q.shift(ite.index), ite)\n  }\n\n  if (prologue && batch.length === prologue.length) {\n    if (!b4a.equals(prologue.hash, batch.hash())) {\n      throw INVALID_PROOF('Invalid hash')\n    }\n  }\n\n  const extra = upgrade.additionalNodes\n\n  ite.seek(batch.roots[batch.roots.length - 1].index)\n  i = 0\n\n  while (i < extra.length && extra[i].index === ite.sibling()) {\n    batch.appendRoot(extra[i++], ite)\n  }\n\n  while (i < extra.length) {\n    const node = extra[i++]\n\n    while (node.index !== ite.index) {\n      if (ite.factor === 2) throw INVALID_OPERATION('Unexpected node: ' + node.index)\n      ite.leftChild()\n    }\n\n    batch.appendRoot(node, ite)\n    ite.sibling()\n  }\n\n  batch.signature = unslab(upgrade.signature)\n  batch.fork = fork\n\n  return q.extra === null\n}\n\nasync function seekFromHead (tree, head, bytes, padding) {\n  const roots = flat.fullRoots(head)\n\n  for (let i = 0; i < roots.length; i++) {\n    const root = roots[i]\n    const node = await tree.get(root)\n    const size = getUnpaddedSize(node, padding, null)\n\n    if (bytes === size) return root\n    if (bytes > size) {\n      bytes -= size\n      continue\n    }\n\n    return seekTrustedTree(tree, root, bytes, padding)\n  }\n\n  return head\n}\n\n// trust that bytes are within the root tree and find the block at bytes\n\nasync function seekTrustedTree (tree, root, bytes, padding) {\n  if (!bytes) return root\n\n  const ite = flat.iterator(root)\n\n  while ((ite.index & 1) !== 0) {\n    const l = await tree.get(ite.leftChild(), false)\n    if (l) {\n      const size = getUnpaddedSize(l, padding, ite)\n      if (size === bytes) return ite.index\n      if (size > bytes) continue\n      bytes -= size\n      ite.sibling()\n    } else {\n      ite.parent()\n      return ite.index\n    }\n  }\n\n  return ite.index\n}\n\n// try to find the block at bytes without trusting that is *is* within the root passed\n\nasync function seekUntrustedTree (tree, root, bytes, padding) {\n  const offset = await tree.byteOffset(root) - (padding ? padding * flat.leftSpan(root) / 2 : 0)\n\n  if (offset > bytes) throw INVALID_OPERATION('Invalid seek')\n  if (offset === bytes) return root\n\n  bytes -= offset\n\n  const node = await tree.get(root)\n\n  if (getUnpaddedSize(node, padding, null) <= bytes) throw INVALID_OPERATION('Invalid seek')\n\n  return seekTrustedTree(tree, root, bytes, padding)\n}\n\n// Below is proof production, ie, construct proofs to verify a request\n// Note, that all these methods are sync as we can statically infer which nodes\n// are needed for the remote to verify given they arguments they passed us\n\nfunction seekProof (tree, seekRoot, root, p) {\n  const ite = flat.iterator(seekRoot)\n\n  p.seek = []\n  p.seek.push(tree.get(ite.index))\n\n  while (ite.index !== root) {\n    ite.sibling()\n    p.seek.push(tree.get(ite.index))\n    ite.parent()\n  }\n}\n\nfunction blockAndSeekProof (tree, node, seek, seekRoot, root, p) {\n  if (!node) return seekProof(tree, seekRoot, root, p)\n\n  const ite = flat.iterator(node.index)\n\n  p.node = []\n  if (!node.value) p.node.push(tree.get(ite.index))\n\n  while (ite.index !== root) {\n    ite.sibling()\n\n    if (seek && ite.contains(seekRoot) && ite.index !== seekRoot) {\n      seekProof(tree, seekRoot, ite.index, p)\n    } else {\n      p.node.push(tree.get(ite.index))\n    }\n\n    ite.parent()\n  }\n}\n\nfunction upgradeProof (tree, node, seek, from, to, subTree, p) {\n  if (from === 0) p.upgrade = []\n\n  for (const ite = flat.iterator(0); ite.fullRoot(to); ite.nextTree()) {\n    // check if they already have the node\n    if (ite.index + ite.factor / 2 < from) continue\n\n    // connect existing tree\n    if (p.upgrade === null && ite.contains(from - 2)) {\n      p.upgrade = []\n\n      const root = ite.index\n      const target = from - 2\n\n      ite.seek(target)\n\n      while (ite.index !== root) {\n        ite.sibling()\n        if (ite.index > target) {\n          if (p.node === null && p.seek === null && ite.contains(subTree)) {\n            blockAndSeekProof(tree, node, seek, subTree, ite.index, p)\n          } else {\n            p.upgrade.push(tree.get(ite.index))\n          }\n        }\n        ite.parent()\n      }\n\n      continue\n    }\n\n    if (p.upgrade === null) {\n      p.upgrade = []\n    }\n\n    // if the subtree included is a child of this tree, include that one\n    // instead of a dup node\n    if (p.node === null && p.seek === null && ite.contains(subTree)) {\n      blockAndSeekProof(tree, node, seek, subTree, ite.index, p)\n      continue\n    }\n\n    // add root (can be optimised since the root might be in tree.roots)\n    p.upgrade.push(tree.get(ite.index))\n  }\n}\n\nfunction additionalUpgradeProof (tree, from, to, p) {\n  if (from === 0) p.additionalUpgrade = []\n\n  for (const ite = flat.iterator(0); ite.fullRoot(to); ite.nextTree()) {\n    // check if they already have the node\n    if (ite.index + ite.factor / 2 < from) continue\n\n    // connect existing tree\n    if (p.additionalUpgrade === null && ite.contains(from - 2)) {\n      p.additionalUpgrade = []\n\n      const root = ite.index\n      const target = from - 2\n\n      ite.seek(target)\n\n      while (ite.index !== root) {\n        ite.sibling()\n        if (ite.index > target) {\n          p.additionalUpgrade.push(tree.get(ite.index))\n        }\n        ite.parent()\n      }\n\n      continue\n    }\n\n    if (p.additionalUpgrade === null) {\n      p.additionalUpgrade = []\n    }\n\n    // add root (can be optimised since the root is in tree.roots)\n    p.additionalUpgrade.push(tree.get(ite.index))\n  }\n}\n\nfunction nodesToRoot (index, nodes, head) {\n  const ite = flat.iterator(index)\n\n  for (let i = 0; i < nodes; i++) {\n    ite.parent()\n    if (ite.contains(head)) throw BAD_ARGUMENT('Nodes is out of bounds')\n  }\n\n  return ite.index\n}\n\nfunction totalSize (nodes) {\n  let s = 0\n  for (const node of nodes) s += node.size\n  return s\n}\n\nfunction totalSpan (nodes) {\n  let s = 0\n  for (const node of nodes) s += 2 * ((node.index - s) + 1)\n  return s\n}\n\nfunction blockNode (crypto, index, value) {\n  return { index, size: value.byteLength, hash: crypto.data(value) }\n}\n\nfunction parentNode (crypto, index, a, b) {\n  return { index, size: a.size + b.size, hash: crypto.parent(a, b) }\n}\n\nfunction blankNode (index) {\n  return { index, size: 0, hash: BLANK_HASH }\n}\n\n// Storage methods\n\nfunction getStoredNode (storage, index, cache, error) {\n  return new Promise((resolve, reject) => {\n    storage.read(40 * index, 40, (err, data) => {\n      if (err) {\n        if (error) return reject(err)\n        else resolve(null)\n        return\n      }\n\n      const hash = data.subarray(8)\n      const size = c.decode(c.uint64, data)\n\n      if (size === 0 && b4a.compare(hash, BLANK_HASH) === 0) {\n        if (error) reject(new Error('Could not load node: ' + index))\n        else resolve(null)\n        return\n      }\n\n      const node = { index, size, hash }\n\n      if (cache !== null) {\n        // Copy hash to a new buffer to avoid blocking gc of its original slab\n        node.hash = unslab(hash)\n        cache.set(index, node)\n      }\n\n      resolve(node)\n    })\n  })\n}\n\nfunction storedNodes (storage) {\n  return new Promise((resolve) => {\n    storage.stat((_, st) => {\n      if (!st) return resolve(0)\n      resolve((st.size - (st.size % 40)) / 40)\n    })\n  })\n}\n\nasync function autoLength (storage) {\n  const nodes = await storedNodes(storage)\n  if (!nodes) return 0\n  const ite = flat.iterator(nodes - 1)\n  let index = nodes - 1\n  while (await getStoredNode(storage, ite.parent(), null, false)) index = ite.index\n  return flat.rightSpan(index) / 2 + 1\n}\n\nfunction truncateMap (map, len) {\n  for (const node of map.values()) {\n    if (node.index >= 2 * len) map.delete(node.index)\n  }\n}\n\nfunction log2 (n) {\n  let res = 1\n\n  while (n > 2) {\n    n /= 2\n    res++\n  }\n\n  return res\n}\n\nfunction normalizeIndexed (block, hash) {\n  if (block) return { value: true, index: block.index * 2, nodes: block.nodes, lastIndex: block.index }\n  if (hash) return { value: false, index: hash.index, nodes: hash.nodes, lastIndex: flat.rightSpan(hash.index) / 2 }\n  return null\n}\n\nasync function settleProof (p) {\n  const result = [\n    p.node && Promise.all(p.node),\n    p.seek && Promise.all(p.seek),\n    p.upgrade && Promise.all(p.upgrade),\n    p.additionalUpgrade && Promise.all(p.additionalUpgrade)\n  ]\n\n  try {\n    return await Promise.all(result)\n  } catch (err) {\n    if (p.node) await Promise.allSettled(p.node)\n    if (p.seek) await Promise.allSettled(p.seek)\n    if (p.upgrade) await Promise.allSettled(p.upgrade)\n    if (p.additionalUpgrade) await Promise.allSettled(p.additionalUpgrade)\n    throw err\n  }\n}\n\n// tree can be either the merkle tree or a merkle tree batch\nasync function generateProof (tree, block, hash, seek, upgrade) {\n  // Important that this does not throw inbetween making the promise arrays\n  // and finalise being called, otherwise there will be lingering promises in the background\n\n  if (tree.prologue && upgrade) {\n    upgrade.start = upgrade.start < tree.prologue.length ? 0 : upgrade.start\n    upgrade.length = upgrade.start < tree.prologue.length ? tree.prologue.length : upgrade.length\n  }\n\n  const fork = tree.fork\n  const signature = tree.signature\n  const head = 2 * tree.length\n  const from = upgrade ? upgrade.start * 2 : 0\n  const to = upgrade ? from + upgrade.length * 2 : head\n  const node = normalizeIndexed(block, hash)\n\n  const result = { fork, block: null, hash: null, seek: null, upgrade: null, manifest: null }\n\n  // can't do anything as we have no data...\n  if (head === 0) return result\n\n  if (from >= to || to > head) {\n    throw INVALID_OPERATION('Invalid upgrade')\n  }\n  if (seek && upgrade && node !== null && node.index >= from) {\n    throw INVALID_OPERATION('Cannot both do a seek and block/hash request when upgrading')\n  }\n\n  let subTree = head\n\n  const p = {\n    node: null,\n    seek: null,\n    upgrade: null,\n    additionalUpgrade: null\n  }\n\n  if (node !== null && (!upgrade || node.lastIndex < upgrade.start)) {\n    subTree = nodesToRoot(node.index, node.nodes, to)\n    const seekRoot = seek ? await seekUntrustedTree(tree, subTree, seek.bytes, seek.padding) : head\n    blockAndSeekProof(tree, node, seek, seekRoot, subTree, p)\n  } else if ((node || seek) && upgrade) {\n    subTree = seek ? await seekFromHead(tree, to, seek.bytes, seek.padding) : node.index\n  }\n\n  if (upgrade) {\n    upgradeProof(tree, node, seek, from, to, subTree, p)\n    if (head > to) additionalUpgradeProof(tree, to, head, p)\n  }\n\n  const [pNode, pSeek, pUpgrade, pAdditional] = await settleProof(p)\n\n  if (block) {\n    if (pNode === null) throw INVALID_OPERATION('Invalid block request')\n    result.block = {\n      index: block.index,\n      value: null, // populated upstream, alloc it here for simplicity\n      nodes: pNode\n    }\n  } else if (hash) {\n    if (pNode === null) throw INVALID_OPERATION('Invalid hash request')\n    result.hash = {\n      index: hash.index,\n      nodes: pNode\n    }\n  }\n\n  if (seek && pSeek !== null) {\n    result.seek = {\n      bytes: seek.bytes,\n      nodes: pSeek\n    }\n  }\n\n  if (upgrade) {\n    result.upgrade = {\n      start: upgrade.start,\n      length: upgrade.length,\n      nodes: pUpgrade,\n      additionalNodes: pAdditional || [],\n      signature\n    }\n  }\n\n  return result\n}\n\nfunction getUnpaddedSize (node, padding, ite) {\n  return padding === 0 ? node.size : node.size - padding * (ite ? ite.countLeaves() : flat.countLeaves(node.index))\n}\n\nfunction unslabNodes (nodes) {\n  for (const node of nodes) unslabNode(node)\n  return nodes\n}\n\nfunction unslabNode (node) {\n  if (node === null) return node\n  node.hash = unslab(node.hash)\n  return node\n}\nconst c = require('compact-encoding')\nconst b4a = require('b4a')\nconst { DEFAULT_NAMESPACE } = require('./caps')\nconst { INVALID_OPLOG_VERSION } = require('hypercore-errors')\nconst unslab = require('unslab')\n\nconst EMPTY = b4a.alloc(0)\n\nconst hashes = {\n  preencode (state, m) {\n    state.end++ // small uint\n  },\n  encode (state, m) {\n    if (m === 'blake2b') {\n      c.uint.encode(state, 0)\n      return\n    }\n\n    throw new Error('Unknown hash: ' + m)\n  },\n  decode (state) {\n    const n = c.uint.decode(state)\n    if (n === 0) return 'blake2b'\n    throw new Error('Unknown hash id: ' + n)\n  }\n}\n\nconst signatures = {\n  preencode (state, m) {\n    state.end++ // small uint\n  },\n  encode (state, m) {\n    if (m === 'ed25519') {\n      c.uint.encode(state, 0)\n      return\n    }\n\n    throw new Error('Unknown signature: ' + m)\n  },\n  decode (state) {\n    const n = c.uint.decode(state)\n    if (n === 0) return 'ed25519'\n    throw new Error('Unknown signature id: ' + n)\n  }\n}\n\nconst signer = {\n  preencode (state, m) {\n    signatures.preencode(state, m.signature)\n    c.fixed32.preencode(state, m.namespace)\n    c.fixed32.preencode(state, m.publicKey)\n  },\n  encode (state, m) {\n    signatures.encode(state, m.signature)\n    c.fixed32.encode(state, m.namespace)\n    c.fixed32.encode(state, m.publicKey)\n  },\n  decode (state) {\n    return {\n      signature: signatures.decode(state),\n      namespace: c.fixed32.decode(state),\n      publicKey: c.fixed32.decode(state)\n    }\n  }\n}\n\nconst signerArray = c.array(signer)\n\nconst prologue = {\n  preencode (state, p) {\n    c.fixed32.preencode(state, p.hash)\n    c.uint.preencode(state, p.length)\n  },\n  encode (state, p) {\n    c.fixed32.encode(state, p.hash)\n    c.uint.encode(state, p.length)\n  },\n  decode (state) {\n    return {\n      hash: c.fixed32.decode(state),\n      length: c.uint.decode(state)\n    }\n  }\n}\n\nconst manifestv0 = {\n  preencode (state, m) {\n    hashes.preencode(state, m.hash)\n    state.end++ // type\n\n    if (m.prologue && m.signers.length === 0) {\n      c.fixed32.preencode(state, m.prologue.hash)\n      return\n    }\n\n    if (m.quorum === 1 && m.signers.length === 1 && !m.allowPatch) {\n      signer.preencode(state, m.signers[0])\n    } else {\n      state.end++ // flags\n      c.uint.preencode(state, m.quorum)\n      signerArray.preencode(state, m.signers)\n    }\n  },\n  encode (state, m) {\n    hashes.encode(state, m.hash)\n\n    if (m.prologue && m.signers.length === 0) {\n      c.uint.encode(state, 0)\n      c.fixed32.encode(state, m.prologue.hash)\n      return\n    }\n\n    if (m.quorum === 1 && m.signers.length === 1 && !m.allowPatch) {\n      c.uint.encode(state, 1)\n      signer.encode(state, m.signers[0])\n    } else {\n      c.uint.encode(state, 2)\n      c.uint.encode(state, m.allowPatch ? 1 : 0)\n      c.uint.encode(state, m.quorum)\n      signerArray.encode(state, m.signers)\n    }\n  },\n  decode (state) {\n    const hash = hashes.decode(state)\n    const type = c.uint.decode(state)\n\n    if (type > 2) throw new Error('Unknown type: ' + type)\n\n    if (type === 0) {\n      return {\n        version: 0,\n        hash,\n        allowPatch: false,\n        quorum: 0,\n        signers: [],\n        prologue: {\n          hash: c.fixed32.decode(state),\n          length: 0\n        }\n      }\n    }\n\n    if (type === 1) {\n      return {\n        version: 0,\n        hash,\n        allowPatch: false,\n        quorum: 1,\n        signers: [signer.decode(state)],\n        prologue: null\n      }\n    }\n\n    const flags = c.uint.decode(state)\n\n    return {\n      version: 0,\n      hash,\n      allowPatch: (flags & 1) !== 0,\n      quorum: c.uint.decode(state),\n      signers: signerArray.decode(state),\n      prologue: null\n    }\n  }\n}\n\nconst manifest = exports.manifest = {\n  preencode (state, m) {\n    state.end++ // version\n    if (m.version === 0) return manifestv0.preencode(state, m)\n\n    state.end++ // flags\n    hashes.preencode(state, m.hash)\n\n    c.uint.preencode(state, m.quorum)\n    signerArray.preencode(state, m.signers)\n    if (m.prologue) prologue.preencode(state, m.prologue)\n  },\n  encode (state, m) {\n    c.uint.encode(state, m.version)\n    if (m.version === 0) return manifestv0.encode(state, m)\n\n    c.uint.encode(state, (m.allowPatch ? 1 : 0) | (m.prologue ? 2 : 0))\n    hashes.encode(state, m.hash)\n\n    c.uint.encode(state, m.quorum)\n    signerArray.encode(state, m.signers)\n    if (m.prologue) prologue.encode(state, m.prologue)\n  },\n  decode (state) {\n    const v = c.uint.decode(state)\n    if (v === 0) return manifestv0.decode(state)\n    if (v !== 1) throw new Error('Unknown version: ' + v)\n\n    const flags = c.uint.decode(state)\n    const hash = hashes.decode(state)\n    const quorum = c.uint.decode(state)\n    const signers = signerArray.decode(state)\n\n    return {\n      version: 1,\n      hash,\n      allowPatch: (flags & 1) !== 0,\n      quorum,\n      signers,\n      prologue: (flags & 2) === 0 ? null : prologue.decode(state)\n    }\n  }\n}\n\nconst node = {\n  preencode (state, n) {\n    c.uint.preencode(state, n.index)\n    c.uint.preencode(state, n.size)\n    c.fixed32.preencode(state, n.hash)\n  },\n  encode (state, n) {\n    c.uint.encode(state, n.index)\n    c.uint.encode(state, n.size)\n    c.fixed32.encode(state, n.hash)\n  },\n  decode (state) {\n    return {\n      index: c.uint.decode(state),\n      size: c.uint.decode(state),\n      hash: c.fixed32.decode(state)\n    }\n  }\n}\n\nconst nodeArray = c.array(node)\n\nconst wire = exports.wire = {}\n\nwire.handshake = {\n  preencode (state, m) {\n    c.uint.preencode(state, 1)\n    c.fixed32.preencode(state, m.capability)\n  },\n  encode (state, m) {\n    c.uint.encode(state, m.seeks ? 1 : 0)\n    c.fixed32.encode(state, m.capability)\n  },\n  decode (state) {\n    const flags = c.uint.decode(state)\n    return {\n      seeks: (flags & 1) !== 0,\n      capability: unslab(c.fixed32.decode(state))\n    }\n  }\n}\n\nconst requestBlock = {\n  preencode (state, b) {\n    c.uint.preencode(state, b.index)\n    c.uint.preencode(state, b.nodes)\n  },\n  encode (state, b) {\n    c.uint.encode(state, b.index)\n    c.uint.encode(state, b.nodes)\n  },\n  decode (state) {\n    return {\n      index: c.uint.decode(state),\n      nodes: c.uint.decode(state)\n    }\n  }\n}\n\nconst requestSeek = {\n  preencode (state, s) {\n    c.uint.preencode(state, s.bytes)\n    c.uint.preencode(state, s.padding)\n  },\n  encode (state, s) {\n    c.uint.encode(state, s.bytes)\n    c.uint.encode(state, s.padding)\n  },\n  decode (state) {\n    return {\n      bytes: c.uint.decode(state),\n      padding: c.uint.decode(state)\n    }\n  }\n}\n\nconst requestUpgrade = {\n  preencode (state, u) {\n    c.uint.preencode(state, u.start)\n    c.uint.preencode(state, u.length)\n  },\n  encode (state, u) {\n    c.uint.encode(state, u.start)\n    c.uint.encode(state, u.length)\n  },\n  decode (state) {\n    return {\n      start: c.uint.decode(state),\n      length: c.uint.decode(state)\n    }\n  }\n}\n\nwire.request = {\n  preencode (state, m) {\n    state.end++ // flags\n    c.uint.preencode(state, m.id)\n    c.uint.preencode(state, m.fork)\n\n    if (m.block) requestBlock.preencode(state, m.block)\n    if (m.hash) requestBlock.preencode(state, m.hash)\n    if (m.seek) requestSeek.preencode(state, m.seek)\n    if (m.upgrade) requestUpgrade.preencode(state, m.upgrade)\n    if (m.priority) c.uint.preencode(state, m.priority)\n  },\n  encode (state, m) {\n    const flags = (m.block ? 1 : 0) | (m.hash ? 2 : 0) | (m.seek ? 4 : 0) | (m.upgrade ? 8 : 0) | (m.manifest ? 16 : 0) | (m.priority ? 32 : 0)\n\n    c.uint.encode(state, flags)\n    c.uint.encode(state, m.id)\n    c.uint.encode(state, m.fork)\n\n    if (m.block) requestBlock.encode(state, m.block)\n    if (m.hash) requestBlock.encode(state, m.hash)\n    if (m.seek) requestSeek.encode(state, m.seek)\n    if (m.upgrade) requestUpgrade.encode(state, m.upgrade)\n    if (m.priority) c.uint.encode(state, m.priority)\n  },\n  decode (state) {\n    const flags = c.uint.decode(state)\n\n    return {\n      id: c.uint.decode(state),\n      fork: c.uint.decode(state),\n      block: flags & 1 ? requestBlock.decode(state) : null,\n      hash: flags & 2 ? requestBlock.decode(state) : null,\n      seek: flags & 4 ? requestSeek.decode(state) : null,\n      upgrade: flags & 8 ? requestUpgrade.decode(state) : null,\n      manifest: (flags & 16) !== 0,\n      priority: flags & 32 ? c.uint.decode(state) : 0\n    }\n  }\n}\n\nwire.cancel = {\n  preencode (state, m) {\n    c.uint.preencode(state, m.request)\n  },\n  encode (state, m) {\n    c.uint.encode(state, m.request)\n  },\n  decode (state, m) {\n    return {\n      request: c.uint.decode(state)\n    }\n  }\n}\n\nconst dataUpgrade = {\n  preencode (state, u) {\n    c.uint.preencode(state, u.start)\n    c.uint.preencode(state, u.length)\n    nodeArray.preencode(state, u.nodes)\n    nodeArray.preencode(state, u.additionalNodes)\n    c.buffer.preencode(state, u.signature)\n  },\n  encode (state, u) {\n    c.uint.encode(state, u.start)\n    c.uint.encode(state, u.length)\n    nodeArray.encode(state, u.nodes)\n    nodeArray.encode(state, u.additionalNodes)\n    c.buffer.encode(state, u.signature)\n  },\n  decode (state) {\n    return {\n      start: c.uint.decode(state),\n      length: c.uint.decode(state),\n      nodes: nodeArray.decode(state),\n      additionalNodes: nodeArray.decode(state),\n      signature: c.buffer.decode(state)\n    }\n  }\n}\n\nconst dataSeek = {\n  preencode (state, s) {\n    c.uint.preencode(state, s.bytes)\n    nodeArray.preencode(state, s.nodes)\n  },\n  encode (state, s) {\n    c.uint.encode(state, s.bytes)\n    nodeArray.encode(state, s.nodes)\n  },\n  decode (state) {\n    return {\n      bytes: c.uint.decode(state),\n      nodes: nodeArray.decode(state)\n    }\n  }\n}\n\nconst dataBlock = {\n  preencode (state, b) {\n    c.uint.preencode(state, b.index)\n    c.buffer.preencode(state, b.value)\n    nodeArray.preencode(state, b.nodes)\n  },\n  encode (state, b) {\n    c.uint.encode(state, b.index)\n    c.buffer.encode(state, b.value)\n    nodeArray.encode(state, b.nodes)\n  },\n  decode (state) {\n    return {\n      index: c.uint.decode(state),\n      value: c.buffer.decode(state) || EMPTY,\n      nodes: nodeArray.decode(state)\n    }\n  }\n}\n\nconst dataHash = {\n  preencode (state, b) {\n    c.uint.preencode(state, b.index)\n    nodeArray.preencode(state, b.nodes)\n  },\n  encode (state, b) {\n    c.uint.encode(state, b.index)\n    nodeArray.encode(state, b.nodes)\n  },\n  decode (state) {\n    return {\n      index: c.uint.decode(state),\n      nodes: nodeArray.decode(state)\n    }\n  }\n}\n\nwire.data = {\n  preencode (state, m) {\n    state.end++ // flags\n    c.uint.preencode(state, m.request)\n    c.uint.preencode(state, m.fork)\n\n    if (m.block) dataBlock.preencode(state, m.block)\n    if (m.hash) dataHash.preencode(state, m.hash)\n    if (m.seek) dataSeek.preencode(state, m.seek)\n    if (m.upgrade) dataUpgrade.preencode(state, m.upgrade)\n    if (m.manifest) manifest.preencode(state, m.manifest)\n  },\n  encode (state, m) {\n    const flags = (m.block ? 1 : 0) | (m.hash ? 2 : 0) | (m.seek ? 4 : 0) | (m.upgrade ? 8 : 0) | (m.manifest ? 16 : 0)\n\n    c.uint.encode(state, flags)\n    c.uint.encode(state, m.request)\n    c.uint.encode(state, m.fork)\n\n    if (m.block) dataBlock.encode(state, m.block)\n    if (m.hash) dataHash.encode(state, m.hash)\n    if (m.seek) dataSeek.encode(state, m.seek)\n    if (m.upgrade) dataUpgrade.encode(state, m.upgrade)\n    if (m.manifest) manifest.encode(state, m.manifest)\n  },\n  decode (state) {\n    const flags = c.uint.decode(state)\n\n    return {\n      request: c.uint.decode(state),\n      fork: c.uint.decode(state),\n      block: flags & 1 ? dataBlock.decode(state) : null,\n      hash: flags & 2 ? dataHash.decode(state) : null,\n      seek: flags & 4 ? dataSeek.decode(state) : null,\n      upgrade: flags & 8 ? dataUpgrade.decode(state) : null,\n      manifest: flags & 16 ? manifest.decode(state) : null\n    }\n  }\n}\n\nwire.noData = {\n  preencode (state, m) {\n    c.uint.preencode(state, m.request)\n  },\n  encode (state, m) {\n    c.uint.encode(state, m.request)\n  },\n  decode (state, m) {\n    return {\n      request: c.uint.decode(state)\n    }\n  }\n}\n\nwire.want = {\n  preencode (state, m) {\n    c.uint.preencode(state, m.start)\n    c.uint.preencode(state, m.length)\n  },\n  encode (state, m) {\n    c.uint.encode(state, m.start)\n    c.uint.encode(state, m.length)\n  },\n  decode (state) {\n    return {\n      start: c.uint.decode(state),\n      length: c.uint.decode(state)\n    }\n  }\n}\n\nwire.unwant = {\n  preencode (state, m) {\n    c.uint.preencode(state, m.start)\n    c.uint.preencode(state, m.length)\n  },\n  encode (state, m) {\n    c.uint.encode(state, m.start)\n    c.uint.encode(state, m.length)\n  },\n  decode (state, m) {\n    return {\n      start: c.uint.decode(state),\n      length: c.uint.decode(state)\n    }\n  }\n}\n\nwire.range = {\n  preencode (state, m) {\n    state.end++ // flags\n    c.uint.preencode(state, m.start)\n    if (m.length !== 1) c.uint.preencode(state, m.length)\n  },\n  encode (state, m) {\n    c.uint.encode(state, (m.drop ? 1 : 0) | (m.length === 1 ? 2 : 0))\n    c.uint.encode(state, m.start)\n    if (m.length !== 1) c.uint.encode(state, m.length)\n  },\n  decode (state) {\n    const flags = c.uint.decode(state)\n\n    return {\n      drop: (flags & 1) !== 0,\n      start: c.uint.decode(state),\n      length: (flags & 2) !== 0 ? 1 : c.uint.decode(state)\n    }\n  }\n}\n\nwire.bitfield = {\n  preencode (state, m) {\n    c.uint.preencode(state, m.start)\n    c.uint32array.preencode(state, m.bitfield)\n  },\n  encode (state, m) {\n    c.uint.encode(state, m.start)\n    c.uint32array.encode(state, m.bitfield)\n  },\n  decode (state, m) {\n    return {\n      start: c.uint.decode(state),\n      bitfield: c.uint32array.decode(state)\n    }\n  }\n}\n\nwire.sync = {\n  preencode (state, m) {\n    state.end++ // flags\n    c.uint.preencode(state, m.fork)\n    c.uint.preencode(state, m.length)\n    c.uint.preencode(state, m.remoteLength)\n  },\n  encode (state, m) {\n    c.uint.encode(state, (m.canUpgrade ? 1 : 0) | (m.uploading ? 2 : 0) | (m.downloading ? 4 : 0) | (m.hasManifest ? 8 : 0))\n    c.uint.encode(state, m.fork)\n    c.uint.encode(state, m.length)\n    c.uint.encode(state, m.remoteLength)\n  },\n  decode (state) {\n    const flags = c.uint.decode(state)\n\n    return {\n      fork: c.uint.decode(state),\n      length: c.uint.decode(state),\n      remoteLength: c.uint.decode(state),\n      canUpgrade: (flags & 1) !== 0,\n      uploading: (flags & 2) !== 0,\n      downloading: (flags & 4) !== 0,\n      hasManifest: (flags & 8) !== 0\n    }\n  }\n}\n\nwire.reorgHint = {\n  preencode (state, m) {\n    c.uint.preencode(state, m.from)\n    c.uint.preencode(state, m.to)\n    c.uint.preencode(state, m.ancestors)\n  },\n  encode (state, m) {\n    c.uint.encode(state, m.from)\n    c.uint.encode(state, m.to)\n    c.uint.encode(state, m.ancestors)\n  },\n  decode (state) {\n    return {\n      from: c.uint.encode(state),\n      to: c.uint.encode(state),\n      ancestors: c.uint.encode(state)\n    }\n  }\n}\n\nwire.extension = {\n  preencode (state, m) {\n    c.string.preencode(state, m.name)\n    c.raw.preencode(state, m.message)\n  },\n  encode (state, m) {\n    c.string.encode(state, m.name)\n    c.raw.encode(state, m.message)\n  },\n  decode (state) {\n    return {\n      name: c.string.decode(state),\n      message: c.raw.decode(state)\n    }\n  }\n}\n\nconst keyValue = {\n  preencode (state, p) {\n    c.string.preencode(state, p.key)\n    c.buffer.preencode(state, p.value)\n  },\n  encode (state, p) {\n    c.string.encode(state, p.key)\n    c.buffer.encode(state, p.value)\n  },\n  decode (state) {\n    return {\n      key: c.string.decode(state),\n      value: c.buffer.decode(state)\n    }\n  }\n}\n\nconst treeUpgrade = {\n  preencode (state, u) {\n    c.uint.preencode(state, u.fork)\n    c.uint.preencode(state, u.ancestors)\n    c.uint.preencode(state, u.length)\n    c.buffer.preencode(state, u.signature)\n  },\n  encode (state, u) {\n    c.uint.encode(state, u.fork)\n    c.uint.encode(state, u.ancestors)\n    c.uint.encode(state, u.length)\n    c.buffer.encode(state, u.signature)\n  },\n  decode (state) {\n    return {\n      fork: c.uint.decode(state),\n      ancestors: c.uint.decode(state),\n      length: c.uint.decode(state),\n      signature: c.buffer.decode(state)\n    }\n  }\n}\n\nconst bitfieldUpdate = { // TODO: can maybe be folded into a HAVE later on with the most recent spec\n  preencode (state, b) {\n    state.end++ // flags\n    c.uint.preencode(state, b.start)\n    c.uint.preencode(state, b.length)\n  },\n  encode (state, b) {\n    state.buffer[state.start++] = b.drop ? 1 : 0\n    c.uint.encode(state, b.start)\n    c.uint.encode(state, b.length)\n  },\n  decode (state) {\n    const flags = c.uint.decode(state)\n    return {\n      drop: (flags & 1) !== 0,\n      start: c.uint.decode(state),\n      length: c.uint.decode(state)\n    }\n  }\n}\n\nconst oplog = exports.oplog = {}\n\noplog.entry = {\n  preencode (state, m) {\n    state.end++ // flags\n    if (m.userData) keyValue.preencode(state, m.userData)\n    if (m.treeNodes) nodeArray.preencode(state, m.treeNodes)\n    if (m.treeUpgrade) treeUpgrade.preencode(state, m.treeUpgrade)\n    if (m.bitfield) bitfieldUpdate.preencode(state, m.bitfield)\n  },\n  encode (state, m) {\n    const s = state.start++\n    let flags = 0\n\n    if (m.userData) {\n      flags |= 1\n      keyValue.encode(state, m.userData)\n    }\n    if (m.treeNodes) {\n      flags |= 2\n      nodeArray.encode(state, m.treeNodes)\n    }\n    if (m.treeUpgrade) {\n      flags |= 4\n      treeUpgrade.encode(state, m.treeUpgrade)\n    }\n    if (m.bitfield) {\n      flags |= 8\n      bitfieldUpdate.encode(state, m.bitfield)\n    }\n\n    state.buffer[s] = flags\n  },\n  decode (state) {\n    const flags = c.uint.decode(state)\n    return {\n      userData: (flags & 1) !== 0 ? keyValue.decode(state) : null,\n      treeNodes: (flags & 2) !== 0 ? nodeArray.decode(state) : null,\n      treeUpgrade: (flags & 4) !== 0 ? treeUpgrade.decode(state) : null,\n      bitfield: (flags & 8) !== 0 ? bitfieldUpdate.decode(state) : null\n    }\n  }\n}\n\nconst keyPair = {\n  preencode (state, kp) {\n    c.buffer.preencode(state, kp.publicKey)\n    c.buffer.preencode(state, kp.secretKey)\n  },\n  encode (state, kp) {\n    c.buffer.encode(state, kp.publicKey)\n    c.buffer.encode(state, kp.secretKey)\n  },\n  decode (state) {\n    return {\n      publicKey: c.buffer.decode(state),\n      secretKey: c.buffer.decode(state)\n    }\n  }\n}\n\nconst reorgHint = {\n  preencode (state, r) {\n    c.uint.preencode(state, r.from)\n    c.uint.preencode(state, r.to)\n    c.uint.preencode(state, r.ancestors)\n  },\n  encode (state, r) {\n    c.uint.encode(state, r.from)\n    c.uint.encode(state, r.to)\n    c.uint.encode(state, r.ancestors)\n  },\n  decode (state) {\n    return {\n      from: c.uint.decode(state),\n      to: c.uint.decode(state),\n      ancestors: c.uint.decode(state)\n    }\n  }\n}\n\nconst reorgHintArray = c.array(reorgHint)\n\nconst hints = {\n  preencode (state, h) {\n    reorgHintArray.preencode(state, h.reorgs)\n    c.uint.preencode(state, h.contiguousLength)\n  },\n  encode (state, h) {\n    reorgHintArray.encode(state, h.reorgs)\n    c.uint.encode(state, h.contiguousLength)\n  },\n  decode (state) {\n    return {\n      reorgs: reorgHintArray.decode(state),\n      contiguousLength: state.start < state.end ? c.uint.decode(state) : 0\n    }\n  }\n}\n\nconst treeHeader = {\n  preencode (state, t) {\n    c.uint.preencode(state, t.fork)\n    c.uint.preencode(state, t.length)\n    c.buffer.preencode(state, t.rootHash)\n    c.buffer.preencode(state, t.signature)\n  },\n  encode (state, t) {\n    c.uint.encode(state, t.fork)\n    c.uint.encode(state, t.length)\n    c.buffer.encode(state, t.rootHash)\n    c.buffer.encode(state, t.signature)\n  },\n  decode (state) {\n    return {\n      fork: c.uint.decode(state),\n      length: c.uint.decode(state),\n      rootHash: c.buffer.decode(state),\n      signature: c.buffer.decode(state)\n    }\n  }\n}\n\nconst types = {\n  preencode (state, t) {\n    c.string.preencode(state, t.tree)\n    c.string.preencode(state, t.bitfield)\n    c.string.preencode(state, t.signer)\n  },\n  encode (state, t) {\n    c.string.encode(state, t.tree)\n    c.string.encode(state, t.bitfield)\n    c.string.encode(state, t.signer)\n  },\n  decode (state) {\n    return {\n      tree: c.string.decode(state),\n      bitfield: c.string.decode(state),\n      signer: c.string.decode(state)\n    }\n  }\n}\n\nconst externalHeader = {\n  preencode (state, m) {\n    c.uint.preencode(state, m.start)\n    c.uint.preencode(state, m.length)\n  },\n  encode (state, m) {\n    c.uint.encode(state, m.start)\n    c.uint.encode(state, m.length)\n  },\n  decode (state) {\n    return {\n      start: c.uint.decode(state),\n      length: c.uint.decode(state)\n    }\n  }\n}\n\nconst keyValueArray = c.array(keyValue)\n\noplog.header = {\n  preencode (state, h) {\n    state.end += 2 // version + flags\n    if (h.external) {\n      externalHeader.preencode(state, h.external)\n      return\n    }\n    c.fixed32.preencode(state, h.key)\n    if (h.manifest) manifest.preencode(state, h.manifest)\n    if (h.keyPair) keyPair.preencode(state, h.keyPair)\n    keyValueArray.preencode(state, h.userData)\n    treeHeader.preencode(state, h.tree)\n    hints.preencode(state, h.hints)\n  },\n  encode (state, h) {\n    c.uint.encode(state, 1)\n    if (h.external) {\n      c.uint.encode(state, 1) // ONLY set the first big for clarity\n      externalHeader.encode(state, h.external)\n      return\n    }\n    c.uint.encode(state, (h.manifest ? 2 : 0) | (h.keyPair ? 4 : 0))\n    c.fixed32.encode(state, h.key)\n    if (h.manifest) manifest.encode(state, h.manifest)\n    if (h.keyPair) keyPair.encode(state, h.keyPair)\n    keyValueArray.encode(state, h.userData)\n    treeHeader.encode(state, h.tree)\n    hints.encode(state, h.hints)\n  },\n  decode (state) {\n    const version = c.uint.decode(state)\n\n    if (version > 1) {\n      throw INVALID_OPLOG_VERSION('Invalid header version. Expected <= 1, got ' + version)\n    }\n\n    if (version === 0) {\n      const old = {\n        types: types.decode(state),\n        userData: keyValueArray.decode(state),\n        tree: treeHeader.decode(state),\n        signer: keyPair.decode(state),\n        hints: hints.decode(state)\n      }\n\n      return {\n        external: null,\n        key: old.signer.publicKey,\n        manifest: {\n          version: 0,\n          hash: old.types.tree,\n          allowPatch: false,\n          quorum: 1,\n          signers: [{\n            signature: old.types.signer,\n            namespace: DEFAULT_NAMESPACE,\n            publicKey: old.signer.publicKey\n          }],\n          prologue: null\n        },\n        keyPair: old.signer.secretKey ? old.signer : null,\n        userData: old.userData,\n        tree: old.tree,\n        hints: old.hints\n      }\n    }\n\n    const flags = c.uint.decode(state)\n\n    if (flags & 1) {\n      return {\n        external: externalHeader.decode(state),\n        key: null,\n        manifest: null,\n        keyPair: null,\n        userData: null,\n        tree: null,\n        hints: null\n      }\n    }\n\n    return {\n      external: null,\n      key: c.fixed32.decode(state),\n      manifest: (flags & 2) !== 0 ? manifest.decode(state) : null,\n      keyPair: (flags & 4) !== 0 ? keyPair.decode(state) : null,\n      userData: keyValueArray.decode(state),\n      tree: treeHeader.decode(state),\n      hints: hints.decode(state)\n    }\n  }\n}\n\nconst uintArray = c.array(c.uint)\n\nconst multisigInput = {\n  preencode (state, inp) {\n    c.uint.preencode(state, inp.signer)\n    c.fixed64.preencode(state, inp.signature)\n    c.uint.preencode(state, inp.patch)\n  },\n  encode (state, inp) {\n    c.uint.encode(state, inp.signer)\n    c.fixed64.encode(state, inp.signature)\n    c.uint.encode(state, inp.patch)\n  },\n  decode (state) {\n    return {\n      signer: c.uint.decode(state),\n      signature: c.fixed64.decode(state),\n      patch: c.uint.decode(state)\n    }\n  }\n}\n\nconst patchEncodingv0 = {\n  preencode (state, n) {\n    c.uint.preencode(state, n.start)\n    c.uint.preencode(state, n.length)\n    uintArray.preencode(state, n.nodes)\n  },\n  encode (state, n) {\n    c.uint.encode(state, n.start)\n    c.uint.encode(state, n.length)\n    uintArray.encode(state, n.nodes)\n  },\n  decode (state) {\n    return {\n      start: c.uint.decode(state),\n      length: c.uint.decode(state),\n      nodes: uintArray.decode(state)\n    }\n  }\n}\n\nconst multisigInputv0 = {\n  preencode (state, n) {\n    state.end++\n    c.uint.preencode(state, n.signer)\n    c.fixed64.preencode(state, n.signature)\n    if (n.patch) patchEncodingv0.preencode(state, n.patch)\n  },\n  encode (state, n) {\n    c.uint.encode(state, n.patch ? 1 : 0)\n    c.uint.encode(state, n.signer)\n    c.fixed64.encode(state, n.signature)\n    if (n.patch) patchEncodingv0.encode(state, n.patch)\n  },\n  decode (state) {\n    const flags = c.uint.decode(state)\n    return {\n      signer: c.uint.decode(state),\n      signature: c.fixed64.decode(state),\n      patch: (flags & 1) ? patchEncodingv0.decode(state) : null\n    }\n  }\n}\n\nconst multisigInputArrayv0 = c.array(multisigInputv0)\nconst multisigInputArray = c.array(multisigInput)\n\nconst compactNode = {\n  preencode (state, n) {\n    c.uint.preencode(state, n.index)\n    c.uint.preencode(state, n.size)\n    c.fixed32.preencode(state, n.hash)\n  },\n  encode (state, n) {\n    c.uint.encode(state, n.index)\n    c.uint.encode(state, n.size)\n    c.fixed32.encode(state, n.hash)\n  },\n  decode (state) {\n    return {\n      index: c.uint.decode(state),\n      size: c.uint.decode(state),\n      hash: c.fixed32.decode(state)\n    }\n  }\n}\n\nconst compactNodeArray = c.array(compactNode)\n\nexports.multiSignaturev0 = {\n  preencode (state, s) {\n    multisigInputArrayv0.preencode(state, s.proofs)\n    compactNodeArray.preencode(state, s.patch)\n  },\n  encode (state, s) {\n    multisigInputArrayv0.encode(state, s.proofs)\n    compactNodeArray.encode(state, s.patch)\n  },\n  decode (state) {\n    return {\n      proofs: multisigInputArrayv0.decode(state),\n      patch: compactNodeArray.decode(state)\n    }\n  }\n}\n\nexports.multiSignature = {\n  preencode (state, s) {\n    multisigInputArray.preencode(state, s.proofs)\n    compactNodeArray.preencode(state, s.patch)\n  },\n  encode (state, s) {\n    multisigInputArray.encode(state, s.proofs)\n    compactNodeArray.encode(state, s.patch)\n  },\n  decode (state) {\n    return {\n      proofs: multisigInputArray.decode(state),\n      patch: compactNodeArray.decode(state)\n    }\n  }\n}\nconst c = require('compact-encoding')\nconst b4a = require('b4a')\nconst flat = require('flat-tree')\nconst { multiSignature, multiSignaturev0 } = require('./messages')\n\nmodule.exports = {\n  assemblev0,\n  assemble,\n  inflatev0,\n  inflate,\n  partialSignature,\n  signableLength\n}\n\nfunction inflatev0 (data) {\n  return c.decode(multiSignaturev0, data)\n}\n\nfunction inflate (data) {\n  return c.decode(multiSignature, data)\n}\n\nasync function partialSignature (tree, signer, from, to = tree.length, signature = tree.signature) {\n  if (from > tree.length) return null\n  const nodes = to <= from ? null : await upgradeNodes(tree, from, to)\n\n  if (signature.byteLength !== 64) signature = c.decode(multiSignature, signature).proofs[0].signature\n\n  return {\n    signer,\n    signature,\n    patch: nodes ? to - from : 0,\n    nodes\n  }\n}\n\nasync function upgradeNodes (tree, from, to) {\n  const p = await tree.proof({ upgrade: { start: from, length: to - from } })\n  return p.upgrade.nodes\n}\n\nfunction signableLength (lengths, quorum) {\n  if (quorum <= 0) quorum = 1\n  if (quorum > lengths.length) return 0\n\n  return lengths.sort(cmp)[quorum - 1]\n}\n\nfunction cmp (a, b) {\n  return b - a\n}\n\nfunction assemblev0 (inputs) {\n  const proofs = []\n  const patch = []\n\n  for (const u of inputs) {\n    proofs.push(compressProof(u, patch))\n  }\n\n  return c.encode(multiSignaturev0, { proofs, patch })\n}\n\nfunction assemble (inputs) {\n  const proofs = []\n  const patch = []\n  const seen = new Set()\n\n  for (const u of inputs) {\n    if (u.nodes) {\n      for (const node of u.nodes) {\n        if (seen.has(node.index)) continue\n        seen.add(node.index)\n        patch.push(node)\n      }\n    }\n\n    proofs.push({\n      signer: u.signer,\n      signature: u.signature,\n      patch: u.patch\n    })\n  }\n\n  return c.encode(multiSignature, { proofs, patch })\n}\n\nfunction compareNode (a, b) {\n  if (a.index !== b.index) return false\n  if (a.size !== b.size) return false\n  return b4a.equals(a.hash, b.hash)\n}\n\nfunction compressProof (proof, nodes) {\n  return {\n    signer: proof.signer,\n    signature: proof.signature,\n    patch: proof.patch ? compressUpgrade(proof, nodes) : null\n  }\n}\n\nfunction compressUpgrade (p, nodes) {\n  const u = {\n    start: flat.rightSpan(p.nodes[p.nodes.length - 1].index) / 2 + 1,\n    length: p.patch,\n    nodes: []\n  }\n\n  for (const node of p.nodes) {\n    let present = false\n    for (let i = 0; i < nodes.length; i++) {\n      if (!compareNode(nodes[i], node)) continue\n\n      u.nodes.push(i)\n      present = true\n      break\n    }\n\n    if (present) continue\n    u.nodes.push(nodes.push(node) - 1)\n  }\n\n  return u\n}\nmodule.exports = class Mutex {\n  constructor () {\n    this.locked = false\n    this.destroyed = false\n\n    this._destroying = null\n    this._destroyError = null\n    this._queue = []\n    this._enqueue = (resolve, reject) => this._queue.push([resolve, reject])\n  }\n\n  lock () {\n    if (this.destroyed) return Promise.reject(this._destroyError || new Error('Mutex has been destroyed'))\n    if (this.locked) return new Promise(this._enqueue)\n    this.locked = true\n    return Promise.resolve()\n  }\n\n  unlock () {\n    if (!this._queue.length) {\n      this.locked = false\n      return\n    }\n    this._queue.shift()[0]()\n  }\n\n  destroy (err) {\n    if (!this._destroying) this._destroying = this.locked ? this.lock().catch(() => {}) : Promise.resolve()\n\n    this.destroyed = true\n    if (err) this._destroyError = err\n\n    if (err) {\n      while (this._queue.length) this._queue.shift()[1](err)\n    }\n\n    return this._destroying\n  }\n}\nconst cenc = require('compact-encoding')\nconst b4a = require('b4a')\nconst { crc32 } = require('crc-universal')\nconst { OPLOG_CORRUPT, OPLOG_HEADER_OVERFLOW, WRITE_FAILED } = require('hypercore-errors')\n\nmodule.exports = class Oplog {\n  constructor (storage, { pageSize = 4096, headerEncoding = cenc.raw, entryEncoding = cenc.raw, readonly = false } = {}) {\n    this.storage = storage\n    this.headerEncoding = headerEncoding\n    this.entryEncoding = entryEncoding\n    this.readonly = readonly\n    this.flushed = false\n    this.byteLength = 0\n    this.length = 0\n\n    this._headers = [1, 0]\n    this._pageSize = pageSize\n    this._entryOffset = pageSize * 2\n  }\n\n  _addHeader (state, len, headerBit, partialBit) {\n    // add the uint header (frame length and flush info)\n    state.start = state.start - len - 4\n    cenc.uint32.encode(state, (len << 2) | headerBit | partialBit)\n\n    // crc32 the length + header-bit + content and prefix it\n    state.start -= 8\n    cenc.uint32.encode(state, crc32(state.buffer.subarray(state.start + 4, state.start + 8 + len)))\n    state.start += len + 4\n  }\n\n  _decodeEntry (state, enc) {\n    if (state.end - state.start < 8) return null\n    const cksum = cenc.uint32.decode(state)\n    const l = cenc.uint32.decode(state)\n    const length = l >>> 2\n    const headerBit = l & 1\n    const partialBit = l & 2\n\n    if (state.end - state.start < length) return null\n\n    const end = state.start + length\n\n    if (crc32(state.buffer.subarray(state.start - 4, end)) !== cksum) {\n      return null\n    }\n\n    const result = { header: headerBit, partial: partialBit !== 0, byteLength: length + 8, message: null }\n\n    try {\n      result.message = enc.decode({ start: state.start, end, buffer: state.buffer })\n    } catch {\n      return null\n    }\n\n    state.start = end\n\n    return result\n  }\n\n  async open () {\n    const buffer = await this._readAll() // TODO: stream the oplog in on load maybe?\n    const state = { start: 0, end: buffer.byteLength, buffer }\n    const result = { header: null, entries: [] }\n\n    this.byteLength = 0\n    this.length = 0\n\n    const h1 = this._decodeEntry(state, this.headerEncoding)\n    state.start = this._pageSize\n\n    const h2 = this._decodeEntry(state, this.headerEncoding)\n    state.start = this._entryOffset\n\n    if (!h1 && !h2) {\n      // reset state...\n      this.flushed = false\n      this._headers[0] = 1\n      this._headers[1] = 0\n\n      if (buffer.byteLength >= this._entryOffset) {\n        throw OPLOG_CORRUPT()\n      }\n      return result\n    }\n\n    this.flushed = true\n\n    if (h1 && !h2) {\n      this._headers[0] = h1.header\n      this._headers[1] = h1.header\n    } else if (!h1 && h2) {\n      this._headers[0] = (h2.header + 1) & 1\n      this._headers[1] = h2.header\n    } else {\n      this._headers[0] = h1.header\n      this._headers[1] = h2.header\n    }\n\n    const header = (this._headers[0] + this._headers[1]) & 1\n    const decoded = []\n\n    result.header = header ? h2.message : h1.message\n\n    while (true) {\n      const entry = this._decodeEntry(state, this.entryEncoding)\n      if (!entry) break\n      if (entry.header !== header) break\n\n      decoded.push(entry)\n    }\n\n    while (decoded.length > 0 && decoded[decoded.length - 1].partial) decoded.pop()\n\n    for (const e of decoded) {\n      result.entries.push(e.message)\n      this.byteLength += e.byteLength\n      this.length++\n    }\n\n    const size = this.byteLength + this._entryOffset\n\n    if (size === buffer.byteLength) return result\n\n    await new Promise((resolve, reject) => {\n      if (this.readonly) return resolve()\n      this.storage.truncate(size, err => {\n        if (err) return reject(err)\n        resolve()\n      })\n    })\n\n    return result\n  }\n\n  _readAll () {\n    return new Promise((resolve, reject) => {\n      this.storage.open(err => {\n        if (err && err.code !== 'ENOENT') return reject(err)\n        if (err) return resolve(b4a.alloc(0))\n        this.storage.stat((err, stat) => {\n          if (err && err.code !== 'ENOENT') return reject(err)\n          this.storage.read(0, stat.size, (err, buf) => {\n            if (err) return reject(err)\n            resolve(buf)\n          })\n        })\n      })\n    })\n  }\n\n  flush (header) {\n    const state = { start: 8, end: 8, buffer: null }\n    const i = this._headers[0] === this._headers[1] ? 1 : 0\n    const bit = (this._headers[i] + 1) & 1\n\n    this.headerEncoding.preencode(state, header)\n    if (state.end > this._pageSize) throw OPLOG_HEADER_OVERFLOW()\n    state.buffer = b4a.allocUnsafe(state.end)\n    this.headerEncoding.encode(state, header)\n    this._addHeader(state, state.end - 8, bit, 0)\n\n    return this._writeHeaderAndTruncate(i, bit, state.buffer)\n  }\n\n  _writeHeaderAndTruncate (i, bit, buf) {\n    return new Promise((resolve, reject) => {\n      this.storage.write(i === 0 ? 0 : this._pageSize, buf, err => {\n        if (err) return reject(err)\n\n        this.storage.truncate(this._entryOffset, err => {\n          if (err) return reject(err)\n\n          this._headers[i] = bit\n          this.byteLength = 0\n          this.length = 0\n          this.flushed = true\n\n          resolve()\n        })\n      })\n    })\n  }\n\n  append (batch, atomic = true) {\n    if (!Array.isArray(batch)) batch = [batch]\n\n    const state = { start: 0, end: batch.length * 8, buffer: null }\n    const bit = (this._headers[0] + this._headers[1]) & 1\n\n    for (let i = 0; i < batch.length; i++) {\n      this.entryEncoding.preencode(state, batch[i])\n    }\n\n    state.buffer = b4a.allocUnsafe(state.end)\n\n    for (let i = 0; i < batch.length; i++) {\n      const start = state.start += 8 // space for header\n      const partial = (atomic && i < batch.length - 1) ? 2 : 0\n      this.entryEncoding.encode(state, batch[i])\n      this._addHeader(state, state.start - start, bit, partial)\n    }\n\n    return this._append(state.buffer, batch.length)\n  }\n\n  close () {\n    return new Promise((resolve, reject) => {\n      this.storage.close(err => {\n        if (err) return reject(err)\n        resolve()\n      })\n    })\n  }\n\n  _append (buf, count) {\n    return new Promise((resolve, reject) => {\n      this.storage.write(this._entryOffset + this.byteLength, buf, err => {\n        if (err) return reject(WRITE_FAILED(err.message))\n\n        this.byteLength += buf.byteLength\n        this.length += count\n\n        resolve()\n      })\n    })\n  }\n}\nconst FIFO = require('fast-fifo')\n\nmodule.exports = class ReceiverQueue {\n  constructor () {\n    this.queue = new FIFO()\n    this.priority = []\n    this.requests = new Map()\n    this.length = 0\n  }\n\n  push (req) {\n    // TODO: use a heap at some point if we wanna support multiple prios\n    if (req.priority > 0) this.priority.push(req)\n    else this.queue.push(req)\n\n    this.requests.set(req.id, req)\n    this.length++\n  }\n\n  shift () {\n    while (this.priority.length > 0) {\n      const msg = this.priority.pop()\n      const req = this._processRequest(msg)\n      if (req !== null) return req\n    }\n\n    while (this.queue.length > 0) {\n      const msg = this.queue.shift()\n      const req = this._processRequest(msg)\n      if (req !== null) return req\n    }\n\n    return null\n  }\n\n  _processRequest (req) {\n    if (req.block || req.hash || req.seek || req.upgrade || req.manifest) {\n      this.requests.delete(req.id)\n      this.length--\n      return req\n    }\n\n    return null\n  }\n\n  clear () {\n    this.queue.clear()\n    this.priority = []\n    this.length = 0\n    this.requests.clear()\n  }\n\n  delete (id) {\n    const req = this.requests.get(id)\n    if (!req) return\n\n    req.block = null\n    req.hash = null\n    req.seek = null\n    req.upgrade = null\n    req.manifest = false\n\n    this.requests.delete(id)\n    this.length--\n\n    if (this.length === 0) {\n      this.queue.clear()\n      this.priority = []\n    }\n  }\n}\nconst BigSparseArray = require('big-sparse-array')\nconst quickbit = require('./compat').quickbit\n\nconst BITS_PER_PAGE = 32768\nconst BYTES_PER_PAGE = BITS_PER_PAGE / 8\nconst WORDS_PER_PAGE = BYTES_PER_PAGE / 4\nconst BITS_PER_SEGMENT = 2097152\nconst BYTES_PER_SEGMENT = BITS_PER_SEGMENT / 8\nconst PAGES_PER_SEGMENT = BITS_PER_SEGMENT / BITS_PER_PAGE\n\nclass RemoteBitfieldPage {\n  constructor (index, bitfield, segment) {\n    this.index = index\n    this.offset = index * BYTES_PER_PAGE - segment.offset\n    this.bitfield = bitfield\n    this.segment = segment\n\n    segment.add(this)\n  }\n\n  get tree () {\n    return this.segment.tree\n  }\n\n  get (index) {\n    return quickbit.get(this.bitfield, index)\n  }\n\n  set (index, val) {\n    if (quickbit.set(this.bitfield, index, val)) {\n      this.tree.update(this.offset * 8 + index)\n    }\n  }\n\n  setRange (start, length, val) {\n    quickbit.fill(this.bitfield, val, start, start + length)\n\n    let i = Math.floor(start / 128)\n    const n = i + Math.ceil(length / 128)\n\n    while (i <= n) this.tree.update(this.offset * 8 + i++ * 128)\n  }\n\n  findFirst (val, position) {\n    return quickbit.findFirst(this.bitfield, val, position)\n  }\n\n  findLast (val, position) {\n    return quickbit.findLast(this.bitfield, val, position)\n  }\n\n  insert (start, bitfield) {\n    this.bitfield.set(bitfield, start / 32)\n    this.segment.refresh()\n  }\n\n  clear (start, bitfield) {\n    quickbit.clear(this.bitfield, { field: bitfield, offset: start })\n  }\n}\n\nclass RemoteBitfieldSegment {\n  constructor (index) {\n    this.index = index\n    this.offset = index * BYTES_PER_SEGMENT\n    this.tree = quickbit.Index.from([], BYTES_PER_SEGMENT)\n    this.pages = new Array(PAGES_PER_SEGMENT)\n    this.pagesLength = 0\n  }\n\n  get chunks () {\n    return this.tree.chunks\n  }\n\n  refresh () {\n    this.tree = quickbit.Index.from(this.tree.chunks, BYTES_PER_SEGMENT)\n  }\n\n  add (page) {\n    const pageIndex = page.index - this.index * PAGES_PER_SEGMENT\n    if (pageIndex >= this.pagesLength) this.pagesLength = pageIndex + 1\n\n    this.pages[pageIndex] = page\n\n    const chunk = { field: page.bitfield, offset: page.offset }\n\n    this.chunks.push(chunk)\n\n    for (let i = this.chunks.length - 2; i >= 0; i--) {\n      const prev = this.chunks[i]\n      if (prev.offset <= chunk.offset) break\n      this.chunks[i] = chunk\n      this.chunks[i + 1] = prev\n    }\n  }\n\n  findFirst (val, position) {\n    position = this.tree.skipFirst(!val, position)\n\n    let j = position & (BITS_PER_PAGE - 1)\n    let i = (position - j) / BITS_PER_PAGE\n\n    if (i >= PAGES_PER_SEGMENT) return -1\n\n    while (i < this.pagesLength) {\n      const p = this.pages[i]\n\n      let index = -1\n\n      if (p) index = p.findFirst(val, j)\n      else if (!val) index = j\n\n      if (index !== -1) return i * BITS_PER_PAGE + index\n\n      j = 0\n      i++\n    }\n\n    return (val || this.pagesLength === PAGES_PER_SEGMENT) ? -1 : this.pagesLength * BITS_PER_PAGE\n  }\n\n  findLast (val, position) {\n    position = this.tree.skipLast(!val, position)\n\n    let j = position & (BITS_PER_PAGE - 1)\n    let i = (position - j) / BITS_PER_PAGE\n\n    if (i >= PAGES_PER_SEGMENT) return -1\n\n    while (i >= 0) {\n      const p = this.pages[i]\n\n      let index = -1\n\n      if (p) index = p.findLast(val, j)\n      else if (!val) index = j\n\n      if (index !== -1) return i * BITS_PER_PAGE + index\n\n      j = BITS_PER_PAGE - 1\n      i--\n    }\n\n    return -1\n  }\n}\n\nmodule.exports = class RemoteBitfield {\n  static BITS_PER_PAGE = BITS_PER_PAGE\n\n  constructor () {\n    this._pages = new BigSparseArray()\n    this._segments = new BigSparseArray()\n    this._maxSegments = 0\n  }\n\n  getBitfield (index) {\n    const j = index & (BITS_PER_PAGE - 1)\n    const i = (index - j) / BITS_PER_PAGE\n\n    const p = this._pages.get(i)\n    return p || null\n  }\n\n  get (index) {\n    const j = index & (BITS_PER_PAGE - 1)\n    const i = (index - j) / BITS_PER_PAGE\n\n    const p = this._pages.get(i)\n\n    return p ? p.get(j) : false\n  }\n\n  set (index, val) {\n    const j = index & (BITS_PER_PAGE - 1)\n    const i = (index - j) / BITS_PER_PAGE\n\n    let p = this._pages.get(i)\n\n    if (!p && val) {\n      const k = Math.floor(i / PAGES_PER_SEGMENT)\n      const s = this._segments.get(k) || this._segments.set(k, new RemoteBitfieldSegment(k))\n      if (this._maxSegments <= k) this._maxSegments = k + 1\n\n      p = this._pages.set(i, new RemoteBitfieldPage(i, new Uint32Array(WORDS_PER_PAGE), s))\n    }\n\n    if (p) p.set(j, val)\n  }\n\n  setRange (start, length, val) {\n    let j = start & (BITS_PER_PAGE - 1)\n    let i = (start - j) / BITS_PER_PAGE\n\n    while (length > 0) {\n      let p = this._pages.get(i)\n\n      if (!p && val) {\n        const k = Math.floor(i / PAGES_PER_SEGMENT)\n        const s = this._segments.get(k) || this._segments.set(k, new RemoteBitfieldSegment(k))\n        if (this._maxSegments <= k) this._maxSegments = k + 1\n\n        p = this._pages.set(i, new RemoteBitfieldPage(i, new Uint32Array(WORDS_PER_PAGE), s))\n      }\n\n      const end = Math.min(j + length, BITS_PER_PAGE)\n      const range = end - j\n\n      if (p) p.setRange(j, range, val)\n\n      j = 0\n      i++\n      length -= range\n    }\n  }\n\n  findFirst (val, position) {\n    let j = position & (BITS_PER_SEGMENT - 1)\n    let i = (position - j) / BITS_PER_SEGMENT\n\n    while (i < this._maxSegments) {\n      const s = this._segments.get(i)\n\n      let index = -1\n\n      if (s) index = s.findFirst(val, j)\n      else if (!val) index = j\n\n      if (index !== -1) return i * BITS_PER_SEGMENT + index\n\n      j = 0\n      i++\n    }\n\n    // For the val === false case, we always return at least\n    // the 'position', also if nothing was found\n    return val\n      ? -1\n      : Math.max(position, this._maxSegments * BITS_PER_SEGMENT)\n  }\n\n  firstSet (position) {\n    return this.findFirst(true, position)\n  }\n\n  firstUnset (position) {\n    return this.findFirst(false, position)\n  }\n\n  findLast (val, position) {\n    let j = position & (BITS_PER_SEGMENT - 1)\n    let i = (position - j) / BITS_PER_SEGMENT\n\n    while (i >= 0) {\n      const s = this._segments.get(i)\n\n      let index = -1\n\n      if (s) index = s.findLast(val, j)\n      else if (!val) index = j\n\n      if (index !== -1) return i * BITS_PER_SEGMENT + index\n\n      j = BITS_PER_SEGMENT - 1\n      i--\n    }\n\n    return -1\n  }\n\n  lastSet (position) {\n    return this.findLast(true, position)\n  }\n\n  lastUnset (position) {\n    return this.findLast(false, position)\n  }\n\n  insert (start, bitfield) {\n    if (start % 32 !== 0) return false\n\n    let length = bitfield.byteLength * 8\n\n    let j = start & (BITS_PER_PAGE - 1)\n    let i = (start - j) / BITS_PER_PAGE\n\n    while (length > 0) {\n      let p = this._pages.get(i)\n\n      if (!p) {\n        const k = Math.floor(i / PAGES_PER_SEGMENT)\n        const s = this._segments.get(k) || this._segments.set(k, new RemoteBitfieldSegment(k))\n        if (this._maxSegments <= k) this._maxSegments = k + 1\n\n        p = this._pages.set(i, new RemoteBitfieldPage(i, new Uint32Array(WORDS_PER_PAGE), s))\n      }\n\n      const end = Math.min(j + length, BITS_PER_PAGE)\n      const range = end - j\n\n      p.insert(j, bitfield.subarray(0, range / 32))\n\n      bitfield = bitfield.subarray(range / 32)\n\n      j = 0\n      i++\n      length -= range\n    }\n\n    return true\n  }\n\n  clear (start, bitfield) {\n    if (start % 32 !== 0) return false\n\n    let length = bitfield.byteLength * 8\n\n    let j = start & (BITS_PER_PAGE - 1)\n    let i = (start - j) / BITS_PER_PAGE\n\n    while (length > 0) {\n      let p = this._pages.get(i)\n\n      if (!p) {\n        const k = Math.floor(i / PAGES_PER_SEGMENT)\n        const s = this._segments.get(k) || this._segments.set(k, new RemoteBitfieldSegment(k))\n        if (this._maxSegments <= k) this._maxSegments = k + 1\n\n        p = this._pages.set(i, new RemoteBitfieldPage(i, new Uint32Array(WORDS_PER_PAGE), s))\n      }\n\n      const end = Math.min(j + length, BITS_PER_PAGE)\n      const range = end - j\n\n      p.clear(j, bitfield.subarray(0, range / 32))\n\n      bitfield = bitfield.subarray(range / 32)\n\n      j = 0\n      i++\n      length -= range\n    }\n\n    return true\n  }\n}\n/* DEV DOCS\n  Every hypercore has one Replicator object managing its connections to other peers.\n  There is one Peer object per peer connected to the Hypercore.\n  Hypercores do not know about other hypercores, so when a peer is connected to multiple cores, there exists one Peer object per core.\n\n  Hypercore indicates block should be downloaded through methods like Replicator.addRange or Replicator.addBlock\n  Hypercore calls Replicator.updateActivity every time a hypercore session opens/closes\n  Replicator.updateActivity ensures the Hypercore is downloading blocks as expected\n  Replicator keeps track of:\n    - Which blocks need to be downloaded (Replicator._blocks)\n    - Which blocks currently have inflight requests (Replicator._inflight)\n\n  Blocks are requested from remote peers by Peer objects. The flow is:\n    - The replicator's updatePeer method gets called\n    - The replicator detects whether the Peer can accept more requests (for example by checking if it's maxed out on inflight blocks)\n    - The replicator then tells the Peer what to request (e.g. Peer_requestRange or Peer._requestBlock methods)\n\n  The Peer object is responsible for tracking\n    - Which blocks does the Peer have available (tracked in remoteBitfield)\n    - Which blocks are you actively looking for from this peer (tracked in missingBlocks)\n    - How many blocks are currently inflight (tracked in inflight)\n  The Peer uses this information to decide which blocks to request form the peer in response to _requestRange requests and the like.\n*/\n\nconst b4a = require('b4a')\nconst safetyCatch = require('safety-catch')\nconst RandomIterator = require('random-array-iterator')\nconst flatTree = require('flat-tree')\nconst ReceiverQueue = require('./receiver-queue')\nconst HotswapQueue = require('./hotswap-queue')\nconst RemoteBitfield = require('./remote-bitfield')\nconst { REQUEST_CANCELLED, REQUEST_TIMEOUT, INVALID_CAPABILITY, SNAPSHOT_NOT_AVAILABLE } = require('hypercore-errors')\nconst m = require('./messages')\nconst caps = require('./caps')\n\nconst DEFAULT_MAX_INFLIGHT = [16, 512]\nconst SCALE_LATENCY = 50\nconst DEFAULT_SEGMENT_SIZE = 256 * 1024 * 8 // 256 KiB in bits\nconst NOT_DOWNLOADING_SLACK = 20000 + (Math.random() * 20000) | 0\nconst MAX_PEERS_UPGRADE = 3\n\nconst MAX_RANGES = 64\n\nconst PRIORITY = {\n  NORMAL: 0,\n  HIGH: 1,\n  VERY_HIGH: 2,\n  CANCELLED: 255 // reserved to mark cancellation\n}\n\nclass Attachable {\n  constructor () {\n    this.resolved = false\n    this.refs = []\n  }\n\n  attach (session) {\n    const r = {\n      context: this,\n      session,\n      sindex: 0,\n      rindex: 0,\n      snapshot: true,\n      resolve: null,\n      reject: null,\n      promise: null,\n      timeout: null\n    }\n\n    r.sindex = session.push(r) - 1\n    r.rindex = this.refs.push(r) - 1\n    r.promise = new Promise((resolve, reject) => {\n      r.resolve = resolve\n      r.reject = reject\n    })\n\n    return r\n  }\n\n  detach (r, err = null) {\n    if (r.context !== this) return false\n\n    this._detach(r)\n    this._cancel(r, err)\n    this.gc()\n\n    return true\n  }\n\n  _detach (r) {\n    const rh = this.refs.pop()\n    const sh = r.session.pop()\n\n    if (r.rindex < this.refs.length) this.refs[rh.rindex = r.rindex] = rh\n    if (r.sindex < r.session.length) r.session[sh.sindex = r.sindex] = sh\n\n    destroyRequestTimeout(r)\n    r.context = null\n\n    return r\n  }\n\n  gc () {\n    if (this.refs.length === 0) this._unref()\n  }\n\n  _cancel (r, err) {\n    r.reject(err || REQUEST_CANCELLED())\n  }\n\n  _unref () {\n    // overwrite me\n  }\n\n  resolve (val) {\n    this.resolved = true\n    while (this.refs.length > 0) {\n      this._detach(this.refs[this.refs.length - 1]).resolve(val)\n    }\n  }\n\n  reject (err) {\n    this.resolved = true\n    while (this.refs.length > 0) {\n      this._detach(this.refs[this.refs.length - 1]).reject(err)\n    }\n  }\n\n  setTimeout (r, ms) {\n    destroyRequestTimeout(r)\n    r.timeout = setTimeout(onrequesttimeout, ms, r)\n  }\n}\n\nclass BlockRequest extends Attachable {\n  constructor (tracker, index, priority) {\n    super()\n\n    this.index = index\n    this.priority = priority\n    this.inflight = []\n    this.queued = false\n    this.hotswap = null\n    this.tracker = tracker\n  }\n\n  _unref () {\n    this.queued = false\n\n    for (const req of this.inflight) {\n      req.peer._cancelRequest(req)\n    }\n\n    this.tracker.remove(this.index)\n    removeHotswap(this)\n  }\n}\n\nclass RangeRequest extends Attachable {\n  constructor (ranges, start, end, linear, ifAvailable, blocks) {\n    super()\n\n    this.start = start\n    this.end = end\n    this.linear = linear\n    this.ifAvailable = ifAvailable\n    this.blocks = blocks\n    this.ranges = ranges\n\n    // As passed by the user, immut\n    this.userStart = start\n    this.userEnd = end\n  }\n\n  _unref () {\n    const i = this.ranges.indexOf(this)\n    if (i === -1) return\n    const h = this.ranges.pop()\n    if (i < this.ranges.length) this.ranges[i] = h\n  }\n\n  _cancel (r) {\n    r.resolve(false)\n  }\n}\n\nclass UpgradeRequest extends Attachable {\n  constructor (replicator, fork, length) {\n    super()\n\n    this.fork = fork\n    this.length = length\n    this.inflight = []\n    this.replicator = replicator\n  }\n\n  _unref () {\n    if (this.replicator.eagerUpgrade === true || this.inflight.length > 0) return\n    this.replicator._upgrade = null\n  }\n\n  _cancel (r) {\n    r.resolve(false)\n  }\n}\n\nclass SeekRequest extends Attachable {\n  constructor (seeks, seeker) {\n    super()\n\n    this.seeker = seeker\n    this.inflight = []\n    this.seeks = seeks\n  }\n\n  _unref () {\n    if (this.inflight.length > 0) return\n    const i = this.seeks.indexOf(this)\n    if (i === -1) return\n    const h = this.seeks.pop()\n    if (i < this.seeks.length) this.seeks[i] = h\n  }\n}\n\nclass InflightTracker {\n  constructor () {\n    this._requests = []\n    this._free = []\n  }\n\n  get idle () {\n    return this._requests.length === this._free.length\n  }\n\n  * [Symbol.iterator] () {\n    for (const req of this._requests) {\n      if (req !== null) yield req\n    }\n  }\n\n  add (req) {\n    const id = this._free.length ? this._free.pop() : this._requests.push(null)\n    req.id = id\n    this._requests[id - 1] = req\n    return req\n  }\n\n  get (id) {\n    return id <= this._requests.length ? this._requests[id - 1] : null\n  }\n\n  remove (id, roundtrip) {\n    if (id > this._requests.length) return\n    this._requests[id - 1] = null\n    if (roundtrip === true) this._free.push(id)\n  }\n\n  reusable (id) {\n    this._free.push(id)\n  }\n}\n\nclass BlockTracker {\n  constructor () {\n    this._map = new Map()\n  }\n\n  [Symbol.iterator] () {\n    return this._map.values()\n  }\n\n  isEmpty () {\n    return this._map.size === 0\n  }\n\n  has (index) {\n    return this._map.has(index)\n  }\n\n  get (index) {\n    return this._map.get(index) || null\n  }\n\n  add (index, priority) {\n    let b = this._map.get(index)\n    if (b) return b\n\n    b = new BlockRequest(this, index, priority)\n    this._map.set(index, b)\n\n    return b\n  }\n\n  remove (index) {\n    const b = this.get(index)\n    this._map.delete(index)\n    return b\n  }\n}\n\nclass RoundtripQueue {\n  constructor () {\n    this.queue = []\n    this.tick = 0\n  }\n\n  clear () {\n    const ids = new Array(this.queue.length)\n    for (let i = 0; i < ids.length; i++) {\n      ids[i] = this.queue[i][1]\n    }\n\n    this.queue = []\n\n    return ids\n  }\n\n  add (id) {\n    this.queue.push([++this.tick, id])\n  }\n\n  flush (tick) {\n    let flushed = null\n\n    for (let i = 0; i < this.queue.length; i++) {\n      if (this.queue[i][0] > tick) break\n      if (flushed === null) flushed = []\n      flushed.push(this.queue[i][1])\n    }\n\n    if (flushed !== null) this.queue.splice(0, flushed.length)\n    return flushed\n  }\n}\n\nclass Peer {\n  constructor (replicator, protomux, channel, useSession, inflightRange) {\n    this.core = replicator.core\n    this.replicator = replicator\n    this.stream = protomux.stream\n    this.protomux = protomux\n    this.remotePublicKey = this.stream.remotePublicKey\n    this.remoteSupportsSeeks = false\n    this.inflightRange = inflightRange\n\n    this.paused = false\n    this.removed = false\n\n    this.useSession = useSession\n\n    this.channel = channel\n    this.channel.userData = this\n\n    this.wireSync = this.channel.messages[0]\n    this.wireRequest = this.channel.messages[1]\n    this.wireCancel = this.channel.messages[2]\n    this.wireData = this.channel.messages[3]\n    this.wireNoData = this.channel.messages[4]\n    this.wireWant = this.channel.messages[5]\n    this.wireUnwant = this.channel.messages[6]\n    this.wireBitfield = this.channel.messages[7]\n    this.wireRange = this.channel.messages[8]\n    this.wireExtension = this.channel.messages[9]\n\n    // Same stats as replicator, but for this specific peer\n    this.stats = {\n      wireSync: { tx: 0, rx: 0 },\n      wireRequest: { tx: 0, rx: 0 },\n      wireCancel: { tx: 0, rx: 0 },\n      wireData: { tx: 0, rx: 0 },\n      wireWant: { tx: 0, rx: 0 },\n      wireBitfield: { tx: 0, rx: 0 },\n      wireRange: { tx: 0, rx: 0 },\n      wireExtension: { tx: 0, rx: 0 },\n      hotswaps: 0\n    }\n\n    this.receiverQueue = new ReceiverQueue()\n    this.receiverBusy = false\n\n    // most often not used, so made on demand\n    this.roundtripQueue = null\n\n    this.inflight = 0\n    this.dataProcessing = 0\n\n    this.canUpgrade = true\n\n    this.needsSync = false\n    this.syncsProcessing = 0\n\n    this._remoteContiguousLength = 0\n\n    // TODO: tweak pipelining so that data sent BEFORE remoteOpened is not cap verified!\n    // we might wanna tweak that with some crypto, ie use the cap to encrypt it...\n    // or just be aware of that, to only push non leaky data\n\n    this.remoteOpened = false\n    this.remoteBitfield = new RemoteBitfield()\n    this.missingBlocks = new RemoteBitfield()\n\n    this.remoteFork = 0\n    this.remoteLength = 0\n    this.remoteCanUpgrade = false\n    this.remoteUploading = true\n    this.remoteDownloading = true\n    this.remoteSynced = false\n    this.remoteHasManifest = false\n    this.remoteRequests = new Map()\n\n    this.segmentsWanted = new Set()\n    this.broadcastedNonSparse = false\n\n    this.lengthAcked = 0\n\n    this.extensions = new Map()\n    this.lastExtensionSent = ''\n    this.lastExtensionRecv = ''\n\n    replicator._ifAvailable++\n  }\n\n  get remoteContiguousLength () {\n    return this.remoteBitfield.findFirst(false, this._remoteContiguousLength)\n  }\n\n  getMaxInflight () {\n    const stream = this.stream.rawStream\n    if (!stream.udx) return Math.min(this.inflightRange[1], this.inflightRange[0] * 3)\n\n    const scale = stream.rtt <= SCALE_LATENCY ? 1 : stream.rtt / SCALE_LATENCY * Math.min(1, 2 / this.replicator.peers.length)\n    return Math.max(this.inflightRange[0], Math.round(Math.min(this.inflightRange[1], this.inflightRange[0] * scale)))\n  }\n\n  getMaxHotswapInflight () {\n    const inf = this.getMaxInflight()\n    return Math.max(16, inf / 2)\n  }\n\n  signalUpgrade () {\n    if (this._shouldUpdateCanUpgrade() === true) this._updateCanUpgradeAndSync()\n    else this.sendSync()\n  }\n\n  _markInflight (index) {\n    this.missingBlocks.set(index, false)\n  }\n\n  broadcastRange (start, length, drop) {\n    if (drop) this._unclearLocalRange(start, length)\n    else this._clearLocalRange(start, length)\n\n    // TODO: consider also adding early-returns on the drop===true case\n    if (!drop) {\n      // No need to broadcast if the remote already has this range\n\n      if (this._remoteContiguousLength >= start + length) return\n\n      if (length === 1) {\n        if (this.remoteBitfield.get(start)) return\n      } else {\n        if (this.remoteBitfield.firstUnset(start) >= start + length) return\n      }\n    }\n\n    this.wireRange.send({\n      drop,\n      start,\n      length\n    })\n    incrementTx(this.stats.wireRange, this.replicator.stats.wireRange)\n  }\n\n  extension (name, message) {\n    this.wireExtension.send({ name: name === this.lastExtensionSent ? '' : name, message })\n    incrementTx(this.stats.wireExtension, this.replicator.stats.wireExtension)\n    this.lastExtensionSent = name\n  }\n\n  onextension (message) {\n    const name = message.name || this.lastExtensionRecv\n    this.lastExtensionRecv = name\n    const ext = this.extensions.get(name)\n    if (ext) ext._onmessage({ start: 0, end: message.message.byteLength, buffer: message.message }, this)\n  }\n\n  sendSync () {\n    if (this.syncsProcessing !== 0) {\n      this.needsSync = true\n      return\n    }\n\n    if (this.core.tree.fork !== this.remoteFork) {\n      this.canUpgrade = false\n    }\n\n    this.needsSync = false\n\n    this.wireSync.send({\n      fork: this.core.tree.fork,\n      length: this.core.tree.length,\n      remoteLength: this.core.tree.fork === this.remoteFork ? this.remoteLength : 0,\n      canUpgrade: this.canUpgrade,\n      uploading: true,\n      downloading: this.replicator.isDownloading(),\n      hasManifest: !!this.core.header.manifest && this.core.compat === false\n    })\n    incrementTx(this.stats.wireSync, this.replicator.stats.wireSync)\n  }\n\n  onopen ({ seeks, capability }) {\n    const expected = caps.replicate(this.stream.isInitiator === false, this.replicator.key, this.stream.handshakeHash)\n\n    if (b4a.equals(capability, expected) !== true) { // TODO: change this to a rejection instead, less leakage\n      throw INVALID_CAPABILITY('Remote sent an invalid replication capability')\n    }\n\n    if (this.remoteOpened === true) return\n    this.remoteOpened = true\n    this.remoteSupportsSeeks = seeks\n\n    this.protomux.cork()\n\n    this.sendSync()\n\n    const contig = Math.min(this.core.tree.length, this.core.header.hints.contiguousLength)\n    if (contig > 0) {\n      this.broadcastRange(0, contig, false)\n\n      if (contig === this.core.tree.length) {\n        this.broadcastedNonSparse = true\n      }\n    }\n\n    this.replicator._ifAvailable--\n    this.replicator._addPeer(this)\n\n    this.protomux.uncork()\n  }\n\n  onclose (isRemote) {\n    // we might have signalled to the remote that we are done (ie not downloading) and the remote might agree on that\n    // if that happens, the channel might be closed by the remote. if so just renegotiate it.\n    // TODO: add a CLOSE_REASON to mux to we can make this cleaner...\n    const reopen = isRemote === true && this.remoteOpened === true && this.remoteDownloading === false &&\n       this.remoteUploading === true && this.replicator.downloading === true\n\n    if (this.remoteOpened === false) {\n      if (this.useSession) {\n        this.replicator._peerSessions--\n        this.replicator._closeSessionMaybe()\n      }\n      this.replicator._ifAvailable--\n      this.replicator.updateAll()\n      return\n    }\n\n    this.remoteOpened = false\n    this.removed = true\n    this.remoteRequests.clear() // cancel all\n    this.receiverQueue.clear()\n\n    if (this.roundtripQueue !== null) {\n      for (const id of this.roundtripQueue.clear()) this.replicator._inflight.reusable(id)\n    }\n\n    this.replicator._removePeer(this)\n\n    if (reopen) {\n      this.replicator._makePeer(this.protomux, this.useSession)\n    }\n\n    if (this.useSession) {\n      this.replicator._peerSessions--\n      this.replicator._closeSessionMaybe()\n    }\n  }\n\n  closeIfIdle () {\n    if (this.remoteDownloading === false && this.replicator.isDownloading() === false) {\n      // idling, shut it down...\n      this.channel.close()\n      return true\n    }\n\n    return false\n  }\n\n  async onsync ({ fork, length, remoteLength, canUpgrade, uploading, downloading, hasManifest }) {\n    const lengthChanged = length !== this.remoteLength\n    const sameFork = fork === this.core.tree.fork\n\n    this.remoteSynced = true\n    this.remoteFork = fork\n    this.remoteLength = length\n    this.remoteCanUpgrade = canUpgrade\n    this.remoteUploading = uploading\n    this.remoteDownloading = downloading\n    this.remoteHasManifest = hasManifest\n\n    if (this.closeIfIdle()) return\n\n    this.lengthAcked = sameFork ? remoteLength : 0\n    this.syncsProcessing++\n\n    this.replicator._updateFork(this)\n\n    if (this.remoteLength > this.core.tree.length && this.lengthAcked === this.core.tree.length) {\n      if (this.replicator._addUpgradeMaybe() !== null) this._update()\n    }\n\n    const upgrade = (lengthChanged === false || sameFork === false)\n      ? this.canUpgrade && sameFork\n      : await this._canUpgrade(length, fork)\n\n    if (length === this.remoteLength && fork === this.core.tree.fork) {\n      this.canUpgrade = upgrade\n    }\n\n    if (--this.syncsProcessing !== 0) return // ie not latest\n\n    if (this.needsSync === true || (this.core.tree.fork === this.remoteFork && this.core.tree.length > this.remoteLength)) {\n      this.signalUpgrade()\n    }\n\n    this._update()\n  }\n\n  _shouldUpdateCanUpgrade () {\n    return this.core.tree.fork === this.remoteFork &&\n      this.core.tree.length > this.remoteLength &&\n      this.canUpgrade === false &&\n      this.syncsProcessing === 0\n  }\n\n  async _updateCanUpgradeAndSync () {\n    const { length, fork } = this.core.tree\n\n    const canUpgrade = await this._canUpgrade(this.remoteLength, this.remoteFork)\n\n    if (this.syncsProcessing > 0 || length !== this.core.tree.length || fork !== this.core.tree.fork) {\n      return\n    }\n    if (canUpgrade === this.canUpgrade) {\n      return\n    }\n\n    this.canUpgrade = canUpgrade\n    this.sendSync()\n  }\n\n  // Safe to call in the background - never fails\n  async _canUpgrade (remoteLength, remoteFork) {\n    if (remoteFork !== this.core.tree.fork) return false\n\n    if (remoteLength === 0) return true\n    if (remoteLength >= this.core.tree.length) return false\n\n    try {\n      // Rely on caching to make sure this is cheap...\n      const canUpgrade = await this.core.tree.upgradeable(remoteLength)\n\n      if (remoteFork !== this.core.tree.fork) return false\n\n      return canUpgrade\n    } catch {\n      return false\n    }\n  }\n\n  async _getProof (msg) {\n    const proof = await this.core.tree.proof(msg)\n\n    if (proof.block) {\n      const index = msg.block.index\n\n      if (msg.fork !== this.core.tree.fork || !this.core.bitfield.get(index)) {\n        return null\n      }\n\n      proof.block.value = await this.core.blocks.get(index)\n    }\n\n    if (msg.manifest && !this.core.compat) {\n      proof.manifest = this.core.header.manifest\n    }\n\n    return proof\n  }\n\n  async onrequest (msg) {\n    const size = this.remoteRequests.size\n    this.remoteRequests.set(msg.id, msg)\n\n    // if size didnt change -> id overwrite -> old one is deleted, cancel current and re-add\n    if (size === this.remoteRequests.size) {\n      this._cancel(msg.id)\n      this.remoteRequests.set(msg.id, msg)\n    }\n\n    if (!this.protomux.drained || this.receiverQueue.length) {\n      this.receiverQueue.push(msg)\n      return\n    }\n\n    await this._handleRequest(msg)\n  }\n\n  oncancel (msg) {\n    this._cancel(msg.request)\n  }\n\n  _cancel (id) {\n    this.remoteRequests.delete(id)\n    this.receiverQueue.delete(id)\n  }\n\n  ondrain () {\n    return this._handleRequests()\n  }\n\n  async _handleRequests () {\n    if (this.receiverBusy) return\n    this.receiverBusy = true\n    this.protomux.cork()\n\n    while (this.remoteOpened && this.protomux.drained && this.receiverQueue.length > 0 && !this.removed) {\n      const msg = this.receiverQueue.shift()\n      await this._handleRequest(msg)\n    }\n\n    this.protomux.uncork()\n    this.receiverBusy = false\n  }\n\n  async _handleRequest (msg) {\n    let proof = null\n\n    // TODO: could still be answerable if (index, fork) is an ancestor of the current fork\n    if (msg.fork === this.core.tree.fork) {\n      try {\n        proof = await this._getProof(msg)\n      } catch (err) {\n        safetyCatch(err)\n        if (msg.fork === this.core.tree.fork && isCriticalError(err)) throw err\n      }\n    }\n\n    // if cancelled do not reply\n    if (this.remoteRequests.get(msg.id) !== msg) {\n      return\n    }\n\n    // sync from now on, so safe to delete from the map\n    this.remoteRequests.delete(msg.id)\n\n    if (proof === null) {\n      if (msg.manifest && this.core.header.manifest) {\n        const manifest = this.core.header.manifest\n        this.wireData.send({ request: msg.id, fork: this.core.tree.fork, block: null, hash: null, seek: null, upgrade: null, manifest })\n        incrementTx(this.stats.wireData, this.replicator.stats.wireData)\n        return\n      }\n\n      this.wireNoData.send({ request: msg.id })\n      return\n    }\n\n    if (proof.block !== null) {\n      this.replicator.onupload(proof.block.index, proof.block.value, this)\n    }\n\n    this.wireData.send({\n      request: msg.id,\n      fork: msg.fork,\n      block: proof.block,\n      hash: proof.hash,\n      seek: proof.seek,\n      upgrade: proof.upgrade,\n      manifest: proof.manifest\n    })\n    incrementTx(this.stats.wireData, this.replicator.stats.wireData)\n  }\n\n  _cancelRequest (req) {\n    if (req.priority === PRIORITY.CANCELLED) return\n    // mark as cancelled also and avoid re-entry\n    req.priority = PRIORITY.CANCELLED\n\n    this.inflight--\n    this.replicator._requestDone(req.id, false)\n\n    // clear inflight state\n    if (isBlockRequest(req)) this.replicator._unmarkInflight(req.block.index)\n    if (isUpgradeRequest(req)) this.replicator._clearInflightUpgrade(req)\n\n    if (this.roundtripQueue === null) this.roundtripQueue = new RoundtripQueue()\n    this.roundtripQueue.add(req.id)\n    this.wireCancel.send({ request: req.id })\n    incrementTx(this.stats.wireCancel, this.replicator.stats.wireCancel)\n  }\n\n  _checkIfConflict () {\n    this.paused = true\n\n    const length = Math.min(this.core.tree.length, this.remoteLength)\n    if (length === 0) return // pause and ignore\n\n    this.wireRequest.send({\n      id: 0, // TODO: use an more explicit id for this eventually...\n      fork: this.remoteFork,\n      block: null,\n      hash: null,\n      seek: null,\n      upgrade: {\n        start: 0,\n        length\n      }\n    })\n\n    incrementTx(this.stats.wireRequest, this.replicator.stats.wireRequest)\n  }\n\n  async ondata (data) {\n    // always allow a fork conflict proof to be sent\n    if (data.request === 0 && data.upgrade && data.upgrade.start === 0) {\n      if (await this.core.checkConflict(data, this)) return\n      this.paused = false\n    }\n\n    const req = data.request > 0 ? this.replicator._inflight.get(data.request) : null\n    const reorg = data.fork > this.core.tree.fork\n\n    // no push atm, TODO: check if this satisfies another pending request\n    // allow reorg pushes tho as those are not written to storage so we'll take all the help we can get\n    if (req === null && reorg === false) return\n\n    if (req !== null) {\n      if (req.peer !== this) return\n      this._onrequestroundtrip(req)\n    }\n\n    try {\n      if (reorg === true) return await this.replicator._onreorgdata(this, req, data)\n    } catch (err) {\n      safetyCatch(err)\n      if (isBlockRequest(req)) this.replicator._unmarkInflight(req.block.index)\n\n      this.paused = true\n      this.replicator.oninvalid(err, req, data, this)\n      return\n    }\n\n    this.dataProcessing++\n\n    try {\n      if (!matchingRequest(req, data) || !(await this.core.verify(data, this))) {\n        this.replicator._onnodata(this, req)\n        return\n      }\n    } catch (err) {\n      safetyCatch(err)\n      if (isBlockRequest(req)) this.replicator._unmarkInflight(req.block.index)\n\n      if (err.code === 'WRITE_FAILED') {\n        // For example, we don't want to keep pulling data when storage is full\n        // TODO: notify the user somehow\n        this.paused = true\n        return\n      }\n\n      if (this.core.closed && !isCriticalError(err)) return\n\n      if (err.code !== 'INVALID_OPERATION') {\n        // might be a fork, verify\n        this._checkIfConflict()\n      }\n\n      this.replicator._onnodata(this, req)\n      this.replicator.oninvalid(err, req, data, this)\n      return\n    } finally {\n      this.dataProcessing--\n    }\n\n    this.replicator._ondata(this, req, data)\n\n    if (this._shouldUpdateCanUpgrade() === true) {\n      this._updateCanUpgradeAndSync()\n    }\n  }\n\n  onnodata ({ request }) {\n    const req = request > 0 ? this.replicator._inflight.get(request) : null\n\n    if (req === null || req.peer !== this) return\n\n    this._onrequestroundtrip(req)\n    this.replicator._onnodata(this, req)\n  }\n\n  _onrequestroundtrip (req) {\n    if (req.priority === PRIORITY.CANCELLED) return\n    // to avoid re-entry we also just mark it as cancelled\n    req.priority = PRIORITY.CANCELLED\n\n    this.inflight--\n    this.replicator._requestDone(req.id, true)\n    if (this.roundtripQueue === null) return\n    const flushed = this.roundtripQueue.flush(req.rt)\n    if (flushed === null) return\n    for (const id of flushed) this.replicator._inflight.reusable(id)\n  }\n\n  onwant ({ start, length }) {\n    this.replicator._onwant(this, start, length)\n  }\n\n  onunwant () {\n    // TODO\n  }\n\n  onbitfield ({ start, bitfield }) {\n    if (start < this._remoteContiguousLength) this._remoteContiguousLength = start // bitfield is always the truth\n    this.remoteBitfield.insert(start, bitfield)\n    this.missingBlocks.insert(start, bitfield)\n    this._clearLocalRange(start, bitfield.byteLength * 8)\n    this._update()\n  }\n\n  _clearLocalRange (start, length) {\n    const bitfield = this.core.skipBitfield === null ? this.core.bitfield : this.core.skipBitfield\n\n    if (length === 1) {\n      this.missingBlocks.set(start, this._remoteHasBlock(start) && !bitfield.get(start))\n      return\n    }\n\n    const contig = Math.min(this.core.tree.length, this.core.header.hints.contiguousLength)\n\n    if (start + length < contig) {\n      const delta = contig - start\n      this.missingBlocks.setRange(start, delta, false)\n      return\n    }\n\n    const rem = start & 32767\n    if (rem > 0) {\n      start -= rem\n      length += rem\n    }\n\n    const end = start + Math.min(length, this.core.tree.length)\n    while (start < end) {\n      const local = bitfield.getBitfield(start)\n\n      if (local && local.bitfield) {\n        this.missingBlocks.clear(start, local.bitfield)\n      }\n\n      start += 32768\n    }\n  }\n\n  _resetMissingBlock (index) {\n    const bitfield = this.core.skipBitfield === null ? this.core.bitfield : this.core.skipBitfield\n    this.missingBlocks.set(index, this._remoteHasBlock(index) && !bitfield.get(index))\n  }\n\n  _unclearLocalRange (start, length) {\n    if (length === 1) {\n      this._resetMissingBlock(start)\n      return\n    }\n\n    const rem = start & 2097151\n    if (rem > 0) {\n      start -= rem\n      length += rem\n    }\n\n    const fixedStart = start\n\n    const end = start + Math.min(length, this.remoteLength)\n    while (start < end) {\n      const remote = this.remoteBitfield.getBitfield(start)\n      if (remote && remote.bitfield) {\n        this.missingBlocks.insert(start, remote.bitfield)\n      }\n\n      start += 2097152\n    }\n\n    this._clearLocalRange(fixedStart, length)\n  }\n\n  onrange ({ drop, start, length }) {\n    const has = drop === false\n\n    if (drop === true && start < this._remoteContiguousLength) {\n      this._remoteContiguousLength = start\n    }\n\n    if (start === 0 && drop === false) {\n      if (length > this._remoteContiguousLength) this._remoteContiguousLength = length\n    } else if (length === 1) {\n      const bitfield = this.core.skipBitfield === null ? this.core.bitfield : this.core.skipBitfield\n      this.remoteBitfield.set(start, has)\n      this.missingBlocks.set(start, has && !bitfield.get(start))\n    } else {\n      const rangeStart = this.remoteBitfield.findFirst(!has, start)\n      const rangeLength = length - (rangeStart - start)\n\n      if (rangeLength > 0) {\n        this.remoteBitfield.setRange(rangeStart, rangeLength, has)\n        this.missingBlocks.setRange(rangeStart, rangeLength, has)\n        if (has) this._clearLocalRange(rangeStart, rangeLength)\n      }\n    }\n\n    if (drop === false) this._update()\n  }\n\n  onreorghint () {\n    // TODO\n  }\n\n  _update () {\n    // TODO: if this is in a batch or similar it would be better to defer it\n    // we could do that with nextTick/microtick mb? (combined with a property on the session to signal read buffer mb)\n    this.replicator.updatePeer(this)\n  }\n\n  async _onconflict () {\n    this.protomux.cork()\n    if (this.remoteLength > 0 && this.core.tree.fork === this.remoteFork) {\n      await this.onrequest({\n        id: 0,\n        fork: this.core.tree.fork,\n        block: null,\n        hash: null,\n        seek: null,\n        upgrade: {\n          start: 0,\n          length: Math.min(this.core.tree.length, this.remoteLength)\n        }\n      })\n    }\n    this.channel.close()\n    this.protomux.uncork()\n  }\n\n  _makeRequest (needsUpgrade, priority, minLength) {\n    if (needsUpgrade === true && this.replicator._shouldUpgrade(this) === false) {\n      return null\n    }\n\n    // ensure that the remote has signalled they have the length we request\n    if (this.remoteLength < minLength) {\n      return null\n    }\n\n    if (needsUpgrade === false && this.replicator._autoUpgrade(this) === true) {\n      needsUpgrade = true\n    }\n\n    return {\n      peer: this,\n      rt: this.roundtripQueue === null ? 0 : this.roundtripQueue.tick,\n      id: 0,\n      fork: this.remoteFork,\n      block: null,\n      hash: null,\n      seek: null,\n      upgrade: needsUpgrade === false\n        ? null\n        : { start: this.core.tree.length, length: this.remoteLength - this.core.tree.length },\n      // remote manifest check can be removed eventually...\n      manifest: this.core.header.manifest === null && this.remoteHasManifest === true,\n      priority\n    }\n  }\n\n  _requestManifest () {\n    const req = this._makeRequest(false, 0, 0)\n    this._send(req)\n  }\n\n  _requestUpgrade (u) {\n    const req = this._makeRequest(true, 0, 0)\n    if (req === null) return false\n\n    this._send(req)\n\n    return true\n  }\n\n  _requestSeek (s) {\n    // if replicator is updating the seeks etc, bail and wait for it to drain\n    if (this.replicator._updatesPending > 0) return false\n\n    const { length, fork } = this.core.tree\n\n    if (fork !== this.remoteFork) return false\n\n    if (s.seeker.start >= length) {\n      const req = this._makeRequest(true, 0, 0)\n\n      // We need an upgrade for the seek, if non can be provided, skip\n      if (req === null) return false\n\n      req.seek = this.remoteSupportsSeeks ? { bytes: s.seeker.bytes, padding: s.seeker.padding } : null\n\n      s.inflight.push(req)\n      this._send(req)\n\n      return true\n    }\n\n    const len = s.seeker.end - s.seeker.start\n    const off = s.seeker.start + Math.floor(Math.random() * len)\n\n    for (let i = 0; i < len; i++) {\n      let index = off + i\n      if (index > s.seeker.end) index -= len\n\n      if (this._remoteHasBlock(index) === false) continue\n      if (this.core.bitfield.get(index) === true) continue\n      if (!this._hasTreeParent(index)) continue\n\n      // Check if this block is currently inflight - if so pick another\n      const b = this.replicator._blocks.get(index)\n      if (b !== null && b.inflight.length > 0) continue\n\n      // Block is not inflight, but we only want the hash, check if that is inflight\n      const h = this.replicator._hashes.add(index, PRIORITY.NORMAL)\n      if (h.inflight.length > 0) continue\n\n      const req = this._makeRequest(false, h.priority, index + 1)\n      if (req === null) continue\n\n      const nodes = flatTree.depth(s.seeker.start + s.seeker.end - 1)\n\n      req.hash = { index: 2 * index, nodes }\n      req.seek = this.remoteSupportsSeeks ? { bytes: s.seeker.bytes, padding: s.seeker.padding } : null\n\n      s.inflight.push(req)\n      h.inflight.push(req)\n      this._send(req)\n\n      return true\n    }\n\n    this._maybeWant(s.seeker.start, len)\n    return false\n  }\n\n  _hasTreeParent (index) {\n    if (this.remoteLength >= this.core.tree.length) return true\n\n    const ite = flatTree.iterator(index * 2)\n\n    let span = 2\n    let length = 0\n\n    while (true) {\n      ite.parent()\n\n      const left = (ite.index - ite.factor / 2 + 1) / 2\n      length = left + span\n\n      // if larger than local AND larger than remote - they share the root so its ok\n      if (length > this.core.tree.length) {\n        if (length > this.remoteLength) return true\n        break\n      }\n\n      // its less than local but larger than remote so skip it\n      if (length > this.remoteLength) break\n\n      span *= 2\n      const first = this.core.bitfield.findFirst(true, left)\n      if (first > -1 && first < length) return true\n    }\n\n    // TODO: push to async queue and check against our local merkle tree if we actually can request this block\n    return false\n  }\n\n  _remoteHasBlock (index) {\n    return index < this._remoteContiguousLength || this.remoteBitfield.get(index) === true\n  }\n\n  _sendBlockRequest (req, b) {\n    req.block = { index: b.index, nodes: 0 }\n    this.replicator._markInflight(b.index)\n\n    b.inflight.push(req)\n    this.replicator.hotswaps.add(b)\n    this._send(req)\n  }\n\n  _requestBlock (b) {\n    const { length, fork } = this.core.tree\n\n    if (this._remoteHasBlock(b.index) === false || fork !== this.remoteFork) {\n      this._maybeWant(b.index)\n      return false\n    }\n\n    if (!this._hasTreeParent(b.index)) {\n      return false\n    }\n\n    const req = this._makeRequest(b.index >= length, b.priority, b.index + 1)\n    if (req === null) return false\n\n    this._sendBlockRequest(req, b)\n\n    return true\n  }\n\n  _requestRangeBlock (index, length) {\n    if (this.core.bitfield.get(index) === true || !this._hasTreeParent(index)) return false\n\n    const b = this.replicator._blocks.add(index, PRIORITY.NORMAL)\n    if (b.inflight.length > 0) {\n      this.missingBlocks.set(index, false) // in case we missed some states just set them ondemand, nbd\n      return false\n    }\n\n    const req = this._makeRequest(index >= length, b.priority, index + 1)\n\n    // If the request cannot be satisfied, dealloc the block request if no one is subscribed to it\n    if (req === null) {\n      b.gc()\n      return false\n    }\n\n    this._sendBlockRequest(req, b)\n\n    // Don't think this will ever happen, as the pending queue is drained before the range queue\n    // but doesn't hurt to check this explicitly here also.\n    if (b.queued) b.queued = false\n    return true\n  }\n\n  _findNext (i) {\n    if (i < this._remoteContiguousLength) {\n      if (this.core.skipBitfield === null) this.replicator._openSkipBitfield()\n      i = this.core.skipBitfield.findFirst(false, i)\n      if (i < this._remoteContiguousLength && i > -1) return i\n      i = this._remoteContiguousLength\n    }\n\n    return this.missingBlocks.findFirst(true, i)\n  }\n\n  _requestRange (r) {\n    const { length, fork } = this.core.tree\n\n    if (r.blocks) {\n      let min = -1\n      let max = -1\n\n      for (let i = r.start; i < r.end; i++) {\n        const index = r.blocks[i]\n        if (min === -1 || index < min) min = index\n        if (max === -1 || index > max) max = index\n        const has = index < this._remoteContiguousLength || this.missingBlocks.get(index) === true\n        if (has === true && this._requestRangeBlock(index, length)) return true\n      }\n\n      if (min > -1) this._maybeWant(min, max - min)\n      return false\n    }\n\n    const end = Math.min(this.core.tree.length, Math.min(r.end === -1 ? this.remoteLength : r.end, this.remoteLength))\n    if (end <= r.start || fork !== this.remoteFork) return false\n\n    const len = end - r.start\n    const off = r.start + (r.linear ? 0 : Math.floor(Math.random() * len))\n\n    let i = off\n\n    while (true) {\n      i = this._findNext(i)\n      if (i === -1 || i >= end) break\n\n      if (this._requestRangeBlock(i, length)) return true\n      i++\n    }\n\n    i = r.start\n\n    while (true) {\n      i = this._findNext(i)\n      if (i === -1 || i >= off) break\n\n      if (this._requestRangeBlock(i, length)) return true\n      i++\n    }\n\n    this._maybeWant(r.start, len)\n    return false\n  }\n\n  _requestForkProof (f) {\n    const req = this._makeRequest(false, 0, 0)\n\n    req.upgrade = { start: 0, length: this.remoteLength }\n    req.manifest = !this.core.header.manifest\n\n    f.inflight.push(req)\n    this._send(req)\n  }\n\n  _requestForkRange (f) {\n    if (f.fork !== this.remoteFork || f.batch.want === null) return false\n\n    const end = Math.min(f.batch.want.end, this.remoteLength)\n    if (end < f.batch.want.start) return false\n\n    const len = end - f.batch.want.start\n    const off = f.batch.want.start + Math.floor(Math.random() * len)\n\n    for (let i = 0; i < len; i++) {\n      let index = off + i\n      if (index >= end) index -= len\n\n      if (this._remoteHasBlock(index) === false) continue\n\n      const req = this._makeRequest(false, 0, 0)\n\n      req.hash = { index: 2 * index, nodes: f.batch.want.nodes }\n\n      f.inflight.push(req)\n      this._send(req)\n\n      return true\n    }\n\n    this._maybeWant(f.batch.want.start, len)\n    return false\n  }\n\n  _maybeWant (start, length = 1) {\n    if (start + length <= this.remoteContiguousLength) return\n\n    let i = Math.floor(start / DEFAULT_SEGMENT_SIZE)\n    const n = Math.ceil((start + length) / DEFAULT_SEGMENT_SIZE)\n\n    for (; i < n; i++) {\n      if (this.segmentsWanted.has(i)) continue\n      this.segmentsWanted.add(i)\n\n      this.wireWant.send({\n        start: i * DEFAULT_SEGMENT_SIZE,\n        length: DEFAULT_SEGMENT_SIZE\n      })\n      incrementTx(this.stats.wireWant, this.replicator.stats.wireWant)\n    }\n  }\n\n  isActive () {\n    if (this.paused || this.removed) return false\n    return true\n  }\n\n  async _send (req) {\n    const fork = this.core.tree.fork\n\n    this.inflight++\n    this.replicator._inflight.add(req)\n\n    if (req.upgrade !== null && req.fork === fork) {\n      const u = this.replicator._addUpgrade()\n      u.inflight.push(req)\n    }\n\n    try {\n      if (req.block !== null && req.fork === fork) {\n        req.block.nodes = await this.core.tree.missingNodes(2 * req.block.index)\n        if (req.priority === PRIORITY.CANCELLED) return\n      }\n      if (req.hash !== null && req.fork === fork && req.hash.nodes === 0) {\n        req.hash.nodes = await this.core.tree.missingNodes(req.hash.index)\n        if (req.priority === PRIORITY.CANCELLED) return\n\n        // nodes === 0, we already have it, bail\n        if (req.hash.nodes === 0 && (req.hash.index & 1) === 0) {\n          this.inflight--\n          this.replicator._resolveHashLocally(this, req)\n          return\n        }\n      }\n    } catch (err) {\n      this.stream.destroy(err)\n      return\n    }\n\n    this.wireRequest.send(req)\n    incrementTx(this.stats.wireRequest, this.replicator.stats.wireRequest)\n  }\n}\n\nmodule.exports = class Replicator {\n  static Peer = Peer // hack to be able to access Peer from outside this module\n\n  constructor (core, key, {\n    notDownloadingLinger = NOT_DOWNLOADING_SLACK,\n    eagerUpgrade = true,\n    allowFork = true,\n    inflightRange = null,\n    onpeerupdate = noop,\n    onupload = noop,\n    oninvalid = noop\n  } = {}) {\n    this.key = key\n    this.discoveryKey = core.crypto.discoveryKey(key)\n    this.core = core\n    this.eagerUpgrade = eagerUpgrade\n    this.allowFork = allowFork\n    this.onpeerupdate = onpeerupdate\n    this.onupload = onupload\n    this.oninvalid = oninvalid\n    this.ondownloading = null // optional external hook for monitoring downloading status\n    this.peers = []\n    this.findingPeers = 0 // updateable from the outside\n    this.destroyed = false\n    this.downloading = false\n    this.activeSessions = 0\n\n    this.hotswaps = new HotswapQueue()\n    this.inflightRange = inflightRange || DEFAULT_MAX_INFLIGHT\n\n    // Note: nodata and unwant not currently tracked\n    // tx = transmitted, rx = received\n    this.stats = {\n      wireSync: { tx: 0, rx: 0 },\n      wireRequest: { tx: 0, rx: 0 },\n      wireCancel: { tx: 0, rx: 0 },\n      wireData: { tx: 0, rx: 0 },\n      wireWant: { tx: 0, rx: 0 },\n      wireBitfield: { tx: 0, rx: 0 },\n      wireRange: { tx: 0, rx: 0 },\n      wireExtension: { tx: 0, rx: 0 },\n      hotswaps: 0\n    }\n\n    this._attached = new Set()\n    this._inflight = new InflightTracker()\n    this._blocks = new BlockTracker()\n    this._hashes = new BlockTracker()\n\n    this._queued = []\n\n    this._seeks = []\n    this._upgrade = null\n    this._reorgs = []\n    this._ranges = []\n\n    this._hadPeers = false\n    this._ifAvailable = 0\n    this._updatesPending = 0\n    this._applyingReorg = null\n    this._manifestPeer = null\n    this._hasSession = false\n    this._peerSessions = 0\n    this._notDownloadingLinger = notDownloadingLinger\n    this._downloadingTimer = null\n\n    const self = this\n    this._onstreamclose = onstreamclose\n\n    function onstreamclose () {\n      self.detachFrom(this.userData)\n    }\n  }\n\n  updateActivity (inc, session) {\n    this.activeSessions += inc\n    this.setDownloading(this.activeSessions !== 0, session)\n  }\n\n  isDownloading () {\n    return this.downloading || !this._inflight.idle\n  }\n\n  setDownloading (downloading) {\n    clearTimeout(this._downloadingTimer)\n\n    if (this.destroyed) return\n    if (downloading || this._notDownloadingLinger === 0) {\n      this.setDownloadingNow(downloading)\n      return\n    }\n\n    this._downloadingTimer = setTimeout(setDownloadingLater, this._notDownloadingLinger, this, downloading)\n  }\n\n  setDownloadingNow (downloading) {\n    this._downloadingTimer = null\n    if (this.downloading === downloading) return\n    this.downloading = downloading\n    if (!downloading && this.isDownloading()) return\n\n    for (const peer of this.peers) peer.signalUpgrade()\n\n    if (downloading) { // restart channel if needed...\n      for (const protomux of this._attached) {\n        if (!protomux.stream.handshakeHash) continue\n        if (protomux.opened({ protocol: 'hypercore/alpha', id: this.discoveryKey })) continue\n        this._makePeer(protomux, true)\n      }\n    } else {\n      for (const peer of this.peers) peer.closeIfIdle()\n    }\n\n    if (this.ondownloading !== null && downloading) this.ondownloading()\n  }\n\n  cork () {\n    for (const peer of this.peers) peer.protomux.cork()\n  }\n\n  uncork () {\n    for (const peer of this.peers) peer.protomux.uncork()\n  }\n\n  // Called externally when a range of new blocks has been processed/removed\n  onhave (start, length, drop = false) {\n    for (const peer of this.peers) peer.broadcastRange(start, length, drop)\n  }\n\n  // Called externally when a truncation upgrade has been processed\n  ontruncate (newLength, truncated) {\n    const notify = []\n\n    for (const blk of this._blocks) {\n      if (blk.index < newLength) continue\n      notify.push(blk)\n    }\n\n    for (const blk of notify) {\n      for (const r of blk.refs) {\n        if (r.snapshot === false) continue\n        blk.detach(r, SNAPSHOT_NOT_AVAILABLE())\n      }\n    }\n\n    for (const peer of this.peers) peer._unclearLocalRange(newLength, truncated)\n  }\n\n  // Called externally when a upgrade has been processed\n  onupgrade () {\n    for (const peer of this.peers) peer.signalUpgrade()\n    if (this._blocks.isEmpty() === false) this._resolveBlocksLocally()\n    if (this._upgrade !== null) this._resolveUpgradeRequest(null)\n    if (this._ranges.length !== 0 || this._seeks.length !== 0) this._updateNonPrimary(true)\n  }\n\n  // Called externally when a conflict has been detected and verified\n  async onconflict (from) {\n    const all = []\n    for (const peer of this.peers) {\n      all.push(peer._onconflict())\n    }\n    await Promise.allSettled(all)\n  }\n\n  async applyPendingReorg () {\n    if (this._applyingReorg !== null) {\n      await this._applyingReorg\n      return true\n    }\n\n    for (let i = this._reorgs.length - 1; i >= 0; i--) {\n      const f = this._reorgs[i]\n      if (f.batch !== null && f.batch.finished) {\n        await this._applyReorg(f)\n        return true\n      }\n    }\n\n    return false\n  }\n\n  addUpgrade (session) {\n    if (this._upgrade !== null) {\n      const ref = this._upgrade.attach(session)\n      this._checkUpgradeIfAvailable()\n      return ref\n    }\n\n    const ref = this._addUpgrade().attach(session)\n\n    this.updateAll()\n\n    return ref\n  }\n\n  addBlock (session, index) {\n    const b = this._blocks.add(index, PRIORITY.HIGH)\n    const ref = b.attach(session)\n\n    this._queueBlock(b)\n    this.updateAll()\n\n    return ref\n  }\n\n  addSeek (session, seeker) {\n    const s = new SeekRequest(this._seeks, seeker)\n    const ref = s.attach(session)\n\n    this._seeks.push(s)\n    this.updateAll()\n\n    return ref\n  }\n\n  addRange (session, { start = 0, end = -1, length = toLength(start, end), blocks = null, linear = false, ifAvailable = false } = {}) {\n    if (blocks !== null) { // if using blocks, start, end just acts as frames around the blocks array\n      start = 0\n      end = length = blocks.length\n    }\n\n    const r = new RangeRequest(\n      this._ranges,\n      start,\n      length === -1 ? -1 : start + length,\n      linear,\n      ifAvailable,\n      blocks\n    )\n\n    const ref = r.attach(session)\n\n    // Trigger this to see if this is already resolved...\n    // Also auto compresses the range based on local bitfield\n    clampRange(this.core, r)\n\n    this._ranges.push(r)\n\n    if (r.end !== -1 && r.start >= r.end) {\n      this._resolveRangeRequest(r, this._ranges.length - 1)\n      return ref\n    }\n\n    this.updateAll()\n\n    return ref\n  }\n\n  cancel (ref) {\n    ref.context.detach(ref, null)\n  }\n\n  clearRequests (session, err = null) {\n    let cleared = false\n    while (session.length > 0) {\n      const ref = session[session.length - 1]\n      ref.context.detach(ref, err)\n      cleared = true\n    }\n\n    if (cleared) this.updateAll()\n  }\n\n  _addUpgradeMaybe () {\n    return this.eagerUpgrade === true ? this._addUpgrade() : this._upgrade\n  }\n\n  // TODO: this function is OVER called atm, at each updatePeer/updateAll\n  // instead its more efficient to only call it when the conditions in here change - ie on sync/add/remove peer\n  // Do this when we have more tests.\n  _checkUpgradeIfAvailable () {\n    if (this._ifAvailable > 0 && this.peers.length < MAX_PEERS_UPGRADE) return\n    if (this._upgrade === null || this._upgrade.refs.length === 0) return\n    if (this._hadPeers === false && this.findingPeers > 0) return\n\n    const maxPeers = Math.min(this.peers.length, MAX_PEERS_UPGRADE)\n\n    // check if a peer can upgrade us\n\n    for (let i = 0; i < maxPeers; i++) {\n      const peer = this.peers[i]\n\n      if (peer.remoteSynced === false) return\n\n      if (this.core.tree.length === 0 && peer.remoteLength > 0) return\n\n      if (peer.remoteLength <= this._upgrade.length || peer.remoteFork !== this._upgrade.fork) continue\n\n      if (peer.syncsProcessing > 0) return\n\n      if (peer.lengthAcked !== this.core.tree.length && peer.remoteFork === this.core.tree.fork) return\n      if (peer.remoteCanUpgrade === true) return\n    }\n\n    // check if reorgs in progress...\n\n    if (this._applyingReorg !== null) return\n\n    // TODO: we prob should NOT wait for inflight reorgs here, seems better to just resolve the upgrade\n    // and then apply the reorg on the next call in case it's slow - needs some testing in practice\n\n    for (let i = 0; i < this._reorgs.length; i++) {\n      const r = this._reorgs[i]\n      if (r.inflight.length > 0) return\n    }\n\n    // if something is inflight, wait for that first\n    if (this._upgrade.inflight.length > 0) return\n\n    // nothing to do, indicate no update avail\n\n    const u = this._upgrade\n    this._upgrade = null\n    u.resolve(false)\n  }\n\n  _addUpgrade () {\n    if (this._upgrade !== null) return this._upgrade\n\n    // TODO: needs a reorg: true/false flag to indicate if the user requested a reorg\n    this._upgrade = new UpgradeRequest(this, this.core.tree.fork, this.core.tree.length)\n\n    return this._upgrade\n  }\n\n  _addReorg (fork, peer) {\n    if (this.allowFork === false) return null\n\n    // TODO: eager gc old reorgs from the same peer\n    // not super important because they'll get gc'ed when the request finishes\n    // but just spam the remote can do ...\n\n    for (const f of this._reorgs) {\n      if (f.fork > fork && f.batch !== null) return null\n      if (f.fork === fork) return f\n    }\n\n    const f = {\n      fork,\n      inflight: [],\n      batch: null\n    }\n\n    this._reorgs.push(f)\n\n    // maintain sorted by fork\n    let i = this._reorgs.length - 1\n    while (i > 0 && this._reorgs[i - 1].fork > fork) {\n      this._reorgs[i] = this._reorgs[i - 1]\n      this._reorgs[--i] = f\n    }\n\n    return f\n  }\n\n  _shouldUpgrade (peer) {\n    if (this._upgrade !== null && this._upgrade.inflight.length > 0) return false\n    return peer.remoteCanUpgrade === true &&\n      peer.remoteLength > this.core.tree.length &&\n      peer.lengthAcked === this.core.tree.length\n  }\n\n  _autoUpgrade (peer) {\n    return this._upgrade !== null && peer.remoteFork === this.core.tree.fork && this._shouldUpgrade(peer)\n  }\n\n  _addPeer (peer) {\n    this._hadPeers = true\n    this.peers.push(peer)\n    this.updatePeer(peer)\n    this.onpeerupdate(true, peer)\n  }\n\n  _requestDone (id, roundtrip) {\n    this._inflight.remove(id, roundtrip)\n    if (this.isDownloading() === true) return\n    for (const peer of this.peers) peer.signalUpgrade()\n  }\n\n  _removePeer (peer) {\n    this.peers.splice(this.peers.indexOf(peer), 1)\n\n    if (this._manifestPeer === peer) this._manifestPeer = null\n\n    for (const req of this._inflight) {\n      if (req.peer !== peer) continue\n      this._inflight.remove(req.id, true)\n      this._clearRequest(peer, req)\n    }\n\n    if (peer.useSession) this._closeSessionMaybe()\n\n    this.onpeerupdate(false, peer)\n    this.updateAll()\n  }\n\n  _queueBlock (b) {\n    if (b.inflight.length > 0 || b.queued === true) return\n    b.queued = true\n    this._queued.push(b)\n  }\n\n  _resolveHashLocally (peer, req) {\n    this._requestDone(req.id, false)\n    this._resolveBlockRequest(this._hashes, req.hash.index / 2, null, req)\n    this.updatePeer(peer)\n  }\n\n  // Runs in the background - not allowed to throw\n  async _resolveBlocksLocally () {\n    // TODO: check if fork compat etc. Requires that we pass down truncation info\n\n    let clear = null\n\n    for (const b of this._blocks) {\n      if (this.core.bitfield.get(b.index) === false) continue\n\n      try {\n        b.resolve(await this.core.blocks.get(b.index))\n      } catch (err) {\n        b.reject(err)\n      }\n\n      if (clear === null) clear = []\n      clear.push(b)\n    }\n\n    if (clear === null) return\n\n    // Currently the block tracker does not support deletes during iteration, so we make\n    // sure to clear them afterwards.\n    for (const b of clear) {\n      this._blocks.remove(b.index)\n      removeHotswap(b)\n    }\n  }\n\n  _resolveBlockRequest (tracker, index, value, req) {\n    const b = tracker.remove(index)\n    if (b === null) return false\n\n    removeInflight(b.inflight, req)\n    removeHotswap(b)\n    b.queued = false\n\n    b.resolve(value)\n\n    if (b.inflight.length > 0) { // if anything is still inflight, cancel it\n      for (let i = b.inflight.length - 1; i >= 0; i--) {\n        const req = b.inflight[i]\n        req.peer._cancelRequest(req)\n      }\n    }\n\n    return true\n  }\n\n  _resolveUpgradeRequest (req) {\n    if (req !== null) removeInflight(this._upgrade.inflight, req)\n\n    if (this.core.tree.length === this._upgrade.length && this.core.tree.fork === this._upgrade.fork) return false\n\n    const u = this._upgrade\n    this._upgrade = null\n    u.resolve(true)\n\n    return true\n  }\n\n  _resolveRangeRequest (req, index) {\n    const head = this._ranges.pop()\n\n    if (index < this._ranges.length) this._ranges[index] = head\n\n    req.resolve(true)\n  }\n\n  _clearInflightBlock (tracker, req) {\n    const isBlock = tracker === this._blocks\n    const index = isBlock === true ? req.block.index : req.hash.index / 2\n    const b = tracker.get(index)\n\n    if (b === null || removeInflight(b.inflight, req) === false) return\n\n    if (removeHotswap(b) === true && b.inflight.length > 0) {\n      this.hotswaps.add(b)\n    }\n\n    if (b.refs.length > 0 && isBlock === true) {\n      this._queueBlock(b)\n      return\n    }\n\n    b.gc()\n  }\n\n  _clearInflightUpgrade (req) {\n    if (removeInflight(this._upgrade.inflight, req) === false) return\n    this._upgrade.gc()\n  }\n\n  _clearInflightSeeks (req) {\n    for (const s of this._seeks) {\n      if (removeInflight(s.inflight, req) === false) continue\n      s.gc()\n    }\n  }\n\n  _clearInflightReorgs (req) {\n    for (const r of this._reorgs) {\n      removeInflight(r.inflight, req)\n    }\n  }\n\n  _clearOldReorgs (fork) {\n    for (let i = 0; i < this._reorgs.length; i++) {\n      const f = this._reorgs[i]\n      if (f.fork >= fork) continue\n      if (i === this._reorgs.length - 1) this._reorgs.pop()\n      else this._reorgs[i] = this._reorgs.pop()\n      i--\n    }\n  }\n\n  // \"slow\" updates here - async but not allowed to ever throw\n  async _updateNonPrimary (updateAll) {\n    // Check if running, if so skip it and the running one will issue another update for us (debounce)\n    while (++this._updatesPending === 1) {\n      let len = Math.min(MAX_RANGES, this._ranges.length)\n\n      for (let i = 0; i < len; i++) {\n        const r = this._ranges[i]\n\n        clampRange(this.core, r)\n\n        if (r.end !== -1 && r.start >= r.end) {\n          this._resolveRangeRequest(r, i--)\n          if (len > this._ranges.length) len--\n          if (this._ranges.length === MAX_RANGES) updateAll = true\n        }\n      }\n\n      for (let i = 0; i < this._seeks.length; i++) {\n        const s = this._seeks[i]\n\n        let err = null\n        let res = null\n\n        try {\n          res = await s.seeker.update()\n        } catch (error) {\n          err = error\n        }\n\n        if (!res && !err) continue\n\n        if (i < this._seeks.length - 1) this._seeks[i] = this._seeks.pop()\n        else this._seeks.pop()\n\n        i--\n\n        if (err) s.reject(err)\n        else s.resolve(res)\n      }\n\n      // No additional updates scheduled - break\n      if (--this._updatesPending === 0) break\n      // Debounce the additional updates - continue\n      this._updatesPending = 0\n    }\n\n    if (this._inflight.idle || updateAll) this.updateAll()\n  }\n\n  _maybeResolveIfAvailableRanges () {\n    if (this._ifAvailable > 0 || !this._inflight.idle || !this._ranges.length) return\n\n    for (let i = 0; i < this.peers.length; i++) {\n      if (this.peers[i].dataProcessing > 0) return\n    }\n\n    for (let i = 0; i < this._ranges.length; i++) {\n      const r = this._ranges[i]\n\n      if (r.ifAvailable) {\n        this._resolveRangeRequest(r, i--)\n      }\n    }\n  }\n\n  _clearRequest (peer, req) {\n    if (req.block !== null) {\n      this._clearInflightBlock(this._blocks, req)\n      this._unmarkInflight(req.block.index)\n    }\n\n    if (req.hash !== null) {\n      this._clearInflightBlock(this._hashes, req)\n    }\n\n    if (req.upgrade !== null && this._upgrade !== null) {\n      this._clearInflightUpgrade(req)\n    }\n\n    if (this._seeks.length > 0) {\n      this._clearInflightSeeks(req)\n    }\n\n    if (this._reorgs.length > 0) {\n      this._clearInflightReorgs(req)\n    }\n  }\n\n  _onnodata (peer, req) {\n    this._clearRequest(peer, req)\n    this.updateAll()\n  }\n\n  _openSkipBitfield () {\n    // technically the skip bitfield gets bits cleared if .clear() is called\n    // also which might be in inflight also, but that just results in that section being overcalled shortly\n    // worst case, so ok for now\n\n    const bitfield = this.core.openSkipBitfield()\n\n    for (const req of this._inflight) {\n      if (req.block) bitfield.set(req.block.index, true) // skip\n    }\n  }\n\n  _markInflight (index) {\n    if (this.core.skipBitfield !== null) this.core.skipBitfield.set(index, true)\n    for (const peer of this.peers) peer._markInflight(index)\n  }\n\n  _unmarkInflight (index) {\n    if (this.core.skipBitfield !== null) this.core.skipBitfield.set(index, this.core.bitfield.get(index))\n    for (const peer of this.peers) peer._resetMissingBlock(index)\n  }\n\n  _ondata (peer, req, data) {\n    if (data.block !== null) {\n      this._resolveBlockRequest(this._blocks, data.block.index, data.block.value, req)\n    }\n\n    if (data.hash !== null && (data.hash.index & 1) === 0) {\n      this._resolveBlockRequest(this._hashes, data.hash.index / 2, null, req)\n    }\n\n    if (this._upgrade !== null) {\n      this._resolveUpgradeRequest(req)\n    }\n\n    if (this._seeks.length > 0) {\n      this._clearInflightSeeks(req)\n    }\n\n    if (this._reorgs.length > 0) {\n      this._clearInflightReorgs(req)\n    }\n\n    if (this._manifestPeer === peer && this.core.header.manifest !== null) {\n      this._manifestPeer = null\n    }\n\n    if (this._seeks.length > 0 || this._ranges.length > 0) this._updateNonPrimary(this._seeks.length > 0)\n    this.updatePeer(peer)\n  }\n\n  _onwant (peer, start, length) {\n    const contig = Math.min(this.core.tree.length, this.core.header.hints.contiguousLength)\n\n    if (start + length < contig || (this.core.tree.length === contig)) {\n      peer.wireRange.send({\n        drop: false,\n        start: 0,\n        length: contig\n      })\n      incrementTx(peer.stats.wireRange, this.stats.wireRange)\n      return\n    }\n\n    length = Math.min(length, this.core.tree.length - start)\n\n    peer.protomux.cork()\n\n    for (const msg of this.core.bitfield.want(start, length)) {\n      peer.wireBitfield.send(msg)\n      incrementTx(peer.stats.wireBitfield, this.stats.wireBitfield)\n    }\n\n    peer.protomux.uncork()\n  }\n\n  async _onreorgdata (peer, req, data) {\n    const newBatch = data.upgrade && await this.core.verifyReorg(data)\n    const f = this._addReorg(data.fork, peer)\n\n    if (f === null) {\n      this.updateAll()\n      return\n    }\n\n    removeInflight(f.inflight, req)\n\n    if (f.batch) {\n      await f.batch.update(data)\n    } else if (data.upgrade) {\n      f.batch = newBatch\n\n      // Remove \"older\" reorgs in progress as we just verified this one.\n      this._clearOldReorgs(f.fork)\n    }\n\n    if (f.batch && f.batch.finished) {\n      if (this._addUpgradeMaybe() !== null) {\n        await this._applyReorg(f)\n      }\n    }\n\n    this.updateAll()\n  }\n\n  // Never throws, allowed to run in the background\n  async _applyReorg (f) {\n    // TODO: more optimal here to check if potentially a better reorg\n    // is available, ie higher fork, and request that one first.\n    // This will request that one after this finishes, which is fine, but we\n    // should investigate the complexity in going the other way\n\n    const u = this._upgrade\n\n    this._reorgs = [] // clear all as the nodes are against the old tree - easier\n    this._applyingReorg = this.core.reorg(f.batch, null) // TODO: null should be the first/last peer?\n\n    try {\n      await this._applyingReorg\n    } catch (err) {\n      this._upgrade = null\n      u.reject(err)\n    }\n\n    this._applyingReorg = null\n\n    if (this._upgrade !== null) {\n      this._resolveUpgradeRequest(null)\n    }\n\n    for (const peer of this.peers) this._updateFork(peer)\n\n    // TODO: all the remaining is a tmp workaround until we have a flag/way for ANY_FORK\n    for (const r of this._ranges) {\n      r.start = r.userStart\n      r.end = r.userEnd\n    }\n\n    this.updateAll()\n  }\n\n  _maybeUpdate () {\n    return this._upgrade !== null && this._upgrade.inflight.length === 0\n  }\n\n  _maybeRequestManifest () {\n    return this.core.header.manifest === null && this._manifestPeer === null\n  }\n\n  _updateFork (peer) {\n    if (this._applyingReorg !== null || this.allowFork === false || peer.remoteFork <= this.core.tree.fork) {\n      return false\n    }\n\n    const f = this._addReorg(peer.remoteFork, peer)\n\n    // TODO: one per peer is better\n    if (f !== null && f.batch === null && f.inflight.length === 0) {\n      return peer._requestForkProof(f)\n    }\n\n    return false\n  }\n\n  _updateHotswap (peer) {\n    const maxHotswaps = peer.getMaxHotswapInflight()\n    if (!peer.isActive() || peer.inflight >= maxHotswaps) return\n\n    for (const b of this.hotswaps.pick(peer)) {\n      if (peer._requestBlock(b) === false) continue\n      peer.stats.hotswaps++\n      peer.replicator.stats.hotswaps++\n      if (peer.inflight >= maxHotswaps) break\n    }\n  }\n\n  _updatePeer (peer) {\n    if (!peer.isActive() || peer.inflight >= peer.getMaxInflight()) {\n      return false\n    }\n\n    // Eagerly request the manifest even if the remote length is 0. If not 0 we'll get as part of the upgrade request...\n    if (this._maybeRequestManifest() === true && peer.remoteLength === 0 && peer.remoteHasManifest === true) {\n      this._manifestPeer = peer\n      peer._requestManifest()\n    }\n\n    for (const s of this._seeks) {\n      if (s.inflight.length > 0) continue // TODO: one per peer is better\n      if (peer._requestSeek(s) === true) {\n        return true\n      }\n    }\n\n    // Implied that any block in the queue should be requested, no matter how many inflights\n    const blks = new RandomIterator(this._queued)\n\n    for (const b of blks) {\n      if (b.queued === false || peer._requestBlock(b) === true) {\n        b.queued = false\n        blks.dequeue()\n        return true\n      }\n    }\n\n    return false\n  }\n\n  _updatePeerNonPrimary (peer) {\n    if (!peer.isActive() || peer.inflight >= peer.getMaxInflight()) {\n      return false\n    }\n\n    const ranges = new RandomIterator(this._ranges)\n    let tried = 0\n\n    for (const r of ranges) {\n      if (peer._requestRange(r) === true) {\n        return true\n      }\n      if (++tried >= MAX_RANGES) break\n    }\n\n    // Iterate from newest fork to oldest fork...\n    for (let i = this._reorgs.length - 1; i >= 0; i--) {\n      const f = this._reorgs[i]\n      if (f.batch !== null && f.inflight.length === 0 && peer._requestForkRange(f) === true) {\n        return true\n      }\n    }\n\n    if (this._maybeUpdate() === true && peer._requestUpgrade(this._upgrade) === true) {\n      return true\n    }\n\n    return false\n  }\n\n  updatePeer (peer) {\n    // Quick shortcut to wait for flushing reorgs - not needed but less waisted requests\n    if (this._applyingReorg !== null) return\n\n    while (this._updatePeer(peer) === true);\n    while (this._updatePeerNonPrimary(peer) === true);\n\n    if (this.peers.length > 1 && this._blocks.isEmpty() === false) {\n      this._updateHotswap(peer)\n    }\n\n    this._checkUpgradeIfAvailable()\n    this._maybeResolveIfAvailableRanges()\n  }\n\n  updateAll () {\n    // Quick shortcut to wait for flushing reorgs - not needed but less waisted requests\n    if (this._applyingReorg !== null) return\n\n    const peers = new RandomIterator(this.peers)\n\n    for (const peer of peers) {\n      if (this._updatePeer(peer) === true) {\n        peers.requeue()\n      }\n    }\n\n    // Check if we can skip the non primary check fully\n    if (this._maybeUpdate() === false && this._ranges.length === 0 && this._reorgs.length === 0) {\n      this._checkUpgradeIfAvailable()\n      return\n    }\n\n    for (const peer of peers.restart()) {\n      if (this._updatePeerNonPrimary(peer) === true) {\n        peers.requeue()\n      }\n    }\n\n    this._checkUpgradeIfAvailable()\n    this._maybeResolveIfAvailableRanges()\n  }\n\n  _closeSessionMaybe () {\n    if (this._hasSession && this._peerSessions === 0) {\n      this._hasSession = false\n      this.core.active--\n    }\n\n    // we were the last active ref, so lets shut things down\n    if (this.core.active === 0 && this.core.sessions.length === 0) {\n      this.destroy()\n      this.core.close().catch(safetyCatch)\n      return\n    }\n\n    // in case one session is still alive but its been marked for auto close also kill it\n    if (this.core.sessions.length === 1 && this.core.active === 1 && this.core.sessions[0].autoClose) {\n      this.core.sessions[0].close().catch(safetyCatch)\n    }\n  }\n\n  attached (protomux) {\n    return this._attached.has(protomux)\n  }\n\n  ensureSession () {\n    if (this._hasSession) return\n    this._hasSession = true\n    this.core.active++\n  }\n\n  attachTo (protomux, useSession) {\n    if (this.core.closed) return\n    if (useSession) this.ensureSession()\n\n    const makePeer = this._makePeer.bind(this, protomux, useSession)\n\n    this._attached.add(protomux)\n    protomux.pair({ protocol: 'hypercore/alpha', id: this.discoveryKey }, makePeer)\n    protomux.stream.setMaxListeners(0)\n    protomux.stream.on('close', this._onstreamclose)\n\n    if (useSession) this._peerSessions++\n    this._ifAvailable++\n\n    protomux.stream.opened.then((opened) => {\n      if (useSession) this._peerSessions--\n      this._ifAvailable--\n\n      if (opened && !this.destroyed) makePeer()\n      else if (useSession) this._closeSessionMaybe()\n      this._checkUpgradeIfAvailable()\n    })\n  }\n\n  detachFrom (protomux) {\n    if (this._attached.delete(protomux)) {\n      protomux.stream.removeListener('close', this._onstreamclose)\n      protomux.unpair({ protocol: 'hypercore/alpha', id: this.discoveryKey })\n    }\n  }\n\n  destroy () {\n    this.destroyed = true\n\n    if (this._downloadingTimer) {\n      clearTimeout(this._downloadingTimer)\n      this._downloadingTimer = null\n    }\n\n    const waiting = []\n\n    while (this.peers.length) {\n      const peer = this.peers[this.peers.length - 1]\n      this.detachFrom(peer.protomux)\n      peer.channel.close() // peer is removed from array in onclose\n      waiting.push(peer.channel.fullyClosed())\n    }\n\n    for (const protomux of this._attached) {\n      this.detachFrom(protomux)\n    }\n\n    return Promise.all(waiting)\n  }\n\n  _makePeer (protomux, useSession) {\n    const replicator = this\n    if (protomux.opened({ protocol: 'hypercore/alpha', id: this.discoveryKey })) return onnochannel()\n\n    const channel = protomux.createChannel({\n      userData: null,\n      protocol: 'hypercore/alpha',\n      aliases: ['hypercore'],\n      id: this.discoveryKey,\n      handshake: m.wire.handshake,\n      messages: [\n        { encoding: m.wire.sync, onmessage: onwiresync },\n        { encoding: m.wire.request, onmessage: onwirerequest },\n        { encoding: m.wire.cancel, onmessage: onwirecancel },\n        { encoding: m.wire.data, onmessage: onwiredata },\n        { encoding: m.wire.noData, onmessage: onwirenodata },\n        { encoding: m.wire.want, onmessage: onwirewant },\n        { encoding: m.wire.unwant, onmessage: onwireunwant },\n        { encoding: m.wire.bitfield, onmessage: onwirebitfield },\n        { encoding: m.wire.range, onmessage: onwirerange },\n        { encoding: m.wire.extension, onmessage: onwireextension }\n      ],\n      onopen: onwireopen,\n      onclose: onwireclose,\n      ondrain: onwiredrain\n    })\n\n    if (channel === null) return onnochannel()\n\n    const peer = new Peer(replicator, protomux, channel, useSession, this.inflightRange)\n    const stream = protomux.stream\n\n    if (useSession) {\n      // session may have been unref'd underneath us\n      replicator.ensureSession()\n      replicator._peerSessions++\n    }\n\n    peer.channel.open({\n      seeks: true,\n      capability: caps.replicate(stream.isInitiator, this.key, stream.handshakeHash)\n    })\n\n    return true\n\n    function onnochannel () {\n      if (useSession) replicator._closeSessionMaybe()\n      return false\n    }\n  }\n}\n\nfunction matchingRequest (req, data) {\n  if (data.block !== null && (req.block === null || req.block.index !== data.block.index)) return false\n  if (data.hash !== null && (req.hash === null || req.hash.index !== data.hash.index)) return false\n  if (data.seek !== null && (req.seek === null || req.seek.bytes !== data.seek.bytes)) return false\n  if (data.upgrade !== null && req.upgrade === null) return false\n  return req.fork === data.fork\n}\n\nfunction removeHotswap (block) {\n  if (block.hotswap === null) return false\n  block.hotswap.ref.remove(block)\n  return true\n}\n\nfunction removeInflight (inf, req) {\n  const i = inf.indexOf(req)\n  if (i === -1) return false\n  if (i < inf.length - 1) inf[i] = inf.pop()\n  else inf.pop()\n  return true\n}\n\nfunction noop () {}\n\nfunction toLength (start, end) {\n  return end === -1 ? -1 : (end < start ? 0 : end - start)\n}\n\nfunction clampRange (core, r) {\n  if (r.blocks === null) {\n    const start = core.bitfield.firstUnset(r.start)\n\n    if (r.end === -1) r.start = start === -1 ? core.tree.length : start\n    else if (start === -1 || start >= r.end) r.start = r.end\n    else {\n      r.start = start\n\n      const end = core.bitfield.lastUnset(r.end - 1)\n\n      if (end === -1 || start >= end + 1) r.end = r.start\n      else r.end = end + 1\n    }\n  } else {\n    while (r.start < r.end && core.bitfield.get(r.blocks[r.start])) r.start++\n    while (r.start < r.end && core.bitfield.get(r.blocks[r.end - 1])) r.end--\n  }\n}\n\nfunction onrequesttimeout (req) {\n  if (req.context) req.context.detach(req, REQUEST_TIMEOUT())\n}\n\nfunction destroyRequestTimeout (req) {\n  if (req.timeout !== null) {\n    clearTimeout(req.timeout)\n    req.timeout = null\n  }\n}\n\nfunction isCriticalError (err) {\n  // TODO: expose .critical or similar on the hypercore errors that are critical (if all not are)\n  return err.name === 'HypercoreError'\n}\n\nfunction onwireopen (m, c) {\n  return c.userData.onopen(m)\n}\n\nfunction onwireclose (isRemote, c) {\n  return c.userData.onclose(isRemote)\n}\n\nfunction onwiredrain (c) {\n  return c.userData.ondrain()\n}\n\nfunction onwiresync (m, c) {\n  incrementRx(c.userData.stats.wireSync, c.userData.replicator.stats.wireSync)\n  return c.userData.onsync(m)\n}\n\nfunction onwirerequest (m, c) {\n  incrementRx(c.userData.stats.wireRequest, c.userData.replicator.stats.wireRequest)\n  return c.userData.onrequest(m)\n}\n\nfunction onwirecancel (m, c) {\n  incrementRx(c.userData.stats.wireCancel, c.userData.replicator.stats.wireCancel)\n  return c.userData.oncancel(m)\n}\n\nfunction onwiredata (m, c) {\n  incrementRx(c.userData.stats.wireData, c.userData.replicator.stats.wireData)\n  return c.userData.ondata(m)\n}\n\nfunction onwirenodata (m, c) {\n  return c.userData.onnodata(m)\n}\n\nfunction onwirewant (m, c) {\n  incrementRx(c.userData.stats.wireWant, c.userData.replicator.stats.wireWant)\n  return c.userData.onwant(m)\n}\n\nfunction onwireunwant (m, c) {\n  return c.userData.onunwant(m)\n}\n\nfunction onwirebitfield (m, c) {\n  incrementRx(c.userData.stats.wireBitfield, c.userData.replicator.stats.wireBitfield)\n  return c.userData.onbitfield(m)\n}\n\nfunction onwirerange (m, c) {\n  incrementRx(c.userData.stats.wireRange, c.userData.replicator.stats.wireRange)\n  return c.userData.onrange(m)\n}\n\nfunction onwireextension (m, c) {\n  incrementRx(c.userData.stats.wireExtension, c.userData.replicator.stats.wireExtension)\n  return c.userData.onextension(m)\n}\n\nfunction setDownloadingLater (repl, downloading, session) {\n  repl.setDownloadingNow(downloading, session)\n}\n\nfunction isBlockRequest (req) {\n  return req !== null && req.block !== null\n}\n\nfunction isUpgradeRequest (req) {\n  return req !== null && req.upgrade !== null\n}\n\nfunction incrementTx (stats1, stats2) {\n  stats1.tx++\n  stats2.tx++\n}\n\nfunction incrementRx (stats1, stats2) {\n  stats1.rx++\n  stats2.rx++\n}\nconst { Writable, Readable } = require('streamx')\n\nclass ReadStream extends Readable {\n  constructor (core, opts = {}) {\n    super()\n\n    this.core = core\n    this.start = opts.start || 0\n    this.end = typeof opts.end === 'number' ? opts.end : -1\n    this.snapshot = !opts.live && opts.snapshot !== false\n    this.live = !!opts.live\n  }\n\n  _open (cb) {\n    this._openP().then(cb, cb)\n  }\n\n  _read (cb) {\n    this._readP().then(cb, cb)\n  }\n\n  async _openP () {\n    if (this.end === -1) await this.core.update()\n    else await this.core.ready()\n    if (this.snapshot && this.end === -1) this.end = this.core.length\n  }\n\n  async _readP () {\n    const end = this.live ? -1 : (this.end === -1 ? this.core.length : this.end)\n    if (end >= 0 && this.start >= end) {\n      this.push(null)\n      return\n    }\n\n    this.push(await this.core.get(this.start++))\n  }\n}\n\nexports.ReadStream = ReadStream\n\nclass WriteStream extends Writable {\n  constructor (core) {\n    super()\n    this.core = core\n  }\n\n  _writev (batch, cb) {\n    this._writevP(batch).then(cb, cb)\n  }\n\n  async _writevP (batch) {\n    await this.core.append(batch)\n  }\n}\n\nexports.WriteStream = WriteStream\n\nclass ByteStream extends Readable {\n  constructor (core, opts = {}) {\n    super()\n\n    this._core = core\n    this._index = 0\n    this._range = null\n\n    this._byteOffset = opts.byteOffset || 0\n    this._byteLength = typeof opts.byteLength === 'number' ? opts.byteLength : -1\n    this._prefetch = typeof opts.prefetch === 'number' ? opts.prefetch : 32\n\n    this._applyOffset = this._byteOffset > 0\n  }\n\n  _open (cb) {\n    this._openp().then(cb, cb)\n  }\n\n  _read (cb) {\n    this._readp().then(cb, cb)\n  }\n\n  async _openp () {\n    if (this._byteLength === -1) {\n      await this._core.update()\n      this._byteLength = Math.max(this._core.byteLength - this._byteOffset, 0)\n    }\n  }\n\n  async _readp () {\n    let data = null\n\n    if (this._byteLength === 0) {\n      this.push(null)\n      return\n    }\n\n    let relativeOffset = 0\n\n    if (this._applyOffset) {\n      this._applyOffset = false\n\n      const [block, byteOffset] = await this._core.seek(this._byteOffset)\n\n      this._index = block\n      relativeOffset = byteOffset\n    }\n\n    this._predownload(this._index + 1)\n    data = await this._core.get(this._index++, { valueEncoding: 'binary' })\n\n    if (relativeOffset > 0) data = data.subarray(relativeOffset)\n\n    if (data.byteLength > this._byteLength) data = data.subarray(0, this._byteLength)\n    this._byteLength -= data.byteLength\n\n    this.push(data)\n    if (this._byteLength === 0) this.push(null)\n  }\n\n  _predownload (index) {\n    if (this._range) this._range.destroy()\n    this._range = this._core.download({ start: index, end: index + this._prefetch, linear: true })\n  }\n\n  _destroy (cb) {\n    if (this._range) this._range.destroy()\n    cb(null)\n  }\n}\n\nexports.ByteStream = ByteStream\nconst defaultCrypto = require('hypercore-crypto')\nconst b4a = require('b4a')\nconst c = require('compact-encoding')\nconst flat = require('flat-tree')\nconst { BAD_ARGUMENT } = require('hypercore-errors')\nconst unslab = require('unslab')\n\nconst m = require('./messages')\nconst multisig = require('./multisig')\nconst caps = require('./caps')\n\nclass Signer {\n  constructor (crypto, manifestHash, version, index, { signature = 'ed25519', publicKey, namespace = caps.DEFAULT_NAMESPACE } = {}) {\n    if (!publicKey) throw BAD_ARGUMENT('public key is required for a signer')\n    if (signature !== 'ed25519') throw BAD_ARGUMENT('Only Ed25519 signatures are supported')\n\n    this.crypto = crypto\n    this.manifestHash = manifestHash\n    this.version = version\n    this.signer = index\n    this.signature = signature\n    this.publicKey = publicKey\n    this.namespace = namespace\n  }\n\n  _ctx () {\n    return this.version === 0 ? this.namespace : this.manifestHash\n  }\n\n  verify (batch, signature) {\n    return this.crypto.verify(batch.signable(this._ctx()), signature, this.publicKey)\n  }\n\n  sign (batch, keyPair) {\n    return this.crypto.sign(batch.signable(this._ctx()), keyPair.secretKey)\n  }\n}\n\nclass CompatSigner extends Signer {\n  constructor (crypto, index, signer, legacy) {\n    super(crypto, null, 0, index, signer)\n    this.legacy = legacy\n  }\n\n  verify (batch, signature) {\n    return this.crypto.verify(batch.signableCompat(this.legacy), signature, this.publicKey)\n  }\n\n  sign (batch, keyPair) {\n    return this.crypto.sign(batch.signableCompat(this.legacy), keyPair.secretKey)\n  }\n}\n\nmodule.exports = class Verifier {\n  constructor (manifestHash, manifest, { compat = isCompat(manifestHash, manifest), crypto = defaultCrypto, legacy = false } = {}) {\n    const self = this\n\n    this.manifestHash = manifestHash\n    this.compat = compat || manifest === null\n    this.version = this.compat ? 0 : typeof manifest.version === 'number' ? manifest.version : 1\n    this.hash = manifest.hash || 'blake2b'\n    this.allowPatch = !this.compat && !!manifest.allowPatch\n    this.quorum = this.compat ? 1 : defaultQuorum(manifest)\n\n    this.signers = manifest.signers ? manifest.signers.map(createSigner) : []\n    this.prologue = this.compat ? null : (manifest.prologue || null)\n\n    function createSigner (signer, index) {\n      return self.compat\n        ? new CompatSigner(crypto, index, signer, legacy)\n        : new Signer(crypto, manifestHash, self.version, index, signer)\n    }\n  }\n\n  _verifyCompat (batch, signature) {\n    if (!signature) return false\n\n    if (this.compat || (!this.allowPatch && this.signers.length === 1)) {\n      return !!signature && this.signers[0].verify(batch, signature)\n    }\n\n    return this._verifyMulti(batch, signature)\n  }\n\n  _inflate (signature) {\n    if (this.version >= 1) return multisig.inflate(signature)\n    const { proofs, patch } = multisig.inflatev0(signature)\n\n    return {\n      proofs: proofs.map(proofToVersion1),\n      patch\n    }\n  }\n\n  _verifyMulti (batch, signature) {\n    if (!signature || this.quorum === 0) return false\n\n    const { proofs, patch } = this._inflate(signature)\n    if (proofs.length < this.quorum) return false\n\n    const tried = new Uint8Array(this.signers.length)\n    const nodes = this.allowPatch && patch.length ? toMap(patch) : null\n\n    for (let i = 0; i < this.quorum; i++) {\n      const inp = proofs[i]\n\n      let tree = batch\n\n      if (inp.patch && this.allowPatch) {\n        tree = batch.clone()\n\n        const upgrade = generateUpgrade(nodes, batch.length, inp.patch)\n        const proof = { fork: tree.fork, block: null, hash: null, seek: null, upgrade, manifest: null }\n\n        try {\n          if (!tree.verifyUpgrade(proof)) return false\n        } catch {\n          return false\n        }\n      }\n\n      if (inp.signer >= this.signers.length || tried[inp.signer]) return false\n      tried[inp.signer] = 1\n\n      const s = this.signers[inp.signer]\n      if (!s.verify(tree, inp.signature)) return false\n    }\n\n    return true\n  }\n\n  verify (batch, signature) {\n    if (this.version !== 1) {\n      return this._verifyCompat(batch, signature)\n    }\n\n    if (this.prologue !== null && batch.length <= this.prologue.length) {\n      return batch.length === this.prologue.length && b4a.equals(batch.hash(), this.prologue.hash)\n    }\n\n    return this._verifyMulti(batch, signature)\n  }\n\n  // TODO: better api for this that is more ... multisig-ey\n  sign (batch, keyPair) {\n    if (!keyPair || !keyPair.secretKey) throw BAD_ARGUMENT('No key pair was passed')\n\n    for (const s of this.signers) {\n      if (b4a.equals(s.publicKey, keyPair.publicKey)) {\n        const signature = s.sign(batch, keyPair)\n        if (this.signers.length !== 1 || this.version === 0) return signature\n        return this.assemble([{ signer: 0, signature, patch: 0, nodes: null }])\n      }\n    }\n\n    throw BAD_ARGUMENT('Public key is not a declared signer')\n  }\n\n  assemble (inputs) {\n    return this.version === 0 ? multisig.assemblev0(inputs) : multisig.assemble(inputs)\n  }\n\n  static manifestHash (manifest) {\n    return manifestHash(manifest)\n  }\n\n  static defaultSignerManifest (publicKey) {\n    return {\n      version: 1,\n      hash: 'blake2b',\n      allowPatch: false,\n      quorum: 1,\n      signers: [{\n        signature: 'ed25519',\n        namespace: caps.DEFAULT_NAMESPACE,\n        publicKey\n      }],\n      prologue: null\n    }\n  }\n\n  static fromManifest (manifest, opts) {\n    const m = this.createManifest(manifest)\n    return new this(manifestHash(m), m, opts)\n  }\n\n  static createManifest (inp) {\n    if (!inp) return null\n\n    const manifest = {\n      version: typeof inp.version === 'number' ? inp.version : 1,\n      hash: 'blake2b',\n      allowPatch: !!inp.allowPatch,\n      quorum: defaultQuorum(inp),\n      signers: inp.signers ? inp.signers.map(parseSigner) : [],\n      prologue: null\n    }\n\n    if (inp.hash && inp.hash !== 'blake2b') throw BAD_ARGUMENT('Only Blake2b hashes are supported')\n\n    if (inp.prologue) {\n      if (!(b4a.isBuffer(inp.prologue.hash) && inp.prologue.hash.byteLength === 32) || !(inp.prologue.length >= 0)) {\n        throw BAD_ARGUMENT('Invalid prologue')\n      }\n\n      manifest.prologue = inp.prologue\n      manifest.prologue.hash = unslab(manifest.prologue.hash)\n    }\n\n    return manifest\n  }\n\n  static isValidManifest (key, manifest) {\n    return b4a.equals(key, manifestHash(manifest))\n  }\n\n  static isCompat (key, manifest) {\n    return isCompat(key, manifest)\n  }\n\n  static sign (manifest, batch, keyPair, opts) {\n    return Verifier.fromManifest(manifest, opts).sign(batch, keyPair)\n  }\n}\n\nfunction toMap (nodes) {\n  const m = new Map()\n  for (const node of nodes) m.set(node.index, node)\n  return m\n}\n\nfunction isCompat (key, manifest) {\n  return !!(manifest && manifest.signers.length === 1 && b4a.equals(key, manifest.signers[0].publicKey))\n}\n\nfunction defaultQuorum (man) {\n  if (typeof man.quorum === 'number') return man.quorum\n  if (!man.signers || !man.signers.length) return 0\n  return (man.signers.length >> 1) + 1\n}\n\nfunction generateUpgrade (patch, start, length) {\n  const upgrade = { start, length, nodes: null, additionalNodes: [], signature: null }\n\n  const from = start * 2\n  const to = from + length * 2\n\n  for (const ite = flat.iterator(0); ite.fullRoot(to); ite.nextTree()) {\n    if (ite.index + ite.factor / 2 < from) continue\n\n    if (upgrade.nodes === null && ite.contains(from - 2)) {\n      upgrade.nodes = []\n\n      const root = ite.index\n      const target = from - 2\n\n      ite.seek(target)\n\n      while (ite.index !== root) {\n        ite.sibling()\n        if (ite.index > target) upgrade.nodes.push(patch.get(ite.index))\n        ite.parent()\n      }\n\n      continue\n    }\n\n    if (upgrade.nodes === null) upgrade.nodes = []\n    upgrade.nodes.push(patch.get(ite.index))\n  }\n\n  if (upgrade.nodes === null) upgrade.nodes = []\n  return upgrade\n}\n\nfunction parseSigner (signer) {\n  validateSigner(signer)\n  return {\n    signature: 'ed25519',\n    namespace: unslab(signer.namespace || caps.DEFAULT_NAMESPACE),\n    publicKey: unslab(signer.publicKey)\n  }\n}\n\nfunction validateSigner (signer) {\n  if (!signer || !signer.publicKey) throw BAD_ARGUMENT('Signer missing public key')\n  if (signer.signature && signer.signature !== 'ed25519') throw BAD_ARGUMENT('Only Ed25519 signatures are supported')\n}\n\nfunction manifestHash (manifest) {\n  const state = { start: 0, end: 32, buffer: null }\n  m.manifest.preencode(state, manifest)\n  state.buffer = b4a.allocUnsafe(state.end)\n  c.raw.encode(state, caps.MANIFEST)\n  m.manifest.encode(state, manifest)\n  return defaultCrypto.hash(state.buffer)\n}\n\nfunction proofToVersion1 (proof) {\n  return {\n    signer: proof.signer,\n    signature: proof.signature,\n    patch: proof.patch ? proof.patch.length : 0\n  }\n}\n{\n  \"name\": \"hypercore\",\n  \"version\": \"10.38.2\",\n  \"description\": \"Hypercore is a secure, distributed append-only log\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"standard && node test/all.js\",\n    \"test:generate\": \"brittle -r test/all.js test/*.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/holepunchto/hypercore.git\"\n  },\n  \"contributors\": [\n    {\n      \"name\": \"Mathias Buus\",\n      \"email\": \"mathiasbuus@gmail.com\",\n      \"url\": \"https://mafinto.sh\"\n    },\n    {\n      \"name\": \"Andrew Osheroff\",\n      \"email\": \"andrewosh@gmail.com\",\n      \"url\": \"https://andrewosh.com\"\n    }\n  ],\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/hypercore/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/hypercore#readme\",\n  \"files\": [\n    \"index.js\",\n    \"errors.js\",\n    \"messages.js\",\n    \"lib/**.js\"\n  ],\n  \"imports\": {\n    \"events\": {\n      \"bare\": \"bare-events\",\n      \"default\": \"events\"\n    }\n  },\n  \"dependencies\": {\n    \"@hyperswarm/secret-stream\": \"^6.0.0\",\n    \"b4a\": \"^1.1.0\",\n    \"bare-events\": \"^2.2.0\",\n    \"big-sparse-array\": \"^1.0.3\",\n    \"compact-encoding\": \"^2.11.0\",\n    \"crc-universal\": \"^1.0.2\",\n    \"fast-fifo\": \"^1.3.0\",\n    \"flat-tree\": \"^1.9.0\",\n    \"hypercore-crypto\": \"^3.2.1\",\n    \"hypercore-errors\": \"^1.2.0\",\n    \"hypercore-id-encoding\": \"^1.2.0\",\n    \"is-options\": \"^1.0.1\",\n    \"protomux\": \"^3.5.0\",\n    \"quickbit-universal\": \"^2.2.0\",\n    \"random-access-file\": \"^4.0.0\",\n    \"random-array-iterator\": \"^1.0.0\",\n    \"safety-catch\": \"^1.0.1\",\n    \"sodium-universal\": \"^4.0.0\",\n    \"streamx\": \"^2.12.4\",\n    \"unslab\": \"^1.3.0\",\n    \"xache\": \"^1.1.0\",\n    \"z32\": \"^1.0.0\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^3.0.0\",\n    \"debugging-stream\": \"^3.1.0\",\n    \"hyperswarm\": \"^4.3.6\",\n    \"rache\": \"^1.0.0\",\n    \"random-access-memory\": \"^6.1.0\",\n    \"random-access-memory-overlay\": \"^3.0.0\",\n    \"range-parser\": \"^1.2.1\",\n    \"speedometer\": \"^1.1.0\",\n    \"standard\": \"^17.0.0\",\n    \"test-tmp\": \"^1.0.2\",\n    \"tiny-byte-size\": \"^1.1.0\",\n    \"udx-native\": \"^1.6.1\"\n  }\n}\nconst DHT = require('dht-rpc')\nconst sodium = require('sodium-universal')\nconst c = require('compact-encoding')\nconst b4a = require('b4a')\nconst safetyCatch = require('safety-catch')\nconst m = require('./lib/messages')\nconst SocketPool = require('./lib/socket-pool')\nconst Persistent = require('./lib/persistent')\nconst Router = require('./lib/router')\nconst Server = require('./lib/server')\nconst connect = require('./lib/connect')\nconst { FIREWALL, BOOTSTRAP_NODES, KNOWN_NODES, COMMANDS } = require('./lib/constants')\nconst { hash, createKeyPair } = require('./lib/crypto')\nconst { decode } = require('hypercore-id-encoding')\nconst RawStreamSet = require('./lib/raw-stream-set')\nconst ConnectionPool = require('./lib/connection-pool')\nconst { STREAM_NOT_CONNECTED } = require('./lib/errors')\n\nclass HyperDHT extends DHT {\n  constructor (opts = {}) {\n    const port = opts.port || 49737\n    const bootstrap = opts.bootstrap || BOOTSTRAP_NODES\n    const nodes = opts.nodes || KNOWN_NODES\n\n    super({ ...opts, port, bootstrap, nodes, filterNode })\n\n    const { router, persistent } = defaultCacheOpts(opts)\n\n    this.defaultKeyPair = opts.keyPair || createKeyPair(opts.seed)\n    this.listening = new Set()\n    this.connectionKeepAlive = opts.connectionKeepAlive === false\n      ? 0\n      : opts.connectionKeepAlive || 5000\n\n    // stats is inherited from dht-rpc so fwd the ones from there\n    this.stats = { punches: { consistent: 0, random: 0, open: 0 }, ...this.stats }\n\n    this._router = new Router(this, router)\n    this._socketPool = new SocketPool(this, opts.host || '0.0.0.0')\n    this._rawStreams = new RawStreamSet(this)\n    this._persistent = null\n    this._validatedLocalAddresses = new Map()\n\n    this._lastRandomPunch = 0\n    this._randomPunchInterval = opts.randomPunchInterval || 20000 // min 20s between random punches...\n    this._randomPunches = 0\n    this._randomPunchLimit = 1 // set to one for extra safety for now\n\n    this.once('persistent', () => {\n      this._persistent = new Persistent(this, persistent)\n    })\n\n    this.on('network-change', () => {\n      for (const server of this.listening) server.refresh()\n    })\n\n    this.on('network-update', () => {\n      if (!this.online) return\n      for (const server of this.listening) server.notifyOnline()\n    })\n  }\n\n  connect (remotePublicKey, opts) {\n    return connect(this, decode(remotePublicKey), opts)\n  }\n\n  createServer (opts, onconnection) {\n    if (typeof opts === 'function') return this.createServer({}, opts)\n    if (opts && opts.onconnection) onconnection = opts.onconnection\n    const s = new Server(this, opts)\n    if (onconnection) s.on('connection', onconnection)\n    return s\n  }\n\n  pool () {\n    return new ConnectionPool(this)\n  }\n\n  async resume () {\n    await super.resume()\n    const resuming = []\n    for (const server of this.listening) resuming.push(server.resume())\n    await Promise.allSettled(resuming)\n  }\n\n  async suspend () {\n    const suspending = []\n    for (const server of this.listening) suspending.push(server.suspend())\n    await Promise.allSettled(suspending)\n    await super.suspend()\n    await this._rawStreams.clear()\n  }\n\n  async destroy ({ force = false } = {}) {\n    if (!force) {\n      const closing = []\n      for (const server of this.listening) closing.push(server.close())\n      await Promise.allSettled(closing)\n    }\n    this._router.destroy()\n    if (this._persistent) this._persistent.destroy()\n    await this._rawStreams.clear()\n    await this._socketPool.destroy()\n    await super.destroy()\n  }\n\n  async validateLocalAddresses (addresses) {\n    const list = []\n    const socks = []\n    const waiting = []\n\n    for (const addr of addresses) {\n      const { host } = addr\n\n      if (this._validatedLocalAddresses.has(host)) {\n        if (await this._validatedLocalAddresses.get(host)) {\n          list.push(addr)\n        }\n        continue\n      }\n\n      const sock = this.udx.createSocket()\n      try {\n        sock.bind(0, host)\n      } catch {\n        this._validatedLocalAddresses.set(host, Promise.resolve(false))\n        continue\n      }\n\n      socks.push(sock)\n\n      // semi terrible heuristic until we proper fix local connections by racing them to the remote...\n      const promise = new Promise(resolve => {\n        sock.on('message', () => resolve(true))\n        setTimeout(() => resolve(false), 500)\n        sock.trySend(b4a.alloc(1), sock.address().port, addr.host)\n      })\n\n      this._validatedLocalAddresses.set(host, promise)\n      waiting.push(addr)\n    }\n\n    for (const addr of waiting) {\n      const { host } = addr\n      if (this._validatedLocalAddresses.has(host)) {\n        if (await this._validatedLocalAddresses.get(host)) {\n          list.push(addr)\n        }\n        continue\n      }\n    }\n\n    for (const sock of socks) await sock.close()\n\n    return list\n  }\n\n  findPeer (publicKey, opts = {}) {\n    const target = opts.hash === false ? publicKey : hash(publicKey)\n    opts = { ...opts, map: mapFindPeer }\n    return this.query({ target, command: COMMANDS.FIND_PEER, value: null }, opts)\n  }\n\n  lookup (target, opts = {}) {\n    opts = { ...opts, map: mapLookup }\n    return this.query({ target, command: COMMANDS.LOOKUP, value: null }, opts)\n  }\n\n  lookupAndUnannounce (target, keyPair, opts = {}) {\n    const unannounces = []\n    const dht = this\n    const userCommit = opts.commit || noop\n    const signUnannounce = opts.signUnannounce || Persistent.signUnannounce\n\n    if (this._persistent !== null) { // unlink self\n      this._persistent.unannounce(target, keyPair.publicKey)\n    }\n\n    opts = { ...opts, map, commit }\n    return this.query({ target, command: COMMANDS.LOOKUP, value: null }, opts)\n\n    async function commit (reply, dht, query) {\n      await Promise.all(unannounces) // can never fail, caught below\n      return userCommit(reply, dht, query)\n    }\n\n    function map (reply) {\n      const data = mapLookup(reply)\n\n      if (!data || !data.token) return data\n\n      let found = data.peers.length >= 20\n      for (let i = 0; !found && i < data.peers.length; i++) {\n        found = b4a.equals(data.peers[i].publicKey, keyPair.publicKey)\n      }\n\n      if (!found) return data\n\n      if (!data.from.id) return data\n\n      unannounces.push(\n        dht._requestUnannounce(\n          keyPair,\n          dht,\n          target,\n          data.token,\n          data.from,\n          signUnannounce\n        ).catch(safetyCatch)\n      )\n\n      return data\n    }\n  }\n\n  unannounce (target, keyPair, opts = {}) {\n    return this.lookupAndUnannounce(target, keyPair, opts).finished()\n  }\n\n  announce (target, keyPair, relayAddresses, opts = {}) {\n    const signAnnounce = opts.signAnnounce || Persistent.signAnnounce\n\n    opts = { ...opts, commit }\n\n    return opts.clear\n      ? this.lookupAndUnannounce(target, keyPair, opts)\n      : this.lookup(target, opts)\n\n    function commit (reply, dht) {\n      return dht._requestAnnounce(\n        keyPair,\n        dht,\n        target,\n        reply.token,\n        reply.from,\n        relayAddresses,\n        signAnnounce\n      )\n    }\n  }\n\n  async immutableGet (target, opts = {}) {\n    opts = { ...opts, map: mapImmutable }\n\n    const query = this.query({ target, command: COMMANDS.IMMUTABLE_GET, value: null }, opts)\n    const check = b4a.allocUnsafe(32)\n\n    for await (const node of query) {\n      const { value } = node\n      sodium.crypto_generichash(check, value)\n      if (b4a.equals(check, target)) return node\n    }\n\n    return null\n  }\n\n  async immutablePut (value, opts = {}) {\n    const target = b4a.allocUnsafe(32)\n    sodium.crypto_generichash(target, value)\n\n    opts = {\n      ...opts,\n      map: mapImmutable,\n      commit (reply, dht) {\n        return dht.request({ token: reply.token, target, command: COMMANDS.IMMUTABLE_PUT, value }, reply.from)\n      }\n    }\n\n    const query = this.query({ target, command: COMMANDS.IMMUTABLE_GET, value: null }, opts)\n    await query.finished()\n\n    return { hash: target, closestNodes: query.closestNodes }\n  }\n\n  async mutableGet (publicKey, opts = {}) {\n    let refresh = opts.refresh || null\n    let signed = null\n    let result = null\n\n    opts = { ...opts, map: mapMutable, commit: refresh ? commit : null }\n\n    const target = b4a.allocUnsafe(32)\n    sodium.crypto_generichash(target, publicKey)\n\n    const userSeq = opts.seq || 0\n    const query = this.query({ target, command: COMMANDS.MUTABLE_GET, value: c.encode(c.uint, userSeq) }, opts)\n    const latest = opts.latest !== false\n\n    for await (const node of query) {\n      if (result && node.seq <= result.seq) continue\n      if (node.seq < userSeq || !Persistent.verifyMutable(node.signature, node.seq, node.value, publicKey)) continue\n      if (!latest) return node\n      if (!result || node.seq > result.seq) result = node\n    }\n\n    return result\n\n    function commit (reply, dht) {\n      if (!signed && result && refresh) {\n        if (refresh(result)) {\n          signed = c.encode(m.mutablePutRequest, {\n            publicKey,\n            seq: result.seq,\n            value: result.value,\n            signature: result.signature\n          })\n        } else {\n          refresh = null\n        }\n      }\n\n      return signed ? dht.request({ token: reply.token, target, command: COMMANDS.MUTABLE_PUT, value: signed }, reply.from) : Promise.resolve(null)\n    }\n  }\n\n  async mutablePut (keyPair, value, opts = {}) {\n    const signMutable = opts.signMutable || Persistent.signMutable\n\n    const target = b4a.allocUnsafe(32)\n    sodium.crypto_generichash(target, keyPair.publicKey)\n\n    const seq = opts.seq || 0\n    const signature = await signMutable(seq, value, keyPair)\n\n    const signed = c.encode(m.mutablePutRequest, {\n      publicKey: keyPair.publicKey,\n      seq,\n      value,\n      signature\n    })\n\n    opts = {\n      ...opts,\n      map: mapMutable,\n      commit (reply, dht) {\n        return dht.request({ token: reply.token, target, command: COMMANDS.MUTABLE_PUT, value: signed }, reply.from)\n      }\n    }\n\n    // use seq = 0, for the query part here, as we don't care about the actual values\n    const query = this.query({ target, command: COMMANDS.MUTABLE_GET, value: c.encode(c.uint, 0) }, opts)\n    await query.finished()\n\n    return { publicKey: keyPair.publicKey, closestNodes: query.closestNodes, seq, signature }\n  }\n\n  onrequest (req) {\n    switch (req.command) {\n      case COMMANDS.PEER_HANDSHAKE: {\n        this._router.onpeerhandshake(req)\n        return true\n      }\n      case COMMANDS.PEER_HOLEPUNCH: {\n        this._router.onpeerholepunch(req)\n        return true\n      }\n    }\n\n    if (this._persistent === null) return false\n\n    switch (req.command) {\n      case COMMANDS.FIND_PEER: {\n        this._persistent.onfindpeer(req)\n        return true\n      }\n      case COMMANDS.LOOKUP: {\n        this._persistent.onlookup(req)\n        return true\n      }\n      case COMMANDS.ANNOUNCE: {\n        this._persistent.onannounce(req)\n        return true\n      }\n      case COMMANDS.UNANNOUNCE: {\n        this._persistent.onunannounce(req)\n        return true\n      }\n      case COMMANDS.MUTABLE_PUT: {\n        this._persistent.onmutableput(req)\n        return true\n      }\n      case COMMANDS.MUTABLE_GET: {\n        this._persistent.onmutableget(req)\n        return true\n      }\n      case COMMANDS.IMMUTABLE_PUT: {\n        this._persistent.onimmutableput(req)\n        return true\n      }\n      case COMMANDS.IMMUTABLE_GET: {\n        this._persistent.onimmutableget(req)\n        return true\n      }\n    }\n\n    return false\n  }\n\n  static keyPair (seed) {\n    return createKeyPair(seed)\n  }\n\n  static hash (data) {\n    return hash(data)\n  }\n\n  static connectRawStream (encryptedStream, rawStream, remoteId) {\n    const stream = encryptedStream.rawStream\n\n    if (!stream.connected) throw STREAM_NOT_CONNECTED()\n\n    rawStream.connect(\n      stream.socket,\n      remoteId,\n      stream.remotePort,\n      stream.remoteHost\n    )\n  }\n\n  createRawStream (opts) {\n    return this._rawStreams.add(opts)\n  }\n\n  async _requestAnnounce (keyPair, dht, target, token, from, relayAddresses, sign) {\n    const ann = {\n      peer: {\n        publicKey: keyPair.publicKey,\n        relayAddresses: relayAddresses || []\n      },\n      refresh: null,\n      signature: null\n    }\n\n    ann.signature = await sign(target, token, from.id, ann, keyPair)\n\n    const value = c.encode(m.announce, ann)\n\n    return dht.request({\n      token,\n      target,\n      command: COMMANDS.ANNOUNCE,\n      value\n    }, from)\n  }\n\n  async _requestUnannounce (keyPair, dht, target, token, from, sign) {\n    const unann = {\n      peer: {\n        publicKey: keyPair.publicKey,\n        relayAddresses: []\n      },\n      signature: null\n    }\n\n    unann.signature = await sign(target, token, from.id, unann, keyPair)\n\n    const value = c.encode(m.announce, unann)\n\n    return dht.request({\n      token,\n      target,\n      command: COMMANDS.UNANNOUNCE,\n      value\n    }, from)\n  }\n}\n\nHyperDHT.BOOTSTRAP = BOOTSTRAP_NODES\nHyperDHT.FIREWALL = FIREWALL\n\nmodule.exports = HyperDHT\n\nfunction mapLookup (node) {\n  if (!node.value) return null\n\n  try {\n    return {\n      token: node.token,\n      from: node.from,\n      to: node.to,\n      peers: c.decode(m.peers, node.value)\n    }\n  } catch {\n    return null\n  }\n}\n\nfunction mapFindPeer (node) {\n  if (!node.value) return null\n\n  try {\n    return {\n      token: node.token,\n      from: node.from,\n      to: node.to,\n      peer: c.decode(m.peer, node.value)\n    }\n  } catch {\n    return null\n  }\n}\n\nfunction mapImmutable (node) {\n  if (!node.value) return null\n\n  return {\n    token: node.token,\n    from: node.from,\n    to: node.to,\n    value: node.value\n  }\n}\n\nfunction mapMutable (node) {\n  if (!node.value) return null\n\n  try {\n    const { seq, value, signature } = c.decode(m.mutableGetResponse, node.value)\n\n    return {\n      token: node.token,\n      from: node.from,\n      to: node.to,\n      seq,\n      value,\n      signature\n    }\n  } catch {\n    return null\n  }\n}\n\nfunction noop () {}\n\nfunction filterNode (node) {\n  // always skip these testnet nodes that got mixed in by accident, until they get updated\n  return !(node.port === 49738 && (node.host === '134.209.28.98' || node.host === '167.99.142.185')) &&\n    !(node.port === 9400 && node.host === '35.233.47.252') && !(node.host === '150.136.142.116')\n}\n\nconst defaultMaxSize = 65536\nconst defaultMaxAge = 20 * 60 * 1000 // 20 minutes\n\nfunction defaultCacheOpts (opts) {\n  const maxSize = opts.maxSize || defaultMaxSize\n  const maxAge = opts.maxAge || defaultMaxAge\n\n  return {\n    router: {\n      forwards: { maxSize, maxAge }\n    },\n    persistent: {\n      records: { maxSize, maxAge },\n      refreshes: { maxSize, maxAge },\n      mutables: {\n        maxSize: maxSize / 2 | 0,\n        maxAge: opts.maxAge || 48 * 60 * 60 * 1000 // 48 hours\n      },\n      immutables: {\n        maxSize: maxSize / 2 | 0,\n        maxAge: opts.maxAge || 48 * 60 * 60 * 1000 // 48 hours\n      }\n    }\n  }\n}\nconst safetyCatch = require('safety-catch')\nconst c = require('compact-encoding')\nconst Signal = require('signal-promise')\nconst { encodeUnslab } = require('./encode')\nconst Sleeper = require('./sleeper')\nconst m = require('./messages')\nconst Persistent = require('./persistent')\nconst { COMMANDS } = require('./constants')\n\nconst MIN_ACTIVE = 3\n\nmodule.exports = class Announcer {\n  constructor (dht, keyPair, target, opts = {}) {\n    this.dht = dht\n    this.keyPair = keyPair\n    this.target = target\n    this.relays = []\n    this.relayAddresses = []\n    this.stopped = false\n    this.suspended = false\n    this.record = encodeUnslab(m.peer, { publicKey: keyPair.publicKey, relayAddresses: [] })\n    this.online = new Signal()\n\n    this._refreshing = false\n    this._closestNodes = null\n    this._active = null\n    this._sleeper = new Sleeper()\n    this._resumed = new Signal()\n    this._signAnnounce = opts.signAnnounce || Persistent.signAnnounce\n    this._signUnannounce = opts.signUnannounce || Persistent.signUnannounce\n    this._updating = null\n    this._activeQuery = null\n    this._unannouncing = null\n\n    this._serverRelays = [\n      new Map(),\n      new Map(),\n      new Map()\n    ]\n  }\n\n  isRelay (addr) {\n    const id = addr.host + ':' + addr.port\n    const [a, b, c] = this._serverRelays\n    return a.has(id) || b.has(id) || c.has(id)\n  }\n\n  async suspend () {\n    if (this.suspended) return\n    this.suspended = true\n\n    // Suspend has its own sleep logic\n    // so we don't want to hang on this one\n    this.online.notify()\n\n    if (this._activeQuery) this._activeQuery.destroy()\n\n    this._sleeper.resume()\n    if (this._updating) await this._updating\n\n    if (this.suspended === false || this.stopped) return\n    await this._unannounceCurrent()\n  }\n\n  resume () {\n    if (!this.suspended) return\n    this.suspended = false\n\n    this.refresh()\n    this._sleeper.resume()\n    this._resumed.notify()\n  }\n\n  refresh () {\n    if (this.stopped) return\n    this._refreshing = true\n  }\n\n  async start () {\n    if (this.stopped) return\n    this._active = this._runUpdate()\n    await this._active\n    if (this.stopped) return\n    this._active = this._background()\n  }\n\n  async stop () {\n    this.stopped = true\n    this.online.notify() // Break out of the _background loop if we're offline\n    this._sleeper.resume()\n    this._resumed.notify()\n    await this._active\n    await this._unannounceCurrent()\n  }\n\n  async _unannounceCurrent () {\n    while (this._unannouncing !== null) await this._unannouncing\n    const un = this._unannouncing = this._unannounceAll(this._serverRelays[2].values())\n    await this._unannouncing\n    if (un === this._unannouncing) this._unannouncing = null\n  }\n\n  async _background () {\n    while (!this.dht.destroyed && !this.stopped) {\n      try {\n        this._refreshing = false\n\n        // ~5min +-\n        for (let i = 0; i < 100 && !this.stopped && !this._refreshing && !this.suspended; i++) {\n          const pings = []\n\n          for (const node of this._serverRelays[2].values()) {\n            pings.push(this.dht.ping(node))\n          }\n\n          const active = await resolved(pings)\n          if (active < Math.min(pings.length, MIN_ACTIVE)) {\n            this.refresh() // we lost too many relay nodes, retry all\n          }\n\n          if (this.stopped) return\n\n          if (!this.suspended && !this._refreshing) await this._sleeper.pause(3000)\n        }\n\n        while (!this.stopped && this.suspended) await this._resumed.wait()\n\n        if (!this.stopped) await this._runUpdate()\n\n        while (!this.dht.online && !this.stopped && !this.suspended) {\n          // Being offline can make _background repeat very quickly\n          // So wait until we're back online\n          await this.online.wait()\n        }\n      } catch (err) {\n        safetyCatch(err)\n      }\n    }\n  }\n\n  async _runUpdate () {\n    this._updating = this._update()\n    await this._updating\n    this._updating = null\n  }\n\n  async _update () {\n    while (this._unannouncing) await this._unannouncing\n\n    this._cycle()\n\n    const q = this._activeQuery = this.dht.findPeer(this.target, { hash: false, nodes: this._closestNodes })\n\n    try {\n      await q.finished()\n    } catch {\n      // ignore failures...\n    }\n\n    this._activeQuery = null\n\n    if (this.stopped || this.suspended) return\n\n    const ann = []\n    const replies = pickBest(q.closestReplies)\n\n    const relays = []\n    const relayAddresses = []\n\n    if (!this.dht.firewalled) {\n      const addr = this.dht.remoteAddress()\n      if (addr) relayAddresses.push(addr)\n    }\n\n    for (const msg of replies) {\n      ann.push(this._commit(msg, relays, relayAddresses))\n    }\n\n    await Promise.allSettled(ann)\n    if (this.stopped || this.suspended) return\n\n    this._closestNodes = q.closestNodes\n    this.relays = relays\n    this.relayAddresses = relayAddresses\n\n    const removed = []\n    for (const [key, value] of this._serverRelays[1]) {\n      if (!this._serverRelays[2].has(key)) removed.push(value)\n    }\n\n    await this._unannounceAll(removed)\n  }\n\n  _unannounceAll (relays) {\n    const unann = []\n    for (const r of relays) unann.push(this._unannounce(r))\n    return Promise.allSettled(unann)\n  }\n\n  async _unannounce (to) {\n    const unann = {\n      peer: {\n        publicKey: this.keyPair.publicKey,\n        relayAddresses: []\n      },\n      refresh: null,\n      signature: null\n    }\n\n    const { from, token, value } = await this.dht.request({\n      token: null,\n      command: COMMANDS.FIND_PEER,\n      target: this.target,\n      value: null\n    }, to)\n\n    if (!token || !from.id || !value) return\n\n    unann.signature = await this._signUnannounce(this.target, token, from.id, unann, this.keyPair)\n\n    await this.dht.request({\n      token,\n      command: COMMANDS.UNANNOUNCE,\n      target: this.target,\n      value: c.encode(m.announce, unann)\n    }, to)\n  }\n\n  async _commit (msg, relays, relayAddresses) {\n    const ann = {\n      peer: {\n        publicKey: this.keyPair.publicKey,\n        relayAddresses: []\n      },\n      refresh: null,\n      signature: null\n    }\n\n    ann.signature = await this._signAnnounce(this.target, msg.token, msg.from.id, ann, this.keyPair)\n\n    const res = await this.dht.request({\n      token: msg.token,\n      command: COMMANDS.ANNOUNCE,\n      target: this.target,\n      value: c.encode(m.announce, ann)\n    }, msg.from)\n\n    if (res.error !== 0) return\n\n    if (relayAddresses.length < 3) relayAddresses.push({ host: msg.from.host, port: msg.from.port })\n    relays.push({ relayAddress: msg.from, peerAddress: msg.to })\n\n    this._serverRelays[2].set(msg.from.host + ':' + msg.from.port, msg.from)\n  }\n\n  _cycle () {\n    const tmp = this._serverRelays[0]\n    this._serverRelays[0] = this._serverRelays[1]\n    this._serverRelays[1] = this._serverRelays[2]\n    this._serverRelays[2] = tmp\n    tmp.clear()\n  }\n}\n\nfunction resolved (ps) {\n  let replied = 0\n  let ticks = ps.length + 1\n\n  return new Promise((resolve) => {\n    for (const p of ps) p.then(push, tick)\n    tick()\n\n    function push (v) {\n      replied++\n      tick()\n    }\n\n    function tick () {\n      if (--ticks === 0) resolve(replied)\n    }\n  })\n}\n\nfunction pickBest (replies) { // TODO: pick the ones closest to us RTT wise\n  return replies.slice(0, 3)\n}\nconst NoiseSecretStream = require('@hyperswarm/secret-stream')\nconst b4a = require('b4a')\nconst relay = require('blind-relay')\nconst { isPrivate, isBogon } = require('bogon')\nconst safetyCatch = require('safety-catch')\nconst unslab = require('unslab')\nconst Semaphore = require('./semaphore')\nconst NoiseWrap = require('./noise-wrap')\nconst SecurePayload = require('./secure-payload')\nconst Holepuncher = require('./holepuncher')\nconst Sleeper = require('./sleeper')\nconst { FIREWALL, ERROR } = require('./constants')\nconst { unslabbedHash } = require('./crypto')\nconst {\n  CANNOT_HOLEPUNCH,\n  HANDSHAKE_INVALID,\n  HOLEPUNCH_ABORTED,\n  HOLEPUNCH_INVALID,\n  HOLEPUNCH_PROBE_TIMEOUT,\n  HOLEPUNCH_DOUBLE_RANDOMIZED_NATS,\n  PEER_CONNECTION_FAILED,\n  PEER_NOT_FOUND,\n  REMOTE_ABORTED,\n  REMOTE_NOT_HOLEPUNCHABLE,\n  REMOTE_NOT_HOLEPUNCHING,\n  SERVER_ERROR,\n  SERVER_INCOMPATIBLE,\n  RELAY_ABORTED,\n  SUSPENDED\n} = require('./errors')\n\nmodule.exports = function connect (dht, publicKey, opts = {}) {\n  const pool = opts.pool || null\n\n  if (pool && pool.has(publicKey)) return pool.get(publicKey)\n\n  publicKey = unslab(publicKey)\n\n  const keyPair = opts.keyPair || dht.defaultKeyPair\n  const relayThrough = selectRelay(opts.relayThrough || null)\n  const encryptedSocket = (opts.createSecretStream || defaultCreateSecretStream)(true, null, {\n    publicKey: keyPair.publicKey,\n    remotePublicKey: publicKey,\n    autoStart: false,\n    keepAlive: dht.connectionKeepAlive\n  })\n\n  // in case a socket is made during suspended state, destroy it immediately\n  if (dht.suspended) {\n    encryptedSocket.destroy(SUSPENDED())\n    return encryptedSocket\n  }\n\n  if (pool) pool._attachStream(encryptedSocket, false)\n\n  const c = {\n    dht,\n    session: dht.session(),\n    relayAddresses: opts.relayAddresses || [],\n    pool,\n    round: 0,\n    target: unslabbedHash(publicKey),\n    remotePublicKey: publicKey,\n    reusableSocket: !!opts.reusableSocket,\n    handshake: (opts.createHandshake || defaultCreateHandshake)(keyPair, publicKey),\n    request: null,\n    requesting: false,\n    lan: opts.localConnection !== false,\n    firewall: FIREWALL.UNKNOWN,\n    rawStream: dht.createRawStream({ framed: true, firewall }),\n    connect: null,\n    query: null,\n    puncher: null,\n    payload: null,\n    passiveConnectTimeout: null,\n    serverSocket: null,\n    serverAddress: null,\n    onsocket: null,\n    sleeper: new Sleeper(),\n    encryptedSocket,\n\n    // Relay state\n    relayTimeout: null,\n    relayThrough,\n    relayToken: relayThrough ? relay.token() : null,\n    relaySocket: null,\n    relayClient: null,\n    relayPaired: false,\n    relayKeepAlive: opts.relayKeepAlive || 5000\n  }\n\n  // If the raw stream receives an error signal pre connect (ie from the firewall hook), make sure\n  // to forward that to the encrypted socket for proper teardown\n  c.rawStream.on('error', autoDestroy)\n  c.rawStream.once('connect', () => {\n    c.rawStream.removeListener('error', autoDestroy)\n  })\n\n  encryptedSocket.on('close', function () {\n    if (c.passiveConnectTimeout) clearPassiveConnectTimeout(c)\n    if (c.query) c.query.destroy()\n    if (c.puncher) c.puncher.destroy()\n    if (c.rawStream) c.rawStream.destroy()\n    c.session.destroy()\n    c.sleeper.resume()\n  })\n\n  // Safe to run in the background - never throws\n  if (dht.suspended) encryptedSocket.destroy(SUSPENDED())\n  else connectAndHolepunch(c, opts)\n\n  return encryptedSocket\n\n  function autoDestroy (err) {\n    maybeDestroyEncryptedSocket(c, err)\n  }\n\n  function firewall (socket, port, host) {\n    // Check if the traffic originated from the socket on which we're expecting relay traffic. If so,\n    // we haven't hole punched yet and the other side is just sending us traffic through the relay.\n    if (c.relaySocket && isRelay(c.relaySocket, socket, port, host)) {\n      return false\n    }\n\n    if (c.onsocket) {\n      c.onsocket(socket, port, host)\n    } else {\n      c.serverSocket = socket\n      c.serverAddress = { port, host }\n    }\n    return false\n  }\n}\n\nfunction isDone (c) {\n  // we are destroying or the puncher is connected - done\n  if (c.encryptedSocket.destroying || !!(c.puncher && c.puncher.connected)) {\n    return true\n  }\n  // not destroying, but no raw stream - def not done\n  if (c.encryptedSocket.rawStream === null) {\n    return false\n  }\n  // we are relayed, but the puncher is not done yet\n  if (c.relaySocket && !!(c.puncher && !c.puncher.connected && !c.puncher.destroyed)) {\n    return false\n  }\n  // we are done\n  return true\n}\n\nasync function retryRoute (c, route) {\n  const ref = c.dht._socketPool.lookup(route.socket)\n\n  if (!ref) {\n    if (route.socket === c.dht.socket) {\n      await connectThroughNode(c, route.address, c.dht.socket)\n    }\n    return\n  }\n\n  ref.active()\n\n  try {\n    await connectThroughNode(c, route.address, route.socket)\n  } catch {\n    // if error, just ignore, and continue through the existing strat\n  }\n\n  ref.inactive()\n}\n\nasync function connectAndHolepunch (c, opts) {\n  const route = c.reusableSocket ? c.dht._socketPool.routes.get(c.remotePublicKey) : null\n\n  if (route) {\n    await retryRoute(c, route)\n    if (isDone(c)) return\n  }\n\n  await findAndConnect(c, opts)\n  if (isDone(c)) return\n\n  if (!c.connect) { // TODO: just a quick fix for now, should retry prob\n    maybeDestroyEncryptedSocket(c, HANDSHAKE_INVALID())\n    return\n  }\n\n  await holepunch(c, opts)\n}\n\nfunction getFirstRemoteAddress (addrs, serverAddress) {\n  for (const addr of addrs) {\n    if (isBogon(addr.host)) continue\n    return addr\n  }\n\n  return serverAddress\n}\n\nasync function holepunch (c, opts) {\n  let { relayAddress, serverAddress, clientAddress, payload } = c.connect\n\n  const remoteHolepunchable = !!(payload.holepunch && payload.holepunch.relays.length)\n\n  const relayed = diffAddress(serverAddress, relayAddress)\n\n  if (payload.firewall === FIREWALL.OPEN || (relayed && !remoteHolepunchable)) {\n    const addr = getFirstRemoteAddress(payload.addresses4, serverAddress)\n    if (addr) {\n      const socket = c.dht.socket\n      c.dht.stats.punches.open++\n      c.onsocket(socket, addr.port, addr.host)\n      return\n    }\n    // TODO: check all addresses also obvs\n  }\n\n  const onabort = () => {\n    c.session.destroy()\n    maybeDestroyEncryptedSocket(c, HOLEPUNCH_ABORTED())\n  }\n\n  if (c.firewall === FIREWALL.OPEN) {\n    c.passiveConnectTimeout = setTimeout(onabort, 10000)\n    return\n  }\n\n  // TODO: would be better to just try local addrs in the background whilst continuing with other strategies...\n  if (c.lan && relayed && clientAddress.host === serverAddress.host) {\n    const serverAddresses = payload.addresses4.filter(onlyPrivateHosts)\n\n    if (serverAddresses.length > 0) {\n      const myAddresses = Holepuncher.localAddresses(c.dht.io.serverSocket)\n      const addr = Holepuncher.matchAddress(myAddresses, serverAddresses) || serverAddresses[0]\n\n      const socket = c.dht.io.serverSocket\n      try {\n        await c.dht.ping(addr)\n      } catch {\n        maybeDestroyEncryptedSocket(c, HOLEPUNCH_ABORTED())\n        return\n      }\n      c.onsocket(socket, addr.port, addr.host)\n      return\n    }\n  }\n\n  if (!remoteHolepunchable) {\n    maybeDestroyEncryptedSocket(c, CANNOT_HOLEPUNCH())\n    return\n  }\n\n  c.puncher = new Holepuncher(c.dht, c.session, true, payload.firewall)\n\n  c.puncher.onconnect = c.onsocket\n  c.puncher.onabort = onabort\n\n  const serverRelay = pickServerRelay(payload.holepunch.relays, relayAddress)\n\n  // Begin holepunching!\n\n  let probe\n  try {\n    probe = await probeRound(c, opts.fastOpen === false ? null : serverAddress, serverRelay, true)\n  } catch (err) {\n    destroyPuncher(c)\n    // TODO: we should retry here with some of the other relays, bail for now\n    maybeDestroyEncryptedSocket(c, err)\n    return\n  }\n\n  if (isDone(c) || !probe) return\n  const { token, peerAddress } = probe\n\n  // If the relay the server picked is the same as the relay the client picked,\n  // then we can use the peerAddress that round one indicates the server wants to use.\n  // This shaves off a roundtrip if the server chose to reroll its socket due to some NAT\n  // issue with the first one it picked (ie mobile nat inconsistencies...).\n  // If the relays were different, then the server would not have a UDP session open on this address\n  // to the client relay, which round2 uses.\n  if (!diffAddress(serverRelay.relayAddress, relayAddress) && diffAddress(serverAddress, peerAddress)) {\n    serverAddress = peerAddress\n    await c.puncher.openSession(serverAddress)\n    if (isDone(c)) return\n  }\n\n  // TODO: still continue here if a local connection might work, but then do not holepunch...\n  if (opts.holepunch && !opts.holepunch(c.puncher.remoteFirewall, c.puncher.nat.firewall, c.puncher.remoteAddresses, c.puncher.nat.addresses)) {\n    await abort(c, serverRelay, HOLEPUNCH_ABORTED('Client aborted holepunch'))\n    return\n  }\n\n  try {\n    await roundPunch(c, serverAddress, token, relayAddress, serverRelay, false)\n  } catch (err) {\n    destroyPuncher(c)\n    // TODO: retry with another relay?\n    maybeDestroyEncryptedSocket(c, err)\n  }\n}\n\nasync function findAndConnect (c, opts) {\n  let attempts = 0\n  let closestNodes = (opts.relayAddresses && opts.relayAddresses.length) ? opts.relayAddresses : null\n\n  if (c.dht._persistent) { // check if we know the route ourself...\n    const route = c.dht._router.get(c.target)\n    if (route && route.relay !== null) closestNodes = [{ host: route.relay.host, port: route.relay.port }]\n  }\n\n  // 2 is how many parallel connect attempts we want to do, we can make this configurable\n  const sem = new Semaphore(2)\n  const signal = sem.signal.bind(sem)\n  const tries = closestNodes !== null ? 2 : 1\n\n  try {\n    for (let i = 0; i < tries && !isDone(c) && !c.connect; i++) {\n      c.query = c.dht.findPeer(c.target, { hash: false, session: c.session, closestNodes, onlyClosestNodes: closestNodes !== null })\n\n      for await (const data of c.query) {\n        await sem.wait()\n        if (isDone(c)) return\n\n        if (c.connect) {\n          sem.signal()\n          break\n        }\n\n        attempts++\n        connectThroughNode(c, data.from, null).then(signal, signal)\n      }\n\n      closestNodes = null\n    }\n\n    c.query = null\n    if (isDone(c)) return\n\n    // flush the semaphore\n    await sem.flush()\n    if (isDone(c)) return\n  } catch (err) {\n    c.query = null\n    maybeDestroyEncryptedSocket(c, err)\n    return\n  }\n\n  if (!c.connect) {\n    maybeDestroyEncryptedSocket(c, attempts ? PEER_CONNECTION_FAILED() : PEER_NOT_FOUND())\n  }\n}\n\nasync function connectThroughNode (c, address, socket) {\n  if (!c.requesting) {\n    // If we have a stable server address, send it over now\n    const addr = c.dht.remoteAddress()\n    const localAddrs = c.lan ? Holepuncher.localAddresses(c.dht.io.serverSocket) : null\n    const addresses4 = []\n\n    if (addr) addresses4.push(addr)\n    if (localAddrs) addresses4.push(...localAddrs)\n\n    c.firewall = addr ? FIREWALL.OPEN : FIREWALL.UNKNOWN\n    c.requesting = true\n    c.request = await c.handshake.send({\n      error: ERROR.NONE,\n      firewall: c.firewall,\n      holepunch: null,\n      addresses4,\n      addresses6: [],\n      udx: {\n        reusableSocket: c.reusableSocket,\n        id: c.rawStream.id,\n        seq: 0\n      },\n      secretStream: {},\n      relayThrough: c.relayThrough\n        ? { publicKey: c.relayThrough, token: c.relayToken }\n        : null\n    })\n    if (isDone(c)) return\n  }\n\n  const { serverAddress, clientAddress, relayed, noise } = await c.dht._router.peerHandshake(c.target, { noise: c.request, socket, session: c.session }, address)\n  if (isDone(c) || c.connect) return\n\n  const payload = await c.handshake.recv(noise)\n  if (isDone(c) || !payload) return\n\n  if (payload.version !== 1) {\n    maybeDestroyEncryptedSocket(c, SERVER_INCOMPATIBLE())\n    return\n  }\n  if (payload.error !== ERROR.NONE) {\n    maybeDestroyEncryptedSocket(c, SERVER_ERROR())\n    return\n  }\n  if (!payload.udx) {\n    maybeDestroyEncryptedSocket(c, SERVER_ERROR('Server did not send UDX data'))\n    return\n  }\n\n  const hs = c.handshake.final()\n\n  c.handshake = null\n  c.request = null\n  c.requesting = false\n  c.connect = {\n    relayed,\n    relayAddress: address,\n    clientAddress,\n    serverAddress,\n    payload\n  }\n\n  c.payload = new SecurePayload(hs.holepunchSecret)\n\n  c.onsocket = function (socket, port, host) {\n    if (c.rawStream === null) return // Already hole punched\n\n    if (c.rawStream.connected) {\n      const remoteChanging = c.rawStream.changeRemote(socket, c.connect.payload.udx.id, port, host)\n\n      if (remoteChanging) remoteChanging.catch(safetyCatch)\n    } else {\n      c.rawStream.connect(socket, c.connect.payload.udx.id, port, host)\n      c.encryptedSocket.start(c.rawStream, { handshake: hs })\n    }\n\n    if (c.reusableSocket && payload.udx.reusableSocket) {\n      c.dht._socketPool.routes.add(c.remotePublicKey, c.rawStream)\n    }\n\n    if (c.puncher) {\n      c.puncher.onabort = noop\n      c.puncher.destroy()\n    }\n\n    if (c.passiveConnectTimeout) {\n      clearPassiveConnectTimeout(c)\n    }\n\n    c.rawStream = null\n  }\n\n  if (payload.relayThrough || c.relayThrough) {\n    relayConnection(c, c.relayThrough, payload, hs)\n  }\n\n  if (c.serverSocket) {\n    c.onsocket(c.serverSocket, c.serverAddress.port, c.serverAddress.host)\n    return\n  }\n\n  if (!relayed) {\n    c.onsocket(socket || c.dht.socket, address.port, address.host)\n  }\n\n  c.session.destroy()\n}\n\nasync function updateHolepunch (c, peerAddress, relayAddr, payload) {\n  const holepunch = await c.dht._router.peerHolepunch(c.target, {\n    id: c.connect.payload.holepunch.id,\n    payload: c.payload.encrypt(payload),\n    peerAddress,\n    socket: c.puncher.socket,\n    session: c.session\n  }, relayAddr)\n\n  if (isDone(c)) return null\n\n  const remotePayload = c.payload.decrypt(holepunch.payload)\n  if (!remotePayload) {\n    throw HOLEPUNCH_INVALID()\n  }\n\n  const { error, firewall, punching, addresses, remoteToken } = remotePayload\n\n  if (error === ERROR.TRY_LATER && c.relayToken && payload.punching) {\n    return {\n      tryLater: true,\n      ...holepunch,\n      payload: remotePayload\n    }\n  }\n\n  if (error !== ERROR.NONE) {\n    throw REMOTE_ABORTED('Remote aborted with error code ' + error)\n  }\n\n  const echoed = !!(remoteToken && payload.token && b4a.equals(remoteToken, payload.token))\n\n  c.puncher.updateRemote({ punching, firewall, addresses, verified: echoed ? peerAddress.host : null })\n\n  return {\n    tryLater: false,\n    ...holepunch,\n    payload: remotePayload\n  }\n}\n\nasync function probeRound (c, serverAddress, serverRelay, retry) {\n  // Open a quick low ttl session against what we think is the server\n  if (serverAddress) await c.puncher.openSession(serverAddress)\n\n  if (isDone(c)) return null\n\n  const reply = await updateHolepunch(c, serverRelay.peerAddress, serverRelay.relayAddress, {\n    error: ERROR.NONE,\n    firewall: c.puncher.nat.firewall,\n    round: c.round++,\n    connected: false,\n    punching: false,\n    addresses: c.puncher.nat.addresses,\n    remoteAddress: serverAddress,\n    token: null,\n    remoteToken: null\n  })\n\n  if (isDone(c) || !reply) return null\n\n  const { peerAddress } = reply\n  const { address, token } = reply.payload\n\n  c.puncher.nat.add(reply.to, reply.from)\n\n  // Open another quick low ttl session against what the server says their address is,\n  // if they haven't said they are random yet\n  if (c.puncher.remoteFirewall < FIREWALL.RANDOM && address && address.host && address.port && diffAddress(address, serverAddress)) {\n    await c.puncher.openSession(address)\n    if (isDone(c)) return null\n  }\n\n  // If the remote told us they didn't know their nat firewall yet, give them a chance to figure it out\n  // They might say this to see if the \"fast mode\" punch comes through first.\n  if (c.puncher.remoteFirewall === FIREWALL.UNKNOWN) {\n    await c.sleeper.pause(1000)\n    if (isDone(c)) return null\n  }\n\n  let stable = await c.puncher.analyze(false)\n  if (isDone(c)) return null\n\n  // If the socket seems unstable, try to make it stable by setting the \"allowReopen\" flag\n  // Mostly relevant for mobile networks\n  if (!stable) {\n    stable = await c.puncher.analyze(true)\n    if (isDone(c)) return null\n    if (stable) return probeRound(c, serverAddress, serverRelay, false)\n  }\n\n  if ((c.puncher.remoteFirewall === FIREWALL.UNKNOWN || !token) && retry) {\n    return probeRound(c, serverAddress, serverRelay, false)\n  }\n\n  if (c.puncher.remoteFirewall === FIREWALL.UNKNOWN || c.puncher.nat.firewall === FIREWALL.UNKNOWN) {\n    await abort(c, serverRelay, HOLEPUNCH_PROBE_TIMEOUT())\n    return null\n  }\n\n  if (c.puncher.remoteFirewall >= FIREWALL.RANDOM && c.puncher.nat.firewall >= FIREWALL.RANDOM) {\n    await abort(c, serverRelay, HOLEPUNCH_DOUBLE_RANDOMIZED_NATS())\n    return null\n  }\n\n  return { token, peerAddress }\n}\n\nasync function roundPunch (c, serverAddress, remoteToken, clientRelay, serverRelay, delayed) {\n  // We are gossiping our final NAT status to the other peer now\n  // so make sure we don't update our local view for now as that can make things weird\n  c.puncher.nat.freeze()\n\n  const isRandom = c.puncher.remoteFirewall >= FIREWALL.RANDOM || c.puncher.nat.firewall >= FIREWALL.RANDOM\n  if (isRandom) {\n    while (c.dht._randomPunches >= c.dht._randomPunchLimit || (Date.now() - c.dht._lastRandomPunch) < c.dht._randomPunchInterval) {\n      // if no relay can help, bail\n      if (!c.relayToken) throw HOLEPUNCH_ABORTED()\n\n      if (!delayed) {\n        delayed = true\n        await updateHolepunch(c, serverAddress, clientRelay, {\n          error: ERROR.NONE,\n          firewall: c.puncher.nat.firewall,\n          round: c.round++,\n          connected: false,\n          punching: false,\n          addresses: c.puncher.nat.addresses,\n          remoteAddress: null,\n          token: c.payload.token(serverAddress),\n          remoteToken\n        })\n        if (isDone(c)) return\n      }\n\n      await tryLater(c)\n      if (isDone(c)) return\n    }\n  }\n\n  // increment now, so we can commit to punching\n  if (isRandom) c.dht._randomPunches++\n\n  let reply\n\n  try {\n    // if delayed switch to the servers chosen relay - we validated anyway\n    reply = await updateHolepunch(c, delayed ? serverRelay.peerAddress : serverAddress, delayed ? serverRelay.relayAddress : clientRelay, {\n      error: ERROR.NONE,\n      firewall: c.puncher.nat.firewall,\n      round: c.round++,\n      connected: false,\n      punching: true,\n      addresses: c.puncher.nat.addresses,\n      remoteAddress: null,\n      token: delayed ? null : c.payload.token(serverAddress),\n      remoteToken\n    })\n  } finally {\n    // decrement as punch increments for us\n    if (isRandom) c.dht._randomPunches--\n  }\n\n  if (isDone(c)) return\n  if (!reply) return\n\n  if (reply.tryLater) {\n    await tryLater(c)\n    if (isDone(c)) return\n    return roundPunch(c, serverAddress, remoteToken, clientRelay, serverRelay, true)\n  }\n\n  if (!c.puncher.remoteHolepunching) {\n    throw REMOTE_NOT_HOLEPUNCHING()\n  }\n\n  if (!await c.puncher.punch()) {\n    throw REMOTE_NOT_HOLEPUNCHABLE()\n  }\n}\n\nasync function tryLater (c) {\n  if (!c.relayToken) throw HOLEPUNCH_ABORTED()\n  await c.sleeper.pause(10000 + Math.round(Math.random() * 10000))\n}\n\nfunction maybeDestroyEncryptedSocket (c, err) {\n  if (isDone(c)) return\n  if (c.encryptedSocket.rawStream) return\n  if (c.relaySocket) return // waiting for the relay\n  if (c.puncher && !c.puncher.destroyed) return // waiting for the puncher\n  c.session.destroy()\n  c.encryptedSocket.destroy(err)\n}\n\nasync function abort (c, { peerAddress, relayAddress }, err) {\n  try {\n    await updateHolepunch(peerAddress, relayAddress, {\n      error: ERROR.ABORTED,\n      firewall: FIREWALL.UNKNOWN,\n      round: c.round++,\n      connected: false,\n      punching: false,\n      addresses: null,\n      remoteAddress: null,\n      token: null,\n      remoteToken: null\n    })\n  } catch {}\n\n  destroyPuncher(c)\n  maybeDestroyEncryptedSocket(c, err)\n}\n\nfunction relayConnection (c, relayThrough, payload, hs) {\n  let isInitiator\n  let publicKey\n  let token\n\n  if (payload.relayThrough) {\n    isInitiator = false\n    publicKey = payload.relayThrough.publicKey\n    token = payload.relayThrough.token\n  } else {\n    isInitiator = true\n    publicKey = relayThrough\n    token = c.relayToken\n  }\n\n  c.relayToken = token\n  c.relaySocket = c.dht.connect(publicKey)\n  c.relaySocket.setKeepAlive(c.relayKeepAlive)\n  c.relayClient = relay.Client.from(c.relaySocket, { id: c.relaySocket.publicKey })\n  c.relayTimeout = setTimeout(onabort, 15000, null)\n\n  c.relayClient\n    .pair(isInitiator, token, c.rawStream)\n    .on('error', onabort)\n    .on('data', ondata)\n\n  function ondata (remoteId) {\n    if (c.relayTimeout) clearRelayTimeout(c)\n    if (c.rawStream === null) {\n      onabort(null)\n      return\n    }\n\n    c.relayPaired = true\n\n    const {\n      remotePort,\n      remoteHost,\n      socket\n    } = c.relaySocket.rawStream\n\n    c.rawStream\n      .on('close', () => c.relaySocket.destroy())\n      .connect(socket, remoteId, remotePort, remoteHost)\n\n    c.encryptedSocket.start(c.rawStream, { handshake: hs })\n  }\n\n  function onabort (err) {\n    if (c.relayTimeout) clearRelayTimeout(c)\n    const socket = c.relaySocket\n    c.relayToken = null\n    c.relaySocket = null\n    if (socket) socket.destroy()\n    maybeDestroyEncryptedSocket(c, err || RELAY_ABORTED())\n  }\n}\n\nfunction clearPassiveConnectTimeout (c) {\n  clearTimeout(c.passiveConnectTimeout)\n  c.passiveConnectTimeout = null\n}\n\nfunction clearRelayTimeout (c) {\n  clearTimeout(c.relayTimeout)\n  c.relayTimeout = null\n}\n\nfunction destroyPuncher (c) {\n  if (c.puncher) c.puncher.destroy()\n  c.session.destroy()\n}\n\nfunction pickServerRelay (relays, clientRelay) {\n  for (const r of relays) {\n    if (!diffAddress(r.relayAddress, clientRelay)) return r\n  }\n  return relays[0]\n}\n\nfunction diffAddress (a, b) {\n  return a.host !== b.host || a.port !== b.port\n}\n\nfunction defaultCreateHandshake (keyPair, remotePublicKey) {\n  return new NoiseWrap(keyPair, remotePublicKey)\n}\n\nfunction defaultCreateSecretStream (isInitiator, rawStream, opts) {\n  return new NoiseSecretStream(isInitiator, rawStream, opts)\n}\n\nfunction onlyPrivateHosts (addr) {\n  return isPrivate(addr.host)\n}\n\nfunction isRelay (relaySocket, socket, port, host) {\n  const stream = relaySocket.rawStream\n  if (!stream) return false\n  if (stream.socket !== socket) return false\n  return port === stream.remotePort && host === stream.remoteHost\n}\n\nfunction selectRelay (relayThrough) {\n  if (typeof relayThrough === 'function') relayThrough = relayThrough()\n  if (relayThrough === null) return null\n  if (Array.isArray(relayThrough)) return relayThrough[Math.floor(Math.random() * relayThrough.length)]\n  return relayThrough\n}\n\nfunction noop () {}\nconst EventEmitter = require('events')\nconst b4a = require('b4a')\nconst errors = require('./errors')\n\nmodule.exports = class ConnectionPool extends EventEmitter {\n  constructor (dht) {\n    super()\n\n    this._dht = dht\n    this._servers = new Map()\n    this._connecting = new Map()\n    this._connections = new Map()\n  }\n\n  _attachServer (server) {\n    const keyString = b4a.toString(server.publicKey, 'hex')\n\n    this._servers.set(keyString, server)\n\n    server\n      .on('close', () => {\n        this._servers.delete(keyString)\n      })\n      .on('connection', (socket) => {\n        this._attachStream(socket, true)\n      })\n  }\n\n  _attachStream (stream, opened) {\n    const existing = this.get(stream.remotePublicKey)\n\n    if (existing) {\n      const keepNew = stream.isInitiator === existing.isInitiator || b4a.compare(stream.publicKey, stream.remotePublicKey) > 0\n\n      if (keepNew) {\n        let closed = false\n\n        const onclose = () => {\n          closed = true\n        }\n\n        existing\n          .on('error', noop)\n          .on('close', () => {\n            if (closed) return\n\n            stream\n              .off('error', noop)\n              .off('close', onclose)\n\n            this._attachStream(stream, opened)\n          })\n          .destroy(errors.DUPLICATE_CONNECTION())\n\n        stream\n          .on('error', noop)\n          .on('close', onclose)\n      } else {\n        stream\n          .on('error', noop)\n          .destroy(errors.DUPLICATE_CONNECTION())\n      }\n\n      return\n    }\n\n    const session = new ConnectionRef(this, stream)\n\n    const keyString = b4a.toString(stream.remotePublicKey, 'hex')\n\n    if (opened) {\n      this._connections.set(keyString, session)\n\n      stream.on('close', () => {\n        this._connections.delete(keyString)\n      })\n\n      this.emit('connection', stream, session)\n    } else {\n      this._connecting.set(keyString, session)\n\n      stream\n        .on('error', noop)\n        .on('close', () => {\n          if (opened) this._connections.delete(keyString)\n          else this._connecting.delete(keyString)\n        })\n        .on('open', () => {\n          opened = true\n\n          this._connecting.delete(keyString)\n          this._connections.set(keyString, session)\n\n          stream.off('error', noop)\n\n          this.emit('connection', stream, session)\n        })\n    }\n\n    return session\n  }\n\n  get connecting () {\n    return this._connecting.size\n  }\n\n  get connections () {\n    return this._connections.values()\n  }\n\n  has (publicKey) {\n    const keyString = b4a.toString(publicKey, 'hex')\n\n    return this._connections.has(keyString) || this._connecting.has(keyString)\n  }\n\n  get (publicKey) {\n    const keyString = b4a.toString(publicKey, 'hex')\n\n    const existing = this._connections.get(keyString) || this._connecting.get(keyString)\n\n    return existing?._stream || null\n  }\n}\n\nclass ConnectionRef {\n  constructor (pool, stream) {\n    this._pool = pool\n    this._stream = stream\n    this._refs = 0\n  }\n\n  active () {\n    this._refs++\n  }\n\n  inactive () {\n    this._refs--\n  }\n\n  release () {\n    this._stream.destroy()\n  }\n}\n\nfunction noop () {}\nconst crypto = require('hypercore-crypto')\n\nconst COMMANDS = exports.COMMANDS = {\n  PEER_HANDSHAKE: 0,\n  PEER_HOLEPUNCH: 1,\n  FIND_PEER: 2,\n  LOOKUP: 3,\n  ANNOUNCE: 4,\n  UNANNOUNCE: 5,\n  MUTABLE_PUT: 6,\n  MUTABLE_GET: 7,\n  IMMUTABLE_PUT: 8,\n  IMMUTABLE_GET: 9\n}\n\nexports.BOOTSTRAP_NODES = global.Pear?.config.dht?.bootstrap || [\n  '88.99.3.86@node1.hyperdht.org:49737',\n  '142.93.90.113@node2.hyperdht.org:49737',\n  '138.68.147.8@node3.hyperdht.org:49737'\n]\n\nexports.KNOWN_NODES = global.Pear?.config.dht?.nodes || []\n\nexports.FIREWALL = {\n  UNKNOWN: 0,\n  OPEN: 1,\n  CONSISTENT: 2,\n  RANDOM: 3\n}\n\nexports.ERROR = {\n  // noise / connection related\n  NONE: 0,\n  ABORTED: 1,\n  VERSION_MISMATCH: 2,\n  TRY_LATER: 3,\n  // dht related\n  SEQ_REUSED: 16,\n  SEQ_TOO_LOW: 17\n}\n\nconst [\n  NS_ANNOUNCE,\n  NS_UNANNOUNCE,\n  NS_MUTABLE_PUT,\n  NS_PEER_HANDSHAKE,\n  NS_PEER_HOLEPUNCH\n] = crypto.namespace('hyperswarm/dht', [\n  COMMANDS.ANNOUNCE,\n  COMMANDS.UNANNOUNCE,\n  COMMANDS.MUTABLE_PUT,\n  COMMANDS.PEER_HANDSHAKE,\n  COMMANDS.PEER_HOLEPUNCH\n])\n\nexports.NS = {\n  ANNOUNCE: NS_ANNOUNCE,\n  UNANNOUNCE: NS_UNANNOUNCE,\n  MUTABLE_PUT: NS_MUTABLE_PUT,\n  PEER_HANDSHAKE: NS_PEER_HANDSHAKE,\n  PEER_HOLEPUNCH: NS_PEER_HOLEPUNCH\n}\nconst sodium = require('sodium-universal')\nconst b4a = require('b4a')\n\nfunction hash (data) {\n  const out = b4a.allocUnsafe(32)\n  sodium.crypto_generichash(out, data)\n  return out\n}\n\nfunction unslabbedHash (data) {\n  const out = b4a.allocUnsafeSlow(32)\n  sodium.crypto_generichash(out, data)\n  return out\n}\n\nfunction createKeyPair (seed) {\n  const publicKey = b4a.alloc(32)\n  const secretKey = b4a.alloc(64)\n  if (seed) sodium.crypto_sign_seed_keypair(publicKey, secretKey, seed)\n  else sodium.crypto_sign_keypair(publicKey, secretKey)\n  return { publicKey, secretKey }\n}\n\nmodule.exports = {\n  hash,\n  unslabbedHash,\n  createKeyPair\n}\nconst b4a = require('b4a')\nconst cenc = require('compact-encoding')\n\nfunction encodeUnslab (enc, m) {\n  // Faster than unslab(c.encode(enc, data)) because it avoids the mem copy.\n  // Makes sense to put in compact-encoding when we need it in other modules too\n  const state = cenc.state()\n  enc.preencode(state, m)\n  state.buffer = b4a.allocUnsafeSlow(state.end)\n  enc.encode(state, m)\n  return state.buffer\n}\n\nmodule.exports = {\n  encodeUnslab\n}\nmodule.exports = class DHTError extends Error {\n  constructor (msg, code, fn = DHTError) {\n    super(`${code}: ${msg}`)\n    this.code = code\n\n    if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, fn)\n    }\n  }\n\n  get name () {\n    return 'DHTError'\n  }\n\n  static BAD_HANDSHAKE_REPLY (msg = 'Bad handshake reply') {\n    return new DHTError(msg, 'BAD_HANDSHAKE_REPLY', DHTError.BAD_HANDSHAKE_REPLY)\n  }\n\n  static BAD_HOLEPUNCH_REPLY (msg = 'Bad holepunch reply') {\n    return new DHTError(msg, 'BAD_HOLEPUNCH_REPLY', DHTError.BAD_HOLEPUNCH_REPLY)\n  }\n\n  static HOLEPUNCH_ABORTED (msg = 'Holepunch aborted') {\n    return new DHTError(msg, 'HOLEPUNCH_ABORTED', DHTError.HOLEPUNCH_ABORTED)\n  }\n\n  static HOLEPUNCH_INVALID (msg = 'Invalid holepunch payload') {\n    return new DHTError(msg, 'HOLEPUNCH_INVALID', DHTError.HOLEPUNCH_INVALID)\n  }\n\n  static HOLEPUNCH_PROBE_TIMEOUT (msg = 'Holepunching probe did not finish in time') {\n    return new DHTError(msg, 'HOLEPUNCH_PROBE_TIMEOUT', DHTError.HOLEPUNCH_PROBE_TIMEOUT)\n  }\n\n  static HOLEPUNCH_DOUBLE_RANDOMIZED_NATS (msg = 'Both remote and local NATs are randomized') {\n    return new DHTError(msg, 'HOLEPUNCH_DOUBLE_RANDOMIZED_NATS', DHTError.HOLEPUNCH_DOUBLE_RANDOMIZED_NATS)\n  }\n\n  static CANNOT_HOLEPUNCH (msg = 'Cannot holepunch to remote') {\n    return new DHTError(msg, 'CANNOT_HOLEPUNCH', DHTError.CANNOT_HOLEPUNCH)\n  }\n\n  static REMOTE_NOT_HOLEPUNCHING (msg = 'Remote is not holepunching') {\n    return new DHTError(msg, 'REMOTE_NOT_HOLEPUNCHING', DHTError.REMOTE_NOT_HOLEPUNCHING)\n  }\n\n  static REMOTE_NOT_HOLEPUNCHABLE (msg = 'Remote is not holepunchable') {\n    return new DHTError(msg, 'REMOTE_NOT_HOLEPUNCHABLE', DHTError.REMOTE_NOT_HOLEPUNCHABLE)\n  }\n\n  static REMOTE_ABORTED (msg = 'Remote aborted') {\n    return new DHTError(msg, 'REMOTE_ABORTED', DHTError.REMOTE_ABORTED)\n  }\n\n  static HANDSHAKE_UNFINISHED (msg = 'Handshake did not finish') {\n    return new DHTError(msg, 'HANDSHAKE_UNFINISHED', DHTError.HANDSHAKE_UNFINISHED)\n  }\n\n  static HANDSHAKE_INVALID (msg = 'Received invalid handshake') {\n    return new DHTError(msg, 'HANDSHAKE_INVALID', DHTError.HANDSHAKE_INVALID)\n  }\n\n  static ALREADY_LISTENING (msg = 'Already listening') {\n    return new DHTError(msg, 'ALREADY_LISTENING', DHTError.ALREADY_LISTENING)\n  }\n\n  static KEYPAIR_ALREADY_USED (msg = 'Keypair already used') {\n    return new DHTError(msg, 'KEYPAIR_ALREADY_USED', DHTError.KEYPAIR_ALREADY_USED)\n  }\n\n  static NODE_DESTROYED (msg = 'Node destroyed') {\n    return new DHTError(msg, 'NODE_DESTROYED', DHTError.NODE_DESTROYED)\n  }\n\n  static PEER_CONNECTION_FAILED (msg = 'Could not connect to peer') {\n    return new DHTError(msg, 'PEER_CONNECTION_FAILED', DHTError.PEER_CONNECTION_FAILED)\n  }\n\n  static PEER_NOT_FOUND (msg = 'Peer not found') {\n    return new DHTError(msg, 'PEER_NOT_FOUND', DHTError.PEER_NOT_FOUND)\n  }\n\n  static STREAM_NOT_CONNECTED (msg = 'Stream is not connected') {\n    return new DHTError(msg, 'STREAM_NOT_CONNECTED', DHTError.STREAM_DISCONNECTED)\n  }\n\n  static SERVER_INCOMPATIBLE (msg = 'Server is using an incompatible version') {\n    return new DHTError(msg, 'SERVER_INCOMPATIBLE', DHTError.SERVER_INCOMPATIBLE)\n  }\n\n  static SERVER_ERROR (msg = 'Server returned an error') {\n    return new DHTError(msg, 'SERVER_ERROR', DHTError.SERVER_ERROR)\n  }\n\n  static DUPLICATE_CONNECTION (msg = 'Duplicate connection') {\n    return new DHTError(msg, 'DUPLICATE_CONNECTION', DHTError.DUPLICATE_CONNECTION)\n  }\n\n  static RELAY_ABORTED (msg = 'Relay aborted') {\n    return new DHTError(msg, 'RELAY_ABORTED', DHTError.RELAY_ABORTED)\n  }\n\n  static SUSPENDED (msg = 'Suspended') {\n    return new DHTError(msg, 'SUSPENDED', DHTError.SUSPENDED)\n  }\n}\nconst b4a = require('b4a')\nconst Nat = require('./nat')\nconst Sleeper = require('./sleeper')\nconst { FIREWALL } = require('./constants')\n\nconst BIRTHDAY_SOCKETS = 256\nconst HOLEPUNCH = b4a.from([0])\nconst HOLEPUNCH_TTL = 5\nconst DEFAULT_TTL = 64\nconst MAX_REOPENS = 3\n\nmodule.exports = class Holepuncher {\n  constructor (dht, session, isInitiator, remoteFirewall = FIREWALL.UNKNOWN) {\n    const holder = dht._socketPool.acquire()\n\n    this.dht = dht\n    this.session = session\n\n    this.nat = new Nat(dht, session, holder.socket)\n    this.nat.autoSample()\n\n    this.isInitiator = isInitiator\n\n    // events\n    this.onconnect = noop\n    this.onabort = noop\n\n    this.punching = false\n    this.connected = false\n    this.destroyed = false\n    this.randomized = false\n\n    // track remote state\n    this.remoteFirewall = remoteFirewall\n    this.remoteAddresses = []\n    this.remoteHolepunching = false\n\n    this._sleeper = new Sleeper()\n    this._reopening = null\n    this._timeout = null\n    this._punching = null\n    this._allHolders = []\n    this._holder = this._addRef(holder)\n  }\n\n  get socket () {\n    return this._holder.socket\n  }\n\n  updateRemote ({ punching, firewall, addresses, verified }) {\n    const remoteAddresses = []\n\n    if (addresses) {\n      for (const addr of addresses) {\n        remoteAddresses.push({\n          host: addr.host,\n          port: addr.port,\n          verified: (verified === addr.host) || this._isVerified(addr.host)\n        })\n      }\n    }\n\n    this.remoteFirewall = firewall\n    this.remoteAddresses = remoteAddresses\n    this.remoteHolepunching = punching\n  }\n\n  _isVerified (host) {\n    for (const addr of this.remoteAddresses) {\n      if (addr.verified && addr.host === host) {\n        return true\n      }\n    }\n    return false\n  }\n\n  ping (addr, socket = this._holder.socket) {\n    return holepunch(socket, addr, false)\n  }\n\n  openSession (addr, socket = this._holder.socket) {\n    return holepunch(socket, addr, true)\n  }\n\n  async analyze (allowReopen) {\n    await this.nat.analyzing\n    if (this._unstable()) {\n      if (!allowReopen) return false\n      if (!this._reopening) this._reopening = this._reopen()\n      return this._reopening\n    }\n    return true\n  }\n\n  _unstable () {\n    // TODO!!: We need an additional heuristic here... If we were NOT random in the past we should also do this.\n    const firewall = this.nat.firewall\n    return (this.remoteFirewall >= FIREWALL.RANDOM && firewall >= FIREWALL.RANDOM) || firewall === FIREWALL.UNKNOWN\n  }\n\n  _reset () {\n    const prev = this._holder\n\n    this._allHolders.pop()\n    this._holder = this._addRef(this.dht._socketPool.acquire())\n\n    prev.release()\n    this.nat.destroy()\n\n    this.nat = new Nat(this.dht, this.session, this._holder.socket)\n    // TODO: maybe make auto sampling configurable somehow?\n    this.nat.autoSample()\n  }\n\n  _addRef (ref) {\n    this._allHolders.push(ref)\n    ref.onholepunchmessage = (msg, rinfo) => this._onholepunchmessage(msg, rinfo, ref)\n    return ref\n  }\n\n  _onholepunchmessage (_, addr, ref) {\n    if (!this.isInitiator) { // TODO: we don't need this if we had a way to connect a socket to many hosts\n      holepunch(ref.socket, addr, false) // never fails\n      return\n    }\n\n    if (this.connected) return\n\n    this.connected = true\n    this.punching = false\n\n    for (const r of this._allHolders) {\n      if (r === ref) continue\n      r.release()\n    }\n\n    this._allHolders[0] = ref\n    while (this._allHolders.length > 1) this._allHolders.pop()\n\n    this._decrementRandomized()\n    this.onconnect(ref.socket, addr.port, addr.host)\n  }\n\n  _done () {\n    return this.destroyed || this.connected\n  }\n\n  async _reopen () {\n    for (let i = 0; this._unstable() && i < MAX_REOPENS && !this._done() && !this.punching; i++) {\n      this._reset()\n      await this.nat.analyzing\n    }\n\n    return coerceFirewall(this.nat.firewall) === FIREWALL.CONSISTENT\n  }\n\n  punch () {\n    if (!this._punching) this._punching = this._punch()\n    return this._punching\n  }\n\n  async _punch () {\n    if (this._done() || !this.remoteAddresses.length) return false\n\n    this.punching = true\n\n    // Coerce into consistency for now. Obvs we could make this this more efficient if we use that info\n    // but that's seldomly used since those will just use tcp most of the time.\n\n    const local = coerceFirewall(this.nat.firewall)\n    const remote = coerceFirewall(this.remoteFirewall)\n\n    // Note that most of these async functions are meant to run in the background\n    // which is why we don't await them here and why they are not allowed to throw\n\n    let remoteVerifiedAddress = null\n    for (const addr of this.remoteAddresses) {\n      if (addr.verified) {\n        remoteVerifiedAddress = addr\n        break\n      }\n    }\n\n    if (local === FIREWALL.CONSISTENT && remote === FIREWALL.CONSISTENT) {\n      this.dht.stats.punches.consistent++\n      this._consistentProbe()\n      return true\n    }\n\n    if (!remoteVerifiedAddress) return false\n\n    if (local === FIREWALL.CONSISTENT && remote >= FIREWALL.RANDOM) {\n      this.dht.stats.punches.random++\n      this._incrementRandomized()\n      this._randomProbes(remoteVerifiedAddress)\n      return true\n    }\n\n    if (local >= FIREWALL.RANDOM && remote === FIREWALL.CONSISTENT) {\n      this.dht.stats.punches.random++\n      this._incrementRandomized()\n      await this._openBirthdaySockets(remoteVerifiedAddress)\n      if (this.punching) this._keepAliveRandomNat(remoteVerifiedAddress)\n      return true\n    }\n\n    return false\n  }\n\n  // Note that this never throws so it is safe to run in the background\n  async _consistentProbe () {\n    // Here we do the sleep first because the \"fast open\" mode in the server just fired a ping\n    if (!this.isInitiator) await this._sleeper.pause(1000)\n\n    let tries = 0\n\n    while (this.punching && tries++ < 10) {\n      for (const addr of this.remoteAddresses) {\n        // only try unverified addresses every 4 ticks\n        if (!addr.verified && ((tries & 3) !== 0)) continue\n        await holepunch(this._holder.socket, addr, false)\n      }\n      if (this.punching) await this._sleeper.pause(1000)\n    }\n\n    this._autoDestroy()\n  }\n\n  // Note that this never throws so it is safe to run in the background\n  async _randomProbes (remoteAddr) {\n    let tries = 1750 // ~35s\n\n    while (this.punching && tries-- > 0) {\n      const addr = { host: remoteAddr.host, port: randomPort() }\n      await holepunch(this._holder.socket, addr, false)\n      if (this.punching) await this._sleeper.pause(20)\n    }\n\n    this._autoDestroy()\n  }\n\n  // Note that this never throws so it is safe to run in the background\n  async _keepAliveRandomNat (remoteAddr) {\n    let i = 0\n    let lowTTLRounds = 1\n\n    // TODO: experiment with this here. We just bursted all the messages in\n    // openOtherSockets to ensure the sockets are open, so it's potentially\n    // a good idea to slow down for a bit.\n    await this._sleeper.pause(100)\n\n    let tries = 1750 // ~35s\n\n    while (this.punching && tries-- > 0) {\n      if (i === this._allHolders.length) {\n        i = 0\n        if (lowTTLRounds > 0) lowTTLRounds--\n      }\n\n      await holepunch(this._allHolders[i++].socket, remoteAddr, lowTTLRounds > 0)\n      if (this.punching) await this._sleeper.pause(20)\n    }\n\n    this._autoDestroy()\n  }\n\n  async _openBirthdaySockets (remoteAddr) {\n    while (this.punching && this._allHolders.length < BIRTHDAY_SOCKETS) {\n      const ref = this._addRef(this.dht._socketPool.acquire())\n      await holepunch(ref.socket, remoteAddr, HOLEPUNCH_TTL)\n    }\n  }\n\n  _autoDestroy () {\n    if (!this.connected) this.destroy()\n  }\n\n  _incrementRandomized () {\n    if (!this.randomized) {\n      this.randomized = true\n      this.dht._randomPunches++\n    }\n  }\n\n  _decrementRandomized () {\n    if (this.randomized) {\n      this.dht._lastRandomPunch = Date.now()\n      this.randomized = false\n      this.dht._randomPunches--\n    }\n  }\n\n  destroy () {\n    if (this.destroyed) return\n    this.destroyed = true\n    this.punching = false\n\n    for (const ref of this._allHolders) ref.release()\n    this._allHolders = []\n    this.nat.destroy()\n\n    if (!this.connected) {\n      this._decrementRandomized()\n      this.onabort()\n    }\n  }\n\n  static ping (socket, addr) {\n    return holepunch(socket, addr, false)\n  }\n\n  static localAddresses (socket) {\n    return localAddresses(socket)\n  }\n\n  static matchAddress (myAddresses, externalAddresses) {\n    return matchAddress(myAddresses, externalAddresses)\n  }\n}\n\nfunction holepunch (socket, addr, lowTTL) {\n  return socket.send(HOLEPUNCH, addr.port, addr.host, lowTTL ? HOLEPUNCH_TTL : DEFAULT_TTL)\n}\n\nfunction randomPort () {\n  return 1000 + (Math.random() * 64536) | 0\n}\n\nfunction coerceFirewall (fw) {\n  return fw === FIREWALL.OPEN ? FIREWALL.CONSISTENT : fw\n}\n\nfunction localAddresses (socket) {\n  const addrs = []\n  const { host, port } = socket.address()\n\n  if (host === '127.0.0.1') return [{ host, port }]\n\n  for (const n of socket.udx.networkInterfaces()) {\n    if (n.family !== 4 || n.internal) continue\n\n    addrs.push({ host: n.host, port })\n  }\n\n  if (addrs.length === 0) {\n    addrs.push({ host: '127.0.0.1', port })\n  }\n\n  return addrs\n}\n\nfunction matchAddress (localAddresses, remoteLocalAddresses) {\n  if (remoteLocalAddresses.length === 0) return null\n\n  let best = { segment: 1, addr: null }\n\n  for (const localAddress of localAddresses) {\n    // => 192.168.122.238\n    const a = localAddress.host.split('.')\n\n    for (const remoteAddress of remoteLocalAddresses) {\n      // => 192.168.0.23\n      // => 192.168.122.1\n      const b = remoteAddress.host.split('.')\n\n      // Matches 192.*.*.*\n      if (a[0] === b[0]) {\n        if (best.segment === 1) best = { segment: 2, addr: remoteAddress }\n\n        // Matches 192.168.*.*\n        if (a[1] === b[1]) {\n          if (best.segment === 2) best = { segment: 3, addr: remoteAddress }\n\n          // Matches 192.168.122.*\n          if (a[2] === b[2]) return remoteAddress\n        }\n      }\n    }\n  }\n\n  return best.addr\n}\n\nfunction noop () {}\nconst c = require('compact-encoding')\nconst net = require('compact-encoding-net')\n\nconst ipv4 = {\n  ...net.ipv4Address,\n  decode (state) {\n    const ip = net.ipv4Address.decode(state)\n    return {\n      host: ip.host,\n      port: ip.port\n    }\n  }\n}\n\nconst ipv4Array = c.array(ipv4)\n\nconst ipv6 = {\n  ...net.ipv6Address,\n  decode (state) {\n    const ip = net.ipv6Address.decode(state)\n    return {\n      host: ip.host,\n      port: ip.port\n    }\n  }\n}\n\nconst ipv6Array = c.array(ipv6)\n\nexports.handshake = {\n  preencode (state, m) {\n    state.end += 1 + 1 + (m.peerAddress ? 6 : 0) + (m.relayAddress ? 6 : 0)\n    c.buffer.preencode(state, m.noise)\n  },\n  encode (state, m) {\n    const flags = (m.peerAddress ? 1 : 0) | (m.relayAddress ? 2 : 0)\n\n    c.uint.encode(state, flags)\n    c.uint.encode(state, m.mode)\n    c.buffer.encode(state, m.noise)\n\n    if (m.peerAddress) ipv4.encode(state, m.peerAddress)\n    if (m.relayAddress) ipv4.encode(state, m.relayAddress)\n  },\n  decode (state) {\n    const flags = c.uint.decode(state)\n\n    return {\n      mode: c.uint.decode(state),\n      noise: c.buffer.decode(state),\n      peerAddress: (flags & 1) ? ipv4.decode(state) : null,\n      relayAddress: (flags & 2) ? ipv4.decode(state) : null\n    }\n  }\n}\n\nconst relayInfo = {\n  preencode (state, m) {\n    state.end += 12\n  },\n  encode (state, m) {\n    ipv4.encode(state, m.relayAddress)\n    ipv4.encode(state, m.peerAddress)\n  },\n  decode (state) {\n    return {\n      relayAddress: ipv4.decode(state),\n      peerAddress: ipv4.decode(state)\n    }\n  }\n}\n\nconst relayInfoArray = c.array(relayInfo)\n\nconst holepunchInfo = {\n  preencode (state, m) {\n    c.uint.preencode(state, m.id)\n    relayInfoArray.preencode(state, m.relays)\n  },\n  encode (state, m) {\n    c.uint.encode(state, m.id)\n    relayInfoArray.encode(state, m.relays)\n  },\n  decode (state) {\n    return {\n      id: c.uint.decode(state),\n      relays: relayInfoArray.decode(state)\n    }\n  }\n}\n\nconst udxInfo = {\n  preencode (state, m) {\n    state.end += 2 // version + features\n    c.uint.preencode(state, m.id)\n    c.uint.preencode(state, m.seq)\n  },\n  encode (state, m) {\n    c.uint.encode(state, 1)\n    c.uint.encode(state, m.reusableSocket ? 1 : 0)\n    c.uint.encode(state, m.id)\n    c.uint.encode(state, m.seq)\n  },\n  decode (state) {\n    const version = c.uint.decode(state)\n    const features = c.uint.decode(state)\n\n    return {\n      version,\n      reusableSocket: (features & 1) !== 0,\n      id: c.uint.decode(state),\n      seq: c.uint.decode(state)\n    }\n  }\n}\n\nconst secretStreamInfo = {\n  preencode (state, m) {\n    c.uint.preencode(state, 1)\n  },\n  encode (state, m) {\n    c.uint.encode(state, 1)\n  },\n  decode (state) {\n    return {\n      version: c.uint.decode(state)\n    }\n  }\n}\n\nconst relayThroughInfo = {\n  preencode (state, m) {\n    c.uint.preencode(state, 1) // version\n    c.uint.preencode(state, 0) // flags\n    c.fixed32.preencode(state, m.publicKey)\n    c.fixed32.preencode(state, m.token)\n  },\n  encode (state, m) {\n    c.uint.encode(state, 1)\n    c.uint.encode(state, 0)\n    c.fixed32.encode(state, m.publicKey)\n    c.fixed32.encode(state, m.token)\n  },\n  decode (state) {\n    const version = c.uint.decode(state)\n    c.uint.decode(state)\n\n    return {\n      version,\n      publicKey: c.fixed32.decode(state),\n      token: c.fixed32.decode(state)\n    }\n  }\n}\n\nexports.noisePayload = {\n  preencode (state, m) {\n    state.end += 4 // version + flags + error + firewall\n    if (m.holepunch) holepunchInfo.preencode(state, m.holepunch)\n    if (m.addresses4 && m.addresses4.length) ipv4Array.preencode(state, m.addresses4)\n    if (m.addresses6 && m.addresses6.length) ipv6Array.preencode(state, m.addresses6)\n    if (m.udx) udxInfo.preencode(state, m.udx)\n    if (m.secretStream) secretStreamInfo.preencode(state, m.secretStream)\n    if (m.relayThrough) relayThroughInfo.preencode(state, m.relayThrough)\n  },\n  encode (state, m) {\n    let flags = 0\n\n    if (m.holepunch) flags |= 1\n    if (m.addresses4 && m.addresses4.length) flags |= 2\n    if (m.addresses6 && m.addresses6.length) flags |= 4\n    if (m.udx) flags |= 8\n    if (m.secretStream) flags |= 16\n    if (m.relayThrough) flags |= 32\n\n    c.uint.encode(state, 1) // version\n    c.uint.encode(state, flags)\n    c.uint.encode(state, m.error)\n    c.uint.encode(state, m.firewall)\n\n    if (m.holepunch) holepunchInfo.encode(state, m.holepunch)\n    if (m.addresses4 && m.addresses4.length) ipv4Array.encode(state, m.addresses4)\n    if (m.addresses6 && m.addresses6.length) ipv6Array.encode(state, m.addresses6)\n    if (m.udx) udxInfo.encode(state, m.udx)\n    if (m.secretStream) secretStreamInfo.encode(state, m.secretStream)\n    if (m.relayThrough) relayThroughInfo.encode(state, m.relayThrough)\n  },\n  decode (state) {\n    const version = c.uint.decode(state)\n\n    if (version !== 1) {\n      // Do not attempt to decode but return this back to the user so they can\n      // actually handle it\n      return {\n        version,\n        error: 0,\n        firewall: 0,\n        holepunch: null,\n        addresses4: [],\n        addresses6: [],\n        udx: null,\n        secretStream: null,\n        relayThrough: null\n      }\n    }\n\n    const flags = c.uint.decode(state)\n\n    return {\n      version,\n      error: c.uint.decode(state),\n      firewall: c.uint.decode(state),\n      holepunch: (flags & 1) !== 0 ? holepunchInfo.decode(state) : null,\n      addresses4: (flags & 2) !== 0 ? ipv4Array.decode(state) : [],\n      addresses6: (flags & 4) !== 0 ? ipv6Array.decode(state) : [],\n      udx: (flags & 8) !== 0 ? udxInfo.decode(state) : null,\n      secretStream: (flags & 16) !== 0 ? secretStreamInfo.decode(state) : null,\n      relayThrough: (flags & 32) !== 0 ? relayThroughInfo.decode(state) : null\n    }\n  }\n}\n\nexports.holepunch = {\n  preencode (state, m) {\n    state.end += 2\n    c.uint.preencode(state, m.id)\n    c.buffer.preencode(state, m.payload)\n    if (m.peerAddress) ipv4.preencode(state, m.peerAddress)\n  },\n  encode (state, m) {\n    const flags = m.peerAddress ? 1 : 0\n    c.uint.encode(state, flags)\n    c.uint.encode(state, m.mode)\n    c.uint.encode(state, m.id)\n    c.buffer.encode(state, m.payload)\n    if (m.peerAddress) ipv4.encode(state, m.peerAddress)\n  },\n  decode (state) {\n    const flags = c.uint.decode(state)\n    return {\n      mode: c.uint.decode(state),\n      id: c.uint.decode(state),\n      payload: c.buffer.decode(state),\n      peerAddress: (flags & 1) ? ipv4.decode(state) : null\n    }\n  }\n}\n\nexports.holepunchPayload = {\n  preencode (state, m) {\n    state.end += 4 // flags + error + firewall + round\n    if (m.addresses) ipv4Array.preencode(state, m.addresses)\n    if (m.remoteAddress) state.end += 6\n    if (m.token) state.end += 32\n    if (m.remoteToken) state.end += 32\n  },\n  encode (state, m) {\n    const flags = (m.connected ? 1 : 0) |\n      (m.punching ? 2 : 0) |\n      (m.addresses ? 4 : 0) |\n      (m.remoteAddress ? 8 : 0) |\n      (m.token ? 16 : 0) |\n      (m.remoteToken ? 32 : 0)\n\n    c.uint.encode(state, flags)\n    c.uint.encode(state, m.error)\n    c.uint.encode(state, m.firewall)\n    c.uint.encode(state, m.round)\n\n    if (m.addresses) ipv4Array.encode(state, m.addresses)\n    if (m.remoteAddress) ipv4.encode(state, m.remoteAddress)\n    if (m.token) c.fixed32.encode(state, m.token)\n    if (m.remoteToken) c.fixed32.encode(state, m.remoteToken)\n  },\n  decode (state) {\n    const flags = c.uint.decode(state)\n\n    return {\n      error: c.uint.decode(state),\n      firewall: c.uint.decode(state),\n      round: c.uint.decode(state),\n      connected: (flags & 1) !== 0,\n      punching: (flags & 2) !== 0,\n      addresses: (flags & 4) !== 0 ? ipv4Array.decode(state) : null,\n      remoteAddress: (flags & 8) !== 0 ? ipv4.decode(state) : null,\n      token: (flags & 16) !== 0 ? c.fixed32.decode(state) : null,\n      remoteToken: (flags & 32) !== 0 ? c.fixed32.decode(state) : null\n    }\n  }\n}\n\nconst peer = exports.peer = {\n  preencode (state, m) {\n    state.end += 32\n    ipv4Array.preencode(state, m.relayAddresses)\n  },\n  encode (state, m) {\n    c.fixed32.encode(state, m.publicKey)\n    ipv4Array.encode(state, m.relayAddresses)\n  },\n  decode (state) {\n    return {\n      publicKey: c.fixed32.decode(state),\n      relayAddresses: ipv4Array.decode(state)\n    }\n  }\n}\n\nexports.peers = c.array(peer)\n\nexports.announce = {\n  preencode (state, m) {\n    state.end++ // flags\n    if (m.peer) peer.preencode(state, m.peer)\n    if (m.refresh) state.end += 32\n    if (m.signature) state.end += 64\n  },\n  encode (state, m) {\n    const flags = (m.peer ? 1 : 0) | (m.refresh ? 2 : 0) | (m.signature ? 4 : 0)\n    c.uint.encode(state, flags)\n    if (m.peer) peer.encode(state, m.peer)\n    if (m.refresh) c.fixed32.encode(state, m.refresh)\n    if (m.signature) c.fixed64.encode(state, m.signature)\n  },\n  decode (state) {\n    const flags = c.uint.decode(state)\n\n    return {\n      peer: (flags & 1) !== 0 ? peer.decode(state) : null,\n      refresh: (flags & 2) !== 0 ? c.fixed32.decode(state) : null,\n      signature: (flags & 4) !== 0 ? c.fixed64.decode(state) : null\n    }\n  }\n}\n\nexports.mutableSignable = {\n  preencode (state, m) {\n    c.uint.preencode(state, m.seq)\n    c.buffer.preencode(state, m.value)\n  },\n  encode (state, m) {\n    c.uint.encode(state, m.seq)\n    c.buffer.encode(state, m.value)\n  },\n  decode (state) {\n    return {\n      seq: c.uint.decode(state),\n      value: c.buffer.decode(state)\n    }\n  }\n}\n\nexports.mutablePutRequest = {\n  preencode (state, m) {\n    c.fixed32.preencode(state, m.publicKey)\n    c.uint.preencode(state, m.seq)\n    c.buffer.preencode(state, m.value)\n    c.fixed64.preencode(state, m.signature)\n  },\n  encode (state, m) {\n    c.fixed32.encode(state, m.publicKey)\n    c.uint.encode(state, m.seq)\n    c.buffer.encode(state, m.value)\n    c.fixed64.encode(state, m.signature)\n  },\n  decode (state) {\n    return {\n      publicKey: c.fixed32.decode(state),\n      seq: c.uint.decode(state),\n      value: c.buffer.decode(state),\n      signature: c.fixed64.decode(state)\n    }\n  }\n}\n\nexports.mutableGetResponse = {\n  preencode (state, m) {\n    c.uint.preencode(state, m.seq)\n    c.buffer.preencode(state, m.value)\n    c.fixed64.preencode(state, m.signature)\n  },\n  encode (state, m) {\n    c.uint.encode(state, m.seq)\n    c.buffer.encode(state, m.value)\n    c.fixed64.encode(state, m.signature)\n  },\n  decode (state) {\n    return {\n      seq: c.uint.decode(state),\n      value: c.buffer.decode(state),\n      signature: c.fixed64.decode(state)\n    }\n  }\n}\nconst { FIREWALL } = require('../lib/constants')\n\nmodule.exports = class Nat {\n  constructor (dht, session, socket) {\n    this._samplesHost = []\n    this._samplesFull = []\n    this._visited = new Map()\n    this._resolve = null\n    this._minSamples = 4\n    this._autoSampling = false\n\n    this.dht = dht\n    this.session = session\n    this.socket = socket\n\n    this.sampled = 0\n    this.firewall = dht.firewalled ? FIREWALL.UNKNOWN : FIREWALL.OPEN\n    this.addresses = null\n\n    this.analyzing = new Promise((resolve) => { this._resolve = resolve })\n  }\n\n  autoSample (retry = true) {\n    if (this._autoSampling) return\n    this._autoSampling = true\n\n    const self = this\n    const socket = this.socket\n    const maxPings = this._minSamples\n\n    let skip = this.dht.nodes.length >= 8 ? 5 : 0\n    let pending = 0\n\n    // TODO: it would be best to pick the nodes to help us based on latency to us\n    // That should reduce connect latency in general. We should investigate tracking that later on.\n\n    // TODO 2: try to pick nodes with different IPs as well, as that'll help multi IP cell connections...\n    // If we expose this from the nat sampler then the DHT should be able to help us filter out scams as well...\n\n    for (let node = this.dht.nodes.latest; node && this.sampled + pending < maxPings; node = node.prev) {\n      if (skip > 0) {\n        skip--\n        continue\n      }\n\n      const ref = node.host + ':' + node.port\n\n      if (this._visited.has(ref)) continue\n      this._visited.set(ref, 1)\n\n      pending++\n      this.session.ping(node, { socket, retry: false }).then(onpong, onskip)\n    }\n\n    pending++\n    onskip()\n\n    function onpong (res) {\n      self.add(res.to, res.from)\n      onskip()\n    }\n\n    function onskip () {\n      if (--pending === 0 && self.sampled < self._minSamples) {\n        if (retry) {\n          self._autoSampling = false\n          self.autoSample(false)\n          return\n        }\n        self._resolve()\n      }\n    }\n  }\n\n  destroy () {\n    this._autoSampling = true\n    this._minSamples = 0\n    this._resolve()\n  }\n\n  unfreeze () {\n    this.frozen = false\n    this._updateFirewall()\n    this._updateAddresses()\n  }\n\n  freeze () {\n    this.frozen = true\n  }\n\n  _updateFirewall () {\n    if (!this.dht.firewalled) {\n      this.firewall = FIREWALL.OPEN\n      return\n    }\n\n    if (this.sampled < 3) return\n\n    const max = this._samplesFull[0].hits\n\n    if (max >= 3) {\n      this.firewall = FIREWALL.CONSISTENT\n      return\n    }\n\n    if (max === 1) {\n      this.firewall = FIREWALL.RANDOM\n      return\n    }\n\n    // else max === 2\n\n    // 1 host, >= 4 total samples ie, 2 bad ones -> random\n    if (this._samplesHost.length === 1 && this.sampled > 3) {\n      this.firewall = FIREWALL.RANDOM\n      return\n    }\n\n    // double hit on two different ips -> assume consistent\n    if (this._samplesHost.length > 1 && this._samplesFull[1].hits > 1) {\n      this.firewall = FIREWALL.CONSISTENT\n      return\n    }\n\n    // (4 is just means - all the samples we expect) - no decision - assume random\n    if (this.sampled > 4) {\n      this.firewall = FIREWALL.RANDOM\n    }\n  }\n\n  _updateAddresses () {\n    if (this.firewall === FIREWALL.UNKNOWN) {\n      this.addresses = null\n      return\n    }\n\n    if (this.firewall === FIREWALL.RANDOM) {\n      this.addresses = [this._samplesHost[0]]\n      return\n    }\n\n    if (this.firewall === FIREWALL.CONSISTENT) {\n      this.addresses = []\n      for (const addr of this._samplesFull) {\n        if (addr.hits >= 2 || this.addresses.length < 2) this.addresses.push(addr)\n      }\n    }\n  }\n\n  update () {\n    if (this.dht.firewalled && this.firewall === FIREWALL.OPEN) {\n      this.firewall = FIREWALL.UNKNOWN\n    }\n    this._updateFirewall()\n    this._updateAddresses()\n  }\n\n  add (addr, from) {\n    const ref = from.host + ':' + from.port\n\n    if (this._visited.get(ref) === 2) return\n    this._visited.set(ref, 2)\n\n    addSample(this._samplesHost, addr.host, 0)\n    addSample(this._samplesFull, addr.host, addr.port)\n\n    if ((++this.sampled >= 3 || !this.dht.firewalled) && !this.frozen) {\n      this.update()\n    }\n\n    if ((this.firewall === FIREWALL.CONSISTENT || this.firewall === FIREWALL.OPEN)) {\n      this._resolve()\n    } else if (this.sampled >= this._minSamples) {\n      this._resolve()\n    }\n  }\n}\n\nfunction addSample (samples, host, port) {\n  for (let i = 0; i < samples.length; i++) {\n    const s = samples[i]\n\n    if (s.port !== port || s.host !== host) continue\n    s.hits++\n\n    for (; i > 0; i--) {\n      const prev = samples[i - 1]\n      if (prev.hits >= s.hits) return\n      samples[i - 1] = s\n      samples[i] = prev\n    }\n\n    return\n  }\n\n  samples.push({\n    host,\n    port,\n    hits: 1\n  })\n}\nconst NoiseSecretStream = require('@hyperswarm/secret-stream')\nconst NoiseHandshake = require('noise-handshake')\nconst curve = require('noise-curve-ed')\nconst c = require('compact-encoding')\nconst b4a = require('b4a')\nconst sodium = require('sodium-universal')\nconst m = require('./messages')\nconst { NS } = require('./constants')\nconst { HANDSHAKE_UNFINISHED } = require('./errors')\n\nconst NOISE_PROLOUGE = NS.PEER_HANDSHAKE\n\nmodule.exports = class NoiseWrap {\n  constructor (keyPair, remotePublicKey) {\n    this.isInitiator = !!remotePublicKey\n    this.remotePublicKey = remotePublicKey\n    this.keyPair = keyPair\n    this.handshake = new NoiseHandshake('IK', this.isInitiator, keyPair, { curve })\n    this.handshake.initialise(NOISE_PROLOUGE, remotePublicKey)\n  }\n\n  send (payload) {\n    const buf = c.encode(m.noisePayload, payload)\n    return this.handshake.send(buf)\n  }\n\n  recv (buf) {\n    const payload = c.decode(m.noisePayload, this.handshake.recv(buf))\n    this.remotePublicKey = b4a.toBuffer(this.handshake.rs)\n    return payload\n  }\n\n  final () {\n    if (!this.handshake.complete) throw HANDSHAKE_UNFINISHED()\n\n    const holepunchSecret = b4a.allocUnsafe(32)\n\n    sodium.crypto_generichash(holepunchSecret, NS.PEER_HOLEPUNCH, this.handshake.hash)\n\n    return {\n      isInitiator: this.isInitiator,\n      publicKey: this.keyPair.publicKey,\n      streamId: this.streamId,\n      remotePublicKey: this.remotePublicKey,\n      remoteId: NoiseSecretStream.id(this.handshake.hash, !this.isInitiator),\n      holepunchSecret,\n      hash: b4a.toBuffer(this.handshake.hash),\n      rx: b4a.toBuffer(this.handshake.rx),\n      tx: b4a.toBuffer(this.handshake.tx)\n    }\n  }\n}\nconst c = require('compact-encoding')\nconst sodium = require('sodium-universal')\nconst RecordCache = require('record-cache')\nconst Cache = require('xache')\nconst b4a = require('b4a')\nconst unslab = require('unslab')\n\nconst { encodeUnslab } = require('./encode')\nconst m = require('./messages')\nconst { NS, ERROR } = require('./constants')\n\nconst EMPTY = b4a.alloc(0)\nconst TMP = b4a.allocUnsafe(32)\n\nconst rawArray = c.array(c.raw)\n\nmodule.exports = class Persistent {\n  constructor (dht, opts) {\n    this.dht = dht\n    this.records = new RecordCache(opts.records)\n    this.refreshes = new Cache(opts.refreshes)\n    this.mutables = new Cache(opts.mutables)\n    this.immutables = new Cache(opts.immutables)\n  }\n\n  onlookup (req) {\n    if (!req.target) return\n\n    const k = b4a.toString(req.target, 'hex')\n    const records = this.records.get(k, 20)\n    const fwd = this.dht._router.get(k)\n\n    if (fwd && records.length < 20) records.push(fwd.record)\n\n    req.reply(records.length ? c.encode(rawArray, records) : null)\n  }\n\n  onfindpeer (req) {\n    if (!req.target) return\n    const fwd = this.dht._router.get(req.target)\n    req.reply(fwd ? fwd.record : null)\n  }\n\n  unannounce (target, publicKey) {\n    const k = b4a.toString(target, 'hex')\n    sodium.crypto_generichash(TMP, publicKey)\n\n    if (b4a.equals(TMP, target)) this.dht._router.delete(k)\n    this.records.remove(k, publicKey)\n  }\n\n  onunannounce (req) {\n    if (!req.target || !req.token) return\n\n    const unann = decode(m.announce, req.value)\n    if (unann === null) return\n\n    const { peer, signature } = unann\n    if (!peer || !signature) return\n\n    const signable = annSignable(req.target, req.token, this.dht.id, unann, NS.UNANNOUNCE)\n\n    if (!sodium.crypto_sign_verify_detached(signature, signable, peer.publicKey)) {\n      return\n    }\n\n    this.unannounce(req.target, peer.publicKey)\n    req.reply(null, { token: false, closerNodes: false })\n  }\n\n  _onrefresh (token, req) {\n    sodium.crypto_generichash(TMP, token)\n    const activeRefresh = b4a.toString(TMP, 'hex')\n\n    const r = this.refreshes.get(activeRefresh)\n    if (!r) return\n\n    const { announceSelf, k, record } = r\n    const publicKey = record.subarray(0, 32)\n\n    if (announceSelf) {\n      this.dht._router.set(k, {\n        relay: req.from,\n        record,\n        onconnect: null,\n        onholepunch: null\n      })\n      this.records.remove(k, publicKey)\n    } else {\n      this.records.add(k, publicKey, record)\n    }\n\n    this.refreshes.delete(activeRefresh)\n    this.refreshes.set(b4a.toString(token, 'hex'), r)\n\n    req.reply(null, { token: false, closerNodes: false })\n  }\n\n  onannounce (req) {\n    if (!req.target || !req.token || !this.dht.id) return\n\n    const ann = decode(m.announce, req.value)\n    if (ann === null) return\n\n    const signable = annSignable(req.target, req.token, this.dht.id, ann, NS.ANNOUNCE)\n    const { peer, refresh, signature } = ann\n\n    if (!peer) {\n      if (!refresh) return\n      this._onrefresh(refresh, req)\n      return\n    }\n\n    if (!signature || !sodium.crypto_sign_verify_detached(signature, signable, peer.publicKey)) {\n      return\n    }\n\n    // TODO: it would be potentially be more optimal to allow more than 3 addresses here for a findPeer response\n    // and only use max 3 for a lookup reply\n    if (peer.relayAddresses.length > 3) {\n      peer.relayAddresses = peer.relayAddresses.slice(0, 3)\n    }\n\n    sodium.crypto_generichash(TMP, peer.publicKey)\n\n    const k = b4a.toString(req.target, 'hex')\n    const announceSelf = b4a.equals(TMP, req.target)\n    const record = encodeUnslab(m.peer, peer)\n\n    if (announceSelf) {\n      this.dht._router.set(k, {\n        relay: req.from,\n        record,\n        onconnect: null,\n        onholepunch: null\n      })\n      this.records.remove(k, peer.publicKey)\n    } else {\n      this.records.add(k, peer.publicKey, record)\n    }\n\n    if (refresh) {\n      this.refreshes.set(b4a.toString(refresh, 'hex'), { k, record, announceSelf })\n    }\n\n    req.reply(null, { token: false, closerNodes: false })\n  }\n\n  onmutableget (req) {\n    if (!req.target || !req.value) return\n\n    let seq = 0\n    try {\n      seq = c.decode(c.uint, req.value)\n    } catch {\n      return\n    }\n\n    const k = b4a.toString(req.target, 'hex')\n    const value = this.mutables.get(k)\n\n    if (!value) {\n      req.reply(null)\n      return\n    }\n\n    const localSeq = c.decode(c.uint, value)\n    req.reply(localSeq < seq ? null : value)\n  }\n\n  onmutableput (req) {\n    if (!req.target || !req.token || !req.value) return\n\n    const p = decode(m.mutablePutRequest, req.value)\n    if (!p) return\n\n    const { publicKey, seq, value, signature } = p\n\n    const hash = b4a.allocUnsafe(32)\n    sodium.crypto_generichash(hash, publicKey)\n    if (!b4a.equals(hash, req.target)) return\n\n    if (!value || !verifyMutable(signature, seq, value, publicKey)) return\n\n    const k = b4a.toString(hash, 'hex')\n    const local = this.mutables.get(k)\n\n    if (local) {\n      const existing = c.decode(m.mutableGetResponse, local)\n      if (existing.value && existing.seq === seq && b4a.compare(value, existing.value) !== 0) {\n        req.error(ERROR.SEQ_REUSED)\n        return\n      }\n      if (seq < existing.seq) {\n        req.error(ERROR.SEQ_TOO_LOW)\n        return\n      }\n    }\n\n    this.mutables.set(k, encodeUnslab(m.mutableGetResponse, { seq, value, signature }))\n    req.reply(null)\n  }\n\n  onimmutableget (req) {\n    if (!req.target) return\n\n    const k = b4a.toString(req.target, 'hex')\n    const value = this.immutables.get(k)\n\n    req.reply(value || null)\n  }\n\n  onimmutableput (req) {\n    if (!req.target || !req.token || !req.value) return\n\n    const hash = b4a.alloc(32)\n    sodium.crypto_generichash(hash, req.value)\n    if (!b4a.equals(hash, req.target)) return\n\n    const k = b4a.toString(hash, 'hex')\n    this.immutables.set(k, unslab(req.value))\n\n    req.reply(null)\n  }\n\n  destroy () {\n    this.records.destroy()\n    this.refreshes.destroy()\n    this.mutables.destroy()\n    this.immutables.destroy()\n  }\n\n  static signMutable (seq, value, keyPair) {\n    const signable = b4a.allocUnsafe(32 + 32)\n    const hash = signable.subarray(32)\n\n    signable.set(NS.MUTABLE_PUT, 0)\n\n    sodium.crypto_generichash(hash, c.encode(m.mutableSignable, { seq, value }))\n    return sign(signable, keyPair)\n  }\n\n  static verifyMutable (signature, seq, value, publicKey) {\n    return verifyMutable(signature, seq, value, publicKey)\n  }\n\n  static signAnnounce (target, token, id, ann, keyPair) {\n    return sign(annSignable(target, token, id, ann, NS.ANNOUNCE), keyPair)\n  }\n\n  static signUnannounce (target, token, id, ann, keyPair) {\n    return sign(annSignable(target, token, id, ann, NS.UNANNOUNCE), keyPair)\n  }\n}\n\nfunction verifyMutable (signature, seq, value, publicKey) {\n  const signable = b4a.allocUnsafe(32 + 32)\n  const hash = signable.subarray(32)\n\n  signable.set(NS.MUTABLE_PUT, 0)\n\n  sodium.crypto_generichash(hash, c.encode(m.mutableSignable, { seq, value }))\n  return sodium.crypto_sign_verify_detached(signature, signable, publicKey)\n}\n\nfunction annSignable (target, token, id, ann, ns) {\n  const signable = b4a.allocUnsafe(32 + 32)\n  const hash = signable.subarray(32)\n\n  signable.set(ns, 0)\n\n  sodium.crypto_generichash_batch(hash, [\n    target,\n    id,\n    token,\n    c.encode(m.peer, ann.peer), // note that this is the partial encoding of the announce message so we could just use that for perf\n    ann.refresh || EMPTY\n  ])\n\n  return signable\n}\n\nfunction sign (signable, keyPair) {\n  if (keyPair.sign) {\n    return keyPair.sign(signable)\n  }\n  const secretKey = keyPair.secretKey ? keyPair.secretKey : keyPair\n  const signature = b4a.allocUnsafe(64)\n  sodium.crypto_sign_detached(signature, signable, secretKey)\n  return signature\n}\n\nfunction decode (enc, val) {\n  try {\n    return val && c.decode(enc, val)\n  } catch (err) {\n    return null\n  }\n}\nmodule.exports = class RawStreamSet {\n  constructor (dht) {\n    this._dht = dht\n\n    this._prefix = 16 - 1 // 16 is the default stream-set side in udx\n    this._streams = new Map()\n  }\n\n  add (opts) {\n    const self = this\n\n    // TODO: we should prob have a udx helper for id generation, given the slight complexity\n    // of the below. requires a PRNG in udx tho.\n\n    let id = 0\n\n    while (true) {\n      id = (Math.random() * 0x100000000) >>> 0\n\n      if (this._streams.has(id & this._prefix)) continue\n      break\n    }\n\n    // always have ~50% change of rolling a free one\n    if (2 * this._streams.size >= this._prefix) {\n      // ie 0b11111 = 0b1111 + 1 + 0b1111\n      this._prefix = 2 * this._prefix + 1\n\n      // move the prefixes over\n      const next = new Map()\n      for (const stream of this._streams.values()) {\n        next.set(stream.id & this._prefix, stream)\n      }\n      this._streams = next\n    }\n\n    const stream = this._dht.udx.createStream(id, opts)\n    this._streams.set(id & this._prefix, stream)\n\n    stream.on('close', onclose)\n\n    return stream\n\n    function onclose () {\n      self._streams.delete(id & self._prefix)\n    }\n  }\n\n  async clear () {\n    const destroying = []\n\n    for (const stream of this._streams.values()) {\n      destroying.push(new Promise((resolve) => stream\n        .once('close', resolve)\n        .destroy()\n      ))\n    }\n\n    await Promise.allSettled(destroying)\n  }\n}\nconst c = require('compact-encoding')\nconst Cache = require('xache')\nconst safetyCatch = require('safety-catch')\nconst b4a = require('b4a')\nconst { handshake, holepunch } = require('./messages')\nconst { COMMANDS } = require('./constants')\nconst { BAD_HANDSHAKE_REPLY, BAD_HOLEPUNCH_REPLY } = require('./errors')\n\nconst FROM_CLIENT = 0\nconst FROM_SERVER = 1\nconst FROM_RELAY = 2\nconst FROM_SECOND_RELAY = 3\nconst REPLY = 4\n\n// TODO: While the current design is very trustless in regards to clients/servers trusting the DHT,\n// we should add a bunch of rate limits everywhere, especially including here to avoid bad users\n// using a DHT node to relay traffic indiscriminately using the connect/holepunch messages.\n// That's mostly from an abuse POV as none of the messsages do amplication.\n\nmodule.exports = class Router {\n  constructor (dht, opts) {\n    this.dht = dht\n    this.forwards = new Cache(opts.forwards)\n  }\n\n  set (target, state) {\n    if (state.onpeerhandshake) {\n      this.forwards.retain(toString(target), state)\n    } else {\n      this.forwards.set(toString(target), state)\n    }\n  }\n\n  get (target) {\n    return this.forwards.get(toString(target))\n  }\n\n  delete (target) {\n    this.forwards.delete(toString(target))\n  }\n\n  destroy () {\n    this.forwards.destroy()\n  }\n\n  async peerHandshake (target, { noise, peerAddress, relayAddress, socket, session }, to) {\n    const dht = this.dht\n\n    const requestValue = c.encode(handshake, {\n      mode: FROM_CLIENT,\n      noise,\n      peerAddress,\n      relayAddress\n    })\n\n    const res = await dht.request({ command: COMMANDS.PEER_HANDSHAKE, target, value: requestValue }, to, { socket, session })\n\n    const hs = decode(handshake, res.value)\n    if (!hs || hs.mode !== REPLY || (to.host !== res.from.host || to.port !== res.from.port) || !hs.noise) {\n      throw BAD_HANDSHAKE_REPLY()\n    }\n\n    return {\n      noise: hs.noise,\n      relayed: !!hs.peerAddress,\n      serverAddress: hs.peerAddress || to,\n      clientAddress: res.to\n    }\n  }\n\n  async onpeerhandshake (req) {\n    const hs = req.value && decode(handshake, req.value)\n    if (!hs) return\n\n    const { mode, noise, peerAddress, relayAddress } = hs\n\n    const state = req.target && this.get(req.target)\n    const isServer = !!(state && state.onpeerhandshake)\n    const relay = state && state.relay\n\n    if (isServer) {\n      let reply = null\n      try {\n        reply = noise && await state.onpeerhandshake({ noise, peerAddress }, req)\n      } catch (e) {\n        safetyCatch(e)\n        return\n      }\n      if (!reply || !reply.noise) return\n      const opts = { socket: reply.socket, closerNodes: false, token: false }\n\n      switch (mode) {\n        case FROM_CLIENT: {\n          req.reply(c.encode(handshake, { mode: REPLY, noise: reply.noise, peerAddress: null }), opts)\n          return\n        }\n        case FROM_RELAY: {\n          req.relay(c.encode(handshake, { mode: FROM_SERVER, noise: reply.noise, peerAddress }), req.from, opts)\n          return\n        }\n        case FROM_SECOND_RELAY: {\n          if (!relayAddress) return\n          req.relay(c.encode(handshake, { mode: FROM_SERVER, noise: reply.noise, peerAddress }), relayAddress, opts)\n          return // eslint-disable-line\n        }\n      }\n    } else {\n      switch (mode) {\n        case FROM_CLIENT: {\n          // TODO: if no relay is known route closer to the target instead of timing out\n          if (!noise) return\n          if (!relay && !relayAddress) { // help the user route\n            req.reply(null, { token: false, closerNodes: true })\n            return\n          }\n          req.relay(c.encode(handshake, { mode: FROM_RELAY, noise, peerAddress: req.from, relayAddress: null }), relayAddress || relay)\n          return\n        }\n        case FROM_RELAY: {\n          if (!relay || !noise) return\n          req.relay(c.encode(handshake, { mode: FROM_SECOND_RELAY, noise, peerAddress, relayAddress: req.from }), relay)\n          return\n        }\n        case FROM_SERVER: {\n          if (!peerAddress || !noise) return\n          req.reply(c.encode(handshake, { mode: REPLY, noise, peerAddress: req.from, relayAddress: null }), { to: peerAddress, closerNodes: false, token: false })\n          return // eslint-disable-line\n        }\n      }\n    }\n  }\n\n  async peerHolepunch (target, { id, payload, peerAddress, socket, session }, to) {\n    const dht = this.dht\n    const requestValue = c.encode(holepunch, {\n      mode: FROM_CLIENT,\n      id,\n      payload,\n      peerAddress\n    })\n\n    const res = await dht.request({ command: COMMANDS.PEER_HOLEPUNCH, target, value: requestValue }, to, { socket, session })\n\n    const hp = decode(holepunch, res.value)\n    if (!hp || hp.mode !== REPLY || (to.host !== res.from.host || to.port !== res.from.port)) {\n      throw BAD_HOLEPUNCH_REPLY()\n    }\n\n    return {\n      from: res.from,\n      to: res.to,\n      payload: hp.payload,\n      peerAddress: hp.peerAddress || to\n    }\n  }\n\n  async onpeerholepunch (req) {\n    const hp = req.value && decode(holepunch, req.value)\n    if (!hp) return\n\n    const { mode, id, payload, peerAddress } = hp\n\n    const state = req.target && this.get(req.target)\n    const isServer = !!(state && state.onpeerholepunch)\n    const relay = state && state.relay\n\n    switch (mode) {\n      case FROM_CLIENT: {\n        if (!peerAddress && !relay) return\n        req.relay(c.encode(holepunch, { mode: FROM_RELAY, id, payload, peerAddress: req.from }), peerAddress || relay)\n        return\n      }\n      case FROM_RELAY: {\n        if (!isServer || !peerAddress) return\n        let reply = null\n        try {\n          reply = await state.onpeerholepunch({ id, payload, peerAddress }, req)\n        } catch (e) {\n          safetyCatch(e)\n          return\n        }\n        if (!reply) return\n        const opts = { socket: reply.socket, closerNodes: false, token: false }\n        req.relay(c.encode(holepunch, { mode: FROM_SERVER, id: 0, payload: reply.payload, peerAddress }), req.from, opts)\n        return\n      }\n      case FROM_SERVER: {\n        req.reply(c.encode(holepunch, { mode: REPLY, id, payload, peerAddress: req.from }), { to: peerAddress, closerNodes: false, token: false })\n        return // eslint-disable-line\n      }\n    }\n  }\n}\n\nfunction decode (enc, val) {\n  try {\n    return c.decode(enc, val)\n  } catch {\n    return null\n  }\n}\n\nfunction toString (t) {\n  return typeof t === 'string' ? t : b4a.toString(t, 'hex')\n}\nconst sodium = require('sodium-universal')\nconst b4a = require('b4a')\nconst { holepunchPayload } = require('./messages')\n\nmodule.exports = class HolepunchPayload {\n  constructor (holepunchSecret) {\n    this._sharedSecret = holepunchSecret\n    this._localSecret = b4a.allocUnsafe(32)\n\n    sodium.randombytes_buf(this._localSecret)\n  }\n\n  decrypt (buffer) {\n    const state = { start: 24, end: buffer.byteLength - 16, buffer }\n\n    if (state.end <= state.start) return null\n\n    const nonce = buffer.subarray(0, 24)\n    const msg = state.buffer.subarray(state.start, state.end)\n    const cipher = state.buffer.subarray(state.start)\n\n    if (!sodium.crypto_secretbox_open_easy(msg, cipher, nonce, this._sharedSecret)) return null\n\n    try {\n      return holepunchPayload.decode(state)\n    } catch {\n      return null\n    }\n  }\n\n  encrypt (payload) {\n    const state = { start: 24, end: 24, buffer: null }\n    holepunchPayload.preencode(state, payload)\n    state.buffer = b4a.allocUnsafe(state.end + 16)\n\n    const nonce = state.buffer.subarray(0, 24)\n    const msg = state.buffer.subarray(state.start, state.end)\n    const cipher = state.buffer.subarray(state.start)\n\n    holepunchPayload.encode(state, payload)\n    sodium.randombytes_buf(nonce)\n    sodium.crypto_secretbox_easy(cipher, msg, nonce, this._sharedSecret)\n\n    return state.buffer\n  }\n\n  token (addr) {\n    const out = b4a.allocUnsafe(32)\n    sodium.crypto_generichash(out, b4a.from(addr.host), this._localSecret)\n    return out\n  }\n}\nconst DONE = Promise.resolve(true)\nconst DESTROYED = Promise.resolve(false)\n\nmodule.exports = class Semaphore {\n  constructor (limit = 1) {\n    this.limit = limit\n    this.active = 0\n    this.waiting = []\n    this.destroyed = false\n\n    this._onwait = (resolve) => { this.waiting.push(resolve) }\n  }\n\n  wait () {\n    if (this.destroyed === true) return DESTROYED\n\n    if (this.active < this.limit && this.waiting.length === 0) {\n      this.active++\n      return DONE\n    }\n\n    return new Promise(this._onwait)\n  }\n\n  signal () {\n    if (this.destroyed === true) return\n\n    this.active--\n    while (this.active < this.limit && this.waiting.length > 0 && this.destroyed === false) {\n      this.active++\n      this.waiting.shift()(true)\n    }\n  }\n\n  async flush () {\n    if (this.destroyed === true) return\n    this.limit = 1\n    await this.wait()\n    this.signal()\n  }\n\n  destroy () {\n    this.destroyed = true\n    this.active = 0\n    while (this.waiting.length) this.waiting.pop()(false)\n  }\n}\nconst { EventEmitter } = require('events')\nconst safetyCatch = require('safety-catch')\nconst NoiseSecretStream = require('@hyperswarm/secret-stream')\nconst b4a = require('b4a')\nconst relay = require('blind-relay')\nconst NoiseWrap = require('./noise-wrap')\nconst Announcer = require('./announcer')\nconst { FIREWALL, ERROR } = require('./constants')\nconst { unslabbedHash } = require('./crypto')\nconst SecurePayload = require('./secure-payload')\nconst Holepuncher = require('./holepuncher')\nconst { isPrivate } = require('bogon')\nconst { ALREADY_LISTENING, NODE_DESTROYED, KEYPAIR_ALREADY_USED } = require('./errors')\n\nconst HANDSHAKE_CLEAR_WAIT = 10000\nconst HANDSHAKE_INITIAL_TIMEOUT = 10000\n\nmodule.exports = class Server extends EventEmitter {\n  constructor (dht, opts = {}) {\n    super()\n\n    this.dht = dht\n    this.target = null\n\n    this.closed = false\n    this.firewall = opts.firewall || (() => false)\n    this.holepunch = opts.holepunch || (() => true)\n    this.relayThrough = opts.relayThrough || null\n    this.relayKeepAlive = opts.relayKeepAlive || 5000\n    this.pool = opts.pool || null\n    this.createHandshake = opts.createHandshake || defaultCreateHandshake\n    this.createSecretStream = opts.createSecretStream || defaultCreateSecretStream\n    this.suspended = false\n\n    this._shareLocalAddress = opts.shareLocalAddress !== false\n    this._reusableSocket = !!opts.reusableSocket\n    this._neverPunch = opts.holepunch === false // useful for fully disabling punching\n    this._keyPair = null\n    this._announcer = null\n    this._connects = new Map()\n    this._holepunches = []\n    this._listening = null\n    this._closing = null\n  }\n\n  get listening () {\n    return this._listening !== null\n  }\n\n  get publicKey () {\n    return this._keyPair && this._keyPair.publicKey\n  }\n\n  get relayAddresses () {\n    return this._announcer ? this._announcer.relayAddresses : []\n  }\n\n  onconnection (encryptedSocket) {\n    this.emit('connection', encryptedSocket)\n  }\n\n  async suspend () {\n    if (this._listening !== null) await this._listening\n    this.suspended = true\n    this._clearAll()\n    return this._announcer ? this._announcer.suspend() : Promise.resolve()\n  }\n\n  async resume () {\n    if (this._listening !== null) await this._listening\n    this.suspended = false\n    return this._announcer ? this._announcer.resume() : Promise.resolve()\n  }\n\n  address () {\n    if (!this._keyPair) return null\n\n    return {\n      publicKey: this._keyPair.publicKey,\n      host: this.dht.host,\n      port: this.dht.port\n    }\n  }\n\n  close () {\n    if (this._closing) return this._closing\n    this._closing = this._close()\n    return this._closing\n  }\n\n  _gc () {\n    this.dht.listening.delete(this)\n    if (this.target) this.dht._router.delete(this.target)\n  }\n\n  async _stopListening () {\n    try {\n      if (this._announcer) await this._announcer.stop()\n    } catch {\n      // ignore\n    }\n\n    this._announcer = null\n    this._listening = null\n    this._keyPair = null\n  }\n\n  async _close () {\n    if (this._listening === null) {\n      this.closed = true\n      this.emit('close')\n      return\n    }\n\n    try {\n      await this._listening\n    } catch {}\n\n    this._gc()\n    this._clearAll()\n\n    await this._stopListening()\n\n    this.closed = true\n    this.emit('close')\n  }\n\n  _clearAll () {\n    while (this._holepunches.length > 0) {\n      const h = this._holepunches.pop()\n      if (h && h.puncher) h.puncher.destroy()\n      if (h && h.clearing) clearTimeout(h.clearing)\n      if (h && h.prepunching) clearTimeout(h.prepunching)\n      if (h && h.rawStream) h.rawStream.destroy()\n    }\n\n    this._connects.clear()\n  }\n\n  async listen (keyPair = this.dht.defaultKeyPair, opts = {}) {\n    if (this._listening !== null) throw ALREADY_LISTENING()\n    if (this.dht.destroyed) throw NODE_DESTROYED()\n\n    this._listening = this._listen(keyPair, opts)\n    await this._listening\n    return this\n  }\n\n  async _listen (keyPair, opts) {\n    // From now on, the DHT object which created me is responsible for closing me\n    this.dht.listening.add(this)\n\n    try {\n      await this.dht.bind()\n      if (this._closing) return\n\n      for (const s of this.dht.listening) {\n        if (s._keyPair && b4a.equals(s._keyPair.publicKey, keyPair.publicKey)) {\n          throw KEYPAIR_ALREADY_USED()\n        }\n      }\n\n      this.target = unslabbedHash(keyPair.publicKey)\n      this._keyPair = keyPair\n      this._announcer = new Announcer(this.dht, keyPair, this.target, opts)\n\n      this.dht._router.set(this.target, {\n        relay: null,\n        record: this._announcer.record,\n        onpeerhandshake: this._onpeerhandshake.bind(this),\n        onpeerholepunch: this._onpeerholepunch.bind(this)\n      })\n\n      // warm it up for now\n      this._localAddresses().catch(safetyCatch)\n\n      await this._announcer.start()\n    } catch (err) {\n      await this._stopListening()\n      this._gc()\n      throw err\n    }\n\n    if (this._closing) return\n    if (this.suspended) await this._announcer.suspend()\n\n    if (this._closing) return\n    if (this.dht.destroyed) throw NODE_DESTROYED()\n\n    if (this.pool) this.pool._attachServer(this)\n\n    this.emit('listening')\n  }\n\n  refresh () {\n    if (this._announcer) this._announcer.refresh()\n  }\n\n  notifyOnline () {\n    if (this._announcer) this._announcer.online.notify()\n  }\n\n  _localAddresses () {\n    return this.dht.validateLocalAddresses(Holepuncher.localAddresses(this.dht.io.serverSocket))\n  }\n\n  async _addHandshake (k, noise, clientAddress, { from, to: serverAddress, socket }, direct) {\n    let id = this._holepunches.indexOf(null)\n    if (id === -1) id = this._holepunches.push(null) - 1\n\n    const hs = {\n      round: 0,\n      reply: null,\n      puncher: null,\n      payload: null,\n      rawStream: null,\n      encryptedSocket: null,\n      prepunching: null,\n      firewalled: true,\n      clearing: null,\n      onsocket: null,\n\n      // Relay state\n      relayTimeout: null,\n      relayToken: null,\n      relaySocket: null,\n      relayClient: null,\n      relayPaired: false\n    }\n\n    this._holepunches[id] = hs\n\n    const handshake = this.createHandshake(this._keyPair, null)\n\n    let remotePayload\n    try {\n      remotePayload = await handshake.recv(noise)\n    } catch (err) {\n      safetyCatch(err)\n      this._clearLater(hs, id, k)\n      return null\n    }\n\n    if (this._closing || this.suspended) return null\n\n    try {\n      hs.firewalled = await this.firewall(handshake.remotePublicKey, remotePayload, clientAddress)\n    } catch (err) {\n      safetyCatch(err)\n    }\n\n    if (this._closing || this.suspended) return null\n\n    if (hs.firewalled) {\n      this._clearLater(hs, id, k)\n      return null\n    }\n\n    const error = remotePayload.version === 1\n      ? (remotePayload.udx ? ERROR.NONE : ERROR.ABORTED)\n      : ERROR.VERSION_MISMATCH\n\n    const addresses = []\n    const ourRemoteAddr = this.dht.remoteAddress()\n    const ourLocalAddrs = this._shareLocalAddress ? await this._localAddresses() : null\n\n    if (this._closing || this.suspended) return null\n\n    if (ourRemoteAddr) addresses.push(ourRemoteAddr)\n    if (ourLocalAddrs) addresses.push(...ourLocalAddrs)\n\n    if (error === ERROR.NONE) {\n      hs.rawStream = this.dht.createRawStream({\n        framed: true,\n        firewall (socket, port, host) {\n          // Check if the traffic originated from the socket on which we're expecting relay traffic. If so,\n          // we haven't hole punched yet and the other side is just sending us traffic through the relay.\n          if (hs.relaySocket && isRelay(hs.relaySocket, socket, port, host)) {\n            return false\n          }\n\n          hs.onsocket(socket, port, host)\n          return false\n        }\n      })\n\n      hs.rawStream.on('error', autoDestroy)\n\n      hs.onsocket = (socket, port, host) => {\n        if (hs.rawStream === null) return // Already hole punched\n\n        this._clearLater(hs, id, k)\n\n        if (hs.prepunching) {\n          clearTimeout(hs.prepunching)\n          hs.prepunching = null\n        }\n\n        if (this._reusableSocket && remotePayload.udx.reusableSocket) {\n          this.dht._socketPool.routes.add(handshake.remotePublicKey, hs.rawStream)\n        }\n\n        hs.rawStream.removeListener('error', autoDestroy)\n\n        if (hs.rawStream.connected) {\n          const remoteChanging = hs.rawStream.changeRemote(socket, remotePayload.udx.id, port, host)\n\n          if (remoteChanging) remoteChanging.catch(safetyCatch)\n        } else {\n          hs.rawStream.connect(socket, remotePayload.udx.id, port, host)\n          hs.encryptedSocket = this.createSecretStream(false, hs.rawStream, {\n            handshake: h,\n            keepAlive: this.dht.connectionKeepAlive\n          })\n\n          this.onconnection(hs.encryptedSocket)\n        }\n\n        if (hs.puncher) {\n          hs.puncher.onabort = noop\n          hs.puncher.destroy()\n        }\n\n        hs.rawStream = null\n      }\n\n      function autoDestroy () {\n        if (hs.puncher) hs.puncher.destroy()\n      }\n    }\n\n    const relayThrough = selectRelay(this.relayThrough)\n\n    if (relayThrough) hs.relayToken = relay.token()\n\n    try {\n      hs.reply = await handshake.send({\n        error,\n        firewall: ourRemoteAddr ? FIREWALL.OPEN : FIREWALL.UNKNOWN,\n        holepunch: ourRemoteAddr ? null : { id, relays: this._announcer.relays },\n        addresses4: addresses,\n        addresses6: null,\n        udx: {\n          reusableSocket: this._reusableSocket,\n          id: hs.rawStream ? hs.rawStream.id : 0,\n          seq: 0\n        },\n        secretStream: {},\n        relayThrough: relayThrough\n          ? { publicKey: relayThrough, token: hs.relayToken }\n          : null\n      })\n    } catch (err) {\n      safetyCatch(err)\n      hs.rawStream.destroy()\n      this._clearLater(hs, id, k)\n      return null\n    }\n\n    if (this._closing || this.suspended) {\n      hs.rawStream.destroy()\n      return null\n    }\n\n    const h = handshake.final()\n\n    if (error !== ERROR.NONE) {\n      hs.rawStream.destroy()\n      this._clearLater(hs, id, k)\n      return hs\n    }\n\n    if (relayThrough || remotePayload.relayThrough) {\n      this._relayConnection(hs, relayThrough, remotePayload, h)\n    }\n\n    if (remotePayload.firewall === FIREWALL.OPEN || direct) {\n      const sock = direct ? socket : this.dht.socket\n      this.dht.stats.punches.open++\n      hs.onsocket(sock, clientAddress.port, clientAddress.host)\n      return hs\n    }\n\n    const onabort = () => {\n      if (hs.prepunching) clearTimeout(hs.prepunching)\n      hs.prepunching = null\n      hs.rawStream.on('close', () => this._clearLater(hs, id, k))\n      if (hs.relayToken === null) hs.rawStream.destroy()\n    }\n\n    if (!direct && clientAddress.host === serverAddress.host) {\n      const clientAddresses = remotePayload.addresses4.filter(onlyPrivateHosts)\n\n      if (clientAddresses.length > 0 && this._shareLocalAddress) {\n        const myAddresses = await this._localAddresses()\n        const addr = Holepuncher.matchAddress(myAddresses, clientAddresses)\n\n        if (addr) {\n          hs.prepunching = setTimeout(onabort, HANDSHAKE_INITIAL_TIMEOUT)\n          return hs\n        }\n      }\n    }\n\n    if (this._closing || this.suspended) return null\n\n    if (ourRemoteAddr || this._neverPunch) {\n      hs.prepunching = setTimeout(onabort, HANDSHAKE_INITIAL_TIMEOUT)\n      return hs\n    }\n\n    hs.payload = new SecurePayload(h.holepunchSecret)\n    hs.puncher = new Holepuncher(this.dht, this.dht.session(), false, remotePayload.firewall)\n\n    hs.puncher.onconnect = hs.onsocket\n    hs.puncher.onabort = onabort\n    hs.prepunching = setTimeout(hs.puncher.destroy.bind(hs.puncher), HANDSHAKE_INITIAL_TIMEOUT)\n\n    return hs\n  }\n\n  _clearLater (hs, id, k) {\n    if (hs.clearing) return\n    hs.clearing = setTimeout(() => this._clear(hs, id, k), HANDSHAKE_CLEAR_WAIT)\n  }\n\n  _clear (hs, id, k) {\n    if (id >= this._holepunches.length || this._holepunches[id] !== hs) return\n    if (hs.clearing) clearTimeout(hs.clearing)\n\n    this._holepunches[id] = null\n    while (this._holepunches.length > 0 && this._holepunches[this._holepunches.length - 1] === null) {\n      this._holepunches.pop()\n    }\n    this._connects.delete(k)\n  }\n\n  async _onpeerhandshake ({ noise, peerAddress }, req) {\n    const k = b4a.toString(noise, 'hex')\n\n    // The next couple of statements MUST run within the same tick to prevent\n    // a malicious peer from flooding us with handshakes.\n    let p = this._connects.get(k)\n    if (!p) {\n      p = this._addHandshake(k, noise, peerAddress || req.from, req, !peerAddress)\n      this._connects.set(k, p)\n    }\n\n    const h = await p\n    if (!h) return null\n\n    if (this._closing !== null || this.suspended) return null\n\n    return { socket: h.puncher && h.puncher.socket, noise: h.reply }\n  }\n\n  async _onpeerholepunch ({ id, peerAddress, payload }, req) {\n    const h = id < this._holepunches.length ? this._holepunches[id] : null\n    if (!h) return null\n\n    if (!peerAddress || this._closing !== null || this.suspended) return null\n\n    const p = h.puncher\n    if (!p || !p.socket) return this._abort(h) // not opened\n\n    const remotePayload = h.payload.decrypt(payload)\n    if (!remotePayload) return null\n\n    const isServerRelay = this._announcer.isRelay(req.from)\n    const { error, firewall, round, punching, addresses, remoteAddress, remoteToken } = remotePayload\n\n    if (error !== ERROR.NONE) {\n      // We actually do not need to set the round here, but just do it for consistency.\n      if (round >= h.round) h.round = round\n      return this._abort(h)\n    }\n\n    const token = h.payload.token(peerAddress)\n    const echoed = isServerRelay && !!remoteToken && b4a.equals(token, remoteToken)\n\n    // Update our heuristics here\n    if (req.socket === p.socket) {\n      p.nat.add(req.to, req.from)\n    }\n\n    if (round >= h.round) {\n      h.round = round\n      p.updateRemote({ punching, firewall, addresses, verified: echoed ? peerAddress.host : null })\n    }\n\n    // Wait for the analyzer to reach a conclusion...\n    let stable = await p.analyze(false)\n    if (p.destroyed) return null\n\n    if (!p.remoteHolepunching && !stable) {\n      stable = await p.analyze(true)\n      if (p.destroyed) return null\n      if (!stable) return this._abort(h)\n    }\n\n    // Fast mode! If we are consistent and the remote has opened a session to us (remoteAddress)\n    // then fire a quick punch back. Note the await here just waits for the udp socket to flush.\n    if (isConsistent(p.nat.firewall) && remoteAddress && hasSameAddr(p.nat.addresses, remoteAddress)) {\n      await p.ping(peerAddress)\n      if (p.destroyed) return null\n    }\n\n    // Remote said they are punching (or willing to), so we will punch as well.\n    // Note that this returns when the punching has STARTED, so no guarantee\n    // we will have a connection after this promise etc.\n    if (p.remoteHolepunching) {\n      // TODO: still continue here if a local connection might work, but then do not holepunch...\n      if (!this.holepunch(p.remoteFirewall, p.nat.firewall, p.remoteAddresses, p.nat.addresses)) {\n        return p.destroyed ? null : this._abort(h)\n      }\n\n      if (h.prepunching) {\n        clearTimeout(h.prepunching)\n        h.prepunching = null\n      }\n\n      if (p.remoteFirewall >= FIREWALL.RANDOM || p.nat.firewall >= FIREWALL.RANDOM) {\n        if (this.dht._randomPunches >= this.dht._randomPunchLimit || (Date.now() - this.dht._lastRandomPunch) < this.dht._randomPunchInterval) {\n          if (!h.relayToken) return this._abort(h, ERROR.TRY_LATER)\n          return {\n            socket: p.socket,\n            payload: h.payload.encrypt({\n              error: ERROR.TRY_LATER,\n              firewall: p.nat.firewall,\n              round: h.round,\n              connected: p.connected,\n              punching: p.punching,\n              addresses: p.nat.addresses,\n              remoteAddress: null,\n              token: isServerRelay ? token : null,\n              remoteToken: remotePayload.token\n            })\n          }\n        }\n      }\n\n      const punching = await p.punch()\n      if (p.destroyed) return null\n      if (!punching) return this._abort(h)\n    }\n\n    // Freeze that analysis as soon as we have a result we are giving to the other peer\n    if (p.nat.firewall !== FIREWALL.UNKNOWN) {\n      p.nat.freeze()\n    }\n\n    return {\n      socket: p.socket,\n      payload: h.payload.encrypt({\n        error: ERROR.NONE,\n        firewall: p.nat.firewall,\n        round: h.round,\n        connected: p.connected,\n        punching: p.punching,\n        addresses: p.nat.addresses,\n        remoteAddress: null,\n        token: isServerRelay ? token : null,\n        remoteToken: remotePayload.token\n      })\n    }\n  }\n\n  _abort (h, error = ERROR.ABORTED) {\n    if (!h.payload) {\n      if (h.puncher) h.puncher.destroy()\n      return null\n    }\n\n    const payload = h.payload.encrypt({\n      error,\n      firewall: FIREWALL.UNKNOWN,\n      round: h.round,\n      connected: false,\n      punching: false,\n      addresses: null,\n      remoteAddress: null,\n      token: null,\n      remoteToken: null\n    })\n\n    h.puncher.destroy()\n\n    return { socket: this.dht.socket, payload }\n  }\n\n  _relayConnection (hs, relayThrough, remotePayload, h) {\n    let isInitiator\n    let publicKey\n    let token\n\n    if (relayThrough) {\n      isInitiator = true\n      publicKey = relayThrough\n      token = hs.relayToken\n    } else {\n      isInitiator = false\n      publicKey = remotePayload.relayThrough.publicKey\n      token = remotePayload.relayThrough.token\n    }\n\n    hs.relayToken = token\n    hs.relaySocket = this.dht.connect(publicKey)\n    hs.relaySocket.setKeepAlive(this.relayKeepAlive)\n    hs.relayClient = relay.Client.from(hs.relaySocket, { id: hs.relaySocket.publicKey })\n    hs.relayTimeout = setTimeout(onabort, 15000)\n\n    hs.relayClient\n      .pair(isInitiator, token, hs.rawStream)\n      .on('error', onabort)\n      .on('data', (remoteId) => {\n        if (hs.relayTimeout) clearRelayTimeout(hs)\n        if (hs.rawStream === null) {\n          onabort(null)\n          return\n        }\n\n        hs.relayPaired = true\n\n        if (hs.prepunching) clearTimeout(hs.prepunching)\n        hs.prepunching = null\n\n        const {\n          remotePort,\n          remoteHost,\n          socket\n        } = hs.relaySocket.rawStream\n\n        hs.rawStream\n          .on('close', () => hs.relaySocket.destroy())\n          .connect(socket, remoteId, remotePort, remoteHost)\n\n        hs.encryptedSocket = this.createSecretStream(false, hs.rawStream, { handshake: h })\n\n        this.onconnection(hs.encryptedSocket)\n      })\n\n    function onabort () {\n      if (hs.relayTimeout) clearRelayTimeout(hs)\n      const socket = hs.relaySocket\n      hs.relayToken = null\n      hs.relaySocket = null\n      if (socket) socket.destroy()\n    }\n  }\n}\n\nfunction clearRelayTimeout (hs) {\n  clearTimeout(hs.relayTimeout)\n  hs.relayTimeout = null\n}\n\nfunction isConsistent (fw) {\n  return fw === FIREWALL.OPEN || fw === FIREWALL.CONSISTENT\n}\n\nfunction hasSameAddr (addrs, other) {\n  if (addrs === null) return false\n\n  for (const addr of addrs) {\n    if (addr.port === other.port && addr.host === other.host) return true\n  }\n  return false\n}\n\nfunction defaultCreateHandshake (keyPair, remotePublicKey) {\n  return new NoiseWrap(keyPair, remotePublicKey)\n}\n\nfunction defaultCreateSecretStream (isInitiator, rawStream, opts) {\n  return new NoiseSecretStream(isInitiator, rawStream, opts)\n}\n\nfunction onlyPrivateHosts (addr) {\n  return isPrivate(addr.host)\n}\n\nfunction isRelay (relaySocket, socket, port, host) {\n  const stream = relaySocket.rawStream\n  if (!stream) return false\n  if (stream.socket !== socket) return false\n  return port === stream.remotePort && host === stream.remoteHost\n}\n\nfunction selectRelay (relayThrough) {\n  if (typeof relayThrough === 'function') relayThrough = relayThrough()\n  if (relayThrough === null) return null\n  if (Array.isArray(relayThrough)) return relayThrough[Math.floor(Math.random() * relayThrough.length)]\n  return relayThrough\n}\n\nfunction noop () {}\nmodule.exports = class Sleeper {\n  constructor () {\n    this._timeout = null\n    this._resolve = null\n\n    this._start = (resolve) => {\n      this._resolve = resolve\n    }\n\n    this._trigger = () => {\n      if (this._resolve === null) return\n      const resolve = this._resolve\n      this._timeout = null\n      this._resolve = null\n      resolve()\n    }\n  }\n\n  pause (ms) {\n    const p = new Promise(this._start)\n    if (this._timeout !== null) {\n      clearTimeout(this._timeout)\n      this._trigger()\n    }\n    this._timeout = setTimeout(this._trigger, ms)\n    return p\n  }\n\n  resume () {\n    if (this._timeout !== null) {\n      clearTimeout(this._timeout)\n      this._trigger()\n    }\n  }\n}\nconst b4a = require('b4a')\n\nconst LINGER_TIME = 3000\n\nmodule.exports = class SocketPool {\n  constructor (dht, host) {\n    this._dht = dht\n    this._sockets = new Map()\n    this._lingering = new Set() // updated by the ref\n    this._host = host\n\n    this.routes = new SocketRoutes(this)\n  }\n\n  _onmessage (ref, data, address) {\n    this._dht.onmessage(ref.socket, data, address)\n  }\n\n  _add (ref) {\n    this._sockets.set(ref.socket, ref)\n  }\n\n  _remove (ref) {\n    this._sockets.delete(ref.socket)\n    this._lingering.delete(ref)\n  }\n\n  lookup (socket) {\n    return this._sockets.get(socket) || null\n  }\n\n  setReusable (socket, bool) {\n    const ref = this.lookup(socket)\n    if (ref) ref.reusable = bool\n  }\n\n  acquire () {\n    // TODO: Enable socket reuse\n    return new SocketRef(this)\n  }\n\n  async destroy () {\n    const closing = []\n\n    for (const ref of this._sockets.values()) {\n      ref._unlinger()\n      closing.push(ref.socket.close())\n    }\n\n    await Promise.allSettled(closing)\n  }\n}\n\nclass SocketRoutes {\n  constructor (pool) {\n    this._pool = pool\n    this._routes = new Map()\n  }\n\n  add (publicKey, rawStream) {\n    if (rawStream.socket) this._onconnect(publicKey, rawStream)\n    else rawStream.on('connect', this._onconnect.bind(this, publicKey, rawStream))\n  }\n\n  get (publicKey) {\n    const id = b4a.toString(publicKey, 'hex')\n    const route = this._routes.get(id)\n    if (!route) return null\n    return route\n  }\n\n  _onconnect (publicKey, rawStream) {\n    const id = b4a.toString(publicKey, 'hex')\n    const socket = rawStream.socket\n\n    let route = this._routes.get(id)\n\n    if (!route) {\n      const gc = () => {\n        if (this._routes.get(id) === route) this._routes.delete(id)\n        socket.removeListener('close', gc)\n      }\n\n      route = {\n        socket,\n        address: { host: rawStream.remoteHost, port: rawStream.remotePort },\n        gc\n      }\n\n      this._routes.set(id, route)\n      socket.on('close', gc)\n    }\n\n    this._pool.setReusable(socket, true)\n\n    rawStream.on('error', () => {\n      this._pool.setReusable(socket, false)\n      if (!route) route = this._routes.get(id)\n      if (route && route.socket === socket) route.gc()\n    })\n  }\n}\n\n// TODO: we should just make some \"user data\" object on udx to allow to attach this info\nclass SocketRef {\n  constructor (pool) {\n    this._pool = pool\n\n    // Events\n    this.onholepunchmessage = noop\n\n    // Whether it should teardown immediately or wait a bit\n    this.reusable = false\n\n    this.socket = pool._dht.udx.createSocket()\n    this.socket\n      .on('close', this._onclose.bind(this))\n      .on('message', this._onmessage.bind(this))\n      .on('idle', this._onidle.bind(this))\n      .on('busy', this._onbusy.bind(this))\n      .bind(0, this._pool._host)\n\n    this._refs = 1\n    this._released = false\n    this._closed = false\n\n    this._timeout = null\n    this._wasBusy = false\n\n    this._pool._add(this)\n  }\n\n  _onclose () {\n    this._pool._remove(this)\n  }\n\n  _onmessage (data, address) {\n    if (data.byteLength > 1) {\n      this._pool._onmessage(this, data, address)\n    } else {\n      this.onholepunchmessage(data, address, this)\n    }\n  }\n\n  _onidle () {\n    this._closeMaybe()\n  }\n\n  _onbusy () {\n    this._wasBusy = true\n    this._unlinger()\n  }\n\n  _reset () {\n    this.onholepunchmessage = noop\n  }\n\n  _closeMaybe () {\n    if (this._refs === 0 && this.socket.idle && !this._timeout) this._close()\n  }\n\n  _lingeringClose () {\n    this._pool._lingering.delete(this)\n    this._timeout = null\n    this._closeMaybe()\n  }\n\n  _close () {\n    this._unlinger()\n\n    if (this.reusable && this._wasBusy) {\n      this._wasBusy = false\n      this._pool._lingering.add(this)\n      this._timeout = setTimeout(this._lingeringClose.bind(this), LINGER_TIME)\n      return\n    }\n\n    this._closed = true\n    this.socket.close()\n  }\n\n  _unlinger () {\n    if (this._timeout !== null) {\n      clearTimeout(this._timeout)\n      this._pool._lingering.delete(this)\n      this._timeout = null\n    }\n  }\n\n  get free () {\n    return this._refs === 0\n  }\n\n  active () {\n    this._refs++\n    this._unlinger()\n  }\n\n  inactive () {\n    this._refs--\n    this._closeMaybe()\n  }\n\n  address () {\n    return this.socket.address()\n  }\n\n  release () {\n    if (this._released) return\n\n    this._released = true\n    this._reset()\n\n    this._refs--\n    this._closeMaybe()\n  }\n}\n\nfunction noop () {}\n{\n  \"name\": \"hyperdht\",\n  \"version\": \"6.20.1\",\n  \"description\": \"The DHT powering Hyperswarm\",\n  \"main\": \"index.js\",\n  \"browser\": \"browser.js\",\n  \"bin\": {\n    \"hyperdht\": \"./bin.js\"\n  },\n  \"files\": [\n    \"index.js\",\n    \"browser.js\",\n    \"testnet.js\",\n    \"bin.js\",\n    \"lib/**.js\"\n  ],\n  \"imports\": {\n    \"events\": {\n      \"bare\": \"bare-events\",\n      \"default\": \"events\"\n    }\n  },\n  \"dependencies\": {\n    \"@hyperswarm/secret-stream\": \"^6.6.2\",\n    \"b4a\": \"^1.3.1\",\n    \"bare-events\": \"^2.2.0\",\n    \"blind-relay\": \"^1.3.0\",\n    \"bogon\": \"^1.0.0\",\n    \"compact-encoding\": \"^2.4.1\",\n    \"compact-encoding-net\": \"^1.0.1\",\n    \"dht-rpc\": \"^6.15.1\",\n    \"hypercore-crypto\": \"^3.3.0\",\n    \"hypercore-id-encoding\": \"^1.2.0\",\n    \"noise-curve-ed\": \"^2.0.0\",\n    \"noise-handshake\": \"^3.0.0\",\n    \"record-cache\": \"^1.1.1\",\n    \"safety-catch\": \"^1.0.1\",\n    \"signal-promise\": \"^1.0.3\",\n    \"sodium-universal\": \"^4.0.0\",\n    \"streamx\": \"^2.16.1\",\n    \"unslab\": \"^1.3.0\",\n    \"xache\": \"^1.1.0\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^3.0.0\",\n    \"graceful-goodbye\": \"^1.3.0\",\n    \"newline-decoder\": \"^1.0.2\",\n    \"standard\": \"^17.1.0\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && node test/all.js\",\n    \"test:generate\": \"brittle -r test/all.js test/*.js\",\n    \"lint\": \"standard\",\n    \"integration\": \"brittle test/integration/*.js\",\n    \"end-to-end\": \"brittle test/end-to-end/*.js\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"MIT\",\n  \"directories\": {\n    \"lib\": \"lib\",\n    \"test\": \"test\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/holepunchto/hyperdht.git\"\n  },\n  \"keywords\": [],\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/hyperdht/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/hyperdht#readme\",\n  \"standard\": {\n    \"ignore\": [\n      \"**/*.mjs\"\n    ]\n  }\n}\nconst { EventEmitter } = require('events')\nconst DHT = require('hyperdht')\nconst spq = require('shuffled-priority-queue')\nconst b4a = require('b4a')\nconst unslab = require('unslab')\n\nconst PeerInfo = require('./lib/peer-info')\nconst RetryTimer = require('./lib/retry-timer')\nconst ConnectionSet = require('./lib/connection-set')\nconst PeerDiscovery = require('./lib/peer-discovery')\n\nconst MAX_PEERS = 64\nconst MAX_PARALLEL = 3\nconst MAX_CLIENT_CONNECTIONS = Infinity // TODO: Change\nconst MAX_SERVER_CONNECTIONS = Infinity\n\nconst ERR_MISSING_TOPIC = 'Topic is required and must be a 32-byte buffer'\nconst ERR_DESTROYED = 'Swarm has been destroyed'\nconst ERR_DUPLICATE = 'Duplicate connection'\n\nmodule.exports = class Hyperswarm extends EventEmitter {\n  constructor (opts = {}) {\n    super()\n    const {\n      seed,\n      relayThrough,\n      keyPair = DHT.keyPair(seed),\n      maxPeers = MAX_PEERS,\n      maxClientConnections = MAX_CLIENT_CONNECTIONS,\n      maxServerConnections = MAX_SERVER_CONNECTIONS,\n      maxParallel = MAX_PARALLEL,\n      firewall = allowAll\n    } = opts\n    this.keyPair = keyPair\n\n    this.dht = opts.dht || new DHT({\n      bootstrap: opts.bootstrap,\n      nodes: opts.nodes\n    })\n    this.server = this.dht.createServer({\n      firewall: this._handleFirewall.bind(this),\n      relayThrough: this._maybeRelayConnection.bind(this)\n    }, this._handleServerConnection.bind(this))\n\n    this.destroyed = false\n    this.suspended = false\n    this.maxPeers = maxPeers\n    this.maxClientConnections = maxClientConnections\n    this.maxServerConnections = maxServerConnections\n    this.maxParallel = maxParallel\n    this.relayThrough = relayThrough || null\n\n    this.connecting = 0\n    this.connections = new Set()\n    this.peers = new Map()\n    this.explicitPeers = new Set()\n    this.listening = null\n    this.stats = {\n      updates: 0,\n      connects: {\n        client: {\n          opened: 0,\n          closed: 0,\n          attempted: 0\n        },\n        server: {\n          // Note: there is no notion of 'attempts' for server connections\n          opened: 0,\n          closed: 0\n        }\n      }\n    }\n\n    this._discovery = new Map()\n    this._timer = new RetryTimer(this._requeue.bind(this), {\n      backoffs: opts.backoffs,\n      jitter: opts.jitter\n    })\n    this._queue = spq()\n\n    this._allConnections = new ConnectionSet()\n    this._pendingFlushes = []\n    this._flushTick = 0\n\n    this._drainingQueue = false\n    this._clientConnections = 0\n    this._serverConnections = 0\n    this._firewall = firewall\n\n    this.dht.on('network-change', this._handleNetworkChange.bind(this))\n    this.on('update', this._handleUpdate)\n  }\n\n  _maybeRelayConnection (force) {\n    if (!this.relayThrough) return null\n    return this.relayThrough(force)\n  }\n\n  _enqueue (peerInfo) {\n    if (peerInfo.queued) return\n    peerInfo.queued = true\n    peerInfo._flushTick = this._flushTick\n    this._queue.add(peerInfo)\n\n    this._attemptClientConnections()\n  }\n\n  _requeue (batch) {\n    if (this.suspended) return\n    for (const peerInfo of batch) {\n      peerInfo.waiting = false\n\n      if ((peerInfo._updatePriority() === false) || this._allConnections.has(peerInfo.publicKey) || peerInfo.queued) continue\n      peerInfo.queued = true\n      peerInfo._flushTick = this._flushTick\n      this._queue.add(peerInfo)\n    }\n\n    this._attemptClientConnections()\n  }\n\n  _flushMaybe (peerInfo) {\n    for (let i = 0; i < this._pendingFlushes.length; i++) {\n      const flush = this._pendingFlushes[i]\n      if (peerInfo._flushTick > flush.tick) continue\n      if (--flush.missing > 0) continue\n      flush.onflush(true)\n      this._pendingFlushes.splice(i--, 1)\n    }\n  }\n\n  _flushAllMaybe () {\n    if (this.connecting > 0 || (this._allConnections.size < this.maxPeers && this._clientConnections < this.maxClientConnections)) {\n      return false\n    }\n\n    while (this._pendingFlushes.length) {\n      const flush = this._pendingFlushes.pop()\n      flush.onflush(true)\n    }\n\n    return true\n  }\n\n  _shouldConnect () {\n    return !this.destroyed &&\n      !this.suspended &&\n      this.connecting < this.maxParallel &&\n      this._allConnections.size < this.maxPeers &&\n      this._clientConnections < this.maxClientConnections\n  }\n\n  _shouldRequeue (peerInfo) {\n    if (this.suspended) return false\n    if (peerInfo.explicit) return true\n    for (const topic of peerInfo.topics) {\n      if (this._discovery.has(b4a.toString(topic, 'hex')) && !this.destroyed) {\n        return true\n      }\n    }\n    return false\n  }\n\n  _connect (peerInfo) {\n    if (peerInfo.banned || this._allConnections.has(peerInfo.publicKey)) {\n      this._flushMaybe(peerInfo)\n      return\n    }\n\n    // TODO: Support async firewalling at some point.\n    if (this._handleFirewall(peerInfo.publicKey, null)) {\n      peerInfo.ban(true)\n      this._flushMaybe(peerInfo)\n      return\n    }\n\n    const relayThrough = this._maybeRelayConnection(peerInfo.forceRelaying)\n    const conn = this.dht.connect(peerInfo.publicKey, {\n      relayAddresses: peerInfo.relayAddresses,\n      keyPair: this.keyPair,\n      relayThrough\n    })\n    this._allConnections.add(conn)\n\n    this.stats.connects.client.attempted++\n\n    this.connecting++\n    this._clientConnections++\n    let opened = false\n\n    const onerror = (err) => {\n      if (this.relayThrough && shouldForceRelaying(err.code)) {\n        peerInfo.forceRelaying = true\n        // Reset the attempts in order to fast connect to relay\n        peerInfo.attempts = 0\n      }\n    }\n\n    // Removed once a connection is opened\n    conn.on('error', onerror)\n\n    conn.on('open', () => {\n      opened = true\n      this.stats.connects.client.opened++\n\n      this._connectDone()\n      this.connections.add(conn)\n      conn.removeListener('error', onerror)\n      peerInfo._connected()\n      peerInfo.client = true\n      this.emit('connection', conn, peerInfo)\n      this._flushMaybe(peerInfo)\n\n      this.emit('update')\n    })\n    conn.on('close', () => {\n      if (!opened) this._connectDone()\n      this.stats.connects.client.closed++\n\n      this.connections.delete(conn)\n      this._allConnections.delete(conn)\n      this._clientConnections--\n      peerInfo._disconnected()\n\n      peerInfo.waiting = this._shouldRequeue(peerInfo) && this._timer.add(peerInfo)\n      this._maybeDeletePeer(peerInfo)\n\n      if (!opened) this._flushMaybe(peerInfo)\n\n      this._attemptClientConnections()\n\n      this.emit('update')\n    })\n\n    this.emit('update')\n  }\n\n  _connectDone () {\n    this.connecting--\n\n    if (this.connecting < this.maxParallel) this._attemptClientConnections()\n    if (this.connecting === 0) this._flushAllMaybe()\n  }\n\n  // Called when the PeerQueue indicates a connection should be attempted.\n  _attemptClientConnections () {\n    // Guard against re-entries - unsure if it still needed but doesn't hurt\n    if (this._drainingQueue) return\n    this._drainingQueue = true\n    while (this._queue.length && this._shouldConnect()) {\n      const peerInfo = this._queue.shift()\n      peerInfo.queued = false\n      this._connect(peerInfo)\n    }\n    this._drainingQueue = false\n    if (this.connecting === 0) this._flushAllMaybe()\n  }\n\n  _handleFirewall (remotePublicKey, payload) {\n    if (this.suspended) return true\n    if (b4a.equals(remotePublicKey, this.keyPair.publicKey)) return true\n\n    const peerInfo = this.peers.get(b4a.toString(remotePublicKey, 'hex'))\n    if (peerInfo && peerInfo.banned) return true\n\n    return this._firewall(remotePublicKey, payload)\n  }\n\n  _handleServerConnectionSwap (existing, conn) {\n    let closed = false\n\n    existing.on('close', () => {\n      if (closed) return\n\n      conn.removeListener('error', noop)\n      conn.removeListener('close', onclose)\n\n      this._handleServerConnection(conn)\n    })\n\n    conn.on('error', noop)\n    conn.on('close', onclose)\n\n    function onclose () {\n      closed = true\n    }\n  }\n\n  // Called when the DHT receives a new server connection.\n  _handleServerConnection (conn) {\n    if (this.destroyed) {\n      // TODO: Investigate why a final server connection can be received after close\n      conn.on('error', noop)\n      return conn.destroy(ERR_DESTROYED)\n    }\n\n    const existing = this._allConnections.get(conn.remotePublicKey)\n\n    if (existing) {\n      // If both connections are from the same peer,\n      // - pick the new one if the existing stream is already established (has sent and received bytes),\n      //   because the other client must have lost that connection and be reconnecting\n      // - otherwise, pick the one thats expected to initiate in a tie break\n      const existingIsOutdated = existing.rawBytesRead > 0 && existing.rawBytesWritten > 0\n      const expectedInitiator = b4a.compare(conn.publicKey, conn.remotePublicKey) > 0\n      const keepNew = existingIsOutdated || (expectedInitiator === conn.isInitiator)\n\n      if (keepNew === false) {\n        existing.sendKeepAlive()\n        conn.on('error', noop)\n        conn.destroy(new Error(ERR_DUPLICATE))\n        return\n      }\n\n      existing.on('error', noop)\n      existing.destroy(new Error(ERR_DUPLICATE))\n      this._handleServerConnectionSwap(existing, conn)\n      return\n    }\n\n    // When reaching here, the connection will always be 'opened' next tick\n    this.stats.connects.server.opened++\n\n    const peerInfo = this._upsertPeer(conn.remotePublicKey, null)\n\n    this.connections.add(conn)\n    this._allConnections.add(conn)\n    this._serverConnections++\n\n    conn.on('close', () => {\n      this.connections.delete(conn)\n      this._allConnections.delete(conn)\n      this._serverConnections--\n      this.stats.connects.server.closed++\n\n      this._maybeDeletePeer(peerInfo)\n\n      this._attemptClientConnections()\n\n      this.emit('update')\n    })\n    peerInfo.client = false\n    this.emit('connection', conn, peerInfo)\n\n    this.emit('update')\n  }\n\n  _upsertPeer (publicKey, relayAddresses) {\n    if (b4a.equals(publicKey, this.keyPair.publicKey)) return null\n    const keyString = b4a.toString(publicKey, 'hex')\n    let peerInfo = this.peers.get(keyString)\n\n    if (peerInfo) {\n      peerInfo.relayAddresses = relayAddresses // new is always better\n      return peerInfo\n    }\n\n    peerInfo = new PeerInfo({\n      publicKey,\n      relayAddresses\n    })\n\n    this.peers.set(keyString, peerInfo)\n    return peerInfo\n  }\n\n  _handleUpdate () {\n    this.stats.updates++\n  }\n\n  _maybeDeletePeer (peerInfo) {\n    if (!peerInfo.shouldGC()) return\n\n    const hasActiveConn = this._allConnections.has(peerInfo.publicKey)\n    if (hasActiveConn) return\n\n    const keyString = b4a.toString(peerInfo.publicKey, 'hex')\n    this.peers.delete(keyString)\n  }\n\n  /*\n   * Called when a peer is actively discovered during a lookup.\n   *\n   * Three conditions:\n   *  1. Not a known peer -- insert into queue\n   *  2. A known peer with normal priority -- do nothing\n   *  3. A known peer with low priority -- bump priority, because it's been rediscovered\n   */\n  _handlePeer (peer, topic) {\n    const peerInfo = this._upsertPeer(peer.publicKey, peer.relayAddresses)\n    if (peerInfo) peerInfo._topic(topic)\n    if (!peerInfo || this._allConnections.has(peer.publicKey)) return\n    if (!peerInfo.prioritized || peerInfo.server) peerInfo._reset()\n    if (peerInfo._updatePriority()) {\n      this._enqueue(peerInfo)\n    }\n  }\n\n  async _handleNetworkChange () {\n    // prioritize figuring out if existing connections are dead\n    for (const conn of this._allConnections) {\n      conn.sendKeepAlive()\n    }\n\n    const refreshes = []\n\n    for (const discovery of this._discovery.values()) {\n      refreshes.push(discovery.refresh())\n    }\n\n    await Promise.allSettled(refreshes)\n  }\n\n  status (key) {\n    return this._discovery.get(b4a.toString(key, 'hex')) || null\n  }\n\n  listen () {\n    if (!this.listening) this.listening = this.server.listen(this.keyPair)\n    return this.listening\n  }\n\n  // Object that exposes a cancellation method (destroy)\n  // TODO: When you rejoin, it should reannounce + bump lookup priority\n  join (topic, opts = {}) {\n    if (!topic) throw new Error(ERR_MISSING_TOPIC)\n    topic = unslab(topic)\n\n    const topicString = b4a.toString(topic, 'hex')\n\n    let discovery = this._discovery.get(topicString)\n\n    if (discovery && !discovery.destroyed) {\n      return discovery.session(opts)\n    }\n\n    discovery = new PeerDiscovery(this, topic, {\n      wait: discovery ? discovery.destroy() : null,\n      suspended: this.suspended,\n      onpeer: peer => this._handlePeer(peer, topic)\n    })\n    this._discovery.set(topicString, discovery)\n    return discovery.session(opts)\n  }\n\n  // Returns a promise\n  async leave (topic) {\n    if (!topic) throw new Error(ERR_MISSING_TOPIC)\n    const topicString = b4a.toString(topic, 'hex')\n    if (!this._discovery.has(topicString)) return Promise.resolve()\n\n    const discovery = this._discovery.get(topicString)\n    await discovery.destroy()\n\n    if (this._discovery.get(topicString) === discovery) {\n      this._discovery.delete(topicString)\n    }\n  }\n\n  joinPeer (publicKey) {\n    const peerInfo = this._upsertPeer(publicKey, null)\n    if (!peerInfo) return\n    if (!this.explicitPeers.has(peerInfo)) {\n      peerInfo.explicit = true\n      this.explicitPeers.add(peerInfo)\n    }\n    if (this._allConnections.has(publicKey)) return\n    if (peerInfo._updatePriority()) {\n      this._enqueue(peerInfo)\n    }\n  }\n\n  leavePeer (publicKey) {\n    const keyString = b4a.toString(publicKey, 'hex')\n    if (!this.peers.has(keyString)) return\n\n    const peerInfo = this.peers.get(keyString)\n    peerInfo.explicit = false\n    this.explicitPeers.delete(peerInfo)\n    this._maybeDeletePeer(peerInfo)\n  }\n\n  // Returns a promise\n  async flush () {\n    const allFlushed = [...this._discovery.values()].map(v => v.flushed())\n    await Promise.all(allFlushed)\n    if (this._flushAllMaybe()) return true\n    const pendingSize = this._allConnections.size - this.connections.size\n    if (!this._queue.length && !pendingSize) return true\n    return new Promise((resolve) => {\n      this._pendingFlushes.push({\n        onflush: resolve,\n        missing: this._queue.length + pendingSize,\n        tick: this._flushTick++\n      })\n    })\n  }\n\n  async clear () {\n    const cleared = Promise.allSettled([...this._discovery.values()].map(d => d.destroy()))\n    this._discovery.clear()\n    return cleared\n  }\n\n  async destroy ({ force } = {}) {\n    if (this.destroyed && !force) return\n    this.destroyed = true\n\n    this._timer.destroy()\n\n    if (!force) await this.clear()\n\n    await this.server.close()\n\n    while (this._pendingFlushes.length) {\n      const flush = this._pendingFlushes.pop()\n      flush.onflush(false)\n    }\n\n    await this.dht.destroy({ force })\n  }\n\n  async suspend () {\n    if (this.suspended) return\n\n    const promises = []\n\n    promises.push(this.server.suspend())\n\n    for (const discovery of this._discovery.values()) {\n      promises.push(discovery.suspend())\n    }\n\n    for (const connection of this._allConnections) {\n      connection.destroy()\n    }\n\n    this.suspended = true\n\n    await Promise.allSettled(promises)\n    await this.dht.suspend()\n  }\n\n  async resume () {\n    if (!this.suspended) return\n\n    await this.dht.resume()\n    await this.server.resume()\n\n    for (const discovery of this._discovery.values()) {\n      discovery.resume()\n    }\n\n    this._attemptClientConnections()\n    this.suspended = false\n  }\n\n  topics () {\n    return this._discovery.values()\n  }\n}\n\nfunction noop () { }\n\nfunction allowAll () {\n  return false\n}\n\nfunction shouldForceRelaying (code) {\n  return (code === 'HOLEPUNCH_ABORTED') ||\n    (code === 'HOLEPUNCH_DOUBLE_RANDOMIZED_NATS') ||\n    (code === 'REMOTE_NOT_HOLEPUNCHABLE')\n}\nmodule.exports = class BulkTimer {\n  constructor (time, fn) {\n    this._time = time\n    this._fn = fn\n    this._interval = null\n    this._next = []\n    this._pending = []\n    this._destroyed = false\n  }\n\n  destroy () {\n    if (this._destroyed) return\n    this._destroyed = true\n    clearInterval(this._interval)\n    this._interval = null\n  }\n\n  _ontick () {\n    if (!this._next.length && !this._pending.length) return\n    if (this._next.length) this._fn(this._next)\n    this._next = this._pending\n    this._pending = []\n  }\n\n  add (info) {\n    if (this._destroyed) return\n    if (!this._interval) {\n      this._interval = setInterval(this._ontick.bind(this), Math.floor(this._time * 0.66))\n    }\n\n    this._pending.push(info)\n  }\n}\nconst b4a = require('b4a')\n\nmodule.exports = class ConnectionSet {\n  constructor () {\n    this._byPublicKey = new Map()\n  }\n\n  [Symbol.iterator] () {\n    return this._byPublicKey.values()\n  }\n\n  get size () {\n    return this._byPublicKey.size\n  }\n\n  has (publicKey) {\n    return this._byPublicKey.has(b4a.toString(publicKey, 'hex'))\n  }\n\n  get (publicKey) {\n    return this._byPublicKey.get(b4a.toString(publicKey, 'hex'))\n  }\n\n  add (connection) {\n    this._byPublicKey.set(b4a.toString(connection.remotePublicKey, 'hex'), connection)\n  }\n\n  delete (connection) {\n    const keyString = b4a.toString(connection.remotePublicKey, 'hex')\n    const existing = this._byPublicKey.get(keyString)\n    if (existing !== connection) return\n    this._byPublicKey.delete(keyString)\n  }\n}\nconst safetyCatch = require('safety-catch')\nconst b4a = require('b4a')\n\nconst REFRESH_INTERVAL = 1000 * 60 * 10 // 10 min\nconst RANDOM_JITTER = 1000 * 60 * 2 // 2 min\nconst DELAY_GRACE_PERIOD = 1000 * 30 // 30s\n\nmodule.exports = class PeerDiscovery {\n  constructor (swarm, topic, { wait = null, suspended = false, onpeer = noop, onerror = safetyCatch }) {\n    this.swarm = swarm\n    this.topic = topic\n    this.isClient = false\n    this.isServer = false\n    this.destroyed = false\n    this.destroying = null\n    this.suspended = suspended\n\n    this._sessions = []\n    this._clientSessions = 0\n    this._serverSessions = 0\n\n    this._onpeer = onpeer\n    this._onerror = onerror\n\n    this._activeQuery = null\n    this._timer = null\n    this._currentRefresh = null\n    this._closestNodes = null\n    this._firstAnnounce = true\n    this._needsUnannounce = false\n    this._refreshes = 0\n    this._wait = wait\n  }\n\n  session ({ server = true, client = true, onerror = safetyCatch }) {\n    if (this.destroyed) throw new Error('PeerDiscovery is destroyed')\n    const session = new PeerDiscoverySession(this)\n    session.refresh({ server, client }).catch(onerror)\n    this._sessions.push(session)\n    return session\n  }\n\n  _refreshLater (eager) {\n    const jitter = Math.round(Math.random() * RANDOM_JITTER)\n    const delay = !eager\n      ? REFRESH_INTERVAL + jitter\n      : jitter\n\n    if (this._timer) clearTimeout(this._timer)\n\n    const startTime = Date.now()\n    this._timer = setTimeout(() => {\n      // If your laptop went to sleep, and is coming back online...\n      const overdue = Date.now() - startTime > delay + DELAY_GRACE_PERIOD\n      if (overdue) this._refreshLater(true)\n      else this.refresh().catch(this._onerror)\n    }, delay)\n  }\n\n  _isActive () {\n    return !this.destroyed && !this.suspended\n  }\n\n  // TODO: Allow announce to be an argument to this\n  // TODO: Maybe announce should be a setter?\n  async _refresh () {\n    if (this.suspended) return\n    const clock = ++this._refreshes\n\n    if (this._wait) {\n      await this._wait\n      this._wait = null\n      if (clock !== this._refreshes || !this._isActive()) return\n    }\n\n    const clear = this.isServer && this._firstAnnounce\n    if (clear) this._firstAnnounce = false\n\n    const opts = {\n      clear,\n      closestNodes: this._closestNodes\n    }\n\n    if (this.isServer) {\n      await this.swarm.listen()\n      // if a parallel refresh is happening, yield to the new one\n      if (clock !== this._refreshes || !this._isActive()) return\n      this._needsUnannounce = true\n    }\n\n    const announcing = this.isServer\n    const query = this._activeQuery = announcing\n      ? this.swarm.dht.announce(this.topic, this.swarm.keyPair, this.swarm.server.relayAddresses, opts)\n      : this._needsUnannounce\n        ? this.swarm.dht.lookupAndUnannounce(this.topic, this.swarm.keyPair, opts)\n        : this.swarm.dht.lookup(this.topic, opts)\n\n    try {\n      for await (const data of this._activeQuery) {\n        if (!this.isClient || !this._isActive()) continue\n        for (const peer of data.peers) {\n          this._onpeer(peer, data)\n        }\n      }\n    } catch (err) {\n      if (this._isActive()) throw err\n    } finally {\n      if (this._activeQuery === query) {\n        this._activeQuery = null\n        if (!this.destroyed && !this.suspended) this._refreshLater(false)\n      }\n    }\n\n    // This is set at the very end, when the query completes successfully.\n    this._closestNodes = query.closestNodes\n\n    if (clock !== this._refreshes) return\n\n    // In this is the latest query, unannounce has been fulfilled as well\n    if (!announcing) this._needsUnannounce = false\n  }\n\n  async refresh () {\n    if (this.destroyed) throw new Error('PeerDiscovery is destroyed')\n\n    const server = this._serverSessions > 0\n    const client = this._clientSessions > 0\n\n    if (this.suspended) return\n\n    if (server === this.isServer && client === this.isClient) {\n      if (this._currentRefresh) return this._currentRefresh\n      this._currentRefresh = this._refresh()\n    } else {\n      if (this._activeQuery) this._activeQuery.destroy()\n      this.isServer = server\n      this.isClient = client\n      this._currentRefresh = this._refresh()\n    }\n\n    const refresh = this._currentRefresh\n    try {\n      await refresh\n    } finally {\n      if (refresh === this._currentRefresh) {\n        this._currentRefresh = null\n      }\n    }\n  }\n\n  async flushed () {\n    if (this.swarm.listening) await this.swarm.listening\n\n    try {\n      await this._currentRefresh\n      return true\n    } catch {\n      return false\n    }\n  }\n\n  async _destroyMaybe () {\n    if (this.destroyed) return\n\n    try {\n      if (this._sessions.length === 0) await this.swarm.leave(this.topic)\n      else if (this._serverSessions === 0 && this._needsUnannounce) await this.refresh()\n    } catch (err) { // ignore network failures here, as we are tearing down\n      safetyCatch(err)\n    }\n  }\n\n  destroy () {\n    if (this.destroying) return this.destroying\n    this.destroying = this._destroy()\n    return this.destroying\n  }\n\n  async _abort () {\n    if (this._wait) await this._wait\n\n    if (this._activeQuery) {\n      this._activeQuery.destroy()\n      this._activeQuery = null\n    }\n    if (this._timer) {\n      clearTimeout(this._timer)\n      this._timer = null\n    }\n\n    let nodes = this._closestNodes\n\n    if (this._currentRefresh) {\n      try {\n        await this._currentRefresh\n      } catch {\n        // If the destroy causes the refresh to fail, suppress it.\n      }\n    }\n\n    if (this._isActive()) return\n\n    if (!nodes) nodes = this._closestNodes\n    else if (this._closestNodes !== nodes) {\n      const len = nodes.length\n      for (const newer of this._closestNodes) {\n        if (newer.id && !hasNode(nodes, len, newer)) nodes.push(newer)\n      }\n    }\n\n    if (this._needsUnannounce) {\n      if (nodes && nodes.length) await this.swarm.dht.unannounce(this.topic, this.swarm.keyPair, { closestNodes: nodes, onlyClosestNodes: true })\n      this._needsUnannounce = false\n    }\n  }\n\n  _destroy () {\n    if (this.destroyed) return\n    this.destroyed = true\n    return this._abort()\n  }\n\n  async suspend () {\n    if (this.suspended) return\n    this.suspended = true\n    return this._abort()\n  }\n\n  resume () {\n    if (!this.suspended) return\n    this.suspended = false\n    this.refresh().catch(noop)\n  }\n}\n\nclass PeerDiscoverySession {\n  constructor (discovery) {\n    this.discovery = discovery\n    this.isClient = false\n    this.isServer = false\n    this.destroyed = false\n  }\n\n  get swarm () {\n    return this.discovery.swarm\n  }\n\n  get topic () {\n    return this.discovery.topic\n  }\n\n  async refresh ({ client = this.isClient, server = this.isServer } = {}) {\n    if (this.destroyed) throw new Error('PeerDiscovery is destroyed')\n    if (!client && !server) throw new Error('Cannot refresh with neither client nor server option')\n\n    if (client !== this.isClient) {\n      this.isClient = client\n      this.discovery._clientSessions += client ? 1 : -1\n    }\n\n    if (server !== this.isServer) {\n      this.isServer = server\n      this.discovery._serverSessions += server ? 1 : -1\n    }\n\n    return this.discovery.refresh()\n  }\n\n  async flushed () {\n    return this.discovery.flushed()\n  }\n\n  async destroy () {\n    if (this.destroyed) return\n    this.destroyed = true\n\n    if (this.isClient) this.discovery._clientSessions--\n    if (this.isServer) this.discovery._serverSessions--\n\n    const index = this.discovery._sessions.indexOf(this)\n    const head = this.discovery._sessions.pop()\n\n    if (head !== this) this.discovery._sessions[index] = head\n\n    return this.discovery._destroyMaybe()\n  }\n}\n\nfunction hasNode (nodes, len, node) {\n  for (let i = 0; i < len; i++) {\n    const existing = nodes[i]\n    if (existing.id && b4a.equals(existing.id, node.id)) return true\n  }\n\n  return false\n}\n\nfunction noop () {}\nconst { EventEmitter } = require('events')\nconst b4a = require('b4a')\nconst unslab = require('unslab')\n\nconst MIN_CONNECTION_TIME = 15000\n\nconst VERY_LOW_PRIORITY = 0\nconst LOW_PRIORITY = 1\nconst NORMAL_PRIORITY = 2\nconst HIGH_PRIORITY = 3\nconst VERY_HIGH_PRIORITY = 4\n\nmodule.exports = class PeerInfo extends EventEmitter {\n  constructor ({ publicKey, relayAddresses }) {\n    super()\n\n    this.publicKey = unslab(publicKey)\n    this.relayAddresses = relayAddresses\n\n    this.reconnecting = true\n    this.proven = false\n    this.connectedTime = -1\n    this.banned = false\n    this.tried = false\n    this.explicit = false\n    this.waiting = false\n    this.forceRelaying = false\n\n    // Set by the Swarm\n    this.queued = false\n    this.client = false\n    this.topics = [] // TODO: remove on next major (check with mafintosh for context)\n\n    this.attempts = 0\n    this.priority = NORMAL_PRIORITY\n\n    // Used by shuffled-priority-queue\n    this._index = 0\n\n    // Used for flush management\n    this._flushTick = 0\n\n    // Used for topic multiplexing\n    this._seenTopics = new Set()\n  }\n\n  get server () {\n    return !this.client\n  }\n\n  get prioritized () {\n    return this.priority >= NORMAL_PRIORITY\n  }\n\n  _getPriority () {\n    const peerIsStale = this.tried && !this.proven\n    if (peerIsStale || this.attempts > 3) return VERY_LOW_PRIORITY\n    if (this.attempts === 3) return LOW_PRIORITY\n    if (this.attempts === 2) return HIGH_PRIORITY\n    if (this.attempts === 1) return VERY_HIGH_PRIORITY\n    return NORMAL_PRIORITY\n  }\n\n  _connected () {\n    this.proven = true\n    this.connectedTime = Date.now()\n  }\n\n  _disconnected () {\n    if (this.connectedTime > -1) {\n      if ((Date.now() - this.connectedTime) >= MIN_CONNECTION_TIME) this.attempts = 0 // fast retry\n      this.connectedTime = -1\n    }\n    this.attempts++\n  }\n\n  _deprioritize () {\n    this.attempts = 3\n  }\n\n  _reset () {\n    this.client = false\n    this.proven = false\n    this.tried = false\n    this.attempts = 0\n  }\n\n  _updatePriority () {\n    if (this.explicit && this.attempts > 3) this._deprioritize()\n    if (this.banned || this.queued || this.attempts > 3) return false\n    this.priority = this._getPriority()\n    return true\n  }\n\n  _topic (topic) {\n    const topicString = b4a.toString(topic, 'hex')\n    if (this._seenTopics.has(topicString)) return\n    this._seenTopics.add(topicString)\n    this.topics.push(topic)\n    this.emit('topic', topic)\n  }\n\n  reconnect (val) {\n    this.reconnecting = !!val\n  }\n\n  ban (val) {\n    this.banned = !!val\n  }\n\n  shouldGC () {\n    return !(this.banned || this.queued || this.explicit || this.waiting)\n  }\n}\nconst BulkTimer = require('./bulk-timer')\n\nconst BACKOFF_JITTER = 500\nconst BACKOFF_S = 1000 + Math.round(BACKOFF_JITTER * Math.random())\nconst BACKOFF_M = 5000 + Math.round(2 * BACKOFF_JITTER * Math.random())\nconst BACKOFF_L = 15000 + Math.round(4 * BACKOFF_JITTER * Math.random())\nconst BACKOFF_X = 1000 * 60 * 10 + Math.round(240 * BACKOFF_JITTER * Math.random())\n\nmodule.exports = class RetryTimer {\n  constructor (push, { backoffs = [BACKOFF_S, BACKOFF_M, BACKOFF_L, BACKOFF_X], jitter = BACKOFF_JITTER } = {}) {\n    this.jitter = jitter\n    this.backoffs = backoffs\n\n    this._sTimer = new BulkTimer(backoffs[0] + Math.round(jitter * Math.random()), push)\n    this._mTimer = new BulkTimer(backoffs[1] + Math.round(jitter * Math.random()), push)\n    this._lTimer = new BulkTimer(backoffs[2] + Math.round(jitter * Math.random()), push)\n    this._xTimer = new BulkTimer(backoffs[3] + Math.round(jitter * Math.random()), push)\n  }\n\n  _selectRetryTimer (peerInfo) {\n    if (peerInfo.banned || !peerInfo.reconnecting) return null\n\n    if (peerInfo.attempts > 3) {\n      return peerInfo.explicit ? this._xTimer : null\n    }\n\n    if (peerInfo.attempts === 0) return this._sTimer\n    if (peerInfo.proven) {\n      switch (peerInfo.attempts) {\n        case 1: return this._sTimer\n        case 2: return this._mTimer\n        case 3: return this._lTimer\n      }\n    } else {\n      switch (peerInfo.attempts) {\n        case 1: return this._mTimer\n        case 2: return this._lTimer\n        case 3: return this._lTimer\n      }\n    }\n\n    return null\n  }\n\n  add (peerInfo) {\n    const timer = this._selectRetryTimer(peerInfo)\n    if (!timer) return false\n\n    timer.add(peerInfo)\n    return true\n  }\n\n  destroy () {\n    this._sTimer.destroy()\n    this._mTimer.destroy()\n    this._lTimer.destroy()\n    this._xTimer.destroy()\n  }\n}\n{\n  \"name\": \"hyperswarm\",\n  \"version\": \"4.8.4\",\n  \"description\": \"A distributed networking stack for connecting peers\",\n  \"files\": [\n    \"index.js\",\n    \"lib/**.js\"\n  ],\n  \"imports\": {\n    \"events\": {\n      \"bare\": \"bare-events\",\n      \"default\": \"events\"\n    }\n  },\n  \"dependencies\": {\n    \"b4a\": \"^1.3.1\",\n    \"bare-events\": \"^2.2.0\",\n    \"hyperdht\": \"^6.11.0\",\n    \"safety-catch\": \"^1.0.2\",\n    \"shuffled-priority-queue\": \"^2.1.0\",\n    \"unslab\": \"^1.3.0\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^3.0.2\",\n    \"hypercore-crypto\": \"^3.4.0\",\n    \"standard\": \"^17.0.0\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && node test/all.js\",\n    \"test:generate\": \"brittle -r test/all.js test/*.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/holepunchto/hyperswarm.git\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"contributors\": [\n    \"David Mark Clements (@davidmarkclem)\",\n    \"Andrew Osheroff (@andrewosh)\"\n  ],\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/hyperswarm/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/hyperswarm\"\n}\nconst objectState = new Map()\nconst traceFunctionSymbol = Symbol.for('hypertrace.traceFunction')\n\nclass Hypertrace {\n  constructor (ctx, opts = { }) {\n    if (!ctx) throw new Error('Context required, see hypertrace documentation')\n\n    const { parent, props } = opts\n    this.enabled = true\n    this.ctx = ctx\n    this.className = ctx.constructor.name\n    this.props = props || null\n    this.parentObject = !parent\n      ? null\n      : {\n          className: parent.className,\n          id: parent.objectId,\n          props: { ...parent.props },\n          ctx: parent.ctx\n        }\n\n    const currentObjectState = objectState.get(ctx.constructor) || { id: 0, stacktraceCache: new Map() }\n    currentObjectState.id += 1\n    this.objectId = currentObjectState.id\n    objectState.set(ctx.constructor, currentObjectState)\n  }\n\n  setParent (parentTracer) {\n    this.parentObject = !parentTracer\n      ? null\n      : {\n          className: parentTracer.className,\n          id: parentTracer.objectId,\n          props: { ...parentTracer.props },\n          ctx: parentTracer.ctx\n        }\n  }\n\n  trace (id, props) {\n    const traceFunction = globalThis[traceFunctionSymbol]\n    const shouldTrace = traceFunction\n    if (!shouldTrace) return\n\n    const hasTraceIdInArgs = typeof id === 'string'\n    if (!hasTraceIdInArgs) {\n      props = id\n      id = null\n    }\n\n    const currentObjectState = objectState.get(this.ctx.constructor)\n    let stack = id && currentObjectState.stacktraceCache.get(id)\n    const hasCachedStacktrace = !!stack\n    if (!hasCachedStacktrace) {\n      const errorToGetContext = new Error()\n      stack = errorToGetContext.stack\n      currentObjectState.stacktraceCache.set(id, stack)\n    }\n\n    const callLine = stack.split('\\n')[2]\n    const re = /.*at (.+) \\((?:file:\\/:\\/)?(.+):(\\d+):(\\d+)\\)/\n    const [, functionName, filename, line, column] = callLine.match(re)\n\n    const realFunctionName = functionName.split('.')[0] === this.className // Turn SomeModule.foobar => foobar\n      ? functionName.substr(functionName.indexOf('.') + 1)\n      : functionName\n\n    const object = {\n      className: this.className,\n      id: this.objectId,\n      props: this.props && { ...this.props },\n      ctx: this.ctx\n    }\n    const caller = {\n      functionName: realFunctionName,\n      filename,\n      line: Number(line),\n      column: Number(column),\n      props: props && { ...props }\n    }\n\n    traceFunction({\n      id: id || null,\n      object,\n      parentObject: this.parentObject,\n      caller\n    })\n  }\n}\n\nclass NoTracingClass {\n  constructor () {\n    this.enabled = false\n    this.ctx = null\n    this.className = null\n    this.props = null\n    this.parentObject = null\n    this.objectId = null\n  }\n\n  trace () { /* noop */ }\n\n  setParent () { /* noop */ }\n}\n\nconst noTracing = new NoTracingClass()\n\nmodule.exports = {\n  setTraceFunction: fn => {\n    globalThis[traceFunctionSymbol] = fn\n  },\n  clearTraceFunction: () => {\n    globalThis[traceFunctionSymbol] = undefined\n  },\n  createTracer: (ctx, opts) => {\n    // If the trace function is not set, then the returned class cannot trace.\n    // This is done for speed.\n    const isTracing = !!globalThis[traceFunctionSymbol]\n    if (!isTracing) return noTracing\n    return new Hypertrace(ctx, opts)\n  }\n}\n{\n  \"name\": \"hypertrace\",\n  \"version\": \"1.4.2\",\n  \"description\": \"Add tracing and insights to classes. Supports Prometheus/Grafana.\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"standard && node --expose-gc test/test.js\"\n  },\n  \"keywords\": [],\n  \"author\": \"Holepunch Inc\",\n  \"license\": \"Apache-2.0\",\n  \"devDependencies\": {\n    \"brittle\": \"^3.3.2\",\n    \"standard\": \"^17.1.0\"\n  }\n}\nconst b4a = require('b4a')\n\nmodule.exports = function isOptions (opts) {\n  return typeof opts === 'object' && opts && !b4a.isBuffer(opts)\n}\n{\n  \"name\": \"is-options\",\n  \"version\": \"1.0.2\",\n  \"description\": \"Easily check if input is an options map\",\n  \"main\": \"index.js\",\n  \"dependencies\": {\n    \"b4a\": \"^1.1.1\"\n  },\n  \"devDependencies\": {\n    \"standard\": \"^11.0.1\",\n    \"tape\": \"^4.9.0\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && tape test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mafintosh/is-options.git\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mafintosh/is-options/issues\"\n  },\n  \"homepage\": \"https://github.com/mafintosh/is-options\"\n}\nconst { EventEmitter } = require('events')\n\nmodule.exports = class RoutingTable extends EventEmitter {\n  constructor (id, opts) {\n    if (!opts) opts = {}\n\n    super()\n\n    this.id = id\n    this.k = opts.k || 20\n    this.size = 0\n    this.rows = new Array(id.length * 8)\n  }\n\n  add (node) {\n    const i = this._diff(node.id)\n\n    let row = this.rows[i]\n\n    if (!row) {\n      row = this.rows[i] = new Row(this, i)\n      this.emit('row', row)\n    }\n\n    const len = row.nodes.length\n    if (!row.add(node, this.k)) return false\n\n    this.size += row.nodes.length - len\n    return true\n  }\n\n  remove (id) {\n    const i = this._diff(id)\n    const row = this.rows[i]\n    if (!row) return false\n    if (!row.remove(id)) return false\n    this.size--\n    return true\n  }\n\n  get (id) {\n    const i = this._diff(id)\n    const row = this.rows[i]\n    if (!row) return null\n    return row.get(id)\n  }\n\n  has (id) {\n    return this.get(id) !== null\n  }\n\n  random () {\n    let n = (Math.random() * this.size) | 0\n\n    for (let i = 0; i < this.rows.length; i++) {\n      const r = this.rows[i]\n      if (!r) continue\n      if (n < r.nodes.length) return r.nodes[n]\n      n -= r.nodes.length\n    }\n\n    return null\n  }\n\n  closest (id, k) {\n    if (!k) k = this.k\n\n    const result = []\n    const d = this._diff(id)\n\n    // push close nodes\n    for (let i = d; i >= 0 && result.length < k; i--) this._pushNodes(i, k, result)\n\n    // if we don't have enough close nodes, populate from other rows, re the paper\n    for (let i = d + 1; i < this.rows.length && result.length < k; i++) this._pushNodes(i, k, result)\n\n    return result\n  }\n\n  _pushNodes (i, k, result) {\n    const row = this.rows[i]\n    if (!row) return\n\n    const missing = Math.min(k - result.length, row.nodes.length)\n    for (let j = 0; j < missing; j++) result.push(row.nodes[j])\n  }\n\n  toArray () {\n    return this.closest(this.id, Infinity)\n  }\n\n  _diff (id) {\n    for (let i = 0; i < id.length; i++) {\n      const a = id[i]\n      const b = this.id[i]\n\n      if (a !== b) return i * 8 + Math.clz32(a ^ b) - 24\n    }\n\n    return this.rows.length - 1\n  }\n}\n\nclass Row extends EventEmitter {\n  constructor (table, index) {\n    super()\n\n    this.data = null // can be used be upstream for whatevs\n    this.byteOffset = index >> 3\n    this.index = index\n    this.table = table\n    this.nodes = []\n  }\n\n  add (node) {\n    const id = node.id\n\n    let l = 0\n    let r = this.nodes.length - 1\n\n    while (l <= r) {\n      const m = (l + r) >> 1\n      const c = this.compare(id, this.nodes[m].id)\n\n      if (c === 0) {\n        this.nodes[m] = node\n        return true\n      }\n\n      if (c < 0) r = m - 1\n      else l = m + 1\n    }\n\n    if (this.nodes.length >= this.table.k) {\n      this.emit('full', node)\n      return false\n    }\n\n    this.insert(l, node)\n    return true\n  }\n\n  remove (id) {\n    let l = 0\n    let r = this.nodes.length - 1\n\n    while (l <= r) {\n      const m = (l + r) >> 1\n      const c = this.compare(id, this.nodes[m].id)\n\n      if (c === 0) {\n        this.splice(m)\n        return true\n      }\n\n      if (c < 0) r = m - 1\n      else l = m + 1\n    }\n\n    return false\n  }\n\n  get (id) {\n    let l = 0\n    let r = this.nodes.length - 1\n\n    while (l <= r) {\n      const m = (l + r) >> 1\n      const node = this.nodes[m]\n      const c = this.compare(id, node.id)\n\n      if (c === 0) return node\n      if (c < 0) r = m - 1\n      else l = m + 1\n    }\n\n    return null\n  }\n\n  insert (i, node) {\n    this.nodes.push(node) // push node or null or whatevs, just trying to not be polymorphic\n    for (let j = this.nodes.length - 1; j > i; j--) this.nodes[j] = this.nodes[j - 1]\n    this.nodes[i] = node\n    this.emit('add', node)\n  }\n\n  splice (i) {\n    for (; i < this.nodes.length - 1; i++) this.nodes[i] = this.nodes[i + 1]\n    this.emit('remove', this.nodes.pop())\n  }\n\n  // very likely they diverge after a couple of bytes so a simple impl, like this is prop fastest vs Buffer.compare\n  compare (a, b) {\n    for (let i = this.byteOffset; i < a.length; i++) {\n      const ai = a[i]\n      const bi = b[i]\n      if (ai === bi) continue\n      return ai < bi ? -1 : 1\n    }\n    return 0\n  }\n}\n{\n  \"name\": \"kademlia-routing-table\",\n  \"version\": \"1.0.6\",\n  \"description\": \"XOR based routing table used for P2P networks such as a Kademlia DHT.\",\n  \"main\": \"index.js\",\n  \"files\": [\n    \"index.js\"\n  ],\n  \"imports\": {\n    \"events\": {\n      \"bare\": \"bare-events\",\n      \"default\": \"events\"\n    }\n  },\n  \"dependencies\": {\n    \"bare-events\": \"^2.2.0\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^3.3.2\",\n    \"standard\": \"^17.1.0\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && brittle test.js\"\n  },\n  \"keywords\": [\n    \"kademlia\",\n    \"p2p\",\n    \"k-bucket\",\n    \"k-buckets\",\n    \"xor\",\n    \"routing\",\n    \"distributed\",\n    \"systems\"\n  ],\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mafintosh/kademlia-routing-table.git\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mafintosh/kademlia-routing-table/issues\"\n  },\n  \"homepage\": \"https://github.com/mafintosh/kademlia-routing-table\"\n}\nvar queueTick = require('queue-tick')\n\nvar mutexify = function () {\n  var queue = []\n  var used = null\n\n  var call = function () {\n    used(release)\n  }\n\n  var acquire = function (fn) {\n    if (used) return queue.push(fn)\n    used = fn\n    acquire.locked = true\n    queueTick(call)\n    return 0\n  }\n\n  acquire.locked = false\n\n  var release = function (fn, err, value) {\n    used = null\n    acquire.locked = false\n    if (queue.length) acquire(queue.shift())\n    if (fn) fn(err, value)\n  }\n\n  return acquire\n}\n\nmodule.exports = mutexify\n{\n  \"name\": \"mutexify\",\n  \"version\": \"1.4.0\",\n  \"description\": \"mutex lock for javascript\",\n  \"main\": \"index.js\",\n  \"dependencies\": {\n    \"queue-tick\": \"^1.0.0\"\n  },\n  \"devDependencies\": {\n    \"standard\": \"^14.3.3\",\n    \"tape\": \"^3.0.2\"\n  },\n  \"scripts\": {\n    \"test\": \"tape test.js\",\n    \"posttest\": \"npm run lint\",\n    \"lint\": \"standard\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mafintosh/mutexify.git\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mafintosh/mutexify/issues\"\n  },\n  \"keywords\": [\n    \"mutex\",\n    \"lock\"\n  ],\n  \"homepage\": \"https://github.com/mafintosh/mutexify\"\n}\nvar mutexify = require('.')\n\nvar mutexifyPromise = function () {\n  var lock = mutexify()\n\n  var acquire = function () {\n    return new Promise(lock)\n  }\n\n  Object.defineProperty(acquire, 'locked', {\n    get: function () { return lock.locked },\n    enumerable: true\n  })\n\n  return acquire\n}\n\nmodule.exports = mutexifyPromise\nmodule.exports = assert\n\nclass AssertionError extends Error {}\nAssertionError.prototype.name = 'AssertionError'\n\n/**\n * Minimal assert function\n * @param  {any} t Value to check if falsy\n * @param  {string=} m Optional assertion error message\n * @throws {AssertionError}\n */\nfunction assert (t, m) {\n  if (!t) {\n    var err = new AssertionError(m)\n    if (Error.captureStackTrace) Error.captureStackTrace(err, assert)\n    throw err\n  }\n}\n{\n  \"name\": \"nanoassert\",\n  \"version\": \"2.0.0\",\n  \"description\": \"Nanoscale assertion module\",\n  \"main\": \"index.js\",\n  \"dependencies\": {},\n  \"devDependencies\": {\n    \"tape\": \"^4.9.1\"\n  },\n  \"scripts\": {\n    \"test\": \"tape test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/emilbayes/nanoassert.git\"\n  },\n  \"keywords\": [\n    \"assert\",\n    \"unassert\",\n    \"power-assert\",\n    \"tiny\",\n    \"nano\",\n    \"pico\"\n  ],\n  \"author\": \"Emil Bay <github@tixz.dk>\",\n  \"license\": \"ISC\",\n  \"bugs\": {\n    \"url\": \"https://github.com/emilbayes/nanoassert/issues\"\n  },\n  \"homepage\": \"https://github.com/emilbayes/nanoassert#readme\"\n}\nmodule.exports = class NatSampler {\n  constructor () {\n    this.host = null\n    this.port = 0\n    this.size = 0\n\n    this._a = null\n    this._b = null\n    this._threshold = 0\n    this._top = 0\n    this._samples = []\n  }\n\n  add (host, port) {\n    const a = this._bump(host, port, 2)\n    const b = this._bump(host, 0, 1)\n\n    if (this._samples.length < 32) {\n      this.size++\n      this._threshold = this.size - (this.size < 4 ? 0 : this.size < 8 ? 1 : this.size < 12 ? 2 : 3)\n      this._samples.push(a, b)\n      this._top += 2\n    } else {\n      if (this._top === 32) this._top = 0\n\n      const oa = this._samples[this._top]\n      this._samples[this._top++] = a\n      oa.hits--\n\n      const ob = this._samples[this._top]\n      this._samples[this._top++] = b\n      ob.hits--\n    }\n\n    if (this._a === null || this._a.hits < a.hits) this._a = a\n    if (this._b === null || this._b.hits < b.hits) this._b = b\n\n    if (this._a.hits >= this._threshold) {\n      this.host = this._a.host\n      this.port = this._a.port\n    } else if (this._b.hits >= this._threshold) {\n      this.host = this._b.host\n      this.port = 0\n    } else {\n      this.host = null\n      this.port = 0\n    }\n\n    return a.hits\n  }\n\n  _bump (host, port, inc) {\n    for (let i = 0; i < 4; i++) {\n      const j = (this._top - inc - (2 * i)) & 31\n      if (j >= this._samples.length) return { host, port, hits: 1 }\n      const s = this._samples[j]\n      if (s.port === port && s.host === host) {\n        s.hits++\n        return s\n      }\n    }\n    return { host, port, hits: 1 }\n  }\n}\n{\n  \"name\": \"nat-sampler\",\n  \"version\": \"1.0.1\",\n  \"description\": \"Sample addresses to figure out if a host + port is consistent\",\n  \"main\": \"index.js\",\n  \"dependencies\": {},\n  \"devDependencies\": {\n    \"standard\": \"^16.0.3\",\n    \"tape\": \"^5.2.2\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mafintosh/nat-sampler.git\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && tape test.js\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mafintosh/nat-sampler/issues\"\n  },\n  \"homepage\": \"https://github.com/mafintosh/nat-sampler\"\n}\nconst runtimeRequire = typeof __webpack_require__ === 'function' ? __non_webpack_require__ : require // eslint-disable-line\nif (typeof runtimeRequire.addon === 'function') { // if the platform supports native resolving prefer that\n  module.exports = runtimeRequire.addon.bind(runtimeRequire)\n} else { // else use the runtime version here\n  module.exports = require('./node-gyp-build.js')\n}\nvar fs = require('fs')\nvar path = require('path')\nvar os = require('os')\n\n// Workaround to fix webpack's build warnings: 'the request of a dependency is an expression'\nvar runtimeRequire = typeof __webpack_require__ === 'function' ? __non_webpack_require__ : require // eslint-disable-line\n\nvar vars = (process.config && process.config.variables) || {}\nvar prebuildsOnly = !!process.env.PREBUILDS_ONLY\nvar abi = process.versions.modules // TODO: support old node where this is undef\nvar runtime = isElectron() ? 'electron' : (isNwjs() ? 'node-webkit' : 'node')\n\nvar arch = process.env.npm_config_arch || os.arch()\nvar platform = process.env.npm_config_platform || os.platform()\nvar libc = process.env.LIBC || (isAlpine(platform) ? 'musl' : 'glibc')\nvar armv = process.env.ARM_VERSION || (arch === 'arm64' ? '8' : vars.arm_version) || ''\nvar uv = (process.versions.uv || '').split('.')[0]\n\nmodule.exports = load\n\nfunction load (dir) {\n  return runtimeRequire(load.resolve(dir))\n}\n\nload.resolve = load.path = function (dir) {\n  dir = path.resolve(dir || '.')\n\n  try {\n    var name = runtimeRequire(path.join(dir, 'package.json')).name.toUpperCase().replace(/-/g, '_')\n    if (process.env[name + '_PREBUILD']) dir = process.env[name + '_PREBUILD']\n  } catch (err) {}\n\n  if (!prebuildsOnly) {\n    var release = getFirst(path.join(dir, 'build/Release'), matchBuild)\n    if (release) return release\n\n    var debug = getFirst(path.join(dir, 'build/Debug'), matchBuild)\n    if (debug) return debug\n  }\n\n  var prebuild = resolve(dir)\n  if (prebuild) return prebuild\n\n  var nearby = resolve(path.dirname(process.execPath))\n  if (nearby) return nearby\n\n  var target = [\n    'platform=' + platform,\n    'arch=' + arch,\n    'runtime=' + runtime,\n    'abi=' + abi,\n    'uv=' + uv,\n    armv ? 'armv=' + armv : '',\n    'libc=' + libc,\n    'node=' + process.versions.node,\n    process.versions.electron ? 'electron=' + process.versions.electron : '',\n    typeof __webpack_require__ === 'function' ? 'webpack=true' : '' // eslint-disable-line\n  ].filter(Boolean).join(' ')\n\n  throw new Error('No native build was found for ' + target + '\\n    loaded from: ' + dir + '\\n')\n\n  function resolve (dir) {\n    // Find matching \"prebuilds/<platform>-<arch>\" directory\n    var tuples = readdirSync(path.join(dir, 'prebuilds')).map(parseTuple)\n    var tuple = tuples.filter(matchTuple(platform, arch)).sort(compareTuples)[0]\n    if (!tuple) return\n\n    // Find most specific flavor first\n    var prebuilds = path.join(dir, 'prebuilds', tuple.name)\n    var parsed = readdirSync(prebuilds).map(parseTags)\n    var candidates = parsed.filter(matchTags(runtime, abi))\n    var winner = candidates.sort(compareTags(runtime))[0]\n    if (winner) return path.join(prebuilds, winner.file)\n  }\n}\n\nfunction readdirSync (dir) {\n  try {\n    return fs.readdirSync(dir)\n  } catch (err) {\n    return []\n  }\n}\n\nfunction getFirst (dir, filter) {\n  var files = readdirSync(dir).filter(filter)\n  return files[0] && path.join(dir, files[0])\n}\n\nfunction matchBuild (name) {\n  return /\\.node$/.test(name)\n}\n\nfunction parseTuple (name) {\n  // Example: darwin-x64+arm64\n  var arr = name.split('-')\n  if (arr.length !== 2) return\n\n  var platform = arr[0]\n  var architectures = arr[1].split('+')\n\n  if (!platform) return\n  if (!architectures.length) return\n  if (!architectures.every(Boolean)) return\n\n  return { name, platform, architectures }\n}\n\nfunction matchTuple (platform, arch) {\n  return function (tuple) {\n    if (tuple == null) return false\n    if (tuple.platform !== platform) return false\n    return tuple.architectures.includes(arch)\n  }\n}\n\nfunction compareTuples (a, b) {\n  // Prefer single-arch prebuilds over multi-arch\n  return a.architectures.length - b.architectures.length\n}\n\nfunction parseTags (file) {\n  var arr = file.split('.')\n  var extension = arr.pop()\n  var tags = { file: file, specificity: 0 }\n\n  if (extension !== 'node') return\n\n  for (var i = 0; i < arr.length; i++) {\n    var tag = arr[i]\n\n    if (tag === 'node' || tag === 'electron' || tag === 'node-webkit') {\n      tags.runtime = tag\n    } else if (tag === 'napi') {\n      tags.napi = true\n    } else if (tag.slice(0, 3) === 'abi') {\n      tags.abi = tag.slice(3)\n    } else if (tag.slice(0, 2) === 'uv') {\n      tags.uv = tag.slice(2)\n    } else if (tag.slice(0, 4) === 'armv') {\n      tags.armv = tag.slice(4)\n    } else if (tag === 'glibc' || tag === 'musl') {\n      tags.libc = tag\n    } else {\n      continue\n    }\n\n    tags.specificity++\n  }\n\n  return tags\n}\n\nfunction matchTags (runtime, abi) {\n  return function (tags) {\n    if (tags == null) return false\n    if (tags.runtime && tags.runtime !== runtime && !runtimeAgnostic(tags)) return false\n    if (tags.abi && tags.abi !== abi && !tags.napi) return false\n    if (tags.uv && tags.uv !== uv) return false\n    if (tags.armv && tags.armv !== armv) return false\n    if (tags.libc && tags.libc !== libc) return false\n\n    return true\n  }\n}\n\nfunction runtimeAgnostic (tags) {\n  return tags.runtime === 'node' && tags.napi\n}\n\nfunction compareTags (runtime) {\n  // Precedence: non-agnostic runtime, abi over napi, then by specificity.\n  return function (a, b) {\n    if (a.runtime !== b.runtime) {\n      return a.runtime === runtime ? -1 : 1\n    } else if (a.abi !== b.abi) {\n      return a.abi ? -1 : 1\n    } else if (a.specificity !== b.specificity) {\n      return a.specificity > b.specificity ? -1 : 1\n    } else {\n      return 0\n    }\n  }\n}\n\nfunction isNwjs () {\n  return !!(process.versions && process.versions.nw)\n}\n\nfunction isElectron () {\n  if (process.versions && process.versions.electron) return true\n  if (process.env.ELECTRON_RUN_AS_NODE) return true\n  return typeof window !== 'undefined' && window.process && window.process.type === 'renderer'\n}\n\nfunction isAlpine (platform) {\n  return platform === 'linux' && fs.existsSync('/etc/alpine-release')\n}\n\n// Exposed for unit tests\n// TODO: move to lib\nload.parseTags = parseTags\nload.matchTags = matchTags\nload.compareTags = compareTags\nload.parseTuple = parseTuple\nload.matchTuple = matchTuple\nload.compareTuples = compareTuples\n{\n  \"name\": \"node-gyp-build\",\n  \"version\": \"4.8.4\",\n  \"description\": \"Build tool and bindings loader for node-gyp that supports prebuilds\",\n  \"main\": \"index.js\",\n  \"imports\": {\n    \"fs\": {\n      \"bare\": \"builtin:fs\",\n      \"default\": \"fs\"\n    },\n    \"path\": {\n      \"bare\": \"builtin:path\",\n      \"default\": \"path\"\n    },\n    \"os\": {\n      \"bare\": \"builtin:os\",\n      \"default\": \"os\"\n    }\n  },\n  \"devDependencies\": {\n    \"array-shuffle\": \"^1.0.1\",\n    \"standard\": \"^14.0.0\",\n    \"tape\": \"^5.0.0\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && node test\"\n  },\n  \"bin\": {\n    \"node-gyp-build\": \"./bin.js\",\n    \"node-gyp-build-optional\": \"./optional.js\",\n    \"node-gyp-build-test\": \"./build-test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/prebuild/node-gyp-build.git\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/prebuild/node-gyp-build/issues\"\n  },\n  \"homepage\": \"https://github.com/prebuild/node-gyp-build\"\n}\n/* eslint-disable camelcase */\nconst sodium = require('sodium-universal')\nconst assert = require('nanoassert')\nconst b4a = require('b4a')\n\nconst DHLEN = sodium.crypto_scalarmult_ed25519_BYTES\nconst PKLEN = sodium.crypto_scalarmult_ed25519_BYTES\nconst SCALARLEN = sodium.crypto_scalarmult_ed25519_BYTES\nconst SKLEN = sodium.crypto_sign_SECRETKEYBYTES\nconst ALG = 'Ed25519'\n\nmodule.exports = {\n  DHLEN,\n  PKLEN,\n  SCALARLEN,\n  SKLEN,\n  ALG,\n  name: ALG,\n  generateKeyPair,\n  dh\n}\n\nfunction generateKeyPair (privKey) {\n  if (privKey) return generateSeedKeyPair(privKey.subarray(0, 32))\n\n  const keyPair = {}\n  keyPair.secretKey = b4a.alloc(SKLEN)\n  keyPair.publicKey = b4a.alloc(PKLEN)\n\n  sodium.crypto_sign_keypair(keyPair.publicKey, keyPair.secretKey)\n  return keyPair\n}\n\nfunction generateSeedKeyPair (seed) {\n  const keyPair = {}\n  keyPair.secretKey = b4a.alloc(SKLEN)\n  keyPair.publicKey = b4a.alloc(PKLEN)\n\n  sodium.crypto_sign_seed_keypair(keyPair.publicKey, keyPair.secretKey, seed)\n  return keyPair\n}\n\nfunction dh (publicKey, { scalar, secretKey }) {\n  // tweaked keys expose scalar directly\n  if (!scalar) {\n    assert(secretKey.byteLength === SKLEN)\n\n    // libsodium stores seed not actual scalar\n    const sk = b4a.alloc(64)\n    sodium.crypto_hash_sha512(sk, secretKey.subarray(0, 32))\n    sk[0] &= 248\n    sk[31] &= 127\n    sk[31] |= 64\n\n    scalar = sk.subarray(0, 32)\n  }\n\n  assert(scalar.byteLength === SCALARLEN)\n  assert(publicKey.byteLength === PKLEN)\n\n  const output = b4a.alloc(DHLEN)\n\n  // we clamp if necessary above\n  sodium.crypto_scalarmult_ed25519_noclamp(\n    output,\n    scalar,\n    publicKey\n  )\n\n  return output\n}\n{\n  \"name\": \"noise-curve-ed\",\n  \"version\": \"2.0.1\",\n  \"description\": \"Ed25519 elliptic curve operations for [`noise-handshake`](https://github.com/chm-diederichs/noise-handshake)\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"npx standard && tape test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/chm-diederichs/noise-curve-ed.git\"\n  },\n  \"keywords\": [],\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"bugs\": {\n    \"url\": \"https://github.com/chm-diederichs/noise-curve-ed/issues\"\n  },\n  \"homepage\": \"https://github.com/chm-diederichs/noise-curve-ed#readme\",\n  \"dependencies\": {\n    \"b4a\": \"^1.1.0\",\n    \"nanoassert\": \"^2.0.0\",\n    \"sodium-universal\": \"^4.0.0\"\n  },\n  \"devDependencies\": {\n    \"hypercore-crypto-tweak\": \"github:holepunchto/hypercore-crypto-tweak\",\n    \"noise-handshake\": \"^3.0.0\",\n    \"standard\": \"^16.0.3\",\n    \"tape\": \"^5.2.2\"\n  }\n}\nconst sodium = require('sodium-universal')\nconst b4a = require('b4a')\n\nmodule.exports = class CipherState {\n  constructor (key) {\n    this.key = key || null\n    this.nonce = 0\n    this.CIPHER_ALG = 'ChaChaPoly'\n  }\n\n  initialiseKey (key) {\n    this.key = key\n    this.nonce = 0\n  }\n\n  setNonce (nonce) {\n    this.nonce = nonce\n  }\n\n  encrypt (plaintext, ad) {\n    if (!this.hasKey) return plaintext\n    if (!ad) ad = b4a.alloc(0)\n\n    const ciphertext = encryptWithAD(this.key, this.nonce, ad, plaintext)\n    this.nonce++\n\n    return ciphertext\n  }\n\n  decrypt (ciphertext, ad) {\n    if (!this.hasKey) return ciphertext\n    if (!ad) ad = b4a.alloc(0)\n\n    const plaintext = decryptWithAD(this.key, this.nonce, ad, ciphertext)\n    this.nonce++\n\n    return plaintext\n  }\n\n  get hasKey () {\n    return this.key !== null\n  }\n\n  _clear () {\n    sodium.sodium_memzero(this.key)\n    this.key = null\n    this.nonce = null\n  }\n\n  static get MACBYTES () {\n    return 16\n  }\n\n  static get NONCEBYTES () {\n    return 8\n  }\n\n  static get KEYBYTES () {\n    return 32\n  }\n}\n\nfunction encryptWithAD (key, counter, additionalData, plaintext) {\n  // for our purposes, additionalData will always be a pubkey so we encode from hex\n  if (!b4a.isBuffer(additionalData)) additionalData = b4a.from(additionalData, 'hex')\n  if (!b4a.isBuffer(plaintext)) plaintext = b4a.from(plaintext, 'hex')\n\n  const nonce = b4a.alloc(sodium.crypto_aead_chacha20poly1305_ietf_NPUBBYTES)\n  const view = new DataView(nonce.buffer, nonce.byteOffset, nonce.byteLength)\n  view.setUint32(4, counter, true)\n\n  const ciphertext = b4a.alloc(plaintext.byteLength + sodium.crypto_aead_chacha20poly1305_ietf_ABYTES)\n\n  sodium.crypto_aead_chacha20poly1305_ietf_encrypt(ciphertext, plaintext, additionalData, null, nonce, key)\n  return ciphertext\n}\n\nfunction decryptWithAD (key, counter, additionalData, ciphertext) {\n  // for our purposes, additionalData will always be a pubkey so we encode from hex\n  if (!b4a.isBuffer(additionalData)) additionalData = b4a.from(additionalData, 'hex')\n  if (!b4a.isBuffer(ciphertext)) ciphertext = b4a.from(ciphertext, 'hex')\n\n  const nonce = b4a.alloc(sodium.crypto_aead_chacha20poly1305_ietf_NPUBBYTES)\n  const view = new DataView(nonce.buffer, nonce.byteOffset, nonce.byteLength)\n  view.setUint32(4, counter, true)\n\n  const plaintext = b4a.alloc(ciphertext.byteLength - sodium.crypto_aead_chacha20poly1305_ietf_ABYTES)\n\n  sodium.crypto_aead_chacha20poly1305_ietf_decrypt(plaintext, null, ciphertext, additionalData, nonce, key)\n  return plaintext\n}\n/* eslint-disable camelcase */\nconst {\n  crypto_kx_SEEDBYTES,\n  crypto_kx_keypair,\n  crypto_kx_seed_keypair,\n  crypto_scalarmult_BYTES,\n  crypto_scalarmult_SCALARBYTES,\n  crypto_scalarmult,\n  crypto_scalarmult_base\n} = require('sodium-universal')\n\nconst assert = require('nanoassert')\nconst b4a = require('b4a')\n\nconst DHLEN = crypto_scalarmult_BYTES\nconst PKLEN = crypto_scalarmult_BYTES\nconst SKLEN = crypto_scalarmult_SCALARBYTES\nconst SEEDLEN = crypto_kx_SEEDBYTES\nconst ALG = '25519'\n\nmodule.exports = {\n  DHLEN,\n  PKLEN,\n  SKLEN,\n  SEEDLEN,\n  ALG,\n  generateKeyPair,\n  generateSeedKeyPair,\n  dh\n}\n\nfunction generateKeyPair (privKey) {\n  const keyPair = {}\n\n  keyPair.secretKey = privKey || b4a.alloc(SKLEN)\n  keyPair.publicKey = b4a.alloc(PKLEN)\n\n  if (privKey) {\n    crypto_scalarmult_base(keyPair.publicKey, keyPair.secretKey)\n  } else {\n    crypto_kx_keypair(keyPair.publicKey, keyPair.secretKey)\n  }\n\n  return keyPair\n}\n\nfunction generateSeedKeyPair (seed) {\n  assert(seed.byteLength === SKLEN)\n\n  const keyPair = {}\n  keyPair.secretKey = b4a.alloc(SKLEN)\n  keyPair.publicKey = b4a.alloc(PKLEN)\n\n  crypto_kx_seed_keypair(keyPair.publicKey, keyPair.secretKey, seed)\n  return keyPair\n}\n\nfunction dh (publicKey, { secretKey }) {\n  assert(secretKey.byteLength === SKLEN)\n  assert(publicKey.byteLength === PKLEN)\n\n  const output = b4a.alloc(DHLEN)\n\n  crypto_scalarmult(\n    output,\n    secretKey,\n    publicKey\n  )\n\n  return output\n}\nconst hmacBlake2b = require('./hmac')\nconst assert = require('nanoassert')\nconst b4a = require('b4a')\n\nconst HASHLEN = 64\n\nmodule.exports = {\n  hkdf,\n  HASHLEN\n}\n\n// HMAC-based Extract-and-Expand KDF\n// https://www.ietf.org/rfc/rfc5869.txt\n\nfunction hkdf (salt, inputKeyMaterial, info = '', length = 2 * HASHLEN) {\n  const pseudoRandomKey = hkdfExtract(salt, inputKeyMaterial)\n  const result = hkdfExpand(pseudoRandomKey, info, length)\n\n  const results = []\n  let offset = 0\n  while (offset < result.length) {\n    results.push(result.subarray(offset, offset + HASHLEN))\n    offset += HASHLEN\n  }\n  return results\n\n  function hkdfExtract (salt, inputKeyMaterial) {\n    return hmacDigest(salt, inputKeyMaterial)\n  }\n\n  function hkdfExpand (key, info, length) {\n    const T = [b4a.from(info)]\n    const lengthRatio = length / HASHLEN\n\n    for (let i = 0; i < lengthRatio; i++) {\n      const infoBuf = b4a.from(info)\n      const toHash = b4a.concat([T[i], infoBuf, b4a.from([i + 1])])\n\n      T[i + 1] = hmacDigest(key, toHash)\n    }\n\n    const result = b4a.concat(T.slice(1))\n    assert(result.byteLength === length, 'key expansion failed, length not as expected')\n\n    return result\n  }\n}\n\nfunction hmacDigest (key, input) {\n  const hmac = b4a.alloc(HASHLEN)\n  hmacBlake2b(hmac, input, key)\n\n  return hmac\n}\n/* eslint-disable camelcase */\nconst b4a = require('b4a')\nconst { sodium_memzero, crypto_generichash, crypto_generichash_batch } = require('sodium-universal')\n\nconst HASHLEN = 64\nconst BLOCKLEN = 128\nconst scratch = b4a.alloc(BLOCKLEN * 3)\nconst HMACKey = scratch.subarray(BLOCKLEN * 0, BLOCKLEN * 1)\nconst OuterKeyPad = scratch.subarray(BLOCKLEN * 1, BLOCKLEN * 2)\nconst InnerKeyPad = scratch.subarray(BLOCKLEN * 2, BLOCKLEN * 3)\n\n// Post-fill is done in the cases where someone caught an exception that\n// happened before we were able to clear data at the end\n\nmodule.exports = function hmac (out, data, key) {\n  if (key.byteLength > BLOCKLEN) {\n    crypto_generichash(HMACKey.subarray(0, HASHLEN), key)\n    sodium_memzero(HMACKey.subarray(HASHLEN))\n  } else {\n    // Covers key <= BLOCKLEN\n    HMACKey.set(key)\n    sodium_memzero(HMACKey.subarray(key.byteLength))\n  }\n\n  for (let i = 0; i < HMACKey.byteLength; i++) {\n    OuterKeyPad[i] = 0x5c ^ HMACKey[i]\n    InnerKeyPad[i] = 0x36 ^ HMACKey[i]\n  }\n  sodium_memzero(HMACKey)\n\n  crypto_generichash_batch(out, [InnerKeyPad].concat(data))\n  sodium_memzero(InnerKeyPad)\n  crypto_generichash_batch(out, [OuterKeyPad].concat(out))\n  sodium_memzero(OuterKeyPad)\n}\n\nmodule.exports.BYTES = HASHLEN\nmodule.exports.KEYBYTES = BLOCKLEN\nconst assert = require('nanoassert')\nconst b4a = require('b4a')\n\nconst SymmetricState = require('./symmetric-state')\nconst { HASHLEN } = require('./hkdf')\n\nconst PRESHARE_IS = Symbol('initiator static key preshared')\nconst PRESHARE_RS = Symbol('responder static key preshared')\n\nconst TOK_PSK = Symbol('psk')\n\nconst TOK_S = Symbol('s')\nconst TOK_E = Symbol('e')\n\nconst TOK_ES = Symbol('es')\nconst TOK_SE = Symbol('se')\nconst TOK_EE = Symbol('ee')\nconst TOK_SS = Symbol('ss')\n\nconst HANDSHAKES = Object.freeze({\n  NN: [\n    [TOK_E],\n    [TOK_E, TOK_EE]\n  ],\n  NNpsk0: [\n    [TOK_PSK, TOK_E],\n    [TOK_E, TOK_EE]\n  ],\n  XX: [\n    [TOK_E],\n    [TOK_E, TOK_EE, TOK_S, TOK_ES],\n    [TOK_S, TOK_SE]\n  ],\n  XXpsk0: [\n    [TOK_PSK, TOK_E],\n    [TOK_E, TOK_EE, TOK_S, TOK_ES],\n    [TOK_S, TOK_SE]\n  ],\n  IK: [\n    PRESHARE_RS,\n    [TOK_E, TOK_ES, TOK_S, TOK_SS],\n    [TOK_E, TOK_EE, TOK_SE]\n  ]\n})\n\nclass Writer {\n  constructor () {\n    this.size = 0\n    this.buffers = []\n  }\n\n  push (b) {\n    this.size += b.byteLength\n    this.buffers.push(b)\n  }\n\n  end () {\n    const all = b4a.alloc(this.size)\n    let offset = 0\n    for (const b of this.buffers) {\n      all.set(b, offset)\n      offset += b.byteLength\n    }\n    return all\n  }\n}\n\nclass Reader {\n  constructor (buf) {\n    this.offset = 0\n    this.buffer = buf\n  }\n\n  shift (n) {\n    const start = this.offset\n    const end = this.offset += n\n    if (end > this.buffer.byteLength) throw new Error('Insufficient bytes')\n    return this.buffer.subarray(start, end)\n  }\n\n  end () {\n    return this.shift(this.buffer.byteLength - this.offset)\n  }\n}\n\nmodule.exports = class NoiseState extends SymmetricState {\n  constructor (pattern, initiator, staticKeypair, opts = {}) {\n    super(opts)\n\n    this.s = staticKeypair || this.curve.generateKeyPair()\n    this.e = null\n\n    this.psk = null\n    if (opts && opts.psk) this.psk = opts.psk\n\n    this.re = null\n    this.rs = null\n\n    this.pattern = pattern\n    this.handshake = HANDSHAKES[this.pattern].slice()\n\n    this.isPskHandshake = !!this.psk && hasPskToken(this.handshake)\n\n    this.protocol = b4a.from([\n      'Noise',\n      this.pattern,\n      this.DH_ALG,\n      this.CIPHER_ALG,\n      'BLAKE2b'\n    ].join('_'))\n\n    this.initiator = initiator\n    this.complete = false\n\n    this.rx = null\n    this.tx = null\n    this.hash = null\n  }\n\n  initialise (prologue, remoteStatic) {\n    if (this.protocol.byteLength <= HASHLEN) this.digest.set(this.protocol)\n    else this.mixHash(this.protocol)\n\n    this.chainingKey = b4a.from(this.digest)\n\n    this.mixHash(prologue)\n\n    while (!Array.isArray(this.handshake[0])) {\n      const message = this.handshake.shift()\n\n      // handshake steps should be as arrays, only\n      // preshare tokens are provided otherwise\n      assert(message === PRESHARE_RS || message === PRESHARE_IS,\n        'Unexpected pattern')\n\n      const takeRemoteKey = this.initiator\n        ? message === PRESHARE_RS\n        : message === PRESHARE_IS\n\n      if (takeRemoteKey) this.rs = remoteStatic\n\n      const key = takeRemoteKey ? this.rs : this.s.publicKey\n      assert(key != null, 'Remote pubkey required')\n\n      this.mixHash(key)\n    }\n  }\n\n  final () {\n    const [k1, k2] = this.split()\n\n    this.tx = this.initiator ? k1 : k2\n    this.rx = this.initiator ? k2 : k1\n\n    this.complete = true\n    this.hash = this.getHandshakeHash()\n\n    this._clear()\n  }\n\n  recv (buf) {\n    const r = new Reader(buf)\n\n    for (const pattern of this.handshake.shift()) {\n      switch (pattern) {\n        case TOK_PSK :\n          this.mixKeyAndHash(this.psk)\n          break\n\n        case TOK_E :\n          this.re = r.shift(this.curve.PKLEN)\n          this.mixHash(this.re)\n          if (this.isPskHandshake) this.mixKeyNormal(this.re)\n          break\n\n        case TOK_S : {\n          const klen = this.hasKey ? this.curve.PKLEN + 16 : this.curve.PKLEN\n          this.rs = this.decryptAndHash(r.shift(klen))\n          break\n        }\n\n        case TOK_EE :\n        case TOK_ES :\n        case TOK_SE :\n        case TOK_SS : {\n          const useStatic = keyPattern(pattern, this.initiator)\n\n          const localKey = useStatic.local ? this.s : this.e\n          const remoteKey = useStatic.remote ? this.rs : this.re\n\n          this.mixKey(remoteKey, localKey)\n          break\n        }\n\n        default :\n          throw new Error('Unexpected message')\n      }\n    }\n\n    const payload = this.decryptAndHash(r.end())\n\n    if (!this.handshake.length) this.final()\n    return payload\n  }\n\n  send (payload = b4a.alloc(0)) {\n    const w = new Writer()\n\n    for (const pattern of this.handshake.shift()) {\n      switch (pattern) {\n        case TOK_PSK :\n          this.mixKeyAndHash(this.psk)\n          break\n\n        case TOK_E :\n          if (this.e === null) this.e = this.curve.generateKeyPair()\n          this.mixHash(this.e.publicKey)\n          if (this.isPskHandshake) this.mixKeyNormal(this.e.publicKey)\n          w.push(this.e.publicKey)\n          break\n\n        case TOK_S :\n          w.push(this.encryptAndHash(this.s.publicKey))\n          break\n\n        case TOK_ES :\n        case TOK_SE :\n        case TOK_EE :\n        case TOK_SS : {\n          const useStatic = keyPattern(pattern, this.initiator)\n\n          const localKey = useStatic.local ? this.s : this.e\n          const remoteKey = useStatic.remote ? this.rs : this.re\n\n          this.mixKey(remoteKey, localKey)\n          break\n        }\n\n        default :\n          throw new Error('Unexpected message')\n      }\n    }\n\n    w.push(this.encryptAndHash(payload))\n    const response = w.end()\n\n    if (!this.handshake.length) this.final()\n    return response\n  }\n\n  _clear () {\n    super._clear()\n\n    this.e.secretKey.fill(0)\n    this.e.publicKey.fill(0)\n\n    this.re.fill(0)\n\n    this.e = null\n    this.re = null\n  }\n}\n\nfunction keyPattern (pattern, initiator) {\n  const ret = {\n    local: false,\n    remote: false\n  }\n\n  switch (pattern) {\n    case TOK_EE:\n      return ret\n\n    case TOK_ES:\n      ret.local ^= !initiator\n      ret.remote ^= initiator\n      return ret\n\n    case TOK_SE:\n      ret.local ^= initiator\n      ret.remote ^= !initiator\n      return ret\n\n    case TOK_SS:\n      ret.local ^= 1\n      ret.remote ^= 1\n      return ret\n  }\n}\n\nfunction hasPskToken (handshake) {\n  return handshake.some(x => {\n    return Array.isArray(x) && x.indexOf(TOK_PSK) !== -1\n  })\n}\n{\n  \"name\": \"noise-handshake\",\n  \"version\": \"3.1.0\",\n  \"description\": \"\",\n  \"main\": \"noise.js\",\n  \"scripts\": {\n    \"test\": \"standard && tape test/*.js\"\n  },\n  \"author\": \"\",\n  \"license\": \"ISC\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/chm-diederichs/noise-handshake.git\"\n  },\n  \"dependencies\": {\n    \"b4a\": \"^1.1.0\",\n    \"nanoassert\": \"^2.0.0\",\n    \"sodium-universal\": \"^4.0.0\"\n  },\n  \"devDependencies\": {\n    \"noise-protocol\": \"chm-diederichs/noise-protocol.git#xx-ephemeral-key\",\n    \"standard\": \"^16.0.3\",\n    \"tape\": \"^5.2.2\"\n  }\n}\nconst sodium = require('sodium-universal')\nconst assert = require('nanoassert')\nconst b4a = require('b4a')\nconst CipherState = require('./cipher')\nconst curve = require('./dh')\nconst { HASHLEN, hkdf } = require('./hkdf')\n\nmodule.exports = class SymmetricState extends CipherState {\n  constructor (opts = {}) {\n    super()\n\n    this.curve = opts.curve || curve\n    this.digest = b4a.alloc(HASHLEN)\n    this.chainingKey = null\n    this.offset = 0\n\n    this.DH_ALG = this.curve.ALG\n  }\n\n  mixHash (data) {\n    accumulateDigest(this.digest, data)\n  }\n\n  mixKeyAndHash (key) {\n    const [ck, tempH, tempK] = hkdf(this.chainingKey, key, '', 3 * HASHLEN)\n    this.chainingKey = ck\n    this.mixHash(tempH)\n    this.initialiseKey(tempK.subarray(0, 32))\n  }\n\n  mixKeyNormal (key) {\n    const [ck, tempK] = hkdf(this.chainingKey, key)\n    this.chainingKey = ck\n    this.initialiseKey(tempK.subarray(0, 32))\n  }\n\n  mixKey (remoteKey, localKey) {\n    const dh = this.curve.dh(remoteKey, localKey)\n    const hkdfResult = hkdf(this.chainingKey, dh)\n    this.chainingKey = hkdfResult[0]\n    this.initialiseKey(hkdfResult[1].subarray(0, 32))\n  }\n\n  encryptAndHash (plaintext) {\n    const ciphertext = this.encrypt(plaintext, this.digest)\n    accumulateDigest(this.digest, ciphertext)\n    return ciphertext\n  }\n\n  decryptAndHash (ciphertext) {\n    const plaintext = this.decrypt(ciphertext, this.digest)\n    accumulateDigest(this.digest, ciphertext)\n    return plaintext\n  }\n\n  getHandshakeHash (out) {\n    if (!out) return this.getHandshakeHash(b4a.alloc(HASHLEN))\n    assert(out.byteLength === HASHLEN, `output must be ${HASHLEN} bytes`)\n\n    out.set(this.digest)\n    return out\n  }\n\n  split () {\n    const res = hkdf(this.chainingKey, b4a.alloc(0))\n    return res.map(k => k.subarray(0, 32))\n  }\n\n  _clear () {\n    super._clear()\n\n    sodium.sodium_memzero(this.digest)\n    sodium.sodium_memzero(this.chainingKey)\n\n    this.digest = null\n    this.chainingKey = null\n    this.offset = null\n\n    this.curve = null\n  }\n\n  static get alg () {\n    return CipherState.alg + '_BLAKE2b'\n  }\n}\n\nfunction accumulateDigest (digest, input) {\n  const toHash = b4a.concat([digest, input])\n  sodium.crypto_generichash(digest, toHash)\n}\nvar varint = require('varint')\nvar svarint = require('signed-varint')\nvar b4a = require('b4a')\n\nexports.make = encoder\n\nexports.name = function (enc) {\n  var keys = Object.keys(exports)\n  for (var i = 0; i < keys.length; i++) {\n    if (exports[keys[i]] === enc) return keys[i]\n  }\n  return null\n}\n\nexports.skip = function (type, buffer, offset) {\n  switch (type) {\n    case 0:\n      varint.decode(buffer, offset)\n      return offset + varint.decode.bytes\n\n    case 1:\n      return offset + 8\n\n    case 2:\n      var len = varint.decode(buffer, offset)\n      return offset + varint.decode.bytes + len\n\n    case 3:\n    case 4:\n      throw new Error('Groups are not supported')\n\n    case 5:\n      return offset + 4\n  }\n\n  throw new Error('Unknown wire type: ' + type)\n}\n\nexports.bytes = encoder(2,\n  function encode (val, buffer, offset) {\n    var oldOffset = offset\n    var len = bufferLength(val)\n\n    varint.encode(len, buffer, offset)\n    offset += varint.encode.bytes\n\n    if (b4a.isBuffer(val)) b4a.copy(val, buffer, offset)\n    else b4a.write(buffer, val, offset, len)\n    offset += len\n\n    encode.bytes = offset - oldOffset\n    return buffer\n  },\n  function decode (buffer, offset) {\n    var oldOffset = offset\n\n    var len = varint.decode(buffer, offset)\n    offset += varint.decode.bytes\n\n    var val = buffer.subarray(offset, offset + len)\n    offset += val.length\n\n    decode.bytes = offset - oldOffset\n    return val\n  },\n  function encodingLength (val) {\n    var len = bufferLength(val)\n    return varint.encodingLength(len) + len\n  }\n)\n\nexports.string = encoder(2,\n  function encode (val, buffer, offset) {\n    var oldOffset = offset\n    var len = b4a.byteLength(val)\n\n    varint.encode(len, buffer, offset, 'utf-8')\n    offset += varint.encode.bytes\n\n    b4a.write(buffer, val, offset, len)\n    offset += len\n\n    encode.bytes = offset - oldOffset\n    return buffer\n  },\n  function decode (buffer, offset) {\n    var oldOffset = offset\n\n    var len = varint.decode(buffer, offset)\n    offset += varint.decode.bytes\n\n    var val = b4a.toString(buffer, 'utf-8', offset, offset + len)\n    offset += len\n\n    decode.bytes = offset - oldOffset\n    return val\n  },\n  function encodingLength (val) {\n    var len = b4a.byteLength(val)\n    return varint.encodingLength(len) + len\n  }\n)\n\nexports.bool = encoder(0,\n  function encode (val, buffer, offset) {\n    buffer[offset] = val ? 1 : 0\n    encode.bytes = 1\n    return buffer\n  },\n  function decode (buffer, offset) {\n    var bool = buffer[offset] > 0\n    decode.bytes = 1\n    return bool\n  },\n  function encodingLength () {\n    return 1\n  }\n)\n\nexports.int32 = encoder(0,\n  function encode (val, buffer, offset) {\n    varint.encode(val < 0 ? val + 4294967296 : val, buffer, offset)\n    encode.bytes = varint.encode.bytes\n    return buffer\n  },\n  function decode (buffer, offset) {\n    var val = varint.decode(buffer, offset)\n    decode.bytes = varint.decode.bytes\n    return val > 2147483647 ? val - 4294967296 : val\n  },\n  function encodingLength (val) {\n    return varint.encodingLength(val < 0 ? val + 4294967296 : val)\n  }\n)\n\nexports.int64 = encoder(0,\n  function encode (val, buffer, offset) {\n    if (val < 0) {\n      var last = offset + 9\n      varint.encode(val * -1, buffer, offset)\n      offset += varint.encode.bytes - 1\n      buffer[offset] = buffer[offset] | 0x80\n      while (offset < last - 1) {\n        offset++\n        buffer[offset] = 0xff\n      }\n      buffer[last] = 0x01\n      encode.bytes = 10\n    } else {\n      varint.encode(val, buffer, offset)\n      encode.bytes = varint.encode.bytes\n    }\n    return buffer\n  },\n  function decode (buffer, offset) {\n    var val = varint.decode(buffer, offset)\n    if (val >= Math.pow(2, 63)) {\n      var limit = 9\n      while (buffer[offset + limit - 1] === 0xff) limit--\n      limit = limit || 9\n      var subset = b4a.allocUnsafe(limit)\n      b4a.copy(buffer, subset, 0, offset, offset + limit)\n      subset[limit - 1] = subset[limit - 1] & 0x7f\n      val = -1 * varint.decode(subset, 0)\n      decode.bytes = 10\n    } else {\n      decode.bytes = varint.decode.bytes\n    }\n    return val\n  },\n  function encodingLength (val) {\n    return val < 0 ? 10 : varint.encodingLength(val)\n  }\n)\n\nexports.sint32 =\nexports.sint64 = encoder(0,\n  svarint.encode,\n  svarint.decode,\n  svarint.encodingLength\n)\n\nexports.uint32 =\nexports.uint64 =\nexports.enum =\nexports.varint = encoder(0,\n  varint.encode,\n  varint.decode,\n  varint.encodingLength\n)\n\n// we cannot represent these in javascript so we just use buffers\nexports.fixed64 =\nexports.sfixed64 = encoder(1,\n  function encode (val, buffer, offset) {\n    b4a.copy(val, buffer, offset)\n    encode.bytes = 8\n    return buffer\n  },\n  function decode (buffer, offset) {\n    var val = buffer.subarray(offset, offset + 8)\n    decode.bytes = 8\n    return val\n  },\n  function encodingLength () {\n    return 8\n  }\n)\n\nexports.double = encoder(1,\n  function encode (val, buffer, offset) {\n    b4a.writeDoubleLE(buffer, val, offset)\n    encode.bytes = 8\n    return buffer\n  },\n  function decode (buffer, offset) {\n    var val = b4a.readDoubleLE(buffer, offset)\n    decode.bytes = 8\n    return val\n  },\n  function encodingLength () {\n    return 8\n  }\n)\n\nexports.fixed32 = encoder(5,\n  function encode (val, buffer, offset) {\n    b4a.writeUInt32LE(buffer, val, offset)\n    encode.bytes = 4\n    return buffer\n  },\n  function decode (buffer, offset) {\n    var val = b4a.readUInt32LE(buffer, offset)\n    decode.bytes = 4\n    return val\n  },\n  function encodingLength () {\n    return 4\n  }\n)\n\nexports.sfixed32 = encoder(5,\n  function encode (val, buffer, offset) {\n    b4a.writeInt32LE(buffer, val, offset)\n    encode.bytes = 4\n    return buffer\n  },\n  function decode (buffer, offset) {\n    var val = b4a.readInt32LE(buffer, offset)\n    decode.bytes = 4\n    return val\n  },\n  function encodingLength () {\n    return 4\n  }\n)\n\nexports.float = encoder(5,\n  function encode (val, buffer, offset) {\n    b4a.writeFloatLE(buffer, val, offset)\n    encode.bytes = 4\n    return buffer\n  },\n  function decode (buffer, offset) {\n    var val = b4a.readFloatLE(buffer, offset)\n    decode.bytes = 4\n    return val\n  },\n  function encodingLength () {\n    return 4\n  }\n)\n\nfunction encoder (type, encode, decode, encodingLength) {\n  encode.bytes = decode.bytes = 0\n\n  return {\n    type: type,\n    encode: encode,\n    decode: decode,\n    encodingLength: encodingLength\n  }\n}\n\nfunction bufferLength (val) {\n  return b4a.isBuffer(val) ? val.length : b4a.byteLength(val)\n}\n{\n  \"name\": \"protocol-buffers-encodings\",\n  \"version\": \"1.2.0\",\n  \"description\": \"Base encodings for protocol-buffers\",\n  \"main\": \"index.js\",\n  \"dependencies\": {\n    \"b4a\": \"^1.6.0\",\n    \"signed-varint\": \"^2.0.1\",\n    \"varint\": \"5.0.0\"\n  },\n  \"devDependencies\": {\n    \"standard\": \"^14.3.4\",\n    \"tape\": \"^5.0.1\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && tape test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mafintosh/protocol-buffers-encodings.git\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mafintosh/protocol-buffers-encodings/issues\"\n  },\n  \"homepage\": \"https://github.com/mafintosh/protocol-buffers-encodings\"\n}\nconst b4a = require('b4a')\nconst c = require('compact-encoding')\nconst queueTick = require('queue-tick')\nconst safetyCatch = require('safety-catch')\nconst unslab = require('unslab')\n\nconst MAX_BUFFERED = 32768\nconst MAX_BACKLOG = Infinity // TODO: impl \"open\" backpressure\nconst MAX_BATCH = 8 * 1024 * 1024\n\nclass Channel {\n  constructor (mux, info, userData, protocol, aliases, id, handshake, messages, onopen, onclose, ondestroy, ondrain) {\n    this.userData = userData\n    this.protocol = protocol\n    this.aliases = aliases\n    this.id = id\n    this.handshake = null\n    this.messages = []\n\n    this.opened = false\n    this.closed = false\n    this.destroyed = false\n\n    this.onopen = onopen\n    this.onclose = onclose\n    this.ondestroy = ondestroy\n    this.ondrain = ondrain\n\n    this._handshake = handshake\n    this._mux = mux\n    this._info = info\n    this._localId = 0\n    this._remoteId = 0\n    this._active = 0\n    this._extensions = null\n\n    this._decBound = this._dec.bind(this)\n    this._decAndDestroyBound = this._decAndDestroy.bind(this)\n\n    this._openedPromise = null\n    this._openedResolve = null\n\n    this._destroyedPromise = null\n    this._destroyedResolve = null\n\n    for (const m of messages) this.addMessage(m)\n  }\n\n  get drained () {\n    return this._mux.drained\n  }\n\n  fullyOpened () {\n    if (this.opened) return Promise.resolve(true)\n    if (this.closed) return Promise.resolve(false)\n    if (this._openedPromise) return this._openedPromise\n\n    this._openedPromise = new Promise((resolve) => { this._openedResolve = resolve })\n    return this._openedPromise\n  }\n\n  fullyClosed () {\n    if (this.destroyed) return Promise.resolve()\n    if (this._destroyedPromise) return this._destroyedPromise\n\n    this._destroyedPromise = new Promise((resolve) => { this._destroyedResolve = resolve })\n    return this._destroyedPromise\n  }\n\n  open (handshake) {\n    const id = this._mux._free.length > 0\n      ? this._mux._free.pop()\n      : this._mux._local.push(null) - 1\n\n    this._info.opened++\n    this._info.lastChannel = this\n    this._localId = id + 1\n    this._mux._local[id] = this\n\n    if (this._remoteId === 0) {\n      this._info.outgoing.push(this._localId)\n    }\n\n    const state = { buffer: null, start: 2, end: 2 }\n\n    c.uint.preencode(state, this._localId)\n    c.string.preencode(state, this.protocol)\n    c.buffer.preencode(state, this.id)\n    if (this._handshake) this._handshake.preencode(state, handshake)\n\n    state.buffer = this._mux._alloc(state.end)\n\n    state.buffer[0] = 0\n    state.buffer[1] = 1\n    c.uint.encode(state, this._localId)\n    c.string.encode(state, this.protocol)\n    c.buffer.encode(state, this.id)\n    if (this._handshake) this._handshake.encode(state, handshake)\n\n    this._mux._write0(state.buffer)\n  }\n\n  _dec () {\n    if (--this._active === 0 && this.closed === true) this._destroy()\n  }\n\n  _decAndDestroy (err) {\n    this._dec()\n    this._mux._safeDestroy(err)\n  }\n\n  _fullyOpenSoon () {\n    this._mux._remote[this._remoteId - 1].session = this\n    queueTick(this._fullyOpen.bind(this))\n  }\n\n  _fullyOpen () {\n    if (this.opened === true || this.closed === true) return\n\n    const remote = this._mux._remote[this._remoteId - 1]\n\n    this.opened = true\n    this.handshake = this._handshake ? this._handshake.decode(remote.state) : null\n    this._track(this.onopen(this.handshake, this))\n\n    remote.session = this\n    remote.state = null\n    if (remote.pending !== null) this._drain(remote)\n\n    this._resolveOpen(true)\n  }\n\n  _resolveOpen (opened) {\n    if (this._openedResolve !== null) {\n      this._openedResolve(opened)\n      this._openedResolve = this._openedPromise = null\n    }\n  }\n\n  _resolveDestroyed () {\n    if (this._destroyedResolve !== null) {\n      this._destroyedResolve()\n      this._destroyedResolve = this._destroyedPromise = null\n    }\n  }\n\n  _drain (remote) {\n    for (let i = 0; i < remote.pending.length; i++) {\n      const p = remote.pending[i]\n      this._mux._buffered -= byteSize(p.state)\n      this._recv(p.type, p.state)\n    }\n\n    remote.pending = null\n    this._mux._resumeMaybe()\n  }\n\n  _track (p) {\n    if (isPromise(p) === true) {\n      this._active++\n      return p.then(this._decBound, this._decAndDestroyBound)\n    }\n\n    return null\n  }\n\n  _close (isRemote) {\n    if (this.closed === true) return\n    this.closed = true\n\n    this._info.opened--\n    if (this._info.lastChannel === this) this._info.lastChannel = null\n\n    if (this._remoteId > 0) {\n      this._mux._remote[this._remoteId - 1] = null\n      this._remoteId = 0\n      // If remote has acked, we can reuse the local id now\n      // otherwise, we need to wait for the \"ack\" to arrive\n      this._mux._free.push(this._localId - 1)\n    }\n\n    this._mux._local[this._localId - 1] = null\n    this._localId = 0\n\n    this._mux._gc(this._info)\n    this._track(this.onclose(isRemote, this))\n\n    if (this._active === 0) this._destroy()\n\n    this._resolveOpen(false)\n  }\n\n  _destroy () {\n    if (this.destroyed === true) return\n    this.destroyed = true\n    this._track(this.ondestroy(this))\n    this._resolveDestroyed()\n  }\n\n  _recv (type, state) {\n    if (type < this.messages.length) {\n      const m = this.messages[type]\n      const p = m.recv(state, this)\n      if (m.autoBatch === true) return p\n    }\n    return null\n  }\n\n  cork () {\n    this._mux.cork()\n  }\n\n  uncork () {\n    this._mux.uncork()\n  }\n\n  close () {\n    if (this.closed === true) return\n\n    const state = { buffer: null, start: 2, end: 2 }\n\n    c.uint.preencode(state, this._localId)\n\n    state.buffer = this._mux._alloc(state.end)\n\n    state.buffer[0] = 0\n    state.buffer[1] = 3\n    c.uint.encode(state, this._localId)\n\n    this._close(false)\n    this._mux._write0(state.buffer)\n  }\n\n  addMessage (opts) {\n    if (!opts) return this._skipMessage()\n\n    const type = this.messages.length\n    const autoBatch = opts.autoBatch !== false\n    const encoding = opts.encoding || c.raw\n    const onmessage = opts.onmessage || noop\n\n    const s = this\n    const typeLen = encodingLength(c.uint, type)\n\n    const m = {\n      type,\n      autoBatch,\n      encoding,\n      onmessage,\n      recv (state, session) {\n        return session._track(m.onmessage(encoding.decode(state), session))\n      },\n      send (m, session = s) {\n        if (session.closed === true) return false\n\n        const mux = session._mux\n        const state = { buffer: null, start: 0, end: typeLen }\n\n        if (mux._batch !== null) {\n          encoding.preencode(state, m)\n          state.buffer = mux._alloc(state.end)\n\n          c.uint.encode(state, type)\n          encoding.encode(state, m)\n\n          mux._pushBatch(session._localId, state.buffer)\n          return true\n        }\n\n        c.uint.preencode(state, session._localId)\n        encoding.preencode(state, m)\n\n        state.buffer = mux._alloc(state.end)\n\n        c.uint.encode(state, session._localId)\n        c.uint.encode(state, type)\n        encoding.encode(state, m)\n\n        mux.drained = mux.stream.write(state.buffer)\n\n        return mux.drained\n      }\n    }\n\n    this.messages.push(m)\n\n    return m\n  }\n\n  _skipMessage () {\n    const type = this.messages.length\n    const m = {\n      type,\n      encoding: c.raw,\n      onmessage: noop,\n      recv (state, session) {},\n      send (m, session) {}\n    }\n\n    this.messages.push(m)\n    return m\n  }\n}\n\nmodule.exports = class Protomux {\n  constructor (stream, { alloc } = {}) {\n    if (stream.userData === null) stream.userData = this\n\n    this.isProtomux = true\n    this.stream = stream\n    this.corked = 0\n    this.drained = true\n\n    this._alloc = alloc || (typeof stream.alloc === 'function' ? stream.alloc.bind(stream) : b4a.allocUnsafe)\n    this._safeDestroyBound = this._safeDestroy.bind(this)\n    this._uncorkBound = this.uncork.bind(this)\n\n    this._remoteBacklog = 0\n    this._buffered = 0\n    this._paused = false\n    this._remote = []\n    this._local = []\n    this._free = []\n    this._batch = null\n    this._batchState = null\n\n    this._infos = new Map()\n    this._notify = new Map()\n\n    this.stream.on('data', this._ondata.bind(this))\n    this.stream.on('drain', this._ondrain.bind(this))\n    this.stream.on('end', this._onend.bind(this))\n    this.stream.on('error', noop) // we handle this in \"close\"\n    this.stream.on('close', this._shutdown.bind(this))\n  }\n\n  static from (stream, opts) {\n    if (stream.userData && stream.userData.isProtomux) return stream.userData\n    if (stream.isProtomux) return stream\n    return new this(stream, opts)\n  }\n\n  static isProtomux (mux) {\n    return typeof mux === 'object' && mux.isProtomux === true\n  }\n\n  * [Symbol.iterator] () {\n    for (const session of this._local) {\n      if (session !== null) yield session\n    }\n  }\n\n  isIdle () {\n    return this._local.length === this._free.length\n  }\n\n  cork () {\n    if (++this.corked === 1) {\n      this._batch = []\n      this._batchState = { buffer: null, start: 0, end: 1 }\n    }\n  }\n\n  uncork () {\n    if (--this.corked === 0) {\n      this._sendBatch(this._batch, this._batchState)\n      this._batch = null\n      this._batchState = null\n    }\n  }\n\n  getLastChannel ({ protocol, id = null }) {\n    const key = toKey(protocol, id)\n    const info = this._infos.get(key)\n    if (info) return info.lastChannel\n    return null\n  }\n\n  pair ({ protocol, id = null }, notify) {\n    this._notify.set(toKey(protocol, id), notify)\n  }\n\n  unpair ({ protocol, id = null }) {\n    this._notify.delete(toKey(protocol, id))\n  }\n\n  opened ({ protocol, id = null }) {\n    const key = toKey(protocol, id)\n    const info = this._infos.get(key)\n    return info ? info.opened > 0 : false\n  }\n\n  createChannel ({ userData = null, protocol, aliases = [], id = null, unique = true, handshake = null, messages = [], onopen = noop, onclose = noop, ondestroy = noop, ondrain = noop }) {\n    if (this.stream.destroyed) return null\n\n    const info = this._get(protocol, id, aliases)\n    if (unique && info.opened > 0) return null\n\n    if (info.incoming.length === 0) {\n      return new Channel(this, info, userData, protocol, aliases, id, handshake, messages, onopen, onclose, ondestroy, ondrain)\n    }\n\n    this._remoteBacklog--\n\n    const remoteId = info.incoming.shift()\n    const r = this._remote[remoteId - 1]\n    if (r === null) return null\n\n    const session = new Channel(this, info, userData, protocol, aliases, id, handshake, messages, onopen, onclose, ondestroy, ondrain)\n\n    session._remoteId = remoteId\n    session._fullyOpenSoon()\n\n    return session\n  }\n\n  _pushBatch (localId, buffer) {\n    if (this._batchState.end >= MAX_BATCH) {\n      this._sendBatch(this._batch, this._batchState)\n      this._batch = []\n      this._batchState = { buffer: null, start: 0, end: 1 }\n    }\n\n    if (this._batch.length === 0 || this._batch[this._batch.length - 1].localId !== localId) {\n      this._batchState.end++\n      c.uint.preencode(this._batchState, localId)\n    }\n    c.buffer.preencode(this._batchState, buffer)\n    this._batch.push({ localId, buffer })\n  }\n\n  _sendBatch (batch, state) {\n    if (batch.length === 0) return\n\n    let prev = batch[0].localId\n\n    state.buffer = this._alloc(state.end)\n    state.buffer[state.start++] = 0\n    state.buffer[state.start++] = 0\n\n    c.uint.encode(state, prev)\n\n    for (let i = 0; i < batch.length; i++) {\n      const b = batch[i]\n      if (prev !== b.localId) {\n        state.buffer[state.start++] = 0\n        c.uint.encode(state, (prev = b.localId))\n      }\n      c.buffer.encode(state, b.buffer)\n    }\n\n    this.drained = this.stream.write(state.buffer)\n  }\n\n  _get (protocol, id, aliases = []) {\n    const key = toKey(protocol, id)\n\n    let info = this._infos.get(key)\n    if (info) return info\n\n    info = { key, protocol, aliases: [], id, pairing: 0, opened: 0, incoming: [], outgoing: [], lastChannel: null }\n    this._infos.set(key, info)\n\n    for (const alias of aliases) {\n      const key = toKey(alias, id)\n      info.aliases.push(key)\n\n      this._infos.set(key, info)\n    }\n\n    return info\n  }\n\n  _gc (info) {\n    if (info.opened === 0 && info.outgoing.length === 0 && info.incoming.length === 0) {\n      this._infos.delete(info.key)\n\n      for (const alias of info.aliases) this._infos.delete(alias)\n    }\n  }\n\n  _ondata (buffer) {\n    if (buffer.byteLength === 0) return // ignore empty frames...\n    try {\n      const state = { buffer, start: 0, end: buffer.byteLength }\n      this._decode(c.uint.decode(state), state)\n    } catch (err) {\n      this._safeDestroy(err)\n    }\n  }\n\n  _ondrain () {\n    this.drained = true\n\n    for (const s of this._local) {\n      if (s !== null) s._track(s.ondrain(s))\n    }\n  }\n\n  _onend () { // TODO: support half open mode for the users who wants that here\n    this.stream.end()\n  }\n\n  _decode (remoteId, state) {\n    const type = c.uint.decode(state)\n\n    if (remoteId === 0) {\n      return this._oncontrolsession(type, state)\n    }\n\n    const r = remoteId <= this._remote.length ? this._remote[remoteId - 1] : null\n\n    // if the channel is closed ignore - could just be a pipeline message...\n    if (r === null) return null\n\n    if (r.pending !== null) {\n      this._bufferMessage(r, type, state)\n      return null\n    }\n\n    return r.session._recv(type, state)\n  }\n\n  _oncontrolsession (type, state) {\n    switch (type) {\n      case 0:\n        this._onbatch(state)\n        break\n\n      case 1:\n        // return the promise back up as this has sideeffects so we can batch reply\n        return this._onopensession(state)\n\n      case 2:\n        this._onrejectsession(state)\n        break\n\n      case 3:\n        this._onclosesession(state)\n        break\n    }\n\n    return null\n  }\n\n  _bufferMessage (r, type, { buffer, start, end }) {\n    const state = { buffer, start, end } // copy\n    r.pending.push({ type, state })\n    this._buffered += byteSize(state)\n    this._pauseMaybe()\n  }\n\n  _pauseMaybe () {\n    if (this._paused === true || this._buffered <= MAX_BUFFERED) return\n    this._paused = true\n    this.stream.pause()\n  }\n\n  _resumeMaybe () {\n    if (this._paused === false || this._buffered > MAX_BUFFERED) return\n    this._paused = false\n    this.stream.resume()\n  }\n\n  _onbatch (state) {\n    const end = state.end\n    let remoteId = c.uint.decode(state)\n\n    let waiting = null\n\n    while (state.end > state.start) {\n      const len = c.uint.decode(state)\n      if (len === 0) {\n        remoteId = c.uint.decode(state)\n        continue\n      }\n      state.end = state.start + len\n      // if batch contains more than one message, cork it so we reply back with a batch\n      if (end !== state.end && waiting === null) {\n        waiting = []\n        this.cork()\n      }\n      const p = this._decode(remoteId, state)\n      if (waiting !== null && p !== null) waiting.push(p)\n      state.start = state.end\n      state.end = end\n    }\n\n    if (waiting !== null) {\n      // the waiting promises are not allowed to throw but we destroy the stream in case we are wrong\n      Promise.all(waiting).then(this._uncorkBound, this._safeDestroyBound)\n    }\n  }\n\n  _onopensession (state) {\n    const remoteId = c.uint.decode(state)\n    const protocol = c.string.decode(state)\n    const id = unslab(c.buffer.decode(state))\n\n    // remote tried to open the control session - auto reject for now\n    // as we can use as an explicit control protocol declaration if we need to\n    if (remoteId === 0) {\n      this._rejectSession(0)\n      return null\n    }\n\n    const rid = remoteId - 1\n    const info = this._get(protocol, id)\n\n    // allow the remote to grow the ids by one\n    if (this._remote.length === rid) {\n      this._remote.push(null)\n    }\n\n    if (rid >= this._remote.length || this._remote[rid] !== null) {\n      throw new Error('Invalid open message')\n    }\n\n    if (info.outgoing.length > 0) {\n      const localId = info.outgoing.shift()\n      const session = this._local[localId - 1]\n\n      if (session === null) { // we already closed the channel - ignore\n        this._free.push(localId - 1)\n        return null\n      }\n\n      this._remote[rid] = { state, pending: null, session: null }\n\n      session._remoteId = remoteId\n      session._fullyOpen()\n      return null\n    }\n\n    const copyState = { buffer: state.buffer, start: state.start, end: state.end }\n    this._remote[rid] = { state: copyState, pending: [], session: null }\n\n    if (++this._remoteBacklog > MAX_BACKLOG) {\n      throw new Error('Remote exceeded backlog')\n    }\n\n    info.pairing++\n    info.incoming.push(remoteId)\n\n    return this._requestSession(protocol, id, info).catch(this._safeDestroyBound)\n  }\n\n  _onrejectsession (state) {\n    const localId = c.uint.decode(state)\n\n    // TODO: can be done smarter...\n    for (const info of this._infos.values()) {\n      const i = info.outgoing.indexOf(localId)\n      if (i === -1) continue\n\n      info.outgoing.splice(i, 1)\n\n      const session = this._local[localId - 1]\n\n      this._free.push(localId - 1)\n      if (session !== null) session._close(true)\n\n      this._gc(info)\n      return\n    }\n\n    throw new Error('Invalid reject message')\n  }\n\n  _onclosesession (state) {\n    const remoteId = c.uint.decode(state)\n\n    if (remoteId === 0) return // ignore\n\n    const rid = remoteId - 1\n    const r = rid < this._remote.length ? this._remote[rid] : null\n\n    if (r === null) return\n\n    if (r.session !== null) r.session._close(true)\n  }\n\n  async _requestSession (protocol, id, info) {\n    const notify = this._notify.get(toKey(protocol, id)) || this._notify.get(toKey(protocol, null))\n\n    if (notify) await notify(id)\n\n    if (--info.pairing > 0) return\n\n    while (info.incoming.length > 0) {\n      this._rejectSession(info, info.incoming.shift())\n    }\n\n    this._gc(info)\n  }\n\n  _rejectSession (info, remoteId) {\n    if (remoteId > 0) {\n      const r = this._remote[remoteId - 1]\n\n      if (r.pending !== null) {\n        for (let i = 0; i < r.pending.length; i++) {\n          this._buffered -= byteSize(r.pending[i].state)\n        }\n      }\n\n      this._remote[remoteId - 1] = null\n      this._resumeMaybe()\n    }\n\n    const state = { buffer: null, start: 2, end: 2 }\n\n    c.uint.preencode(state, remoteId)\n\n    state.buffer = this._alloc(state.end)\n\n    state.buffer[0] = 0\n    state.buffer[1] = 2\n    c.uint.encode(state, remoteId)\n\n    this._write0(state.buffer)\n  }\n\n  _write0 (buffer) {\n    if (this._batch !== null) {\n      this._pushBatch(0, buffer.subarray(1))\n      return\n    }\n\n    this.drained = this.stream.write(buffer)\n  }\n\n  destroy (err) {\n    this.stream.destroy(err)\n  }\n\n  _safeDestroy (err) {\n    safetyCatch(err)\n    this.stream.destroy(err)\n  }\n\n  _shutdown () {\n    for (const s of this._local) {\n      if (s !== null) s._close(true)\n    }\n  }\n}\n\nfunction noop () {}\n\nfunction toKey (protocol, id) {\n  return protocol + '##' + (id ? b4a.toString(id, 'hex') : '')\n}\n\nfunction byteSize (state) {\n  return 512 + (state.end - state.start)\n}\n\nfunction isPromise (p) {\n  return !!(p && typeof p.then === 'function')\n}\n\nfunction encodingLength (enc, val) {\n  const state = { buffer: null, start: 0, end: 0 }\n  enc.preencode(state, val)\n  return state.end\n}\n{\n  \"name\": \"protomux\",\n  \"version\": \"3.10.1\",\n  \"description\": \"Multiplex multiple message oriented protocols over a stream\",\n  \"main\": \"index.js\",\n  \"files\": [\n    \"index.js\"\n  ],\n  \"dependencies\": {\n    \"b4a\": \"^1.3.1\",\n    \"compact-encoding\": \"^2.5.1\",\n    \"queue-tick\": \"^1.0.0\",\n    \"safety-catch\": \"^1.0.1\",\n    \"unslab\": \"^1.3.0\"\n  },\n  \"devDependencies\": {\n    \"@hyperswarm/secret-stream\": \"^6.0.0\",\n    \"brittle\": \"^3.0.0\",\n    \"standard\": \"^16.0.4\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && brittle test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mafintosh/protomux.git\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mafintosh/protomux/issues\"\n  },\n  \"homepage\": \"https://github.com/mafintosh/protomux\"\n}\n{\n  \"name\": \"queue-tick\",\n  \"version\": \"1.0.1\",\n  \"description\": \"Next tick shim that prefers process.nextTick over queueMicrotask for compat\",\n  \"main\": \"./process-next-tick.js\",\n  \"browser\": \"./queue-microtask.js\",\n  \"dependencies\": {},\n  \"devDependencies\": {\n    \"standard\": \"^16.0.3\",\n    \"tape\": \"^5.3.1\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && tape test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mafintosh/queue-tick.git\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mafintosh/queue-tick/issues\"\n  },\n  \"homepage\": \"https://github.com/mafintosh/queue-tick\"\n}\nmodule.exports = (typeof process !== 'undefined' && typeof process.nextTick === 'function')\n  ? process.nextTick.bind(process)\n  : require('./queue-microtask')\nmodule.exports = typeof queueMicrotask === 'function' ? queueMicrotask : (fn) => Promise.resolve().then(fn)\nmodule.exports = require('node-gyp-build')(__dirname)\nconst b4a = require('b4a')\nconst binding = require('./binding')\n\nexports.get = function get (field, bit) {\n  const n = field.byteLength * 8\n\n  if (bit < 0) bit += n\n  if (bit < 0 || bit >= n) return false\n\n  return binding.quickbit_napi_get(field, bit) !== 0\n}\n\nexports.set = function set (field, bit, value = true) {\n  const n = field.byteLength * 8\n\n  if (bit < 0) bit += n\n  if (bit < 0 || bit >= n) return false\n\n  return binding.quickbit_napi_set(field, bit, value ? 1 : 0) !== 0\n}\n\nexports.fill = function fill (field, value, start = 0, end = field.byteLength * 8) {\n  const n = field.byteLength * 8\n\n  if (start < 0) start += n\n  if (end < 0) end += n\n  if (start < 0 || start >= field.byteLength * 8 || start >= end) return field\n\n  binding.quickbit_napi_fill(field, value ? 1 : 0, start, end)\n  return field\n}\n\nexports.clear = function clear (field, ...chunks) {\n  binding.quickbit_napi_clear(field, chunks)\n}\n\nexports.findFirst = function findFirst (field, value, position = 0) {\n  const n = field.byteLength * 8\n\n  if (position < 0) position += n\n  if (position < 0) position = 0\n  if (position >= n) return -1\n\n  return binding.quickbit_napi_find_first(field, value ? 1 : 0, position)\n}\n\nexports.findLast = function findLast (field, value, position = field.byteLength * 8 - 1) {\n  const n = field.byteLength * 8\n\n  if (position < 0) position += n\n  if (position < 0) return -1\n  if (position >= n) position = n - 1\n\n  return binding.quickbit_napi_find_last(field, value ? 1 : 0, position)\n}\n\nconst Index = exports.Index = class Index {\n  static from (fieldOrChunks, byteLength = -1) {\n    if (Array.isArray(fieldOrChunks)) {\n      return new SparseIndex(fieldOrChunks, byteLength)\n    } else {\n      return new DenseIndex(fieldOrChunks, byteLength)\n    }\n  }\n\n  constructor (byteLength) {\n    this._byteLength = byteLength\n    this.handle = b4a.allocUnsafe(binding.sizeof_quickbit_index_t)\n  }\n\n  get byteLength () {\n    return this._byteLength\n  }\n\n  skipFirst (value, position = 0) {\n    const n = this.byteLength * 8\n\n    if (position < 0) position += n\n    if (position < 0) position = 0\n    if (position >= n) return n - 1\n\n    return binding.quickbit_napi_skip_first(this.handle, this.byteLength, value ? 1 : 0, position)\n  }\n\n  skipLast (value, position = this.byteLength * 8 - 1) {\n    const n = this.byteLength * 8\n\n    if (position < 0) position += n\n    if (position < 0) return 0\n    if (position >= n) position = n - 1\n\n    return binding.quickbit_napi_skip_last(this.handle, this.byteLength, value ? 1 : 0, position)\n  }\n}\n\nclass DenseIndex extends Index {\n  constructor (field, byteLength) {\n    super(byteLength)\n    this.field = field\n\n    binding.quickbit_napi_index_init(this.handle, this.field)\n  }\n\n  get byteLength () {\n    if (this._byteLength !== -1) return this._byteLength\n    return this.field.byteLength\n  }\n\n  update (bit) {\n    const n = this.byteLength * 8\n\n    if (bit < 0) bit += n\n    if (bit < 0 || bit >= n) return false\n\n    return binding.quickbit_napi_index_update(this.handle, this.field, bit) !== 0\n  }\n}\n\nfunction selectChunk (chunks, offset) {\n  for (let i = 0; i < chunks.length; i++) {\n    const next = chunks[i]\n\n    const start = next.offset\n    const end = next.offset + next.field.byteLength\n\n    if (offset >= start && offset + 16 <= end) {\n      return next\n    }\n  }\n\n  return null\n}\n\nclass SparseIndex extends Index {\n  constructor (chunks, byteLength) {\n    super(byteLength)\n    this.chunks = chunks\n\n    binding.quickbit_napi_index_init_sparse(this.handle, this.chunks)\n  }\n\n  get byteLength () {\n    if (this._byteLength !== -1) return this._byteLength\n    const last = this.chunks[this.chunks.length - 1]\n    return last ? last.offset + last.field.byteLength : 0\n  }\n\n  update (bit) {\n    const n = this.byteLength * 8\n\n    if (bit < 0) bit += n\n    if (bit < 0 || bit >= n) return false\n\n    const j = Math.floor(bit / 128)\n\n    const offset = j * 16\n\n    const chunk = selectChunk(this.chunks, offset)\n\n    if (chunk === null) return false\n\n    return binding.quickbit_napi_index_update_sparse(this.handle, chunk.field, chunk.offset, bit) !== 0\n  }\n}\n{\n  \"name\": \"quickbit-native\",\n  \"version\": \"2.3.5\",\n  \"description\": \"libquickbit JavaScript bindings for Node.js\",\n  \"main\": \"index.js\",\n  \"files\": [\n    \"index.js\",\n    \"macros.h\",\n    \"binding.c\",\n    \"binding.js\",\n    \"CMakeLists.txt\",\n    \"prebuilds\"\n  ],\n  \"addon\": true,\n  \"scripts\": {\n    \"test\": \"npm run lint && npm run test:bare && npm run test:node\",\n    \"test:bare\": \"bare test.mjs\",\n    \"test:node\": \"node test.mjs\",\n    \"lint\": \"standard\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/holepunchto/quickbit-native.git\"\n  },\n  \"author\": \"Holepunch\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/quickbit-native/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/quickbit-native#readme\",\n  \"dependencies\": {\n    \"b4a\": \"^1.6.0\",\n    \"node-gyp-build\": \"^4.8.2\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^3.1.0\",\n    \"cmake-bare\": \"^1.1.7\",\n    \"cmake-fetch\": \"^1.1.0\",\n    \"cmake-napi\": \"^1.0.2\",\n    \"standard\": \"^17.0.0\"\n  }\n}\nconst simdle = require('simdle-universal')\n\nconst INDEX_LEN = (16 /* root */ + 128 * 16 /* children */) * 2\n\nconst get = exports.get = function get (field, bit) {\n  const n = field.byteLength * 8\n\n  if (bit < 0) bit += n\n  if (bit < 0 || bit >= n) return false\n\n  const m = field.BYTES_PER_ELEMENT * 8\n\n  const offset = bit & (m - 1)\n  const i = (bit - offset) / m\n\n  return (field[i] & (1 << offset)) !== 0\n}\n\nconst set = exports.set = function set (field, bit, value = true) {\n  const n = field.byteLength * 8\n\n  if (bit < 0) bit += n\n  if (bit < 0 || bit >= n) return false\n\n  const m = field.BYTES_PER_ELEMENT * 8\n\n  const offset = bit & (m - 1)\n  const i = (bit - offset) / m\n  const mask = 1 << offset\n\n  if (value) {\n    if ((field[i] & mask) !== 0) return false\n  } else {\n    if ((field[i] & mask) === 0) return false\n  }\n\n  field[i] ^= mask\n\n  return true\n}\n\nexports.fill = function fill (field, value, start = 0, end = field.byteLength * 8) {\n  const n = field.byteLength * 8\n\n  if (start < 0) start += n\n  if (end < 0) end += n\n  if (start < 0 || start >= field.byteLength * 8 || start >= end) return field\n\n  const m = field.BYTES_PER_ELEMENT * 8\n\n  let i, j\n\n  {\n    const offset = start & (m - 1)\n    i = (start - offset) / m\n\n    if (offset !== 0) {\n      let shift = m - offset\n      if (end - start < shift) shift = end - start\n\n      const mask = ((1 << shift) - 1) << offset\n\n      if (value) field[i] |= mask\n      else field[i] &= ~mask\n\n      i++\n    }\n  }\n\n  {\n    const offset = end & (m - 1)\n    j = (end - offset) / m\n\n    if (offset !== 0 && j >= i) {\n      const mask = (1 << offset) - 1\n\n      if (value) field[j] |= mask\n      else field[j] &= ~mask\n    }\n  }\n\n  if (i < j) field.fill(value ? (2 ** m) - 1 : 0, i, j)\n\n  return field\n}\n\nexports.clear = function clear (field, ...chunks) {\n  const n = field.byteLength\n\n  for (const chunk of chunks) {\n    if (chunk.offset >= n) continue\n\n    const m = chunk.field.byteLength\n\n    let i = chunk.offset\n    let j = 0\n\n    while (((i & 15) !== 0 || (j & 15) !== 0) && i < n && j < m) {\n      field[i] = field[i] & ~chunk.field[j]\n      i++\n      j++\n    }\n\n    if (i + 15 < n && j + 15 < m) {\n      const len = Math.min(n - (n & 15) - i, m - (m & 15) - j)\n\n      simdle.clear(field.subarray(i, i + len), chunk.field.subarray(j, j + len), field.subarray(i, i + len))\n    }\n\n    while (i < n && j < m) {\n      field[i] = field[i] & ~chunk.field[j]\n      i++\n      j++\n    }\n  }\n}\n\nfunction bitOffset (bit, offset) {\n  return !bit ? offset : (INDEX_LEN * 8 / 2) + offset\n}\n\nfunction byteOffset (bit, offset) {\n  return !bit ? offset : (INDEX_LEN / 2) + offset\n}\n\nexports.findFirst = function findFirst (field, value, position = 0) {\n  const n = field.byteLength * 8\n\n  if (position < 0) position += n\n  if (position < 0) position = 0\n  if (position >= n) return -1\n\n  value = !!value\n\n  for (let i = position; i < n; i++) {\n    if (get(field, i) === value) return i\n  }\n\n  return -1\n}\n\nexports.findLast = function findLast (field, value, position = field.byteLength * 8 - 1) {\n  const n = field.byteLength * 8\n\n  if (position < 0) position += n\n  if (position < 0) return -1\n  if (position >= n) position = n - 1\n\n  value = !!value\n\n  for (let i = position; i >= 0; i--) {\n    if (get(field, i) === value) return i\n  }\n\n  return -1\n}\n\nconst Index = exports.Index = class Index {\n  static from (fieldOrChunks, byteLength = -1) {\n    if (Array.isArray(fieldOrChunks)) {\n      return new SparseIndex(fieldOrChunks, byteLength)\n    } else {\n      return new DenseIndex(fieldOrChunks, byteLength)\n    }\n  }\n\n  constructor (byteLength) {\n    this._byteLength = byteLength\n    this.handle = new Uint32Array(INDEX_LEN / 4)\n  }\n\n  get byteLength () {\n    return this._byteLength\n  }\n\n  skipFirst (value, position = 0) {\n    const n = this.byteLength * 8\n\n    if (position < 0) position += n\n    if (position < 0) position = 0\n    if (position >= n) return n - 1\n\n    let i = Math.floor(position / 16384)\n\n    if (i > 127) return position\n\n    while (i <= 127 && get(this.handle, bitOffset(value, i))) {\n      i++\n    }\n\n    if (i === 128) return n - 1\n\n    let k = i * 16384\n    let j = 0\n\n    if (position > k) j = Math.floor((position - k) / 128)\n\n    while (j <= 127 && get(this.handle, bitOffset(value, i * 128 + j + 128))) {\n      j++\n      k += 128\n    }\n\n    if (j === 128 && i !== 127) return this.skipFirst(value, (i + 1) * 16384)\n\n    if (k > position) position = k\n\n    return position < n ? position : n - 1\n  }\n\n  skipLast (value, position = this.byteLength * 8 - 1) {\n    const n = this.byteLength * 8\n\n    if (position < 0) position += n\n    if (position < 0) return 0\n    if (position >= n) position = n - 1\n\n    let i = Math.floor(position / 16384)\n\n    if (i > 127) return position\n\n    while (i >= 0 && get(this.handle, bitOffset(value, i))) {\n      i--\n    }\n\n    if (i === -1) return 0\n\n    let k = ((i + 1) * 16384) - 1\n    let j = 127\n\n    if (position < k) j = 128 - Math.ceil((k - position) / 128)\n\n    while (j >= 0 && get(this.handle, bitOffset(value, i * 128 + j + 128))) {\n      j--\n      k -= 128\n    }\n\n    if (j === -1 && i !== 0) return this.skipLast(value, i * 16384 - 1)\n\n    if (k < position) position = k\n\n    return position\n  }\n}\n\nclass DenseIndex extends Index {\n  constructor (field, byteLength) {\n    super(byteLength)\n    this.field = field\n\n    const m = field.BYTES_PER_ELEMENT\n\n    for (let i = 0; i < 128; i++) {\n      for (let j = 0; j < 128; j++) {\n        const offset = (i * 128 + j) * 16\n        let allz = true\n        let allo = false\n\n        if (offset + 16 <= this.field.byteLength) {\n          const vec = this.field.subarray(offset / m, (offset + 16) / m)\n\n          allz = simdle.allz(vec)\n          allo = simdle.allo(vec)\n        }\n\n        const k = i * 128 + 128 + j\n\n        set(this.handle, bitOffset(false, k), allz)\n        set(this.handle, bitOffset(true, k), allo)\n      }\n\n      {\n        const offset = byteOffset(false, i * 16 + 16) / 4\n        const allo = simdle.allo(this.handle.subarray(offset, offset + 4))\n\n        set(this.handle, bitOffset(false, i), allo)\n      }\n\n      {\n        const offset = byteOffset(true, i * 16 + 16) / 4\n        const allo = simdle.allo(this.handle.subarray(offset, offset + 4))\n\n        set(this.handle, bitOffset(true, i), allo)\n      }\n    }\n  }\n\n  get byteLength () {\n    if (this._byteLength !== -1) return this._byteLength\n    return this.field.byteLength\n  }\n\n  update (bit) {\n    const n = this.byteLength * 8\n\n    if (bit < 0) bit += n\n    if (bit < 0 || bit >= n) return false\n\n    const m = this.field.BYTES_PER_ELEMENT\n\n    const i = Math.floor(bit / 16384)\n    const j = Math.floor(bit / 128)\n\n    const offset = (j * 16) / m\n    const vec = this.field.subarray(offset, offset + (16 / m))\n\n    const allz = simdle.allz(vec)\n    const allo = simdle.allo(vec)\n\n    let changed = false\n\n    if (set(this.handle, bitOffset(false, 128 + j), allz)) {\n      changed = true\n\n      const offset = byteOffset(false, i * 16 + 16) / 4\n      const allo = simdle.allo(this.handle.subarray(offset, offset + 4))\n\n      set(this.handle, bitOffset(false, i), allo)\n    }\n\n    if (set(this.handle, bitOffset(true, 128 + j), allo)) {\n      changed = true\n\n      const offset = byteOffset(true, i * 16 + 16) / 4\n      const allo = simdle.allo(this.handle.subarray(offset, offset + 4))\n\n      set(this.handle, bitOffset(true, i), allo)\n    }\n\n    return changed\n  }\n}\n\nfunction selectChunk (chunks, offset) {\n  for (let i = 0; i < chunks.length; i++) {\n    const next = chunks[i]\n\n    const start = next.offset\n    const end = next.offset + next.field.byteLength\n\n    if (offset >= start && offset + 16 <= end) {\n      return next\n    }\n  }\n\n  return null\n}\n\nclass SparseIndex extends Index {\n  constructor (chunks, byteLength) {\n    super(byteLength)\n    this.chunks = chunks\n\n    for (let i = 0; i < 128; i++) {\n      for (let j = 0; j < 128; j++) {\n        const offset = (i * 128 + j) * 16\n        let allz = true\n        let allo = false\n\n        const chunk = selectChunk(this.chunks, offset)\n\n        if (chunk !== null) {\n          const m = chunk.field.BYTES_PER_ELEMENT\n\n          const vec = chunk.field.subarray((offset - chunk.offset) / m, (offset - chunk.offset + 16) / m)\n\n          allz = simdle.allz(vec)\n          allo = simdle.allo(vec)\n        }\n\n        const k = i * 128 + 128 + j\n\n        set(this.handle, bitOffset(false, k), allz)\n        set(this.handle, bitOffset(true, k), allo)\n      }\n\n      {\n        const offset = byteOffset(false, i * 16 + 16) / 4\n        const allo = simdle.allo(this.handle.subarray(offset, offset + 4))\n\n        set(this.handle, bitOffset(false, i), allo)\n      }\n\n      {\n        const offset = byteOffset(true, i * 16 + 16) / 4\n        const allo = simdle.allo(this.handle.subarray(offset, offset + 4))\n\n        set(this.handle, bitOffset(true, i), allo)\n      }\n    }\n  }\n\n  get byteLength () {\n    if (this._byteLength !== -1) return this._byteLength\n    const last = this.chunks[this.chunks.length - 1]\n    return last ? last.offset + last.field.byteLength : 0\n  }\n\n  update (bit) {\n    const n = this.byteLength * 8\n\n    if (bit < 0) bit += n\n    if (bit < 0 || bit >= n) return false\n\n    const i = Math.floor(bit / 16384)\n    const j = Math.floor(bit / 128)\n\n    const offset = j * 16\n\n    const chunk = selectChunk(this.chunks, offset)\n\n    if (chunk === null) return false\n\n    const m = chunk.field.BYTES_PER_ELEMENT\n\n    const vec = chunk.field.subarray((offset - chunk.offset) / m, (offset - chunk.offset + 16) / m)\n\n    const allz = simdle.allz(vec)\n    const allo = simdle.allo(vec)\n\n    let changed = false\n\n    if (set(this.handle, bitOffset(false, 128 + j), allz)) {\n      changed = true\n\n      const offset = byteOffset(false, i * 16 + 16) / 4\n      const allo = simdle.allo(this.handle.subarray(offset, offset + 4))\n\n      set(this.handle, bitOffset(false, i), allo)\n    }\n\n    if (set(this.handle, bitOffset(true, 128 + j), allo)) {\n      changed = true\n\n      const offset = byteOffset(true, i * 16 + 16) / 4\n      const allo = simdle.allo(this.handle.subarray(offset, offset + 4))\n\n      set(this.handle, bitOffset(true, i), allo)\n    }\n\n    return changed\n  }\n}\nconst fallback = require('./fallback')\n\ntry {\n  const native = require('quickbit-native')\n\n  // These functions are faster in JavaScript\n  exports.get = fallback.get\n  exports.set = fallback.set\n  exports.fill = fallback.fill\n\n  // These functions are faster in C\n  exports.clear = native.clear\n  exports.findFirst = native.findFirst\n  exports.findLast = native.findLast\n  exports.Index = native.Index\n} catch {\n  module.exports = fallback\n}\n{\n  \"name\": \"quickbit-universal\",\n  \"version\": \"2.2.0\",\n  \"description\": \"Universal wrapper for libquickbit with a JavaScript fallback\",\n  \"main\": \"index.js\",\n  \"files\": [\n    \"fallback.js\",\n    \"index.js\"\n  ],\n  \"browser\": {\n    \"./index.js\": \"./fallback.js\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && brittle test.mjs\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/holepunchto/quickbit-universal.git\"\n  },\n  \"author\": \"Kasper Isager Dalsgarð <kasper@funktionel.co>\",\n  \"license\": \"ISC\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/quickbit-universal/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/quickbit-universal#readme\",\n  \"dependencies\": {\n    \"b4a\": \"^1.6.0\",\n    \"simdle-universal\": \"^1.1.0\"\n  },\n  \"optionalDependencies\": {\n    \"quickbit-native\": \"^2.2.0\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^3.1.0\",\n    \"standard\": \"^17.0.0\"\n  }\n}\nclass CacheEntry {\n  constructor (key, index, map) {\n    this.key = key\n    this.index = index\n    this.map = map\n  }\n}\n\nclass CacheValue {\n  constructor (entry, value) {\n    this.entry = entry\n    this.value = value\n  }\n}\n\nclass Rache {\n  constructor ({ maxSize = 65536, parent = null } = {}) {\n    this.maxSize = parent?.maxSize || maxSize\n\n    this._array = parent?._array || []\n    this._map = new Map()\n  }\n\n  static from (cache) {\n    return cache ? new this({ parent: cache }) : new this()\n  }\n\n  get globalSize () {\n    return this._array.length\n  }\n\n  get size () {\n    return this._map.size\n  }\n\n  sub () {\n    return new Rache({ parent: this })\n  }\n\n  set (key, value) { // ~constant time\n    const existing = this._map.get(key)\n    if (existing !== undefined) {\n      existing.value = value\n      return\n    }\n\n    if (this._array.length >= this.maxSize) this._gc()\n\n    const entry = new CacheEntry(key, this._array.length, this._map)\n    this._array.push(entry)\n    const cacheValue = new CacheValue(entry, value)\n    this._map.set(key, cacheValue)\n  }\n\n  delete (key) {\n    const existing = this._map.get(key)\n    if (existing === undefined) return false\n\n    this._delete(existing.entry.index)\n    return true\n  }\n\n  get (key) {\n    const existing = this._map.get(key)\n    return existing === undefined ? undefined : existing.value\n  }\n\n  * [Symbol.iterator] () {\n    for (const [key, { value }] of this._map) {\n      yield [key, value]\n    }\n  }\n\n  keys () {\n    return this._map.keys()\n  }\n\n  * values () {\n    for (const { value } of this._map.values()) {\n      yield value\n    }\n  }\n\n  clear () {\n    // The entries in map linger on in _array,\n    // so on top of clearing the map, we also kill the ref,\n    // so that any gc running later on the old map won't interfere\n    // (in case a new entry was added with the same key as a cleared entry)\n\n    this._map.clear()\n    this._map = new Map()\n  }\n\n  destroy () {\n    this._map = null\n    this._array = null\n  }\n\n  _gc () {\n    this._delete(Math.floor(Math.random() * this._array.length))\n  }\n\n  _delete (index) { // ~constant time\n    if (index >= this._array.length) throw new Error('Cannot delete unused index (logic bug?)')\n\n    const head = this._array.pop()\n    let removed = head\n\n    if (index < this._array.length) {\n      removed = this._array[index]\n      head.index = index\n      this._array[index] = head\n    }\n\n    removed.map.delete(removed.key)\n  }\n}\n\nmodule.exports = Rache\n{\n  \"name\": \"rache\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Random-eviction cache\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"standard && brittle test.js --coverage\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/holepunchto/rache.git\"\n  },\n  \"author\": \"Holepunch\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/rache/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/rache#readme\",\n  \"files\": [\n    \"index.js\"\n  ],\n  \"dependencies\": {},\n  \"devDependencies\": {\n    \"brittle\": \"^3.5.2\",\n    \"standard\": \"^17.1.0\"\n  }\n}\nconst RandomAccessStorage = require('random-access-storage')\nconst fs = require('fs')\nconst path = require('path')\nconst constants = fs.constants\n\nlet fsext = null\ntry {\n  fsext = require('fs-native-extensions')\n} catch {}\n\nconst RDWR = constants.O_RDWR\nconst RDONLY = constants.O_RDONLY\nconst WRONLY = constants.O_WRONLY\nconst CREAT = constants.O_CREAT\n\nclass Pool {\n  constructor (maxSize) {\n    this.maxSize = maxSize\n    this.active = []\n  }\n\n  _onactive (file) {\n    // suspend a random one when the pool\n    if (this.active.length >= this.maxSize) {\n      const r = Math.floor(Math.random() * this.active.length)\n      this.active[r].suspend()\n    }\n\n    file._pi = this.active.push(file) - 1\n  }\n\n  _oninactive (file) {\n    const head = this.active.pop()\n    if (head !== file) {\n      head._pi = file._pi\n      this.active[head._pi] = head\n    }\n  }\n}\n\nmodule.exports = class RandomAccessFile extends RandomAccessStorage {\n  constructor (filename, opts = {}) {\n    const size = opts.size || (opts.truncate ? 0 : -1)\n\n    super()\n\n    if (opts.directory) filename = path.join(opts.directory, path.resolve('/', filename).replace(/^\\w+:\\\\/, ''))\n\n    this.directory = opts.directory || null\n    this.filename = filename\n    this.fd = 0\n\n    const {\n      readable = true,\n      writable = true\n    } = opts\n\n    this.mode = readable && writable ? RDWR : (readable ? RDONLY : WRONLY)\n\n    this._pi = 0 // pool index\n    this._pool = opts.pool || null\n    this._size = size\n    this._rmdir = !!opts.rmdir\n    this._lock = opts.lock === true\n    this._sparse = opts.sparse === true\n    this._alloc = opts.alloc || Buffer.allocUnsafe\n    this._alwaysCreate = size >= 0\n  }\n\n  static createPool (maxSize) {\n    return new Pool(maxSize)\n  }\n\n  _open (req) {\n    const create = this._alwaysCreate || this.writing // .writing comes from RAS\n    const self = this\n    const mode = this.mode | (create ? CREAT : 0)\n\n    if (create) fs.mkdir(path.dirname(this.filename), { recursive: true }, ondir)\n    else ondir(null)\n\n    function ondir (err) {\n      if (err) return req.callback(err)\n      fs.open(self.filename, mode, onopen)\n    }\n\n    function onopen (err, fd) {\n      if (err) return onerror(err)\n\n      self.fd = fd\n\n      if (!self._lock || !fsext) return onlock(null)\n\n      // Should we aquire a read lock?\n      const shared = self.mode === RDONLY\n\n      if (fsext.tryLock(self.fd, { shared })) onlock(null)\n      else onlock(createLockError(self.filename))\n    }\n\n    function onlock (err) {\n      if (err) return onerrorafteropen(err)\n\n      if (!self._sparse || !fsext || self.mode === RDONLY) return onsparse(null)\n\n      fsext.sparse(self.fd).then(onsparse, onsparse)\n    }\n\n    function onsparse (err) {\n      if (err) return onerrorafteropen(err)\n\n      if (self._size < 0) return ontruncate(null)\n\n      fs.ftruncate(self.fd, self._size, ontruncate)\n    }\n\n    function ontruncate (err) {\n      if (err) return onerrorafteropen(err)\n      if (self._pool !== null) self._pool._onactive(self)\n      req.callback(null)\n    }\n\n    function onerror (err) {\n      req.callback(err)\n    }\n\n    function onerrorafteropen (err) {\n      fs.close(self.fd, function () {\n        self.fd = 0\n        onerror(err)\n      })\n    }\n  }\n\n  _write (req) {\n    const data = req.data\n    const fd = this.fd\n\n    fs.write(fd, data, 0, req.size, req.offset, onwrite)\n\n    function onwrite (err, wrote) {\n      if (err) return req.callback(err)\n\n      req.size -= wrote\n      req.offset += wrote\n\n      if (!req.size) return req.callback(null)\n      fs.write(fd, data, data.length - req.size, req.size, req.offset, onwrite)\n    }\n  }\n\n  _read (req) {\n    const self = this\n    const data = req.data || this._alloc(req.size)\n    const fd = this.fd\n\n    if (!req.size) return process.nextTick(readEmpty, req)\n    fs.read(fd, data, 0, req.size, req.offset, onread)\n\n    function onread (err, read) {\n      if (err) return req.callback(err)\n      if (!read) return req.callback(createReadError(self.filename, req.offset, req.size))\n\n      req.size -= read\n      req.offset += read\n\n      if (!req.size) return req.callback(null, data)\n      fs.read(fd, data, data.length - req.size, req.size, req.offset, onread)\n    }\n  }\n\n  _del (req) {\n    if (req.size === Infinity) return this._truncate(req) // TODO: remove this when all callsites use truncate\n\n    if (!fsext) return req.callback(null)\n\n    fsext.trim(this.fd, req.offset, req.size).then(ontrim, ontrim)\n\n    function ontrim (err) {\n      req.callback(err)\n    }\n  }\n\n  _truncate (req) {\n    fs.ftruncate(this.fd, req.offset, ontruncate)\n\n    function ontruncate (err) {\n      req.callback(err)\n    }\n  }\n\n  _stat (req) {\n    fs.fstat(this.fd, onstat)\n\n    function onstat (err, st) {\n      req.callback(err, st)\n    }\n  }\n\n  _close (req) {\n    const self = this\n\n    fs.close(this.fd, onclose)\n\n    function onclose (err) {\n      if (err) return req.callback(err)\n      if (self._pool !== null) self._pool._oninactive(self)\n      self.fd = 0\n      req.callback(null)\n    }\n  }\n\n  _unlink (req) {\n    const self = this\n\n    const root = this.directory && path.resolve(path.join(this.directory, '.'))\n    let dir = path.resolve(path.dirname(this.filename))\n\n    fs.unlink(this.filename, onunlink)\n\n    function onunlink (err) {\n      // if the file isn't there, its already unlinked, ignore\n      if (err && err.code === 'ENOENT') err = null\n\n      if (err || !self._rmdir || !root || dir === root) return req.callback(err)\n      fs.rmdir(dir, onrmdir)\n    }\n\n    function onrmdir (err) {\n      dir = path.join(dir, '..')\n      if (err || dir === root) return req.callback(null)\n      fs.rmdir(dir, onrmdir)\n    }\n  }\n}\n\nfunction readEmpty (req) {\n  req.callback(null, Buffer.alloc(0))\n}\n\nfunction createLockError (path) {\n  const err = new Error('ELOCKED: File is locked')\n  err.code = 'ELOCKED'\n  err.path = path\n  return err\n}\n\nfunction createReadError (path, offset, size) {\n  const err = new Error('EPARTIALREAD: Could not satisfy length')\n  err.code = 'EPARTIALREAD'\n  err.path = path\n  err.offset = offset\n  err.size = size\n  return err\n}\n{\n  \"name\": \"random-access-file\",\n  \"version\": \"4.1.2\",\n  \"description\": \"Continuous reading or writing to a file using random offsets and lengths\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"standard && brittle test/*.js\"\n  },\n  \"browser\": \"./browser.js\",\n  \"files\": [\n    \"index.js\",\n    \"browser.js\"\n  ],\n  \"imports\": {\n    \"fs\": {\n      \"bare\": \"bare-fs\",\n      \"default\": \"fs\"\n    },\n    \"path\": {\n      \"bare\": \"bare-path\",\n      \"default\": \"path\"\n    }\n  },\n  \"dependencies\": {\n    \"bare-fs\": \"^4.0.1\",\n    \"bare-path\": \"^3.0.0\",\n    \"random-access-storage\": \"^3.0.0\"\n  },\n  \"optionalDependencies\": {\n    \"fs-native-extensions\": \"^1.3.1\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^3.3.0\",\n    \"standard\": \"^17.0.0\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/random-access-storage/random-access-file.git\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/random-access-storage/random-access-file/issues\"\n  },\n  \"homepage\": \"https://github.com/random-access-storage/random-access-file\"\n}\nconst EventEmitter = require('events')\nconst queueTick = require('queue-tick')\n\nconst NOT_READABLE = defaultImpl(new Error('Not readable'))\nconst NOT_WRITABLE = defaultImpl(new Error('Not writable'))\nconst NOT_DELETABLE = defaultImpl(new Error('Not deletable'))\nconst NOT_STATABLE = defaultImpl(new Error('Not statable'))\n\nconst DEFAULT_OPEN = defaultImpl(null)\nconst DEFAULT_CLOSE = defaultImpl(null)\nconst DEFAULT_UNLINK = defaultImpl(null)\n\n// NON_BLOCKING_OPS\nconst READ_OP = 0\nconst WRITE_OP = 1\nconst DEL_OP = 2\nconst TRUNCATE_OP = 3\nconst STAT_OP = 4\n\n// BLOCKING_OPS\nconst OPEN_OP = 5\nconst SUSPEND_OP = 6\nconst CLOSE_OP = 7\nconst UNLINK_OP = 8\n\nmodule.exports = class RandomAccessStorage extends EventEmitter {\n  constructor (opts) {\n    super()\n\n    this._queued = []\n    this._pending = 0\n    this._needsOpen = true\n\n    this.opened = false\n    this.suspended = false\n    this.closed = false\n    this.unlinked = false\n    this.writing = false\n\n    if (opts) {\n      if (opts.open) this._open = opts.open\n      if (opts.read) this._read = opts.read\n      if (opts.write) this._write = opts.write\n      if (opts.del) this._del = opts.del\n      if (opts.truncate) this._truncate = opts.truncate\n      if (opts.stat) this._stat = opts.stat\n      if (opts.suspend) this._suspend = opts.suspend\n      if (opts.close) this._close = opts.close\n      if (opts.unlink) this._unlink = opts.unlink\n    }\n\n    this.readable = this._read !== RandomAccessStorage.prototype._read\n    this.writable = this._write !== RandomAccessStorage.prototype._write\n    this.deletable = this._del !== RandomAccessStorage.prototype._del\n    this.truncatable = this._truncate !== RandomAccessStorage.prototype._truncate || this.deletable\n    this.statable = this._stat !== RandomAccessStorage.prototype._stat\n  }\n\n  read (offset, size, cb) {\n    this.run(new Request(this, READ_OP, offset, size, null, cb), false)\n  }\n\n  _read (req) {\n    return NOT_READABLE(req)\n  }\n\n  write (offset, data, cb) {\n    if (!cb) cb = noop\n    this.run(new Request(this, WRITE_OP, offset, data.length, data, cb), true)\n  }\n\n  _write (req) {\n    return NOT_WRITABLE(req)\n  }\n\n  del (offset, size, cb) {\n    if (!cb) cb = noop\n    this.run(new Request(this, DEL_OP, offset, size, null, cb), true)\n  }\n\n  _del (req) {\n    return NOT_DELETABLE(req)\n  }\n\n  truncate (offset, cb) {\n    if (!cb) cb = noop\n    this.run(new Request(this, TRUNCATE_OP, offset, 0, null, cb), true)\n  }\n\n  _truncate (req) {\n    req.size = Infinity\n    this._del(req)\n  }\n\n  stat (cb) {\n    this.run(new Request(this, STAT_OP, 0, 0, null, cb), false)\n  }\n\n  _stat (req) {\n    return NOT_STATABLE(req)\n  }\n\n  open (cb) {\n    if (!cb) cb = noop\n    if (this.opened && !this._needsOpen) return nextTickCallback(cb)\n    this._needsOpen = false\n    queueAndRun(this, new Request(this, OPEN_OP, 0, 0, null, cb))\n  }\n\n  _open (req) {\n    return DEFAULT_OPEN(req)\n  }\n\n  suspend (cb) {\n    if (!cb) cb = noop\n    if (this.closed || this.suspended) return nextTickCallback(cb)\n    this._needsOpen = true\n    queueAndRun(this, new Request(this, SUSPEND_OP, 0, 0, null, cb))\n  }\n\n  _suspend (req) {\n    this._close(req)\n  }\n\n  close (cb) {\n    if (!cb) cb = noop\n    if (this.closed) return nextTickCallback(cb)\n    queueAndRun(this, new Request(this, CLOSE_OP, 0, 0, null, cb))\n  }\n\n  _close (req) {\n    return DEFAULT_CLOSE(req)\n  }\n\n  unlink (cb) {\n    if (!cb) cb = noop\n    if (!this.closed) this.close(noop)\n    queueAndRun(this, new Request(this, UNLINK_OP, 0, 0, null, cb))\n  }\n\n  _unlink (req) {\n    return DEFAULT_UNLINK(req)\n  }\n\n  run (req, writing) {\n    if (writing && !this.writing) {\n      this.writing = true\n      this._needsOpen = true\n    }\n\n    if (this._needsOpen) this.open(noop)\n    if (this._queued.length) this._queued.push(req)\n    else req._run()\n  }\n}\n\nclass Request {\n  constructor (self, type, offset, size, data, cb) {\n    this.type = type\n    this.offset = offset\n    this.size = size\n    this.data = data\n    this.storage = self\n\n    this._sync = false\n    this._callback = cb\n    this._openError = null\n  }\n\n  _maybeOpenError (err) {\n    if (this.type !== OPEN_OP) return\n    const queued = this.storage._queued\n    for (let i = 1; i < queued.length; i++) {\n      const q = queued[i]\n      if (q.type === OPEN_OP) break\n      q._openError = err\n    }\n  }\n\n  _unqueue (err) {\n    const ra = this.storage\n    const queued = ra._queued\n\n    if (err) {\n      this._maybeOpenError(err)\n    } else if (this.type > 4) {\n      switch (this.type) {\n        case OPEN_OP:\n          if (ra.suspended) {\n            ra.suspended = false\n            ra.emit('unsuspend')\n          }\n          if (!ra.opened) {\n            ra.opened = true\n            ra.emit('open')\n          }\n          break\n\n        case SUSPEND_OP:\n          if (!ra.suspended) {\n            ra.suspended = true\n            ra.emit('suspend')\n          }\n          break\n\n        case CLOSE_OP:\n          if (!ra.closed) {\n            ra.closed = true\n            ra.emit('close')\n          }\n          break\n\n        case UNLINK_OP:\n          if (!ra.unlinked) {\n            ra.unlinked = true\n            ra.emit('unlink')\n          }\n          break\n      }\n    }\n\n    if (queued.length && queued[0] === this) queued.shift()\n\n    if (!--ra._pending) drainQueue(ra)\n  }\n\n  callback (err, val) {\n    if (this._sync) return nextTick(this, err, val)\n    this._unqueue(err)\n    this._callback(err, val)\n  }\n\n  _openAndNotClosed () {\n    const ra = this.storage\n    if (ra.opened && !ra.closed && !ra.suspended) return true\n    if (!ra.opened || ra.suspended) nextTick(this, this._openError || new Error('Not opened'))\n    else if (ra.closed) nextTick(this, new Error('Closed'))\n    return false\n  }\n\n  _open () {\n    const ra = this.storage\n\n    if (ra.opened && !ra.suspended) return nextTick(this, null)\n    if (ra.closed) return nextTick(this, new Error('Closed'))\n\n    ra._open(this)\n  }\n\n  _run () {\n    const ra = this.storage\n    ra._pending++\n\n    this._sync = true\n\n    switch (this.type) {\n      case READ_OP:\n        if (this._openAndNotClosed()) ra._read(this)\n        break\n\n      case WRITE_OP:\n        if (this._openAndNotClosed()) ra._write(this)\n        break\n\n      case DEL_OP:\n        if (this._openAndNotClosed()) ra._del(this)\n        break\n\n      case TRUNCATE_OP:\n        if (this._openAndNotClosed()) ra._truncate(this)\n        break\n\n      case STAT_OP:\n        if (this._openAndNotClosed()) ra._stat(this)\n        break\n\n      case OPEN_OP:\n        this._open()\n        break\n\n      case SUSPEND_OP:\n        if (ra.closed || !ra.opened || ra.suspended) nextTick(this, null)\n        else ra._suspend(this)\n        break\n\n      case CLOSE_OP:\n        if (ra.closed || !ra.opened || ra.suspended) nextTick(this, null)\n        else ra._close(this)\n        break\n\n      case UNLINK_OP:\n        if (ra.unlinked) nextTick(this, null)\n        else ra._unlink(this)\n        break\n    }\n\n    this._sync = false\n  }\n}\n\nfunction queueAndRun (self, req) {\n  self._queued.push(req)\n  if (!self._pending) req._run()\n}\n\nfunction drainQueue (self) {\n  const queued = self._queued\n\n  while (queued.length > 0) {\n    const blocking = queued[0].type > 4\n    if (!blocking || !self._pending) queued[0]._run()\n    if (blocking) return\n    queued.shift()\n  }\n}\n\nfunction defaultImpl (err) {\n  return overridable\n\n  function overridable (req) {\n    nextTick(req, err)\n  }\n}\n\nfunction nextTick (req, err, val) {\n  queueTick(() => req.callback(err, val))\n}\n\nfunction nextTickCallback (cb) {\n  queueTick(() => cb(null))\n}\n\nfunction noop () {}\n{\n  \"name\": \"random-access-storage\",\n  \"version\": \"3.0.2\",\n  \"description\": \"Easily make random-access-storage instances\",\n  \"main\": \"index.js\",\n  \"imports\": {\n    \"events\": {\n      \"bare\": \"bare-events\",\n      \"default\": \"events\"\n    }\n  },\n  \"dependencies\": {\n    \"bare-events\": \"^2.2.0\",\n    \"queue-tick\": \"^1.0.0\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^3.0.0\",\n    \"standard\": \"^17.0.0\"\n  },\n  \"files\": [\n    \"index.js\"\n  ],\n  \"scripts\": {\n    \"test\": \"standard && brittle test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/random-access-storage/random-access-storage.git\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/random-access-storage/random-access-storage/issues\"\n  },\n  \"homepage\": \"https://github.com/random-access-storage/random-access-storage\"\n}\nmodule.exports = class RandomArrayIterator {\n  constructor (values) {\n    this.values = values\n    this.start = 0\n    this.length = this.values.length\n  }\n\n  next () {\n    if (this.length === 0) {\n      if (this.start === 0) return { done: true, value: undefined }\n      this.length = this.start\n      this.start = 0\n    }\n\n    const i = this.start + ((Math.random() * this.length) | 0)\n    const j = this.start + --this.length\n    const value = this.values[i]\n\n    this.values[i] = this.values[j]\n    this.values[j] = value\n\n    return { done: false, value }\n  }\n\n  dequeue () {\n    this.values[this.start + this.length] = this.values[this.values.length - 1]\n    this.values.pop()\n  }\n\n  requeue () {\n    const i = this.start + this.length\n    const value = this.values[i]\n    this.values[i] = this.values[this.start]\n    this.values[this.start++] = value\n  }\n\n  restart () {\n    this.start = 0\n    this.length = this.values.length\n    return this\n  }\n\n  [Symbol.iterator] () {\n    return this\n  }\n}\n{\n  \"name\": \"random-array-iterator\",\n  \"version\": \"1.0.0\",\n  \"description\": \"An iterator to iterate an array in random order with controls to requeue or dequeue elements during the iteration\",\n  \"main\": \"index.js\",\n  \"dependencies\": {},\n  \"devDependencies\": {\n    \"standard\": \"^16.0.3\",\n    \"tape\": \"^5.0.1\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && tape test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mafintosh/random-array-iterator.git\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mafintosh/random-array-iterator/issues\"\n  },\n  \"homepage\": \"https://github.com/mafintosh/random-array-iterator\"\n}\nconst EventEmitter = require('events')\n\nmodule.exports = class ReadyResource extends EventEmitter {\n  constructor () {\n    super()\n\n    this.opening = null\n    this.closing = null\n\n    this.opened = false\n    this.closed = false\n  }\n\n  ready () {\n    if (this.opening !== null) return this.opening\n    this.opening = open(this)\n    return this.opening\n  }\n\n  close () {\n    if (this.closing !== null) return this.closing\n    this.closing = close(this)\n    return this.closing\n  }\n\n  async _open () {\n    // add impl here\n  }\n\n  async _close () {\n    // add impl here\n  }\n}\n\nasync function open (self) {\n  // open after close\n  if (self.closing !== null) return\n\n  try {\n    await self._open()\n  } catch (err) {\n    self.close() // safe to run in bg\n    throw err\n  }\n\n  self.opened = true\n  self.emit('ready')\n}\n\nasync function close (self) {\n  try {\n    if (self.opened === false && self.opening !== null) await self.opening\n  } catch {\n    // ignore errors on closing\n  }\n  if (self.opened === true || self.opening === null) await self._close()\n  self.closed = true\n  self.emit('close')\n}\n{\n  \"name\": \"ready-resource\",\n  \"version\": \"1.1.2\",\n  \"description\": \"Modern single resource management\",\n  \"main\": \"index.js\",\n  \"imports\": {\n    \"events\": {\n      \"bare\": \"bare-events\",\n      \"default\": \"events\"\n    }\n  },\n  \"files\": [\n    \"index.js\"\n  ],\n  \"scripts\": {\n    \"test\": \"standard && brittle test.js\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^3.1.0\",\n    \"standard\": \"^17.0.0\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/holepunchto/ready-resource.git\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/ready-resource/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/ready-resource\",\n  \"dependencies\": {\n    \"bare-events\": \"^2.2.0\"\n  }\n}\nconst b4a = require('b4a')\n\nvar EMPTY = []\n\nmodule.exports = RecordCache\n\nfunction RecordSet () {\n  this.list = []\n  this.map = new Map()\n}\n\nRecordSet.prototype.add = function (record, value) {\n  var k = toString(record)\n  var r = this.map.get(k)\n  if (r) return false\n\n  r = {index: this.list.length, record: value || record}\n  this.list.push(r)\n  this.map.set(k, r)\n  return true\n}\n\nRecordSet.prototype.remove = function (record) {\n  var k = toString(record)\n  var r = this.map.get(k)\n  if (!r) return false\n\n  swap(this.list, r.index, this.list.length - 1)\n  this.list.pop()\n  this.map.delete(k)\n  return true\n}\n\nfunction RecordStore () {\n  this.records = new Map()\n  this.size = 0\n}\n\nRecordStore.prototype.add = function (name, record, value) {\n  var r = this.records.get(name)\n\n  if (!r) {\n    r = new RecordSet()\n    this.records.set(name, r)\n  }\n\n  if (r.add(record, value)) {\n    this.size++\n    return true\n  }\n\n  return false\n}\n\nRecordStore.prototype.remove = function (name, record, value) {\n  var r = this.records.get(name)\n  if (!r) return false\n\n  if (r.remove(record, value)) {\n    this.size--\n    if (!r.map.size) this.records.delete(name)\n    return true\n  }\n\n  return false\n}\n\nRecordStore.prototype.get = function (name) {\n  var r = this.records.get(name)\n  return r ? r.list : EMPTY\n}\n\nfunction RecordCache (opts) {\n  if (!(this instanceof RecordCache)) return new RecordCache(opts)\n  if (!opts) opts = {}\n\n  this.maxSize = opts.maxSize || Infinity\n  this.maxAge = opts.maxAge || 0\n\n  this._onstale = opts.onStale || opts.onstale || null\n  this._fresh = new RecordStore()\n  this._stale = new RecordStore()\n  this._interval = null\n  this._gced = false\n\n  if (this.maxAge && this.maxAge < Infinity) {\n    // 2/3 gives us a span of 0.66-1.33 maxAge or avg maxAge\n    var tick = Math.ceil(2 / 3 * this.maxAge)\n    this._interval = setInterval(this._gcAuto.bind(this), tick)\n    if (this._interval.unref) this._interval.unref()\n  }\n}\n\nObject.defineProperty(RecordCache.prototype, 'size', {\n  get: function () {\n    return this._fresh.size + this._stale.size\n  }\n})\n\nRecordCache.prototype.add = function (name, record, value) {\n  this._stale.remove(name, record, value)\n  if (this._fresh.add(name, record, value) && this._fresh.size > this.maxSize) {\n    this._gc()\n  }\n}\n\nRecordCache.prototype.remove = function (name, record, value) {\n  this._fresh.remove(name, record, value)\n  this._stale.remove(name, record, value)\n}\n\nRecordCache.prototype.get = function (name, n) {\n  var a = this._fresh.get(name)\n  var b = this._stale.get(name)\n  var aLen = a.length\n  var bLen = b.length\n  var len = aLen + bLen\n\n  if (n > len || !n) n = len\n  var result = new Array(n)\n\n  for (var i = 0; i < n; i++) {\n    var j = Math.floor(Math.random() * (aLen + bLen))\n    if (j < aLen) {\n      result[i] = a[j].record\n      swap(a, j, --aLen)\n    } else {\n      j -= aLen\n      result[i] = b[j].record\n      swap(b, j, --bLen)\n    }\n  }\n\n  return result\n}\n\nRecordCache.prototype._gcAuto = function () {\n  if (!this._gced) this._gc()\n  this._gced = false\n}\n\nRecordCache.prototype._gc = function () {\n  if (this._onstale && this._stale.size > 0) this._onstale(this._stale)\n  this._stale = this._fresh\n  this._fresh = new RecordStore()\n  this._gced = true\n}\n\nRecordCache.prototype.clear = function () {\n  this._gc()\n  this._gc()\n}\n\nRecordCache.prototype.destroy = function () {\n  this.clear()\n  clearInterval(this._interval)\n  this._interval = null\n}\n\nfunction toString (record) {\n  return b4a.isBuffer(record) ? b4a.toString(record, 'hex') : record\n}\n\nfunction swap (list, a, b) {\n  var tmp = list[a]\n  tmp.index = b\n  list[b].index = a\n  list[a] = list[b]\n  list[b] = tmp\n}\n{\n  \"name\": \"record-cache\",\n  \"version\": \"1.2.0\",\n  \"description\": \"Cache optimised for record like things\",\n  \"main\": \"index.js\",\n  \"dependencies\": {\n    \"b4a\": \"^1.3.1\"\n  },\n  \"devDependencies\": {\n    \"standard\": \"^10.0.3\",\n    \"tape\": \"^4.8.0\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && tape test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mafintosh/record-cache.git\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mafintosh/record-cache/issues\"\n  },\n  \"homepage\": \"https://github.com/mafintosh/record-cache\"\n}\nmodule.exports = safetyCatch\n\nfunction isActuallyUncaught (err) {\n  if (!err) return false\n  return err instanceof TypeError ||\n    err instanceof SyntaxError ||\n    err instanceof ReferenceError ||\n    err instanceof EvalError ||\n    err instanceof RangeError ||\n    err instanceof URIError ||\n    err.code === 'ERR_ASSERTION'\n}\n\nfunction throwErrorNT (err) {\n  queueMicrotask(() => { throw err })\n}\n\nfunction safetyCatch (err) {\n  if (isActuallyUncaught(err)) {\n    throwErrorNT(err)\n    throw err\n  }\n}\n{\n  \"name\": \"safety-catch\",\n  \"version\": \"1.0.2\",\n  \"description\": \"Small module that makes sure your catch, caught an actual error and not a programming mistake or assertion\",\n  \"main\": \"index.js\",\n  \"dependencies\": {},\n  \"devDependencies\": {},\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mafintosh/safety-catch.git\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mafintosh/safety-catch/issues\"\n  },\n  \"homepage\": \"https://github.com/mafintosh/safety-catch\"\n}\nconst set = require('unordered-set')\n\nmodule.exports = opts => new ShuffledPriorityQueue(opts)\n\nclass ShuffledPriorityQueue {\n  constructor (opts) {\n    this.priorities = []\n    this.equals = (opts && opts.equals) || null\n  }\n\n  get length () {\n    return this.priorities.reduce(add, 0)\n  }\n\n  [Symbol.iterator] () {\n    return new Iterator(this)\n  }\n\n  head () {\n    for (let i = this.priorities.length - 1; i >= 0; i--) {\n      const q = this.priorities[i]\n      if (q.length) return shuffle(q, 0)\n    }\n    return null\n  }\n\n  tail () {\n    for (let i = 0; i < this.priorities.length; i++) {\n      const q = this.priorities[i]\n      if (q.length) return shuffle(q, 0)\n    }\n    return null\n  }\n\n  prev (prev) {\n    if (!prev) return this.tail()\n    return next(this.priorities, prev, 1)\n  }\n\n  next (prev) {\n    if (!prev) return this.head()\n    return next(this.priorities, prev, -1)\n  }\n\n  shift () {\n    return this.remove(this.head())\n  }\n\n  pop () {\n    return this.remove(this.tail())\n  }\n\n  add (val) {\n    const prio = val.priority || 0\n    while (prio >= this.priorities.length) this.priorities.push([])\n    set.add(this.priorities[prio], val)\n    return val\n  }\n\n  remove (val) {\n    if (!val) return null\n\n    if (val._index === undefined) {\n      val = this.find(val)\n      if (!val) return null\n    }\n\n    return set.remove(this.priorities[val.priority || 0], val)\n  }\n\n  has (val) {\n    if (val._index === undefined) return this.find(val)\n    const priority = val.priority || 0\n    if (priority >= this.priorities.length) return false\n    return set.has(this.priorities[priority], val)\n  }\n\n  find (val) {\n    if (val._index !== undefined) return val\n\n    const prio = val.priority || 0\n    const qs = this.priorities\n    if (prio >= qs.length) return null\n\n    const q = qs[prio]\n\n    for (let i = 0; i < q.length; i++) {\n      if (this.equals(q[i], val)) return q[i]\n    }\n\n    return null\n  }\n}\n\nclass Iterator {\n  constructor (queue) {\n    this.prev = null\n    this.queue = queue\n  }\n\n  next () {\n    const next = this.queue.next(this.prev)\n    this.prev = next\n    return { done: !next, value: next }\n  }\n}\n\nfunction shuffle (q, i) {\n  const ran = i + Math.floor(Math.random() * (q.length - i))\n  set.swap(q, q[ran], q[i])\n  return q[i]\n}\n\nfunction next (queues, prev, inc) {\n  let i = prev.priority || 0\n  let j = (prev._index || 0) + 1\n\n  while (true) {\n    if (i < 0 || i >= queues.length) return null\n    const q = queues[i]\n\n    if (j >= q.length) {\n      i += inc\n      j = 0\n      continue\n    }\n\n    return shuffle(q, j)\n  }\n}\n\nfunction add (len, b) {\n  return len + b.length\n}\n{\n  \"name\": \"shuffled-priority-queue\",\n  \"version\": \"2.1.0\",\n  \"description\": \"A priority queue that shuffles elements with the same priority.\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"standard && tape test.js\"\n  },\n  \"dependencies\": {\n    \"unordered-set\": \"^2.0.1\"\n  },\n  \"devDependencies\": {\n    \"standard\": \"^12.0.1\",\n    \"tape\": \"^4.9.1\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mafintosh/shuffled-priority-queue.git\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mafintosh/shuffled-priority-queue/issues\"\n  },\n  \"homepage\": \"https://github.com/mafintosh/shuffled-priority-queue\"\n}\nmodule.exports = class Signal {\n  constructor () {\n    this._resolve = null\n    this._reject = null\n    this._promise = null\n    this._bind = bind.bind(this)\n    this._onerror = clear.bind(this)\n    this._onsuccess = clear.bind(this, null)\n    this._timers = new Set()\n  }\n\n  wait (max) {\n    if (!this._promise) {\n      this._promise = new Promise(this._bind)\n      this._promise.then(this._onsuccess).catch(this._onerror)\n    }\n    if (max) return this._sleep(max)\n    return this._promise\n  }\n\n  _sleep (max) {\n    const s = new Promise((resolve, reject) => {\n      const done = () => {\n        this._timers.delete(state)\n        resolve(true)\n      }\n      const id = setTimeout(done, max)\n      const state = { id, resolve, reject }\n      this._timers.add(state)\n    })\n\n    return s\n  }\n\n  notify (err) {\n    if (!this._promise) return\n    const resolve = this._resolve\n    const reject = this._reject\n    this._promise = null\n    if (err) reject(err)\n    else resolve(true)\n  }\n}\n\nfunction clear (err) {\n  for (const { id, resolve, reject } of this._timers) {\n    clearTimeout(id)\n    if (err) reject(err)\n    else resolve(true)\n  }\n  this._timers.clear()\n}\n\nfunction bind (resolve, reject) {\n  this._resolve = resolve\n  this._reject = reject\n}\n{\n  \"name\": \"signal-promise\",\n  \"version\": \"1.0.3\",\n  \"description\": \"Simple wait/notify promise with optional max wait time\",\n  \"main\": \"index.js\",\n  \"dependencies\": {},\n  \"devDependencies\": {},\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mafintosh/signal-promise.git\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mafintosh/signal-promise/issues\"\n  },\n  \"homepage\": \"https://github.com/mafintosh/signal-promise\"\n}\nvar varint = require('varint')\nexports.encode = function encode (v, b, o) {\n  v = v >= 0 ? v*2 : v*-2 - 1\n  var r = varint.encode(v, b, o)\n  encode.bytes = varint.encode.bytes\n  return r\n}\nexports.decode = function decode (b, o) {\n  var v = varint.decode(b, o)\n  decode.bytes = varint.decode.bytes\n  return v & 1 ? (v+1) / -2 : v / 2\n}\n\nexports.encodingLength = function (v) {\n  return varint.encodingLength(v >= 0 ? v*2 : v*-2 - 1)\n}\n{\n  \"name\": \"signed-varint\",\n  \"description\": \"efficiently store signed integers in varint\",\n  \"version\": \"2.0.1\",\n  \"homepage\": \"https://github.com/dominictarr/signed-varint\",\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/dominictarr/signed-varint.git\"\n  },\n  \"dependencies\": {\n    \"varint\": \"~5.0.0\"\n  },\n  \"devDependencies\": {\n    \"tape\": \"~2.12.3\"\n  },\n  \"scripts\": {\n    \"test\": \"node test.js\"\n  },\n  \"author\": \"Dominic Tarr <dominic.tarr@gmail.com> (http://dominictarr.com)\",\n  \"license\": \"MIT\"\n}\nmodule.exports = require('node-gyp-build')(__dirname)\nconst binding = require('./binding')\nconst b4a = require('b4a')\n\nfunction unary (u8, u16, u32) {\n  return function unary (buf, result = b4a.allocUnsafe(buf.byteLength)) {\n    if (buf.byteLength % 16 !== 0) {\n      throw new Error('Buffer length must be a multiple of 16')\n    }\n\n    if (buf.byteLength !== result.byteLength) {\n      throw new Error('Length of result buffer is insufficient')\n    }\n\n    const n = buf.BYTES_PER_ELEMENT\n\n    if (n === 1) u8(buf, result)\n    else if (n === 2) u16(buf, result)\n    else u32(buf, result)\n\n    return result\n  }\n}\n\nfunction binary (u8, u16, u32) {\n  return function binary (a, b, result = b4a.allocUnsafe(a.byteLength)) {\n    if (a.byteLength % 16 !== 0) {\n      throw new Error('Buffer length must be a multiple of 16')\n    }\n\n    if (a.byteLength !== b.byteLength || a.byteLength !== result.byteLength) {\n      throw new Error('Buffers must be the same length')\n    }\n\n    const n = a.BYTES_PER_ELEMENT\n\n    if (n === 1) u8(a, b, result)\n    else if (n === 2) u16(a, b, result)\n    else u32(a, b, result)\n\n    return result\n  }\n}\n\nfunction reduce (u8, u16, u32) {\n  return function reduce (buf) {\n    if (buf.byteLength % 16 !== 0) {\n      throw new Error('Buffer length must be a multiple of 16')\n    }\n\n    const n = buf.BYTES_PER_ELEMENT\n\n    if (n === 1) return u8(buf)\n    if (n === 2) return u16(buf)\n    return u32(buf)\n  }\n}\n\nexports.allo = function allo (buf) {\n  if (buf.byteLength % 16 !== 0) {\n    throw new Error('Buffer length must be a multiple of 16')\n  }\n\n  return binding.simdle_napi_allo_v128(buf) !== 0\n}\n\nexports.allz = function allz (buf) {\n  if (buf.byteLength % 16 !== 0) {\n    throw new Error('Buffer length must be a multiple of 16')\n  }\n\n  return binding.simdle_napi_allz_v128(buf) !== 0\n}\n\nexports.and = binary(\n  binding.simdle_napi_and_v128_u8,\n  binding.simdle_napi_and_v128_u16,\n  binding.simdle_napi_and_v128_u32\n)\n\nexports.clear = binary(\n  binding.simdle_napi_clear_v128_u8,\n  binding.simdle_napi_clear_v128_u16,\n  binding.simdle_napi_clear_v128_u32\n)\n\nexports.clo = unary(\n  binding.simdle_napi_clo_v128_u8,\n  binding.simdle_napi_clo_v128_u16,\n  binding.simdle_napi_clo_v128_u32\n)\n\nexports.clz = unary(\n  binding.simdle_napi_clz_v128_u8,\n  binding.simdle_napi_clz_v128_u16,\n  binding.simdle_napi_clz_v128_u32\n)\n\nexports.cnt = unary(\n  binding.simdle_napi_cnt_v128_u8,\n  binding.simdle_napi_cnt_v128_u16,\n  binding.simdle_napi_cnt_v128_u32\n)\n\nexports.cto = unary(\n  binding.simdle_napi_cto_v128_u8,\n  binding.simdle_napi_cto_v128_u16,\n  binding.simdle_napi_cto_v128_u32\n)\n\nexports.ctz = unary(\n  binding.simdle_napi_ctz_v128_u8,\n  binding.simdle_napi_ctz_v128_u16,\n  binding.simdle_napi_ctz_v128_u32\n)\n\nexports.not = unary(\n  binding.simdle_napi_not_v128_u8,\n  binding.simdle_napi_not_v128_u16,\n  binding.simdle_napi_not_v128_u32\n)\n\nexports.or = binary(\n  binding.simdle_napi_or_v128_u8,\n  binding.simdle_napi_or_v128_u16,\n  binding.simdle_napi_or_v128_u32\n)\n\nexports.sum = reduce(\n  binding.simdle_napi_sum_v128_u8,\n  binding.simdle_napi_sum_v128_u16,\n  binding.simdle_napi_sum_v128_u32\n)\n\nexports.xor = binary(\n  binding.simdle_napi_xor_v128_u8,\n  binding.simdle_napi_xor_v128_u16,\n  binding.simdle_napi_xor_v128_u32\n)\n{\n  \"name\": \"simdle-native\",\n  \"version\": \"1.3.5\",\n  \"description\": \"libsimdle JavaScript bindings for Node.js\",\n  \"main\": \"index.js\",\n  \"files\": [\n    \"index.js\",\n    \"macros.h\",\n    \"binding.c\",\n    \"binding.js\",\n    \"CMakeLists.txt\",\n    \"prebuilds\"\n  ],\n  \"addon\": true,\n  \"scripts\": {\n    \"test\": \"npm run lint && npm run test:bare && npm run test:node\",\n    \"test:bare\": \"bare test.mjs\",\n    \"test:node\": \"node test.mjs\",\n    \"lint\": \"standard\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/holepunchto/simdle-native.git\"\n  },\n  \"author\": \"Holepunch\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/simdle-native/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/simdle-native#readme\",\n  \"dependencies\": {\n    \"b4a\": \"^1.6.0\",\n    \"node-gyp-build\": \"^4.8.2\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^3.1.0\",\n    \"cmake-bare\": \"^1.1.7\",\n    \"cmake-fetch\": \"^1.1.0\",\n    \"cmake-napi\": \"^1.0.2\",\n    \"standard\": \"^17.0.0\"\n  }\n}\nconst b4a = require('b4a')\nconst scalar = require('./scalar')\n\nfunction view (buf, n) {\n  if (n === buf.BYTES_PER_ELEMENT) return buf\n\n  let TypedArray\n\n  if (n === 1) TypedArray = Uint8Array\n  else if (n === 2) TypedArray = Uint16Array\n  else TypedArray = Uint32Array\n\n  return new TypedArray(buf.buffer, buf.byteOffset, buf.byteLength / n)\n}\n\nfunction unary (u8, u16 = u8, u32 = u16) {\n  return function unary (buf, result = b4a.allocUnsafe(buf.byteLength)) {\n    if (buf.byteLength % 16 !== 0) {\n      throw new Error('Buffer length must be a multiple of 16')\n    }\n\n    if (buf.byteLength !== result.byteLength) {\n      throw new Error('Length of result buffer is insufficient')\n    }\n\n    const n = buf.BYTES_PER_ELEMENT\n\n    if (n === 1) u8(buf, view(result, n))\n    else if (n === 2) u16(buf, view(result, n))\n    else u32(buf, view(result, n))\n\n    return result\n  }\n}\n\nfunction binary (u8, u16 = u8, u32 = u16) {\n  return function binary (a, b, result = b4a.allocUnsafe(a.byteLength)) {\n    if (a.byteLength % 16 !== 0) {\n      throw new Error('Buffer length must be a multiple of 16')\n    }\n\n    if (a.byteLength !== b.byteLength || a.byteLength !== result.byteLength) {\n      throw new Error('Buffers must be the same length')\n    }\n\n    const n = a.BYTES_PER_ELEMENT\n\n    if (n === 1) u8(a, b, view(result, n))\n    else if (n === 2) u16(a, b, view(result, n))\n    else u32(a, b, view(result, n))\n\n    return result\n  }\n}\n\nfunction reduce (u8, u16 = u8, u32 = u16) {\n  return function reduce (buf) {\n    if (buf.byteLength % 16 !== 0) {\n      throw new Error('Buffer length must be a multiple of 16')\n    }\n\n    const n = buf.BYTES_PER_ELEMENT\n\n    if (n === 1) return u8(buf)\n    if (n === 2) return u16(buf)\n    return u32(buf)\n  }\n}\n\nexports.allo = function allo (buf) {\n  if (buf.byteLength % 16 !== 0) {\n    throw new Error('Buffer length must be a multiple of 16')\n  }\n\n  const m = 2 ** (buf.BYTES_PER_ELEMENT * 8) - 1\n\n  for (let i = 0, n = buf.length; i < n; i++) {\n    if (buf[i] !== m) return false\n  }\n\n  return true\n}\n\nexports.allz = function allz (buf) {\n  if (buf.byteLength % 16 !== 0) {\n    throw new Error('Buffer length must be a multiple of 16')\n  }\n\n  for (let i = 0, n = buf.length; i < n; i++) {\n    if (buf[i] !== 0) return false\n  }\n\n  return true\n}\n\nexports.and = binary(\n  (a, b, result) => {\n    for (let i = 0, n = result.length; i < n; i++) {\n      result[i] = a[i] & b[i]\n    }\n  }\n)\n\nexports.clear = binary(\n  (a, b, result) => {\n    for (let i = 0, n = result.length; i < n; i++) {\n      result[i] = a[i] & ~b[i]\n    }\n  }\n)\n\nexports.clo = unary(\n  (buf, result) => {\n    for (let i = 0, n = buf.length; i < n; i++) {\n      result[i] = 24 - scalar.clo(buf[i])\n    }\n  },\n  (buf, result) => {\n    for (let i = 0, n = buf.length; i < n; i++) {\n      result[i] = 16 - scalar.clo(buf[i])\n    }\n  },\n  (buf, result) => {\n    for (let i = 0, n = buf.length; i < n; i++) {\n      result[i] = scalar.clo(buf[i])\n    }\n  }\n)\n\nexports.clz = unary(\n  (buf, result) => {\n    for (let i = 0, n = buf.length; i < n; i++) {\n      result[i] = 24 - scalar.clz(buf[i])\n    }\n  },\n  (buf, result) => {\n    for (let i = 0, n = buf.length; i < n; i++) {\n      result[i] = 16 - scalar.clz(buf[i])\n    }\n  },\n  (buf, result) => {\n    for (let i = 0, n = buf.length; i < n; i++) {\n      result[i] = scalar.clz(buf[i])\n    }\n  }\n)\n\nexports.cnt = unary(\n  (buf, result) => {\n    for (let i = 0, n = buf.length; i < n; i++) {\n      result[i] = scalar.cnt(buf[i]) & 0xff\n    }\n  },\n  (buf, result) => {\n    for (let i = 0, n = buf.length; i < n; i++) {\n      result[i] = scalar.cnt(buf[i]) & 0xffff\n    }\n  },\n  (buf, result) => {\n    for (let i = 0, n = buf.length; i < n; i++) {\n      result[i] = scalar.cnt(buf[i])\n    }\n  }\n)\n\nexports.cto = unary(\n  (buf, result) => {\n    for (let i = 0, n = buf.length; i < n; i++) {\n      result[i] = Math.min(scalar.cto(buf[i]), 8)\n    }\n  },\n  (buf, result) => {\n    for (let i = 0, n = buf.length; i < n; i++) {\n      result[i] = Math.min(scalar.cto(buf[i]), 16)\n    }\n  },\n  (buf, result) => {\n    for (let i = 0, n = buf.length; i < n; i++) {\n      result[i] = scalar.cto(buf[i])\n    }\n  }\n)\n\nexports.ctz = unary(\n  (buf, result) => {\n    for (let i = 0, n = buf.length; i < n; i++) {\n      result[i] = Math.min(scalar.ctz(buf[i]), 8)\n    }\n  },\n  (buf, result) => {\n    for (let i = 0, n = buf.length; i < n; i++) {\n      result[i] = Math.min(scalar.ctz(buf[i]), 16)\n    }\n  },\n  (buf, result) => {\n    for (let i = 0, n = buf.length; i < n; i++) {\n      result[i] = scalar.ctz(buf[i])\n    }\n  }\n)\n\nexports.not = unary(\n  (buf, result) => {\n    for (let i = 0, n = buf.length; i < n; i++) {\n      result[i] = ~buf[i]\n    }\n  }\n)\n\nexports.or = binary(\n  (a, b, result) => {\n    for (let i = 0, n = result.length; i < n; i++) {\n      result[i] = a[i] | b[i]\n    }\n  }\n)\n\nexports.sum = reduce(\n  (buf) => {\n    let result = 0n\n\n    for (let i = 0, n = buf.length; i < n; i++) {\n      result += BigInt(buf[i])\n    }\n\n    return result\n  }\n)\n\nexports.xor = binary(\n  (a, b, result) => {\n    for (let i = 0, n = result.length; i < n; i++) {\n      result[i] = a[i] ^ b[i]\n    }\n  }\n)\ntry {\n  module.exports = require('simdle-native')\n} catch {\n  module.exports = require('./fallback')\n}\n{\n  \"name\": \"simdle-universal\",\n  \"version\": \"1.1.2\",\n  \"description\": \"Universal wrapper for libsimdle with a JavaScript fallback\",\n  \"main\": \"index.js\",\n  \"files\": [\n    \"fallback.js\",\n    \"index.js\",\n    \"scalar.js\"\n  ],\n  \"browser\": {\n    \"./index.js\": \"./fallback.js\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && brittle test.mjs\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/holepunchto/simdle-universal.git\"\n  },\n  \"author\": \"Kasper Isager Dalsgarð <kasper@funktionel.co>\",\n  \"license\": \"ISC\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/simdle-universal/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/simdle-universal#readme\",\n  \"dependencies\": {\n    \"b4a\": \"^1.6.0\"\n  },\n  \"optionalDependencies\": {\n    \"simdle-native\": \"^1.1.1\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^3.1.0\",\n    \"standard\": \"^17.0.0\"\n  }\n}\nconst clz = exports.clz = function clz (n) {\n  return Math.clz32(n)\n}\n\nexports.clo = function clo (n) {\n  return clz(~n)\n}\n\nconst ctz = exports.ctz = function ctz (n) {\n  return 32 - (n === 0 ? 0 : (clz(n & -n) + 1))\n}\n\nexports.cto = function cto (n) {\n  return ctz(~n)\n}\n\nexports.cnt = function cnt (n) {\n  n = n - ((n >>> 1) & 0x55555555)\n  n = (n & 0x33333333) + ((n >>> 2) & 0x33333333)\n  n = (n + (n >>> 4)) & 0x0f0f0f0f\n  n = (n * 0x01010101) >>> 24\n  return n\n}\nmodule.exports = require('node-gyp-build')(__dirname)\n{\n  \"name\": \"sodium-native\",\n  \"version\": \"4.3.2\",\n  \"description\": \"Low level bindings for libsodium\",\n  \"main\": \"index.js\",\n  \"files\": [\n    \"index.js\",\n    \"binding.c\",\n    \"macros.h\",\n    \"extensions\",\n    \"prebuilds\",\n    \"CMakeLists.txt\"\n  ],\n  \"addon\": true,\n  \"dependencies\": {\n    \"node-gyp-build\": \"^4.8.0\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^3.5.0\",\n    \"cmake-bare\": \"^1.1.10\",\n    \"cmake-fetch\": \"^1.0.1\",\n    \"cmake-napi\": \"^1.0.5\",\n    \"standard\": \"^17.1.0\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && brittle test/*.js\"\n  },\n  \"standard\": {\n    \"ignore\": [\n      \"/test/fixtures/*.js\"\n    ]\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/holepunchto/sodium-native.git\"\n  },\n  \"contributors\": [\n    \"Emil Bay <github@tixz.dk> (http://bayes.dk)\",\n    \"Mathias Buus <mathiasbuus@gmail.com> (https://mafinto.sh)\",\n    \"Christophe Diederichs <chm-diederichs@hyperdivision.dk>\"\n  ],\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/sodium-native/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/sodium-native\"\n}\nconst sodium = require('sodium-universal')\nconst b4a = require('b4a')\n\nconst ABYTES = sodium.crypto_secretstream_xchacha20poly1305_ABYTES\nconst TAG_MESSAGE = sodium.crypto_secretstream_xchacha20poly1305_TAG_MESSAGE\nconst TAG_FINAL = sodium.crypto_secretstream_xchacha20poly1305_TAG_FINAL\nconst STATEBYTES = sodium.crypto_secretstream_xchacha20poly1305_STATEBYTES\nconst HEADERBYTES = sodium.crypto_secretstream_xchacha20poly1305_HEADERBYTES\nconst KEYBYTES = sodium.crypto_secretstream_xchacha20poly1305_KEYBYTES\nconst TAG_FINAL_BYTE = b4a.isBuffer(TAG_FINAL) ? TAG_FINAL[0] : TAG_FINAL\n\nconst EMPTY = b4a.alloc(0)\nconst TAG = b4a.alloc(1)\n\nclass Push {\n  constructor (key, state = b4a.allocUnsafeSlow(STATEBYTES), header = b4a.allocUnsafeSlow(HEADERBYTES)) {\n    if (!TAG_FINAL) throw new Error('JavaScript sodium version needs to support crypto_secretstream_xchacha20poly')\n\n    this.key = key\n    this.state = state\n    this.header = header\n\n    sodium.crypto_secretstream_xchacha20poly1305_init_push(this.state, this.header, this.key)\n  }\n\n  next (message, cipher = b4a.allocUnsafe(message.byteLength + ABYTES)) {\n    sodium.crypto_secretstream_xchacha20poly1305_push(this.state, cipher, message, null, TAG_MESSAGE)\n    return cipher\n  }\n\n  final (message = EMPTY, cipher = b4a.allocUnsafe(ABYTES)) {\n    sodium.crypto_secretstream_xchacha20poly1305_push(this.state, cipher, message, null, TAG_FINAL)\n    return cipher\n  }\n}\n\nclass Pull {\n  constructor (key, state = b4a.allocUnsafeSlow(STATEBYTES)) {\n    if (!TAG_FINAL) throw new Error('JavaScript sodium version needs to support crypto_secretstream_xchacha20poly')\n\n    this.key = key\n    this.state = state\n    this.final = false\n  }\n\n  init (header) {\n    sodium.crypto_secretstream_xchacha20poly1305_init_pull(this.state, header, this.key)\n  }\n\n  next (cipher, message = b4a.allocUnsafe(cipher.byteLength - ABYTES)) {\n    sodium.crypto_secretstream_xchacha20poly1305_pull(this.state, message, TAG, cipher, null)\n    this.final = TAG[0] === TAG_FINAL_BYTE\n    return message\n  }\n}\n\nfunction keygen (buf = b4a.alloc(KEYBYTES)) {\n  sodium.crypto_secretstream_xchacha20poly1305_keygen(buf)\n  return buf\n}\n\nmodule.exports = {\n  keygen,\n  KEYBYTES,\n  ABYTES,\n  STATEBYTES,\n  HEADERBYTES,\n  Push,\n  Pull\n}\n{\n  \"name\": \"sodium-secretstream\",\n  \"version\": \"1.1.1\",\n  \"description\": \"Wraps libsodiums secretstream in a higher level abstraction\",\n  \"main\": \"index.js\",\n  \"dependencies\": {\n    \"b4a\": \"^1.1.1\",\n    \"sodium-universal\": \"^4.0.0\"\n  },\n  \"devDependencies\": {\n    \"standard\": \"^17.0.0\"\n  },\n  \"scripts\": {\n    \"test\": \"standard\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mafintosh/sodium-secretstream.git\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mafintosh/sodium-secretstream/issues\"\n  },\n  \"homepage\": \"https://github.com/mafintosh/sodium-secretstream\"\n}\nmodule.exports = require('sodium-native')\n{\n  \"name\": \"sodium-universal\",\n  \"version\": \"4.0.1\",\n  \"description\": \"Universal wrapper for sodium-javascript and sodium-native working in Node.js and the Browser\",\n  \"main\": \"index.js\",\n  \"dependencies\": {\n    \"sodium-native\": \"^4.0.0\"\n  },\n  \"peerDependencies\": {\n    \"sodium-javascript\": \"~0.8.0\"\n  },\n  \"peerDependenciesMeta\": {\n    \"sodium-javascript\": {\n      \"optional\": true\n    }\n  },\n  \"scripts\": {\n    \"prepublish\": \"./build-scripts/generate.js\"\n  },\n  \"browser\": {\n    \"sodium-native\": \"sodium-javascript\"\n  },\n  \"browserify\": {\n    \"transform\": [\n      \"./build-scripts/transform.js\"\n    ]\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/sodium-friends/sodium-universal.git\"\n  },\n  \"keywords\": [\n    \"libsodium\",\n    \"sodium\",\n    \"sodium-native\",\n    \"sodium-javascript\",\n    \"browserify\"\n  ],\n  \"author\": \"Emil Bay <github@tixz.dk>\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/sodium-friends/sodium-universal/issues\"\n  },\n  \"homepage\": \"https://github.com/sodium-friends/sodium-universal#readme\"\n}\nconst { EventEmitter } = require('events')\nconst STREAM_DESTROYED = new Error('Stream was destroyed')\nconst PREMATURE_CLOSE = new Error('Premature close')\n\nconst FIFO = require('fast-fifo')\nconst TextDecoder = require('text-decoder')\n\n/* eslint-disable no-multi-spaces */\n\n// 29 bits used total (4 from shared, 14 from read, and 11 from write)\nconst MAX = ((1 << 29) - 1)\n\n// Shared state\nconst OPENING       = 0b0001\nconst PREDESTROYING = 0b0010\nconst DESTROYING    = 0b0100\nconst DESTROYED     = 0b1000\n\nconst NOT_OPENING = MAX ^ OPENING\nconst NOT_PREDESTROYING = MAX ^ PREDESTROYING\n\n// Read state (4 bit offset from shared state)\nconst READ_ACTIVE           = 0b00000000000001 << 4\nconst READ_UPDATING         = 0b00000000000010 << 4\nconst READ_PRIMARY          = 0b00000000000100 << 4\nconst READ_QUEUED           = 0b00000000001000 << 4\nconst READ_RESUMED          = 0b00000000010000 << 4\nconst READ_PIPE_DRAINED     = 0b00000000100000 << 4\nconst READ_ENDING           = 0b00000001000000 << 4\nconst READ_EMIT_DATA        = 0b00000010000000 << 4\nconst READ_EMIT_READABLE    = 0b00000100000000 << 4\nconst READ_EMITTED_READABLE = 0b00001000000000 << 4\nconst READ_DONE             = 0b00010000000000 << 4\nconst READ_NEXT_TICK        = 0b00100000000000 << 4\nconst READ_NEEDS_PUSH       = 0b01000000000000 << 4\nconst READ_READ_AHEAD       = 0b10000000000000 << 4\n\n// Combined read state\nconst READ_FLOWING = READ_RESUMED | READ_PIPE_DRAINED\nconst READ_ACTIVE_AND_NEEDS_PUSH = READ_ACTIVE | READ_NEEDS_PUSH\nconst READ_PRIMARY_AND_ACTIVE = READ_PRIMARY | READ_ACTIVE\nconst READ_EMIT_READABLE_AND_QUEUED = READ_EMIT_READABLE | READ_QUEUED\nconst READ_RESUMED_READ_AHEAD = READ_RESUMED | READ_READ_AHEAD\n\nconst READ_NOT_ACTIVE             = MAX ^ READ_ACTIVE\nconst READ_NON_PRIMARY            = MAX ^ READ_PRIMARY\nconst READ_NON_PRIMARY_AND_PUSHED = MAX ^ (READ_PRIMARY | READ_NEEDS_PUSH)\nconst READ_PUSHED                 = MAX ^ READ_NEEDS_PUSH\nconst READ_PAUSED                 = MAX ^ READ_RESUMED\nconst READ_NOT_QUEUED             = MAX ^ (READ_QUEUED | READ_EMITTED_READABLE)\nconst READ_NOT_ENDING             = MAX ^ READ_ENDING\nconst READ_PIPE_NOT_DRAINED       = MAX ^ READ_FLOWING\nconst READ_NOT_NEXT_TICK          = MAX ^ READ_NEXT_TICK\nconst READ_NOT_UPDATING           = MAX ^ READ_UPDATING\nconst READ_NO_READ_AHEAD          = MAX ^ READ_READ_AHEAD\nconst READ_PAUSED_NO_READ_AHEAD   = MAX ^ READ_RESUMED_READ_AHEAD\n\n// Write state (18 bit offset, 4 bit offset from shared state and 14 from read state)\nconst WRITE_ACTIVE     = 0b00000000001 << 18\nconst WRITE_UPDATING   = 0b00000000010 << 18\nconst WRITE_PRIMARY    = 0b00000000100 << 18\nconst WRITE_QUEUED     = 0b00000001000 << 18\nconst WRITE_UNDRAINED  = 0b00000010000 << 18\nconst WRITE_DONE       = 0b00000100000 << 18\nconst WRITE_EMIT_DRAIN = 0b00001000000 << 18\nconst WRITE_NEXT_TICK  = 0b00010000000 << 18\nconst WRITE_WRITING    = 0b00100000000 << 18\nconst WRITE_FINISHING  = 0b01000000000 << 18\nconst WRITE_CORKED     = 0b10000000000 << 18\n\nconst WRITE_NOT_ACTIVE    = MAX ^ (WRITE_ACTIVE | WRITE_WRITING)\nconst WRITE_NON_PRIMARY   = MAX ^ WRITE_PRIMARY\nconst WRITE_NOT_FINISHING = MAX ^ (WRITE_ACTIVE | WRITE_FINISHING)\nconst WRITE_DRAINED       = MAX ^ WRITE_UNDRAINED\nconst WRITE_NOT_QUEUED    = MAX ^ WRITE_QUEUED\nconst WRITE_NOT_NEXT_TICK = MAX ^ WRITE_NEXT_TICK\nconst WRITE_NOT_UPDATING  = MAX ^ WRITE_UPDATING\nconst WRITE_NOT_CORKED    = MAX ^ WRITE_CORKED\n\n// Combined shared state\nconst ACTIVE = READ_ACTIVE | WRITE_ACTIVE\nconst NOT_ACTIVE = MAX ^ ACTIVE\nconst DONE = READ_DONE | WRITE_DONE\nconst DESTROY_STATUS = DESTROYING | DESTROYED | PREDESTROYING\nconst OPEN_STATUS = DESTROY_STATUS | OPENING\nconst AUTO_DESTROY = DESTROY_STATUS | DONE\nconst NON_PRIMARY = WRITE_NON_PRIMARY & READ_NON_PRIMARY\nconst ACTIVE_OR_TICKING = WRITE_NEXT_TICK | READ_NEXT_TICK\nconst TICKING = ACTIVE_OR_TICKING & NOT_ACTIVE\nconst IS_OPENING = OPEN_STATUS | TICKING\n\n// Combined shared state and read state\nconst READ_PRIMARY_STATUS = OPEN_STATUS | READ_ENDING | READ_DONE\nconst READ_STATUS = OPEN_STATUS | READ_DONE | READ_QUEUED\nconst READ_ENDING_STATUS = OPEN_STATUS | READ_ENDING | READ_QUEUED\nconst READ_READABLE_STATUS = OPEN_STATUS | READ_EMIT_READABLE | READ_QUEUED | READ_EMITTED_READABLE\nconst SHOULD_NOT_READ = OPEN_STATUS | READ_ACTIVE | READ_ENDING | READ_DONE | READ_NEEDS_PUSH | READ_READ_AHEAD\nconst READ_BACKPRESSURE_STATUS = DESTROY_STATUS | READ_ENDING | READ_DONE\nconst READ_UPDATE_SYNC_STATUS = READ_UPDATING | OPEN_STATUS | READ_NEXT_TICK | READ_PRIMARY\nconst READ_NEXT_TICK_OR_OPENING = READ_NEXT_TICK | OPENING\n\n// Combined write state\nconst WRITE_PRIMARY_STATUS = OPEN_STATUS | WRITE_FINISHING | WRITE_DONE\nconst WRITE_QUEUED_AND_UNDRAINED = WRITE_QUEUED | WRITE_UNDRAINED\nconst WRITE_QUEUED_AND_ACTIVE = WRITE_QUEUED | WRITE_ACTIVE\nconst WRITE_DRAIN_STATUS = WRITE_QUEUED | WRITE_UNDRAINED | OPEN_STATUS | WRITE_ACTIVE\nconst WRITE_STATUS = OPEN_STATUS | WRITE_ACTIVE | WRITE_QUEUED | WRITE_CORKED\nconst WRITE_PRIMARY_AND_ACTIVE = WRITE_PRIMARY | WRITE_ACTIVE\nconst WRITE_ACTIVE_AND_WRITING = WRITE_ACTIVE | WRITE_WRITING\nconst WRITE_FINISHING_STATUS = OPEN_STATUS | WRITE_FINISHING | WRITE_QUEUED_AND_ACTIVE | WRITE_DONE\nconst WRITE_BACKPRESSURE_STATUS = WRITE_UNDRAINED | DESTROY_STATUS | WRITE_FINISHING | WRITE_DONE\nconst WRITE_UPDATE_SYNC_STATUS = WRITE_UPDATING | OPEN_STATUS | WRITE_NEXT_TICK | WRITE_PRIMARY\nconst WRITE_DROP_DATA = WRITE_FINISHING | WRITE_DONE | DESTROY_STATUS\n\nconst asyncIterator = Symbol.asyncIterator || Symbol('asyncIterator')\n\nclass WritableState {\n  constructor (stream, { highWaterMark = 16384, map = null, mapWritable, byteLength, byteLengthWritable } = {}) {\n    this.stream = stream\n    this.queue = new FIFO()\n    this.highWaterMark = highWaterMark\n    this.buffered = 0\n    this.error = null\n    this.pipeline = null\n    this.drains = null // if we add more seldomly used helpers we might them into a subobject so its a single ptr\n    this.byteLength = byteLengthWritable || byteLength || defaultByteLength\n    this.map = mapWritable || map\n    this.afterWrite = afterWrite.bind(this)\n    this.afterUpdateNextTick = updateWriteNT.bind(this)\n  }\n\n  get ended () {\n    return (this.stream._duplexState & WRITE_DONE) !== 0\n  }\n\n  push (data) {\n    if ((this.stream._duplexState & WRITE_DROP_DATA) !== 0) return false\n    if (this.map !== null) data = this.map(data)\n\n    this.buffered += this.byteLength(data)\n    this.queue.push(data)\n\n    if (this.buffered < this.highWaterMark) {\n      this.stream._duplexState |= WRITE_QUEUED\n      return true\n    }\n\n    this.stream._duplexState |= WRITE_QUEUED_AND_UNDRAINED\n    return false\n  }\n\n  shift () {\n    const data = this.queue.shift()\n\n    this.buffered -= this.byteLength(data)\n    if (this.buffered === 0) this.stream._duplexState &= WRITE_NOT_QUEUED\n\n    return data\n  }\n\n  end (data) {\n    if (typeof data === 'function') this.stream.once('finish', data)\n    else if (data !== undefined && data !== null) this.push(data)\n    this.stream._duplexState = (this.stream._duplexState | WRITE_FINISHING) & WRITE_NON_PRIMARY\n  }\n\n  autoBatch (data, cb) {\n    const buffer = []\n    const stream = this.stream\n\n    buffer.push(data)\n    while ((stream._duplexState & WRITE_STATUS) === WRITE_QUEUED_AND_ACTIVE) {\n      buffer.push(stream._writableState.shift())\n    }\n\n    if ((stream._duplexState & OPEN_STATUS) !== 0) return cb(null)\n    stream._writev(buffer, cb)\n  }\n\n  update () {\n    const stream = this.stream\n\n    stream._duplexState |= WRITE_UPDATING\n\n    do {\n      while ((stream._duplexState & WRITE_STATUS) === WRITE_QUEUED) {\n        const data = this.shift()\n        stream._duplexState |= WRITE_ACTIVE_AND_WRITING\n        stream._write(data, this.afterWrite)\n      }\n\n      if ((stream._duplexState & WRITE_PRIMARY_AND_ACTIVE) === 0) this.updateNonPrimary()\n    } while (this.continueUpdate() === true)\n\n    stream._duplexState &= WRITE_NOT_UPDATING\n  }\n\n  updateNonPrimary () {\n    const stream = this.stream\n\n    if ((stream._duplexState & WRITE_FINISHING_STATUS) === WRITE_FINISHING) {\n      stream._duplexState = stream._duplexState | WRITE_ACTIVE\n      stream._final(afterFinal.bind(this))\n      return\n    }\n\n    if ((stream._duplexState & DESTROY_STATUS) === DESTROYING) {\n      if ((stream._duplexState & ACTIVE_OR_TICKING) === 0) {\n        stream._duplexState |= ACTIVE\n        stream._destroy(afterDestroy.bind(this))\n      }\n      return\n    }\n\n    if ((stream._duplexState & IS_OPENING) === OPENING) {\n      stream._duplexState = (stream._duplexState | ACTIVE) & NOT_OPENING\n      stream._open(afterOpen.bind(this))\n    }\n  }\n\n  continueUpdate () {\n    if ((this.stream._duplexState & WRITE_NEXT_TICK) === 0) return false\n    this.stream._duplexState &= WRITE_NOT_NEXT_TICK\n    return true\n  }\n\n  updateCallback () {\n    if ((this.stream._duplexState & WRITE_UPDATE_SYNC_STATUS) === WRITE_PRIMARY) this.update()\n    else this.updateNextTick()\n  }\n\n  updateNextTick () {\n    if ((this.stream._duplexState & WRITE_NEXT_TICK) !== 0) return\n    this.stream._duplexState |= WRITE_NEXT_TICK\n    if ((this.stream._duplexState & WRITE_UPDATING) === 0) queueMicrotask(this.afterUpdateNextTick)\n  }\n}\n\nclass ReadableState {\n  constructor (stream, { highWaterMark = 16384, map = null, mapReadable, byteLength, byteLengthReadable } = {}) {\n    this.stream = stream\n    this.queue = new FIFO()\n    this.highWaterMark = highWaterMark === 0 ? 1 : highWaterMark\n    this.buffered = 0\n    this.readAhead = highWaterMark > 0\n    this.error = null\n    this.pipeline = null\n    this.byteLength = byteLengthReadable || byteLength || defaultByteLength\n    this.map = mapReadable || map\n    this.pipeTo = null\n    this.afterRead = afterRead.bind(this)\n    this.afterUpdateNextTick = updateReadNT.bind(this)\n  }\n\n  get ended () {\n    return (this.stream._duplexState & READ_DONE) !== 0\n  }\n\n  pipe (pipeTo, cb) {\n    if (this.pipeTo !== null) throw new Error('Can only pipe to one destination')\n    if (typeof cb !== 'function') cb = null\n\n    this.stream._duplexState |= READ_PIPE_DRAINED\n    this.pipeTo = pipeTo\n    this.pipeline = new Pipeline(this.stream, pipeTo, cb)\n\n    if (cb) this.stream.on('error', noop) // We already error handle this so supress crashes\n\n    if (isStreamx(pipeTo)) {\n      pipeTo._writableState.pipeline = this.pipeline\n      if (cb) pipeTo.on('error', noop) // We already error handle this so supress crashes\n      pipeTo.on('finish', this.pipeline.finished.bind(this.pipeline)) // TODO: just call finished from pipeTo itself\n    } else {\n      const onerror = this.pipeline.done.bind(this.pipeline, pipeTo)\n      const onclose = this.pipeline.done.bind(this.pipeline, pipeTo, null) // onclose has a weird bool arg\n      pipeTo.on('error', onerror)\n      pipeTo.on('close', onclose)\n      pipeTo.on('finish', this.pipeline.finished.bind(this.pipeline))\n    }\n\n    pipeTo.on('drain', afterDrain.bind(this))\n    this.stream.emit('piping', pipeTo)\n    pipeTo.emit('pipe', this.stream)\n  }\n\n  push (data) {\n    const stream = this.stream\n\n    if (data === null) {\n      this.highWaterMark = 0\n      stream._duplexState = (stream._duplexState | READ_ENDING) & READ_NON_PRIMARY_AND_PUSHED\n      return false\n    }\n\n    if (this.map !== null) {\n      data = this.map(data)\n      if (data === null) {\n        stream._duplexState &= READ_PUSHED\n        return this.buffered < this.highWaterMark\n      }\n    }\n\n    this.buffered += this.byteLength(data)\n    this.queue.push(data)\n\n    stream._duplexState = (stream._duplexState | READ_QUEUED) & READ_PUSHED\n\n    return this.buffered < this.highWaterMark\n  }\n\n  shift () {\n    const data = this.queue.shift()\n\n    this.buffered -= this.byteLength(data)\n    if (this.buffered === 0) this.stream._duplexState &= READ_NOT_QUEUED\n    return data\n  }\n\n  unshift (data) {\n    const pending = [this.map !== null ? this.map(data) : data]\n    while (this.buffered > 0) pending.push(this.shift())\n\n    for (let i = 0; i < pending.length - 1; i++) {\n      const data = pending[i]\n      this.buffered += this.byteLength(data)\n      this.queue.push(data)\n    }\n\n    this.push(pending[pending.length - 1])\n  }\n\n  read () {\n    const stream = this.stream\n\n    if ((stream._duplexState & READ_STATUS) === READ_QUEUED) {\n      const data = this.shift()\n      if (this.pipeTo !== null && this.pipeTo.write(data) === false) stream._duplexState &= READ_PIPE_NOT_DRAINED\n      if ((stream._duplexState & READ_EMIT_DATA) !== 0) stream.emit('data', data)\n      return data\n    }\n\n    if (this.readAhead === false) {\n      stream._duplexState |= READ_READ_AHEAD\n      this.updateNextTick()\n    }\n\n    return null\n  }\n\n  drain () {\n    const stream = this.stream\n\n    while ((stream._duplexState & READ_STATUS) === READ_QUEUED && (stream._duplexState & READ_FLOWING) !== 0) {\n      const data = this.shift()\n      if (this.pipeTo !== null && this.pipeTo.write(data) === false) stream._duplexState &= READ_PIPE_NOT_DRAINED\n      if ((stream._duplexState & READ_EMIT_DATA) !== 0) stream.emit('data', data)\n    }\n  }\n\n  update () {\n    const stream = this.stream\n\n    stream._duplexState |= READ_UPDATING\n\n    do {\n      this.drain()\n\n      while (this.buffered < this.highWaterMark && (stream._duplexState & SHOULD_NOT_READ) === READ_READ_AHEAD) {\n        stream._duplexState |= READ_ACTIVE_AND_NEEDS_PUSH\n        stream._read(this.afterRead)\n        this.drain()\n      }\n\n      if ((stream._duplexState & READ_READABLE_STATUS) === READ_EMIT_READABLE_AND_QUEUED) {\n        stream._duplexState |= READ_EMITTED_READABLE\n        stream.emit('readable')\n      }\n\n      if ((stream._duplexState & READ_PRIMARY_AND_ACTIVE) === 0) this.updateNonPrimary()\n    } while (this.continueUpdate() === true)\n\n    stream._duplexState &= READ_NOT_UPDATING\n  }\n\n  updateNonPrimary () {\n    const stream = this.stream\n\n    if ((stream._duplexState & READ_ENDING_STATUS) === READ_ENDING) {\n      stream._duplexState = (stream._duplexState | READ_DONE) & READ_NOT_ENDING\n      stream.emit('end')\n      if ((stream._duplexState & AUTO_DESTROY) === DONE) stream._duplexState |= DESTROYING\n      if (this.pipeTo !== null) this.pipeTo.end()\n    }\n\n    if ((stream._duplexState & DESTROY_STATUS) === DESTROYING) {\n      if ((stream._duplexState & ACTIVE_OR_TICKING) === 0) {\n        stream._duplexState |= ACTIVE\n        stream._destroy(afterDestroy.bind(this))\n      }\n      return\n    }\n\n    if ((stream._duplexState & IS_OPENING) === OPENING) {\n      stream._duplexState = (stream._duplexState | ACTIVE) & NOT_OPENING\n      stream._open(afterOpen.bind(this))\n    }\n  }\n\n  continueUpdate () {\n    if ((this.stream._duplexState & READ_NEXT_TICK) === 0) return false\n    this.stream._duplexState &= READ_NOT_NEXT_TICK\n    return true\n  }\n\n  updateCallback () {\n    if ((this.stream._duplexState & READ_UPDATE_SYNC_STATUS) === READ_PRIMARY) this.update()\n    else this.updateNextTick()\n  }\n\n  updateNextTickIfOpen () {\n    if ((this.stream._duplexState & READ_NEXT_TICK_OR_OPENING) !== 0) return\n    this.stream._duplexState |= READ_NEXT_TICK\n    if ((this.stream._duplexState & READ_UPDATING) === 0) queueMicrotask(this.afterUpdateNextTick)\n  }\n\n  updateNextTick () {\n    if ((this.stream._duplexState & READ_NEXT_TICK) !== 0) return\n    this.stream._duplexState |= READ_NEXT_TICK\n    if ((this.stream._duplexState & READ_UPDATING) === 0) queueMicrotask(this.afterUpdateNextTick)\n  }\n}\n\nclass TransformState {\n  constructor (stream) {\n    this.data = null\n    this.afterTransform = afterTransform.bind(stream)\n    this.afterFinal = null\n  }\n}\n\nclass Pipeline {\n  constructor (src, dst, cb) {\n    this.from = src\n    this.to = dst\n    this.afterPipe = cb\n    this.error = null\n    this.pipeToFinished = false\n  }\n\n  finished () {\n    this.pipeToFinished = true\n  }\n\n  done (stream, err) {\n    if (err) this.error = err\n\n    if (stream === this.to) {\n      this.to = null\n\n      if (this.from !== null) {\n        if ((this.from._duplexState & READ_DONE) === 0 || !this.pipeToFinished) {\n          this.from.destroy(this.error || new Error('Writable stream closed prematurely'))\n        }\n        return\n      }\n    }\n\n    if (stream === this.from) {\n      this.from = null\n\n      if (this.to !== null) {\n        if ((stream._duplexState & READ_DONE) === 0) {\n          this.to.destroy(this.error || new Error('Readable stream closed before ending'))\n        }\n        return\n      }\n    }\n\n    if (this.afterPipe !== null) this.afterPipe(this.error)\n    this.to = this.from = this.afterPipe = null\n  }\n}\n\nfunction afterDrain () {\n  this.stream._duplexState |= READ_PIPE_DRAINED\n  this.updateCallback()\n}\n\nfunction afterFinal (err) {\n  const stream = this.stream\n  if (err) stream.destroy(err)\n  if ((stream._duplexState & DESTROY_STATUS) === 0) {\n    stream._duplexState |= WRITE_DONE\n    stream.emit('finish')\n  }\n  if ((stream._duplexState & AUTO_DESTROY) === DONE) {\n    stream._duplexState |= DESTROYING\n  }\n\n  stream._duplexState &= WRITE_NOT_FINISHING\n\n  // no need to wait the extra tick here, so we short circuit that\n  if ((stream._duplexState & WRITE_UPDATING) === 0) this.update()\n  else this.updateNextTick()\n}\n\nfunction afterDestroy (err) {\n  const stream = this.stream\n\n  if (!err && this.error !== STREAM_DESTROYED) err = this.error\n  if (err) stream.emit('error', err)\n  stream._duplexState |= DESTROYED\n  stream.emit('close')\n\n  const rs = stream._readableState\n  const ws = stream._writableState\n\n  if (rs !== null && rs.pipeline !== null) rs.pipeline.done(stream, err)\n\n  if (ws !== null) {\n    while (ws.drains !== null && ws.drains.length > 0) ws.drains.shift().resolve(false)\n    if (ws.pipeline !== null) ws.pipeline.done(stream, err)\n  }\n}\n\nfunction afterWrite (err) {\n  const stream = this.stream\n\n  if (err) stream.destroy(err)\n  stream._duplexState &= WRITE_NOT_ACTIVE\n\n  if (this.drains !== null) tickDrains(this.drains)\n\n  if ((stream._duplexState & WRITE_DRAIN_STATUS) === WRITE_UNDRAINED) {\n    stream._duplexState &= WRITE_DRAINED\n    if ((stream._duplexState & WRITE_EMIT_DRAIN) === WRITE_EMIT_DRAIN) {\n      stream.emit('drain')\n    }\n  }\n\n  this.updateCallback()\n}\n\nfunction afterRead (err) {\n  if (err) this.stream.destroy(err)\n  this.stream._duplexState &= READ_NOT_ACTIVE\n  if (this.readAhead === false && (this.stream._duplexState & READ_RESUMED) === 0) this.stream._duplexState &= READ_NO_READ_AHEAD\n  this.updateCallback()\n}\n\nfunction updateReadNT () {\n  if ((this.stream._duplexState & READ_UPDATING) === 0) {\n    this.stream._duplexState &= READ_NOT_NEXT_TICK\n    this.update()\n  }\n}\n\nfunction updateWriteNT () {\n  if ((this.stream._duplexState & WRITE_UPDATING) === 0) {\n    this.stream._duplexState &= WRITE_NOT_NEXT_TICK\n    this.update()\n  }\n}\n\nfunction tickDrains (drains) {\n  for (let i = 0; i < drains.length; i++) {\n    // drains.writes are monotonic, so if one is 0 its always the first one\n    if (--drains[i].writes === 0) {\n      drains.shift().resolve(true)\n      i--\n    }\n  }\n}\n\nfunction afterOpen (err) {\n  const stream = this.stream\n\n  if (err) stream.destroy(err)\n\n  if ((stream._duplexState & DESTROYING) === 0) {\n    if ((stream._duplexState & READ_PRIMARY_STATUS) === 0) stream._duplexState |= READ_PRIMARY\n    if ((stream._duplexState & WRITE_PRIMARY_STATUS) === 0) stream._duplexState |= WRITE_PRIMARY\n    stream.emit('open')\n  }\n\n  stream._duplexState &= NOT_ACTIVE\n\n  if (stream._writableState !== null) {\n    stream._writableState.updateCallback()\n  }\n\n  if (stream._readableState !== null) {\n    stream._readableState.updateCallback()\n  }\n}\n\nfunction afterTransform (err, data) {\n  if (data !== undefined && data !== null) this.push(data)\n  this._writableState.afterWrite(err)\n}\n\nfunction newListener (name) {\n  if (this._readableState !== null) {\n    if (name === 'data') {\n      this._duplexState |= (READ_EMIT_DATA | READ_RESUMED_READ_AHEAD)\n      this._readableState.updateNextTick()\n    }\n    if (name === 'readable') {\n      this._duplexState |= READ_EMIT_READABLE\n      this._readableState.updateNextTick()\n    }\n  }\n\n  if (this._writableState !== null) {\n    if (name === 'drain') {\n      this._duplexState |= WRITE_EMIT_DRAIN\n      this._writableState.updateNextTick()\n    }\n  }\n}\n\nclass Stream extends EventEmitter {\n  constructor (opts) {\n    super()\n\n    this._duplexState = 0\n    this._readableState = null\n    this._writableState = null\n\n    if (opts) {\n      if (opts.open) this._open = opts.open\n      if (opts.destroy) this._destroy = opts.destroy\n      if (opts.predestroy) this._predestroy = opts.predestroy\n      if (opts.signal) {\n        opts.signal.addEventListener('abort', abort.bind(this))\n      }\n    }\n\n    this.on('newListener', newListener)\n  }\n\n  _open (cb) {\n    cb(null)\n  }\n\n  _destroy (cb) {\n    cb(null)\n  }\n\n  _predestroy () {\n    // does nothing\n  }\n\n  get readable () {\n    return this._readableState !== null ? true : undefined\n  }\n\n  get writable () {\n    return this._writableState !== null ? true : undefined\n  }\n\n  get destroyed () {\n    return (this._duplexState & DESTROYED) !== 0\n  }\n\n  get destroying () {\n    return (this._duplexState & DESTROY_STATUS) !== 0\n  }\n\n  destroy (err) {\n    if ((this._duplexState & DESTROY_STATUS) === 0) {\n      if (!err) err = STREAM_DESTROYED\n      this._duplexState = (this._duplexState | DESTROYING) & NON_PRIMARY\n\n      if (this._readableState !== null) {\n        this._readableState.highWaterMark = 0\n        this._readableState.error = err\n      }\n      if (this._writableState !== null) {\n        this._writableState.highWaterMark = 0\n        this._writableState.error = err\n      }\n\n      this._duplexState |= PREDESTROYING\n      this._predestroy()\n      this._duplexState &= NOT_PREDESTROYING\n\n      if (this._readableState !== null) this._readableState.updateNextTick()\n      if (this._writableState !== null) this._writableState.updateNextTick()\n    }\n  }\n}\n\nclass Readable extends Stream {\n  constructor (opts) {\n    super(opts)\n\n    this._duplexState |= OPENING | WRITE_DONE | READ_READ_AHEAD\n    this._readableState = new ReadableState(this, opts)\n\n    if (opts) {\n      if (this._readableState.readAhead === false) this._duplexState &= READ_NO_READ_AHEAD\n      if (opts.read) this._read = opts.read\n      if (opts.eagerOpen) this._readableState.updateNextTick()\n      if (opts.encoding) this.setEncoding(opts.encoding)\n    }\n  }\n\n  setEncoding (encoding) {\n    const dec = new TextDecoder(encoding)\n    const map = this._readableState.map || echo\n    this._readableState.map = mapOrSkip\n    return this\n\n    function mapOrSkip (data) {\n      const next = dec.push(data)\n      return next === '' && (data.byteLength !== 0 || dec.remaining > 0) ? null : map(next)\n    }\n  }\n\n  _read (cb) {\n    cb(null)\n  }\n\n  pipe (dest, cb) {\n    this._readableState.updateNextTick()\n    this._readableState.pipe(dest, cb)\n    return dest\n  }\n\n  read () {\n    this._readableState.updateNextTick()\n    return this._readableState.read()\n  }\n\n  push (data) {\n    this._readableState.updateNextTickIfOpen()\n    return this._readableState.push(data)\n  }\n\n  unshift (data) {\n    this._readableState.updateNextTickIfOpen()\n    return this._readableState.unshift(data)\n  }\n\n  resume () {\n    this._duplexState |= READ_RESUMED_READ_AHEAD\n    this._readableState.updateNextTick()\n    return this\n  }\n\n  pause () {\n    this._duplexState &= (this._readableState.readAhead === false ? READ_PAUSED_NO_READ_AHEAD : READ_PAUSED)\n    return this\n  }\n\n  static _fromAsyncIterator (ite, opts) {\n    let destroy\n\n    const rs = new Readable({\n      ...opts,\n      read (cb) {\n        ite.next().then(push).then(cb.bind(null, null)).catch(cb)\n      },\n      predestroy () {\n        destroy = ite.return()\n      },\n      destroy (cb) {\n        if (!destroy) return cb(null)\n        destroy.then(cb.bind(null, null)).catch(cb)\n      }\n    })\n\n    return rs\n\n    function push (data) {\n      if (data.done) rs.push(null)\n      else rs.push(data.value)\n    }\n  }\n\n  static from (data, opts) {\n    if (isReadStreamx(data)) return data\n    if (data[asyncIterator]) return this._fromAsyncIterator(data[asyncIterator](), opts)\n    if (!Array.isArray(data)) data = data === undefined ? [] : [data]\n\n    let i = 0\n    return new Readable({\n      ...opts,\n      read (cb) {\n        this.push(i === data.length ? null : data[i++])\n        cb(null)\n      }\n    })\n  }\n\n  static isBackpressured (rs) {\n    return (rs._duplexState & READ_BACKPRESSURE_STATUS) !== 0 || rs._readableState.buffered >= rs._readableState.highWaterMark\n  }\n\n  static isPaused (rs) {\n    return (rs._duplexState & READ_RESUMED) === 0\n  }\n\n  [asyncIterator] () {\n    const stream = this\n\n    let error = null\n    let promiseResolve = null\n    let promiseReject = null\n\n    this.on('error', (err) => { error = err })\n    this.on('readable', onreadable)\n    this.on('close', onclose)\n\n    return {\n      [asyncIterator] () {\n        return this\n      },\n      next () {\n        return new Promise(function (resolve, reject) {\n          promiseResolve = resolve\n          promiseReject = reject\n          const data = stream.read()\n          if (data !== null) ondata(data)\n          else if ((stream._duplexState & DESTROYED) !== 0) ondata(null)\n        })\n      },\n      return () {\n        return destroy(null)\n      },\n      throw (err) {\n        return destroy(err)\n      }\n    }\n\n    function onreadable () {\n      if (promiseResolve !== null) ondata(stream.read())\n    }\n\n    function onclose () {\n      if (promiseResolve !== null) ondata(null)\n    }\n\n    function ondata (data) {\n      if (promiseReject === null) return\n      if (error) promiseReject(error)\n      else if (data === null && (stream._duplexState & READ_DONE) === 0) promiseReject(STREAM_DESTROYED)\n      else promiseResolve({ value: data, done: data === null })\n      promiseReject = promiseResolve = null\n    }\n\n    function destroy (err) {\n      stream.destroy(err)\n      return new Promise((resolve, reject) => {\n        if (stream._duplexState & DESTROYED) return resolve({ value: undefined, done: true })\n        stream.once('close', function () {\n          if (err) reject(err)\n          else resolve({ value: undefined, done: true })\n        })\n      })\n    }\n  }\n}\n\nclass Writable extends Stream {\n  constructor (opts) {\n    super(opts)\n\n    this._duplexState |= OPENING | READ_DONE\n    this._writableState = new WritableState(this, opts)\n\n    if (opts) {\n      if (opts.writev) this._writev = opts.writev\n      if (opts.write) this._write = opts.write\n      if (opts.final) this._final = opts.final\n      if (opts.eagerOpen) this._writableState.updateNextTick()\n    }\n  }\n\n  cork () {\n    this._duplexState |= WRITE_CORKED\n  }\n\n  uncork () {\n    this._duplexState &= WRITE_NOT_CORKED\n    this._writableState.updateNextTick()\n  }\n\n  _writev (batch, cb) {\n    cb(null)\n  }\n\n  _write (data, cb) {\n    this._writableState.autoBatch(data, cb)\n  }\n\n  _final (cb) {\n    cb(null)\n  }\n\n  static isBackpressured (ws) {\n    return (ws._duplexState & WRITE_BACKPRESSURE_STATUS) !== 0\n  }\n\n  static drained (ws) {\n    if (ws.destroyed) return Promise.resolve(false)\n    const state = ws._writableState\n    const pending = (isWritev(ws) ? Math.min(1, state.queue.length) : state.queue.length)\n    const writes = pending + ((ws._duplexState & WRITE_WRITING) ? 1 : 0)\n    if (writes === 0) return Promise.resolve(true)\n    if (state.drains === null) state.drains = []\n    return new Promise((resolve) => {\n      state.drains.push({ writes, resolve })\n    })\n  }\n\n  write (data) {\n    this._writableState.updateNextTick()\n    return this._writableState.push(data)\n  }\n\n  end (data) {\n    this._writableState.updateNextTick()\n    this._writableState.end(data)\n    return this\n  }\n}\n\nclass Duplex extends Readable { // and Writable\n  constructor (opts) {\n    super(opts)\n\n    this._duplexState = OPENING | (this._duplexState & READ_READ_AHEAD)\n    this._writableState = new WritableState(this, opts)\n\n    if (opts) {\n      if (opts.writev) this._writev = opts.writev\n      if (opts.write) this._write = opts.write\n      if (opts.final) this._final = opts.final\n    }\n  }\n\n  cork () {\n    this._duplexState |= WRITE_CORKED\n  }\n\n  uncork () {\n    this._duplexState &= WRITE_NOT_CORKED\n    this._writableState.updateNextTick()\n  }\n\n  _writev (batch, cb) {\n    cb(null)\n  }\n\n  _write (data, cb) {\n    this._writableState.autoBatch(data, cb)\n  }\n\n  _final (cb) {\n    cb(null)\n  }\n\n  write (data) {\n    this._writableState.updateNextTick()\n    return this._writableState.push(data)\n  }\n\n  end (data) {\n    this._writableState.updateNextTick()\n    this._writableState.end(data)\n    return this\n  }\n}\n\nclass Transform extends Duplex {\n  constructor (opts) {\n    super(opts)\n    this._transformState = new TransformState(this)\n\n    if (opts) {\n      if (opts.transform) this._transform = opts.transform\n      if (opts.flush) this._flush = opts.flush\n    }\n  }\n\n  _write (data, cb) {\n    if (this._readableState.buffered >= this._readableState.highWaterMark) {\n      this._transformState.data = data\n    } else {\n      this._transform(data, this._transformState.afterTransform)\n    }\n  }\n\n  _read (cb) {\n    if (this._transformState.data !== null) {\n      const data = this._transformState.data\n      this._transformState.data = null\n      cb(null)\n      this._transform(data, this._transformState.afterTransform)\n    } else {\n      cb(null)\n    }\n  }\n\n  destroy (err) {\n    super.destroy(err)\n    if (this._transformState.data !== null) {\n      this._transformState.data = null\n      this._transformState.afterTransform()\n    }\n  }\n\n  _transform (data, cb) {\n    cb(null, data)\n  }\n\n  _flush (cb) {\n    cb(null)\n  }\n\n  _final (cb) {\n    this._transformState.afterFinal = cb\n    this._flush(transformAfterFlush.bind(this))\n  }\n}\n\nclass PassThrough extends Transform {}\n\nfunction transformAfterFlush (err, data) {\n  const cb = this._transformState.afterFinal\n  if (err) return cb(err)\n  if (data !== null && data !== undefined) this.push(data)\n  this.push(null)\n  cb(null)\n}\n\nfunction pipelinePromise (...streams) {\n  return new Promise((resolve, reject) => {\n    return pipeline(...streams, (err) => {\n      if (err) return reject(err)\n      resolve()\n    })\n  })\n}\n\nfunction pipeline (stream, ...streams) {\n  const all = Array.isArray(stream) ? [...stream, ...streams] : [stream, ...streams]\n  const done = (all.length && typeof all[all.length - 1] === 'function') ? all.pop() : null\n\n  if (all.length < 2) throw new Error('Pipeline requires at least 2 streams')\n\n  let src = all[0]\n  let dest = null\n  let error = null\n\n  for (let i = 1; i < all.length; i++) {\n    dest = all[i]\n\n    if (isStreamx(src)) {\n      src.pipe(dest, onerror)\n    } else {\n      errorHandle(src, true, i > 1, onerror)\n      src.pipe(dest)\n    }\n\n    src = dest\n  }\n\n  if (done) {\n    let fin = false\n\n    const autoDestroy = isStreamx(dest) || !!(dest._writableState && dest._writableState.autoDestroy)\n\n    dest.on('error', (err) => {\n      if (error === null) error = err\n    })\n\n    dest.on('finish', () => {\n      fin = true\n      if (!autoDestroy) done(error)\n    })\n\n    if (autoDestroy) {\n      dest.on('close', () => done(error || (fin ? null : PREMATURE_CLOSE)))\n    }\n  }\n\n  return dest\n\n  function errorHandle (s, rd, wr, onerror) {\n    s.on('error', onerror)\n    s.on('close', onclose)\n\n    function onclose () {\n      if (rd && s._readableState && !s._readableState.ended) return onerror(PREMATURE_CLOSE)\n      if (wr && s._writableState && !s._writableState.ended) return onerror(PREMATURE_CLOSE)\n    }\n  }\n\n  function onerror (err) {\n    if (!err || error) return\n    error = err\n\n    for (const s of all) {\n      s.destroy(err)\n    }\n  }\n}\n\nfunction echo (s) {\n  return s\n}\n\nfunction isStream (stream) {\n  return !!stream._readableState || !!stream._writableState\n}\n\nfunction isStreamx (stream) {\n  return typeof stream._duplexState === 'number' && isStream(stream)\n}\n\nfunction isEnded (stream) {\n  return !!stream._readableState && stream._readableState.ended\n}\n\nfunction isFinished (stream) {\n  return !!stream._writableState && stream._writableState.ended\n}\n\nfunction getStreamError (stream, opts = {}) {\n  const err = (stream._readableState && stream._readableState.error) || (stream._writableState && stream._writableState.error)\n\n  // avoid implicit errors by default\n  return (!opts.all && err === STREAM_DESTROYED) ? null : err\n}\n\nfunction isReadStreamx (stream) {\n  return isStreamx(stream) && stream.readable\n}\n\nfunction isDisturbed (stream) {\n  return (stream._duplexState & OPENING) !== OPENING || (stream._duplexState & ACTIVE_OR_TICKING) !== 0\n}\n\nfunction isTypedArray (data) {\n  return typeof data === 'object' && data !== null && typeof data.byteLength === 'number'\n}\n\nfunction defaultByteLength (data) {\n  return isTypedArray(data) ? data.byteLength : 1024\n}\n\nfunction noop () {}\n\nfunction abort () {\n  this.destroy(new Error('Stream aborted.'))\n}\n\nfunction isWritev (s) {\n  return s._writev !== Writable.prototype._writev && s._writev !== Duplex.prototype._writev\n}\n\nmodule.exports = {\n  pipeline,\n  pipelinePromise,\n  isStream,\n  isStreamx,\n  isEnded,\n  isFinished,\n  isDisturbed,\n  getStreamError,\n  Stream,\n  Writable,\n  Readable,\n  Duplex,\n  Transform,\n  // Export PassThrough for compatibility with Node.js core's stream module\n  PassThrough\n}\n{\n  \"name\": \"streamx\",\n  \"version\": \"2.22.0\",\n  \"description\": \"An iteration of the Node.js core streams with a series of improvements\",\n  \"main\": \"index.js\",\n  \"dependencies\": {\n    \"fast-fifo\": \"^1.3.2\",\n    \"text-decoder\": \"^1.1.0\"\n  },\n  \"devDependencies\": {\n    \"b4a\": \"^1.6.6\",\n    \"brittle\": \"^3.1.1\",\n    \"end-of-stream\": \"^1.4.4\",\n    \"standard\": \"^17.0.0\"\n  },\n  \"optionalDependencies\": {\n    \"bare-events\": \"^2.2.0\"\n  },\n  \"files\": [\n    \"index.js\"\n  ],\n  \"imports\": {\n    \"events\": {\n      \"bare\": \"bare-events\",\n      \"default\": \"events\"\n    }\n  },\n  \"scripts\": {\n    \"test\": \"standard && brittle test/*.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mafintosh/streamx.git\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mafintosh/streamx/issues\"\n  },\n  \"homepage\": \"https://github.com/mafintosh/streamx\"\n}\nconst PassThroughDecoder = require('./lib/pass-through-decoder')\nconst UTF8Decoder = require('./lib/utf8-decoder')\n\nmodule.exports = class TextDecoder {\n  constructor (encoding = 'utf8') {\n    this.encoding = normalizeEncoding(encoding)\n\n    switch (this.encoding) {\n      case 'utf8':\n        this.decoder = new UTF8Decoder()\n        break\n      case 'utf16le':\n      case 'base64':\n        throw new Error('Unsupported encoding: ' + this.encoding)\n      default:\n        this.decoder = new PassThroughDecoder(this.encoding)\n    }\n  }\n\n  get remaining () {\n    return this.decoder.remaining\n  }\n\n  push (data) {\n    if (typeof data === 'string') return data\n    return this.decoder.decode(data)\n  }\n\n  // For Node.js compatibility\n  write (data) {\n    return this.push(data)\n  }\n\n  end (data) {\n    let result = ''\n    if (data) result = this.push(data)\n    result += this.decoder.flush()\n    return result\n  }\n}\n\nfunction normalizeEncoding (encoding) {\n  encoding = encoding.toLowerCase()\n\n  switch (encoding) {\n    case 'utf8':\n    case 'utf-8':\n      return 'utf8'\n    case 'ucs2':\n    case 'ucs-2':\n    case 'utf16le':\n    case 'utf-16le':\n      return 'utf16le'\n    case 'latin1':\n    case 'binary':\n      return 'latin1'\n    case 'base64':\n    case 'ascii':\n    case 'hex':\n      return encoding\n    default:\n      throw new Error('Unknown encoding: ' + encoding)\n  }\n};\nconst b4a = require('b4a')\n\nmodule.exports = class PassThroughDecoder {\n  constructor (encoding) {\n    this.encoding = encoding\n  }\n\n  get remaining () {\n    return 0\n  }\n\n  decode (tail) {\n    return b4a.toString(tail, this.encoding)\n  }\n\n  flush () {\n    return ''\n  }\n}\nconst b4a = require('b4a')\n\n/**\n * https://encoding.spec.whatwg.org/#utf-8-decoder\n */\nmodule.exports = class UTF8Decoder {\n  constructor () {\n    this.codePoint = 0\n    this.bytesSeen = 0\n    this.bytesNeeded = 0\n    this.lowerBoundary = 0x80\n    this.upperBoundary = 0xbf\n  }\n\n  get remaining () {\n    return this.bytesSeen\n  }\n\n  decode (data) {\n    // If we have a fast path, just sniff if the last part is a boundary\n    if (this.bytesNeeded === 0) {\n      let isBoundary = true\n\n      for (let i = Math.max(0, data.byteLength - 4), n = data.byteLength; i < n && isBoundary; i++) {\n        isBoundary = data[i] <= 0x7f\n      }\n\n      if (isBoundary) return b4a.toString(data, 'utf8')\n    }\n\n    let result = ''\n\n    for (let i = 0, n = data.byteLength; i < n; i++) {\n      const byte = data[i]\n\n      if (this.bytesNeeded === 0) {\n        if (byte <= 0x7f) {\n          result += String.fromCharCode(byte)\n        } else {\n          this.bytesSeen = 1\n\n          if (byte >= 0xc2 && byte <= 0xdf) {\n            this.bytesNeeded = 2\n            this.codePoint = byte & 0x1f\n          } else if (byte >= 0xe0 && byte <= 0xef) {\n            if (byte === 0xe0) this.lowerBoundary = 0xa0\n            else if (byte === 0xed) this.upperBoundary = 0x9f\n            this.bytesNeeded = 3\n            this.codePoint = byte & 0xf\n          } else if (byte >= 0xf0 && byte <= 0xf4) {\n            if (byte === 0xf0) this.lowerBoundary = 0x90\n            if (byte === 0xf4) this.upperBoundary = 0x8f\n            this.bytesNeeded = 4\n            this.codePoint = byte & 0x7\n          } else {\n            result += '\\ufffd'\n          }\n        }\n\n        continue\n      }\n\n      if (byte < this.lowerBoundary || byte > this.upperBoundary) {\n        this.codePoint = 0\n        this.bytesNeeded = 0\n        this.bytesSeen = 0\n        this.lowerBoundary = 0x80\n        this.upperBoundary = 0xbf\n\n        result += '\\ufffd'\n\n        continue\n      }\n\n      this.lowerBoundary = 0x80\n      this.upperBoundary = 0xbf\n\n      this.codePoint = (this.codePoint << 6) | (byte & 0x3f)\n      this.bytesSeen++\n\n      if (this.bytesSeen !== this.bytesNeeded) continue\n\n      result += String.fromCodePoint(this.codePoint)\n\n      this.codePoint = 0\n      this.bytesNeeded = 0\n      this.bytesSeen = 0\n    }\n\n    return result\n  }\n\n  flush () {\n    const result = this.bytesNeeded > 0 ? '\\ufffd' : ''\n\n    this.codePoint = 0\n    this.bytesNeeded = 0\n    this.bytesSeen = 0\n    this.lowerBoundary = 0x80\n    this.upperBoundary = 0xbf\n\n    return result\n  }\n}\n{\n  \"name\": \"text-decoder\",\n  \"version\": \"1.2.3\",\n  \"description\": \"Streaming text decoder that preserves multibyte Unicode characters\",\n  \"main\": \"index.js\",\n  \"files\": [\n    \"index.js\",\n    \"lib\"\n  ],\n  \"browser\": {\n    \"./lib/pass-through-decoder.js\": \"./lib/browser-decoder.js\",\n    \"./lib/utf8-decoder.js\": \"./lib/browser-decoder.js\"\n  },\n  \"react-native\": {\n    \"./lib/pass-through-decoder.js\": \"./lib/pass-through-decoder.js\",\n    \"./lib/utf8-decoder.js\": \"./lib/utf8-decoder.js\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && brittle test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/holepunchto/text-decoder.git\"\n  },\n  \"author\": \"Holepunch\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/text-decoder/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/text-decoder#readme\",\n  \"dependencies\": {\n    \"b4a\": \"^1.6.4\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^3.3.2\",\n    \"standard\": \"^17.0.0\"\n  }\n}\nmodule.exports = class TimeOrderedSet {\n  constructor () {\n    this.oldest = null\n    this.latest = null\n    this.length = 0\n  }\n\n  has (node) {\n    return !!(node.next || node.prev) || node === this.oldest\n  }\n\n  add (node) {\n    if (this.has(node)) this.remove(node)\n\n    if (!this.latest && !this.oldest) {\n      this.latest = this.oldest = node\n      node.prev = node.next = null\n    } else {\n      this.latest.next = node\n      node.prev = this.latest\n      node.next = null\n      this.latest = node\n    }\n\n    this.length++\n\n    return node\n  }\n\n  remove (node) {\n    if (!this.has(node)) return node\n\n    if (this.oldest !== node && this.latest !== node) {\n      node.prev.next = node.next\n      node.next.prev = node.prev\n    } else {\n      if (this.oldest === node) {\n        this.oldest = node.next\n        if (this.oldest) this.oldest.prev = null\n      }\n      if (this.latest === node) {\n        this.latest = node.prev\n        if (this.latest) this.latest.next = null\n      }\n    }\n\n    node.next = node.prev = null\n    this.length--\n\n    return node\n  }\n\n  toArray ({ limit = Infinity, reverse = false } = {}) {\n    const list = []\n\n    if (reverse) {\n      let node = this.latest\n      while (node && limit--) {\n        list.push(node)\n        node = node.prev\n      }\n    } else {\n      let node = this.oldest\n      while (node && limit--) {\n        list.push(node)\n        node = node.next\n      }\n    }\n\n    return list\n  }\n}\n{\n  \"name\": \"time-ordered-set\",\n  \"version\": \"2.0.1\",\n  \"description\": \"Efficiently maintain a set of nodes ordered by the time they were added to the set\",\n  \"main\": \"index.js\",\n  \"files\": [\n    \"index.js\"\n  ],\n  \"devDependencies\": {\n    \"brittle\": \"^3.0.0\",\n    \"standard\": \"^17.1.2\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && brittle test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mafintosh/time-ordered-set.git\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mafintosh/time-ordered-set/issues\"\n  },\n  \"homepage\": \"https://github.com/mafintosh/time-ordered-set\"\n}\nmodule.exports = class TimerBrowser {\n  constructor (ms, fn, ctx = null, interval = false) {\n    this.ms = ms\n    this.ontimeout = fn\n    this.context = ctx || null\n    this.interval = interval\n    this.done = false\n\n    this._timer = interval\n      ? setInterval(callInterval, ms, this)\n      : setTimeout(callTimeout, ms, this)\n  }\n\n  unref () {}\n\n  ref () {}\n\n  refresh () {\n    if (this.done) return\n\n    if (this.interval) {\n      clearInterval(this._timer)\n      this._timer = setInterval(callInterval, this.ms, this)\n    } else {\n      clearTimeout(this._timer)\n      this._timer = setTimeout(callTimeout, this.ms, this)\n    }\n  }\n\n  destroy () {\n    this.done = true\n    this.ontimeout = null\n\n    if (this.interval) clearInterval(this._timer)\n    else clearTimeout(this._timer)\n  }\n\n  static once (ms, fn, ctx) {\n    return new this(ms, fn, ctx, false)\n  }\n\n  static on (ms, fn, ctx) {\n    return new this(ms, fn, ctx, true)\n  }\n}\n\nfunction callTimeout (self) {\n  self.done = true\n  self.ontimeout.call(self.context)\n}\n\nfunction callInterval (self) {\n  self.ontimeout.call(self.context)\n}\nmodule.exports = isNode()\n  ? require('./node')\n  : require('./browser')\n\nfunction isNode () {\n  const to = setTimeout(function () {}, 1000)\n  clearTimeout(to)\n  return !!to.refresh\n}\nmodule.exports = class Timer {\n  constructor (ms, fn, ctx = null, interval = false) {\n    this.ms = ms\n    this.ontimeout = fn\n    this.context = ctx\n    this.interval = interval\n    this.done = false\n\n    this._timer = interval\n      ? setInterval(callInterval, ms, this)\n      : setTimeout(callTimeout, ms, this)\n  }\n\n  unref () {\n    this._timer.unref()\n  }\n\n  ref () {\n    this._timer.ref()\n  }\n\n  refresh () {\n    if (this.done !== true) this._timer.refresh()\n  }\n\n  destroy () {\n    this.done = true\n    this.ontimeout = null\n    if (this.interval) clearInterval(this._timer)\n    else clearTimeout(this._timer)\n  }\n\n  static once (ms, fn, ctx) {\n    return new this(ms, fn, ctx, false)\n  }\n\n  static on (ms, fn, ctx) {\n    return new this(ms, fn, ctx, true)\n  }\n}\n\nfunction callTimeout (self) {\n  self.done = true\n  self.ontimeout.call(self.context)\n}\n\nfunction callInterval (self) {\n  self.ontimeout.call(self.context)\n}\n{\n  \"name\": \"timeout-refresh\",\n  \"version\": \"2.0.1\",\n  \"description\": \"Efficiently refresh a timer\",\n  \"main\": \"index.js\",\n  \"dependencies\": {},\n  \"devDependencies\": {\n    \"standard\": \"^16.0.4\",\n    \"tape\": \"^5.5.2\"\n  },\n  \"browser\": \"./browser.js\",\n  \"scripts\": {\n    \"test\": \"standard && tape test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mafintosh/timeout-refresh.git\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mafintosh/timeout-refresh/issues\"\n  },\n  \"homepage\": \"https://github.com/mafintosh/timeout-refresh\"\n}\nmodule.exports = require('node-gyp-build')(__dirname)\n// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nconst v4Seg = '(?:[0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-4][0-9]|25[0-5])'\nconst v4Str = `(${v4Seg}[.]){3}${v4Seg}`\nconst IPv4Pattern = new RegExp(`^${v4Str}$`)\n\nconst v6Seg = '(?:[0-9a-fA-F]{1,4})'\nconst IPv6Pattern = new RegExp('^(' +\n  `(?:${v6Seg}:){7}(?:${v6Seg}|:)|` +\n  `(?:${v6Seg}:){6}(?:${v4Str}|:${v6Seg}|:)|` +\n  `(?:${v6Seg}:){5}(?::${v4Str}|(:${v6Seg}){1,2}|:)|` +\n  `(?:${v6Seg}:){4}(?:(:${v6Seg}){0,1}:${v4Str}|(:${v6Seg}){1,3}|:)|` +\n  `(?:${v6Seg}:){3}(?:(:${v6Seg}){0,2}:${v4Str}|(:${v6Seg}){1,4}|:)|` +\n  `(?:${v6Seg}:){2}(?:(:${v6Seg}){0,3}:${v4Str}|(:${v6Seg}){1,5}|:)|` +\n  `(?:${v6Seg}:){1}(?:(:${v6Seg}){0,4}:${v4Str}|(:${v6Seg}){1,6}|:)|` +\n  `(?::((?::${v6Seg}){0,5}:${v4Str}|(?::${v6Seg}){1,7}|:))` +\n')(%[0-9a-zA-Z-.:]{1,})?$')\n\nconst isIPv4 = exports.isIPv4 = function isIPv4 (host) {\n  return IPv4Pattern.test(host)\n}\n\nconst isIPv6 = exports.isIPv6 = function isIPv6 (host) {\n  return IPv6Pattern.test(host)\n}\n\nexports.isIP = function isIP (host) {\n  if (isIPv4(host)) return 4\n  if (isIPv6(host)) return 6\n  return 0\n}\nconst events = require('events')\nconst b4a = require('b4a')\nconst binding = require('../binding')\n\nmodule.exports = class NetworkInterfaces extends events.EventEmitter {\n  constructor (udx) {\n    super()\n\n    this._handle = b4a.allocUnsafe(binding.sizeof_udx_napi_interface_event_t)\n    this._watching = false\n    this._destroying = null\n\n    binding.udx_napi_interface_event_init(udx._handle, this._handle, this,\n      this._onevent,\n      this._onclose\n    )\n\n    this.interfaces = binding.udx_napi_interface_event_get_addrs(this._handle)\n  }\n\n  _onclose () {\n    this.emit('close')\n  }\n\n  _onevent () {\n    this.interfaces = binding.udx_napi_interface_event_get_addrs(this._handle)\n\n    this.emit('change', this.interfaces)\n  }\n\n  watch () {\n    if (this._watching) return this\n    this._watching = true\n\n    binding.udx_napi_interface_event_start(this._handle)\n\n    return this\n  }\n\n  unwatch () {\n    if (!this._watching) return this\n    this._watching = false\n\n    binding.udx_napi_interface_event_stop(this._handle)\n\n    return this\n  }\n\n  async destroy () {\n    if (this._destroying) return this._destroying\n    this._destroying = events.once(this, 'close')\n\n    binding.udx_napi_interface_event_close(this._handle)\n\n    return this._destroying\n  }\n\n  [Symbol.iterator] () {\n    return this.interfaces[Symbol.iterator]()\n  }\n}\nconst events = require('events')\nconst b4a = require('b4a')\nconst binding = require('../binding')\nconst ip = require('./ip')\n\nmodule.exports = class UDXSocket extends events.EventEmitter {\n  constructor (udx, opts = {}) {\n    super()\n\n    this.udx = udx\n\n    this._handle = b4a.allocUnsafe(binding.sizeof_udx_napi_socket_t)\n    this._inited = false\n    this._host = null\n    this._family = 0\n    this._ipv6Only = opts.ipv6Only === true\n    this._reuseAddress = opts.reuseAddress === true\n    this._port = 0\n    this._reqs = []\n    this._free = []\n    this._closing = null\n    this._closed = false\n\n    this._view64 = new BigUint64Array(this._handle.buffer, this._handle.byteOffset, this._handle.byteLength >> 3)\n\n    this.streams = new Set()\n\n    this.userData = null\n  }\n\n  get bound () {\n    return this._port !== 0\n  }\n\n  get closing () {\n    return this._closing !== null\n  }\n\n  get idle () {\n    return this.streams.size === 0\n  }\n\n  get busy () {\n    return this.streams.size > 0\n  }\n\n  get bytesTransmitted () {\n    if (this._inited !== true) return 0\n    return Number(this._view64[binding.offsetof_udx_socket_t_bytes_tx >> 3])\n  }\n\n  get packetsTransmitted () {\n    if (this._inited !== true) return 0\n    return Number(this._view64[binding.offsetof_udx_socket_t_packets_tx >> 3])\n  }\n\n  get bytesReceived () {\n    if (this._inited !== true) return 0\n    return Number(this._view64[binding.offsetof_udx_socket_t_bytes_rx >> 3])\n  }\n\n  get packetsReceived () {\n    if (this._inited !== true) return 0\n    return Number(this._view64[binding.offsetof_udx_socket_t_packets_rx >> 3])\n  }\n\n  get packetsDroppedByKernel () {\n    if (this._inited !== true) return 0\n    return Number(this._view64[binding.offsetof_udx_socket_t_packets_dropped_by_kernel >> 3])\n  }\n\n  toJSON () {\n    return {\n      bound: this.bound,\n      closing: this.closing,\n      streams: this.streams.size,\n      address: this.address(),\n      ipv6Only: this._ipv6Only,\n      reuseAddress: this._reuseAddress,\n      idle: this.idle,\n      busy: this.busy\n    }\n  }\n\n  _init () {\n    if (this._inited) return\n\n    binding.udx_napi_socket_init(this.udx._handle, this._handle, this,\n      this._onsend,\n      this._onmessage,\n      this._onclose,\n      this._reallocMessage\n    )\n\n    this._inited = true\n  }\n\n  _onsend (id, err) {\n    const req = this._reqs[id]\n\n    const onflush = req.onflush\n\n    req.buffer = null\n    req.onflush = null\n\n    this._free.push(id)\n\n    onflush(err >= 0)\n\n    // gc the free list\n    if (this._free.length >= 16 && this._free.length === this._reqs.length) {\n      this._free = []\n      this._reqs = []\n    }\n  }\n\n  _onmessage (len, port, host, family) {\n    this.emit('message', this.udx._consumeMessage(len), { host, family, port })\n    return this.udx._buffer\n  }\n\n  _onclose () {\n    this.emit('close')\n  }\n\n  _reallocMessage () {\n    return this.udx._reallocMessage()\n  }\n\n  _onidle () {\n    this.emit('idle')\n  }\n\n  _onbusy () {\n    this.emit('busy')\n  }\n\n  _addStream (stream) {\n    if (this.streams.has(stream)) return false\n    this.streams.add(stream)\n    if (this.streams.size === 1) this._onbusy()\n    return true\n  }\n\n  _removeStream (stream) {\n    if (!this.streams.has(stream)) return false\n    this.streams.delete(stream)\n    const closed = this._closeMaybe()\n    if (this.idle && !closed) this._onidle()\n    return true\n  }\n\n  address () {\n    if (!this.bound) return null\n    return { host: this._host, family: this._family, port: this._port }\n  }\n\n  bind (port, host) {\n    if (this.bound) throw new Error('Already bound')\n    if (this.closing) throw new Error('Socket is closed')\n\n    if (!port) port = 0\n\n    let flags = 0\n    if (this._ipv6Only) flags |= binding.UV_UDP_IPV6ONLY\n    if (this._reuseAddress) flags |= binding.UV_UDP_REUSEADDR\n\n    let family\n\n    if (host) {\n      family = ip.isIP(host)\n      if (!family) throw new Error(`${host} is not a valid IP address`)\n\n      if (!this._inited) this._init()\n\n      this._port = binding.udx_napi_socket_bind(this._handle, port, host, family, flags)\n    } else {\n      if (!this._inited) this._init()\n\n      try {\n        host = '::'\n        family = 6\n        this._port = binding.udx_napi_socket_bind(this._handle, port, host, family, flags)\n      } catch {\n        host = '0.0.0.0'\n        family = 4\n        this._port = binding.udx_napi_socket_bind(this._handle, port, host, family, flags)\n      }\n    }\n\n    this._host = host\n    this._family = family\n\n    this.emit('listening')\n  }\n\n  async close () {\n    if (this._closing) return this._closing\n    this._closing = new Promise(resolve => this.once('close', resolve))\n    this._closeMaybe()\n    return this._closing\n  }\n\n  _closeMaybe () {\n    if (this._closed || this._closing === null) return this._closed\n\n    if (!this._inited) {\n      this._closed = true\n      this.emit('close')\n      return true\n    }\n\n    if (this.idle) {\n      binding.udx_napi_socket_close(this._handle)\n      this._closed = true\n    }\n\n    return this._closed\n  }\n\n  setTTL (ttl) {\n    if (!this._inited) throw new Error('Socket not active')\n    binding.udx_napi_socket_set_ttl(this._handle, ttl)\n  }\n\n  getRecvBufferSize () {\n    if (!this._inited) throw new Error('Socket not active')\n    return binding.udx_napi_socket_get_recv_buffer_size(this._handle)\n  }\n\n  setRecvBufferSize (size) {\n    if (!this._inited) throw new Error('Socket not active')\n    return binding.udx_napi_socket_set_recv_buffer_size(this._handle, size)\n  }\n\n  getSendBufferSize () {\n    if (!this._inited) throw new Error('Socket not active')\n    return binding.udx_napi_socket_get_send_buffer_size(this._handle)\n  }\n\n  setSendBufferSize (size) {\n    if (!this._inited) throw new Error('Socket not active')\n    return binding.udx_napi_socket_set_send_buffer_size(this._handle, size)\n  }\n\n  addMembership (group, ifaceAddress) {\n    if (!this._inited) throw new Error('Socket not active')\n    return binding.udx_napi_socket_set_membership(this._handle, group, ifaceAddress || '', true)\n  }\n\n  dropMembership (group, ifaceAddress) {\n    if (!this._inited) throw new Error('Socket not active')\n    return binding.udx_napi_socket_set_membership(this._handle, group, ifaceAddress || '', false)\n  }\n\n  async send (buffer, port, host, ttl) {\n    if (this.closing) return false\n\n    if (!host) host = '127.0.0.1'\n\n    const family = ip.isIP(host)\n    if (!family) throw new Error(`${host} is not a valid IP address`)\n\n    if (!this.bound) this.bind(0)\n\n    const id = this._allocSend()\n    const req = this._reqs[id]\n\n    req.buffer = buffer\n\n    const promise = new Promise((resolve) => {\n      req.onflush = resolve\n    })\n\n    binding.udx_napi_socket_send_ttl(this._handle, req.handle, id, buffer, port, host, family, ttl || 0)\n\n    return promise\n  }\n\n  trySend (buffer, port, host, ttl) {\n    if (this.closing) return\n\n    if (!host) host = '127.0.0.1'\n\n    const family = ip.isIP(host)\n    if (!family) throw new Error(`${host} is not a valid IP address`)\n\n    if (!this.bound) this.bind(0)\n\n    const id = this._allocSend()\n    const req = this._reqs[id]\n\n    req.buffer = buffer\n    req.onflush = noop\n\n    binding.udx_napi_socket_send_ttl(this._handle, req.handle, id, buffer, port, host, family, ttl || 0)\n  }\n\n  _allocSend () {\n    if (this._free.length > 0) return this._free.pop()\n    const handle = b4a.allocUnsafe(binding.sizeof_udx_socket_send_t)\n    return this._reqs.push({ handle, buffer: null, onflush: null }) - 1\n  }\n}\n\nfunction noop () {}\nconst streamx = require('streamx')\nconst b4a = require('b4a')\nconst binding = require('../binding')\nconst ip = require('./ip')\n\nconst MAX_PACKET = 2048\nconst BUFFER_SIZE = 65536 + MAX_PACKET\n\nmodule.exports = class UDXStream extends streamx.Duplex {\n  constructor (udx, id, opts = {}) {\n    super({ mapWritable: toBuffer, eagerOpen: true })\n\n    this.udx = udx\n    this.socket = null\n\n    this._handle = b4a.allocUnsafe(binding.sizeof_udx_napi_stream_t)\n    this._view = new Uint32Array(this._handle.buffer, this._handle.byteOffset, this._handle.byteLength >> 2)\n    this._view16 = new Uint16Array(this._handle.buffer, this._handle.byteOffset, this._handle.byteLength >> 1)\n    this._view64 = new BigUint64Array(this._handle.buffer, this._handle.byteOffset, this._handle.byteLength >> 3)\n\n    this._wreqs = []\n    this._wfree = []\n\n    this._sreqs = []\n    this._sfree = []\n    this._closed = false\n\n    this._flushing = 0\n    this._flushes = []\n\n    this._buffer = null\n    this._reallocData()\n\n    this._onwrite = null\n    this._ondestroy = null\n    this._firewall = opts.firewall || firewallAll\n\n    this._remoteChanging = null\n    this._previousSocket = null\n\n    this.id = id\n    this.remoteId = 0\n    this.remoteHost = null\n    this.remoteFamily = 0\n    this.remotePort = 0\n\n    this.userData = null\n\n    binding.udx_napi_stream_init(this.udx._handle, this._handle, id, opts.framed ? 1 : 0, this,\n      this._ondata,\n      this._onend,\n      this._ondrain,\n      this._onack,\n      this._onsend,\n      this._onmessage,\n      this._onclose,\n      this._onfirewall,\n      this._onremotechanged,\n      this._reallocData,\n      this._reallocMessage\n    )\n\n    if (opts.seq) binding.udx_napi_stream_set_seq(this._handle, opts.seq)\n\n    binding.udx_napi_stream_recv_start(this._handle, this._buffer)\n  }\n\n  get connected () {\n    return this.socket !== null\n  }\n\n  get mtu () {\n    return this._view16[binding.offsetof_udx_stream_t_mtu >> 1]\n  }\n\n  get rtt () {\n    return this._view[binding.offsetof_udx_stream_t_srtt >> 2]\n  }\n\n  get cwnd () {\n    return this._view[binding.offsetof_udx_stream_t_cwnd >> 2]\n  }\n\n  get rtoCount () {\n    return this._view16[binding.offsetof_udx_stream_t_rto_count >> 1]\n  }\n\n  get retransmits () {\n    return this._view16[binding.offsetof_udx_stream_t_retransmit_count >> 1]\n  }\n\n  get fastRecoveries () {\n    return this._view16[binding.offsetof_udx_stream_t_fast_recovery_count >> 1]\n  }\n\n  get inflight () {\n    return this._view[binding.offsetof_udx_stream_t_inflight >> 2]\n  }\n\n  get bytesTransmitted () {\n    return Number(this._view64[binding.offsetof_udx_stream_t_bytes_tx >> 3])\n  }\n\n  get packetsTransmitted () {\n    return Number(this._view64[binding.offsetof_udx_stream_t_packets_tx >> 3])\n  }\n\n  get bytesReceived () {\n    return Number(this._view64[binding.offsetof_udx_stream_t_bytes_rx >> 3])\n  }\n\n  get packetsReceived () {\n    return Number(this._view64[binding.offsetof_udx_stream_t_packets_rx >> 3])\n  }\n\n  get localHost () {\n    return this.socket ? this.socket.address().host : null\n  }\n\n  get localFamily () {\n    return this.socket ? this.socket.address().family : 0\n  }\n\n  get localPort () {\n    return this.socket ? this.socket.address().port : 0\n  }\n\n  setInteractive (bool) {\n    if (!this._closed) return\n    binding.udx_napi_stream_set_mode(this._handle, bool ? 0 : 1)\n  }\n\n  connect (socket, remoteId, port, host, opts = {}) {\n    if (this._closed) return\n\n    if (this.connected) throw new Error('Already connected')\n    if (socket.closing) throw new Error('Socket is closed')\n\n    if (typeof host === 'object') {\n      opts = host\n      host = null\n    }\n\n    if (!host) host = '127.0.0.1'\n\n    const family = ip.isIP(host)\n    if (!family) throw new Error(`${host} is not a valid IP address`)\n    if (!(port > 0 && port < 65536)) throw new Error(`${port} is not a valid port`)\n\n    if (!socket.bound) socket.bind(0)\n\n    this.remoteId = remoteId\n    this.remotePort = port\n    this.remoteHost = host\n    this.remoteFamily = family\n    this.socket = socket\n\n    if (opts.ack) binding.udx_napi_stream_set_ack(this._handle, opts.ack)\n\n    binding.udx_napi_stream_connect(this._handle, socket._handle, remoteId, port, host, family)\n\n    this.socket._addStream(this)\n\n    this.emit('connect')\n  }\n\n  changeRemote (socket, remoteId, port, host) {\n    if (this._remoteChanging) throw new Error('Remote already changing')\n\n    if (!this.connected) throw new Error('Not yet connected')\n    if (socket.closing) throw new Error('Socket is closed')\n\n    if (this.socket.udx !== socket.udx) {\n      throw new Error('Cannot change to a socket on another UDX instance')\n    }\n\n    if (!host) host = '127.0.0.1'\n\n    const family = ip.isIP(host)\n    if (!family) throw new Error(`${host} is not a valid IP address`)\n    if (!(port > 0 && port < 65536)) throw new Error(`${port} is not a valid port`)\n\n    if (this.socket !== socket) this._previousSocket = this.socket\n\n    this.remoteId = remoteId\n    this.remotePort = port\n    this.remoteHost = host\n    this.remoteFamily = family\n    this.socket = socket\n\n    this._remoteChanging = new Promise((resolve, reject) => {\n      const onchanged = () => {\n        this.off('close', onclose)\n        resolve()\n      }\n\n      const onclose = () => {\n        this.off('remote-changed', onchanged)\n        reject(new Error('Stream is closed'))\n      }\n\n      this\n        .once('remote-changed', onchanged)\n        .once('close', onclose)\n    })\n\n    binding.udx_napi_stream_change_remote(this._handle, socket._handle, remoteId, port, host, family)\n\n    this.socket._addStream(this)\n\n    return this._remoteChanging\n  }\n\n  relayTo (destination) {\n    if (this._closed) return\n\n    binding.udx_napi_stream_relay_to(this._handle, destination._handle)\n  }\n\n  async send (buffer) {\n    if (!this.connected || this._closed) return false\n\n    const id = this._allocSend()\n    const req = this._sreqs[id]\n\n    req.buffer = buffer\n\n    const promise = new Promise((resolve) => {\n      req.onflush = resolve\n    })\n\n    binding.udx_napi_stream_send(this._handle, req.handle, id, buffer)\n\n    return promise\n  }\n\n  trySend (buffer) {\n    if (!this.connected || this._closed) return\n\n    const id = this._allocSend()\n    const req = this._sreqs[id]\n\n    req.buffer = buffer\n    req.onflush = noop\n\n    binding.udx_napi_stream_send(this._handle, req.handle, id, buffer)\n  }\n\n  async flush () {\n    if ((await streamx.Writable.drained(this)) === false) return false\n    if (this.destroying) return false\n\n    const missing = this._wreqs.length - this._wfree.length\n    if (missing === 0) return true\n\n    return new Promise((resolve) => {\n      this._flushes.push({ flush: this._flushing++, missing, resolve })\n    })\n  }\n\n  toJSON () {\n    return {\n      id: this.id,\n      connected: this.connected,\n      destroying: this.destroying,\n      destroyed: this.destroyed,\n      remoteId: this.remoteId,\n      remoteHost: this.remoteHost,\n      remoteFamily: this.remoteFamily,\n      remotePort: this.remotePort,\n      mtu: this.mtu,\n      rtt: this.rtt,\n      cwnd: this.cwnd,\n      inflight: this.inflight,\n      socket: this.socket ? this.socket.toJSON() : null\n    }\n  }\n\n  _read (cb) {\n    cb(null)\n  }\n\n  _writeContinue (err) {\n    if (this._onwrite === null) return\n    const cb = this._onwrite\n    this._onwrite = null\n    cb(err)\n  }\n\n  _destroyContinue (err) {\n    if (this._ondestroy === null) return\n    const cb = this._ondestroy\n    this._ondestroy = null\n    cb(err)\n  }\n\n  _writev (buffers, cb) {\n    if (!this.connected) throw customError('Writing while not connected not currently supported', 'ERR_ASSERTION')\n\n    let drained = true\n\n    if (buffers.length === 1) {\n      const id = this._allocWrite(1)\n      const req = this._wreqs[id]\n\n      req.flush = this._flushing\n      req.buffer = buffers[0]\n\n      drained = binding.udx_napi_stream_write(this._handle, req.handle, id, req.buffer) !== 0\n    } else {\n      const id = this._allocWrite(nextBatchSize(buffers.length))\n      const req = this._wreqs[id]\n\n      req.flush = this._flushing\n      req.buffers = buffers\n\n      drained = binding.udx_napi_stream_writev(this._handle, req.handle, id, req.buffers) !== 0\n    }\n\n    if (drained) cb(null)\n    else this._onwrite = cb\n  }\n\n  _final (cb) {\n    const id = this._allocWrite(1)\n    const req = this._wreqs[id]\n\n    req.flush = this._flushes\n    req.buffer = b4a.allocUnsafe(0)\n\n    const drained = binding.udx_napi_stream_write_end(this._handle, req.handle, id, req.buffer) !== 0\n\n    if (drained) cb(null)\n    else this._onwrite = cb\n  }\n\n  _predestroy () {\n    if (!this._closed) binding.udx_napi_stream_destroy(this._handle)\n    this._closed = true\n    this._writeContinue(null)\n  }\n\n  _destroy (cb) {\n    if (this.connected) this._ondestroy = cb\n    else cb(null)\n  }\n\n  _ondata (read) {\n    this.push(this._consumeData(read))\n    return this._buffer\n  }\n\n  _onend (read) {\n    if (read > 0) this.push(this._consumeData(read))\n    this.push(null)\n  }\n\n  _ondrain () {\n    this._writeContinue(null)\n  }\n\n  _flushAck (flush) {\n    for (let i = this._flushes.length - 1; i >= 0; i--) {\n      const f = this._flushes[i]\n      if (f.flush < flush) break\n      f.missing--\n    }\n\n    while (this._flushes.length > 0 && this._flushes[0].missing === 0) {\n      this._flushes.shift().resolve(true)\n    }\n  }\n\n  _onack (id) {\n    const req = this._wreqs[id]\n\n    req.buffers = req.buffer = null\n    this._wfree.push(id)\n\n    if (this._flushes.length > 0) this._flushAck(req.flush)\n\n    // gc the free list\n    if (this._wfree.length >= 64 && this._wfree.length === this._wreqs.length) {\n      this._wfree = []\n      this._wreqs = []\n    }\n  }\n\n  _onsend (id, err) {\n    const req = this._sreqs[id]\n\n    const onflush = req.onflush\n\n    req.buffer = null\n    req.onflush = null\n\n    this._sfree.push(id)\n\n    onflush(err >= 0)\n\n    // gc the free list\n    if (this._sfree.length >= 16 && this._sfree.length === this._sreqs.length) {\n      this._sfree = []\n      this._sreqs = []\n    }\n  }\n\n  _onmessage (len) {\n    this.emit('message', this.udx._consumeMessage(len))\n    return this.udx._buffer\n  }\n\n  _onclose (err) {\n    this._closed = true\n\n    if (this.socket) {\n      this.socket._removeStream(this)\n      this.socket = null\n    }\n\n    if (this._previousSocket) {\n      this._previousSocket._removeStream(this)\n      this._previousSocket = null\n    }\n\n    // no error, we don't need to do anything\n    if (!err) return this._destroyContinue(null)\n\n    if (this._ondestroy === null) this.destroy(err)\n    else this._destroyContinue(err)\n  }\n\n  _onfirewall (socket, port, host, family) {\n    return this._firewall(socket, port, host, family) ? 1 : 0\n  }\n\n  _onremotechanged () {\n    if (this._previousSocket) {\n      this._previousSocket._removeStream(this)\n      this._previousSocket = null\n    }\n\n    this._remoteChanging = null\n    this.emit('remote-changed')\n  }\n\n  _consumeData (len) {\n    const next = this._buffer.subarray(0, len)\n    this._buffer = this._buffer.subarray(len)\n    if (this._buffer.byteLength < MAX_PACKET) this._reallocData()\n    return next\n  }\n\n  _reallocData () {\n    this._buffer = b4a.allocUnsafe(BUFFER_SIZE)\n    return this._buffer\n  }\n\n  _reallocMessage () {\n    return this.udx._reallocMessage()\n  }\n\n  _allocWrite (size) {\n    if (this._wfree.length === 0) {\n      const handle = b4a.allocUnsafe(binding.udx_napi_stream_write_sizeof(size))\n      return this._wreqs.push({ handle, size, buffers: null, buffer: null, flush: 0 }) - 1\n    }\n\n    const free = this._wfree.pop()\n    if (size === 1) return free\n\n    const next = this._wreqs[free]\n    if (next.size < size) {\n      next.handle = b4a.allocUnsafe(binding.udx_napi_stream_write_sizeof(size))\n      next.size = size\n    }\n\n    return free\n  }\n\n  _allocSend () {\n    if (this._sfree.length > 0) return this._sfree.pop()\n    const handle = b4a.allocUnsafe(binding.sizeof_udx_stream_send_t)\n    return this._sreqs.push({ handle, buffer: null, resolve: null, reject: null }) - 1\n  }\n}\n\nfunction noop () {}\n\nfunction toBuffer (data) {\n  return typeof data === 'string' ? b4a.from(data) : data\n}\n\nfunction firewallAll (socket, port, host) {\n  return true\n}\n\nfunction customError (message, code) {\n  const error = new Error(message)\n  error.code = code\n  return error\n}\n\nfunction nextBatchSize (n) { // try to coerce the the writevs into sameish size\n  if (n === 1) return 1\n  // group all < 8 to the same size, low mem overhead but save some small allocs\n  if (n < 8) return 8\n  if (n < 16) return 16\n  if (n < 32) return 32\n  if (n < 64) return 64\n  return n\n}\nconst b4a = require('b4a')\nconst binding = require('../binding')\nconst ip = require('./ip')\nconst Socket = require('./socket')\nconst Stream = require('./stream')\nconst NetworkInterfaces = require('./network-interfaces')\n\nconst MAX_MESSAGE = 4096\nconst BUFFER_SIZE = 65536 + MAX_MESSAGE\n\nmodule.exports = class UDX {\n  constructor () {\n    this._handle = b4a.allocUnsafe(binding.sizeof_udx_napi_t)\n    this._watchers = new Set()\n    this._view64 = new BigUint64Array(this._handle.buffer, this._handle.byteOffset, this._handle.byteLength >> 3)\n\n    this._buffer = null\n    this._reallocMessage()\n\n    binding.udx_napi_init(this._handle, this._buffer)\n  }\n\n  static isIPv4 (host) {\n    return ip.isIPv4(host)\n  }\n\n  static isIPv6 (host) {\n    return ip.isIPv6(host)\n  }\n\n  static isIP (host) {\n    return ip.isIP(host)\n  }\n\n  get bytesTransmitted () {\n    return Number(this._view64[binding.offsetof_udx_t_bytes_tx >> 3])\n  }\n\n  get packetsTransmitted () {\n    return Number(this._view64[binding.offsetof_udx_t_packets_tx >> 3])\n  }\n\n  get bytesReceived () {\n    return Number(this._view64[binding.offsetof_udx_t_bytes_rx >> 3])\n  }\n\n  get packetsReceived () {\n    return Number(this._view64[binding.offsetof_udx_t_packets_rx >> 3])\n  }\n\n  get packetsDroppedByKernel () {\n    return Number(this._view64[binding.offsetof_udx_t_packets_dropped_by_kernel >> 3])\n  }\n\n  _consumeMessage (len) {\n    const next = this._buffer.subarray(0, len)\n    this._buffer = this._buffer.subarray(len)\n    if (this._buffer.byteLength < MAX_MESSAGE) this._reallocMessage()\n    return next\n  }\n\n  _reallocMessage () {\n    this._buffer = b4a.allocUnsafe(BUFFER_SIZE)\n    return this._buffer\n  }\n\n  createSocket (opts) {\n    return new Socket(this, opts)\n  }\n\n  createStream (id, opts) {\n    return new Stream(this, id, opts)\n  }\n\n  networkInterfaces () {\n    let [watcher = null] = this._watchers\n    if (watcher) return watcher.interfaces\n\n    watcher = new NetworkInterfaces(this)\n    watcher.destroy()\n\n    return watcher.interfaces\n  }\n\n  watchNetworkInterfaces (onchange) {\n    const watcher = new NetworkInterfaces(this)\n\n    this._watchers.add(watcher)\n    watcher.on('close', () => {\n      this._watchers.delete(watcher)\n    })\n\n    if (onchange) watcher.on('change', onchange)\n\n    return watcher.watch()\n  }\n\n  async lookup (host, opts = {}) {\n    const {\n      family = 0\n    } = opts\n\n    const req = b4a.allocUnsafe(binding.sizeof_udx_napi_lookup_t)\n    const ctx = {\n      req,\n      resolve: null,\n      reject: null\n    }\n\n    const promise = new Promise((resolve, reject) => {\n      ctx.resolve = resolve\n      ctx.reject = reject\n    })\n\n    binding.udx_napi_lookup(this._handle, req, host, family, ctx, onlookup)\n\n    return promise\n  }\n}\n\nfunction onlookup (err, host, family) {\n  if (err) this.reject(err)\n  else this.resolve({ host, family })\n}\n{\n  \"name\": \"udx-native\",\n  \"version\": \"1.17.4\",\n  \"description\": \"udx is reliable, multiplexed, and congestion-controlled streams over udp\",\n  \"main\": \"lib/udx.js\",\n  \"files\": [\n    \"lib\",\n    \"prebuilds\",\n    \"binding.c\",\n    \"binding.js\",\n    \"CMakeLists.txt\"\n  ],\n  \"imports\": {\n    \"events\": {\n      \"bare\": \"bare-events\",\n      \"default\": \"events\"\n    }\n  },\n  \"addon\": true,\n  \"scripts\": {\n    \"test\": \"npm run lint && npm run test:bare && npm run test:node\",\n    \"test:node\": \"node test/all.js\",\n    \"test:bare\": \"bare test/all.js\",\n    \"test:all\": \"brittle test/*.js test/slow/*.js\",\n    \"test:generate\": \"brittle -r test/all.js test/*.js\",\n    \"bench\": \"brittle test/bench/*.js\",\n    \"lint\": \"standard\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/holepunchto/udx-native.git\"\n  },\n  \"keywords\": [\n    \"tcp\",\n    \"udp\",\n    \"stream\",\n    \"reliable\"\n  ],\n  \"author\": \"Holepunch Inc.\",\n  \"license\": \"Apache-2.0\",\n  \"gypfile\": true,\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/udx-native/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/udx-native#readme\",\n  \"dependencies\": {\n    \"b4a\": \"^1.5.0\",\n    \"bare-events\": \"^2.2.0\",\n    \"node-gyp-build\": \"^4.4.0\",\n    \"streamx\": \"^2.14.0\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^3.1.0\",\n    \"cmake-bare\": \"^1.1.10\",\n    \"cmake-fetch\": \"^1.0.1\",\n    \"cmake-napi\": \"^1.0.5\",\n    \"is-ci\": \"^3.0.1\",\n    \"standard\": \"^17.1.0\",\n    \"tiny-byte-size\": \"^1.1.0\"\n  }\n}\nexports.add = add\nexports.has = has\nexports.remove = remove\nexports.swap = swap\n\nfunction add (list, item) {\n  if (has(list, item)) return item\n  item._index = list.length\n  list.push(item)\n  return item\n}\n\nfunction has (list, item) {\n  return item._index < list.length && list[item._index] === item\n}\n\nfunction remove (list, item) {\n  if (!has(list, item)) return null\n\n  var last = list.pop()\n  if (last !== item) {\n    list[item._index] = last\n    last._index = item._index\n  }\n\n  return item\n}\n\nfunction swap (list, a, b) {\n  if (!has(list, a) || !has(list, b)) return\n  var tmp = a._index\n  a._index = b._index\n  list[a._index] = a\n  b._index = tmp\n  list[b._index] = b\n}\n{\n  \"name\": \"unordered-set\",\n  \"version\": \"2.0.1\",\n  \"description\": \"A couple of functions that make it easy to maintain an unordered set as an array in an efficient way\",\n  \"main\": \"index.js\",\n  \"dependencies\": {},\n  \"devDependencies\": {\n    \"standard\": \"^6.0.4\",\n    \"tape\": \"^4.4.0\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && tape test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mafintosh/unordered-set.git\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mafintosh/unordered-set/issues\"\n  },\n  \"homepage\": \"https://github.com/mafintosh/unordered-set\"\n}\nconst b4a = require('b4a')\n\nunslab.all = all\nunslab.is = is\n\nmodule.exports = unslab\n\nfunction unslab (buf) {\n  if (buf === null || buf.buffer.byteLength === buf.byteLength) return buf\n  const copy = b4a.allocUnsafeSlow(buf.byteLength)\n  copy.set(buf, 0)\n  return copy\n}\n\nfunction is (buf) {\n  return buf.buffer.byteLength !== buf.byteLength\n}\n\nfunction all (list) {\n  let size = 0\n  for (let i = 0; i < list.length; i++) {\n    const buf = list[i]\n    size += buf === null || buf.buffer.byteLength === buf.byteLength ? 0 : buf.byteLength\n  }\n\n  const copy = b4a.allocUnsafeSlow(size)\n  const result = new Array(list.length)\n\n  let offset = 0\n  for (let i = 0; i < list.length; i++) {\n    let buf = list[i]\n\n    if (buf !== null && buf.buffer.byteLength !== buf.byteLength) {\n      copy.set(buf, offset)\n      buf = copy.subarray(offset, offset += buf.byteLength)\n    }\n\n    result[i] = buf\n  }\n\n  return result\n}\n{\n  \"name\": \"unslab\",\n  \"version\": \"1.3.0\",\n  \"description\": \"Unslab some slab'ed buffers\",\n  \"main\": \"index.js\",\n  \"files\": [\n    \"index.js\"\n  ],\n  \"dependencies\": {\n    \"b4a\": \"^1.6.6\"\n  },\n  \"devDependencies\": {\n    \"brittle\": \"^3.5.2\",\n    \"standard\": \"^17.1.0\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && brittle test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/holepunchto/unslab.git\"\n  },\n  \"author\": \"Holepunch\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/unslab/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/unslab\"\n}\nmodule.exports = read\n\nvar MSB = 0x80\n  , REST = 0x7F\n\nfunction read(buf, offset) {\n  var res    = 0\n    , offset = offset || 0\n    , shift  = 0\n    , counter = offset\n    , b\n    , l = buf.length\n\n  do {\n    if (counter >= l) {\n      read.bytes = 0\n      throw new RangeError('Could not decode varint')\n    }\n    b = buf[counter++]\n    res += shift < 28\n      ? (b & REST) << shift\n      : (b & REST) * Math.pow(2, shift)\n    shift += 7\n  } while (b >= MSB)\n\n  read.bytes = counter - offset\n\n  return res\n}\nmodule.exports = encode\n\nvar MSB = 0x80\n  , REST = 0x7F\n  , MSBALL = ~REST\n  , INT = Math.pow(2, 31)\n\nfunction encode(num, out, offset) {\n  out = out || []\n  offset = offset || 0\n  var oldOffset = offset\n\n  while(num >= INT) {\n    out[offset++] = (num & 0xFF) | MSB\n    num /= 128\n  }\n  while(num & MSBALL) {\n    out[offset++] = (num & 0xFF) | MSB\n    num >>>= 7\n  }\n  out[offset] = num | 0\n  \n  encode.bytes = offset - oldOffset + 1\n  \n  return out\n}\nmodule.exports = {\n    encode: require('./encode.js')\n  , decode: require('./decode.js')\n  , encodingLength: require('./length.js')\n}\n\nvar N1 = Math.pow(2,  7)\nvar N2 = Math.pow(2, 14)\nvar N3 = Math.pow(2, 21)\nvar N4 = Math.pow(2, 28)\nvar N5 = Math.pow(2, 35)\nvar N6 = Math.pow(2, 42)\nvar N7 = Math.pow(2, 49)\nvar N8 = Math.pow(2, 56)\nvar N9 = Math.pow(2, 63)\n\nmodule.exports = function (value) {\n  return (\n    value < N1 ? 1\n  : value < N2 ? 2\n  : value < N3 ? 3\n  : value < N4 ? 4\n  : value < N5 ? 5\n  : value < N6 ? 6\n  : value < N7 ? 7\n  : value < N8 ? 8\n  : value < N9 ? 9\n  :              10\n  )\n}\n{\n  \"name\": \"varint\",\n  \"version\": \"5.0.0\",\n  \"description\": \"protobuf-style varint bytes - use msb to create integer values of varying sizes\",\n  \"main\": \"index.js\",\n  \"scripts\": {\n    \"test\": \"node test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git://github.com/chrisdickinson/varint.git\"\n  },\n  \"keywords\": [\n    \"varint\",\n    \"protobuf\",\n    \"encode\",\n    \"decode\"\n  ],\n  \"author\": \"Chris Dickinson <chris@neversaw.us>\",\n  \"license\": \"MIT\",\n  \"devDependencies\": {\n    \"tape\": \"~2.12.3\"\n  }\n}\nconst { runtime, platform, arch } = typeof Bare !== 'undefined'\n  ? { runtime: 'bare', platform: global.Bare.platform, arch: global.Bare.arch }\n  : typeof process !== 'undefined'\n    ? { runtime: 'node', platform: global.process.platform, arch: global.process.arch }\n    : typeof Window !== 'undefined'\n      ? { runtime: 'browser', platform: 'unknown', arch: 'unknown' }\n      : { runtime: 'unknown', platform: 'unknown', arch: 'unknown' }\n\nexports.runtime = runtime\nexports.platform = platform\nexports.arch = arch\nexports.isBare = runtime === 'bare'\nexports.isNode = runtime === 'node'\nexports.isBrowser = runtime === 'browser'\nexports.isWindows = platform === 'win32'\nexports.isLinux = platform === 'linux'\nexports.isMac = platform === 'darwin'\nexports.isIOS = platform === 'ios' || platform === 'ios-simulator'\nexports.isAndroid = platform === 'android'\nexports.isElectron = !!(typeof process !== 'undefined' && global.process.versions.electron)\nexports.isElectronRenderer = !!(typeof process !== 'undefined' && global.process.versions.electron && global.process.type === 'renderer')\nexports.isElectronWorker = !!(typeof process !== 'undefined' && global.process.versions.electron && global.process.type === 'worker')\n{\n  \"name\": \"which-runtime\",\n  \"version\": \"1.2.1\",\n  \"description\": \"Detect if you are in Bare or Node and which os etc\",\n  \"main\": \"index.js\",\n  \"files\": [\n    \"index.js\"\n  ],\n  \"dependencies\": {},\n  \"devDependencies\": {\n    \"standard\": \"^17.0.0\"\n  },\n  \"scripts\": {\n    \"test\": \"standard\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/holepunchto/which-runtime.git\"\n  },\n  \"author\": \"Holepunch Inc.\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/which-runtime/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/which-runtime\"\n}\nmodule.exports = class MaxCache {\n  constructor ({ maxSize, maxAge, createMap, ongc }) {\n    this.maxSize = maxSize\n    this.maxAge = maxAge\n    this.ongc = ongc || null\n\n    this._createMap = createMap || defaultCreateMap\n    this._latest = this._createMap()\n    this._oldest = this._createMap()\n    this._retained = this._createMap()\n    this._gced = false\n    this._interval = null\n\n    if (this.maxAge > 0 && this.maxAge < Infinity) {\n      const tick = Math.ceil(2 / 3 * this.maxAge)\n      this._interval = setInterval(this._gcAuto.bind(this), tick)\n      if (this._interval.unref) this._interval.unref()\n    }\n  }\n\n  * [Symbol.iterator] () {\n    for (const it of [this._latest, this._oldest, this._retained]) {\n      yield * it\n    }\n  }\n\n  * keys () {\n    for (const it of [this._latest, this._oldest, this._retained]) {\n      yield * it.keys()\n    }\n  }\n\n  * values () {\n    for (const it of [this._latest, this._oldest, this._retained]) {\n      yield * it.values()\n    }\n  }\n\n  destroy () {\n    this.clear()\n    clearInterval(this._interval)\n    this._interval = null\n  }\n\n  clear () {\n    this._gced = true\n    this._latest.clear()\n    this._oldest.clear()\n    this._retained.clear()\n  }\n\n  set (k, v) {\n    if (this._retained.has(k)) return this\n    this._latest.set(k, v)\n    this._oldest.delete(k) || this._retained.delete(k)\n    if (this._latest.size >= this.maxSize) this._gc()\n    return this\n  }\n\n  retain (k, v) {\n    this._retained.set(k, v)\n    this._latest.delete(k) || this._oldest.delete(k)\n    return this\n  }\n\n  delete (k) {\n    return this._latest.delete(k) || this._oldest.delete(k) || this._retained.delete(k)\n  }\n\n  has (k) {\n    return this._latest.has(k) || this._oldest.has(k) || this._retained.has(k)\n  }\n\n  get (k) {\n    if (this._latest.has(k)) {\n      return this._latest.get(k)\n    }\n\n    if (this._oldest.has(k)) {\n      const v = this._oldest.get(k)\n      this._latest.set(k, v)\n      this._oldest.delete(k)\n      return v\n    }\n\n    if (this._retained.has(k)) {\n      return this._retained.get(k)\n    }\n\n    return null\n  }\n\n  _gcAuto () {\n    if (!this._gced) this._gc()\n    this._gced = false\n  }\n\n  _gc () {\n    this._gced = true\n    if (this.ongc !== null && this._oldest.size > 0) this.ongc(this._oldest)\n    this._oldest = this._latest\n    this._latest = this._createMap()\n  }\n}\n\nfunction defaultCreateMap () {\n  return new Map()\n}\n{\n  \"name\": \"xache\",\n  \"version\": \"1.2.1\",\n  \"description\": \"Yet another auto expiring, max sizable cache\",\n  \"main\": \"index.js\",\n  \"files\": [\n    \"index.js\"\n  ],\n  \"devDependencies\": {\n    \"brittle\": \"^3.3.2\",\n    \"standard\": \"^17.1.0\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && brittle test.js\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mafintosh/xache.git\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mafintosh/xache/issues\"\n  },\n  \"homepage\": \"https://github.com/mafintosh/xache\"\n}\nconst b4a = require('b4a')\n\nconst ALPHABET = 'ybndrfg8ejkmcpqxot1uwisza345h769'\nconst MIN = 0x31 // 1\nconst MAX = 0x7a // z\nconst REVERSE = new Int8Array(1 + MAX - MIN)\n\nREVERSE.fill(-1)\n\nfor (let i = 0; i < ALPHABET.length; i++) {\n  const v = ALPHABET.charCodeAt(i) - MIN\n  REVERSE[v] = i\n}\n\nexports.encode = encode\nexports.decode = decode\nexports.ALPHABET = ALPHABET\n\nfunction decode (s, out) {\n  let pb = 0\n  let ps = 0\n\n  const r = s.length & 7\n  const q = (s.length - r) / 8\n\n  if (!out) out = b4a.allocUnsafe(Math.ceil(s.length * 5 / 8))\n\n  // 0 5 2 7 4 1 6 3 (+5 mod 8)\n  for (let i = 0; i < q; i++) {\n    const a = quintet(s, ps++)\n    const b = quintet(s, ps++)\n    const c = quintet(s, ps++)\n    const d = quintet(s, ps++)\n    const e = quintet(s, ps++)\n    const f = quintet(s, ps++)\n    const g = quintet(s, ps++)\n    const h = quintet(s, ps++)\n\n    out[pb++] = (a << 3) | (b >>> 2)\n    out[pb++] = ((b & 0b11) << 6) | (c << 1) | (d >>> 4)\n    out[pb++] = ((d & 0b1111) << 4) | (e >>> 1)\n    out[pb++] = ((e & 0b1) << 7) | (f << 2) | (g >>> 3)\n    out[pb++] = ((g & 0b111) << 5) | h\n  }\n\n  if (r === 0) return out.subarray(0, pb)\n\n  const a = quintet(s, ps++)\n  const b = quintet(s, ps++)\n\n  out[pb++] = (a << 3) | (b >>> 2)\n\n  if (r <= 2) return out.subarray(0, pb)\n\n  const c = quintet(s, ps++)\n  const d = quintet(s, ps++)\n\n  out[pb++] = ((b & 0b11) << 6) | (c << 1) | (d >>> 4)\n\n  if (r <= 4) return out.subarray(0, pb)\n\n  const e = quintet(s, ps++)\n\n  out[pb++] = ((d & 0b1111) << 4) | (e >>> 1)\n\n  if (r <= 5) return out.subarray(0, pb)\n\n  const f = quintet(s, ps++)\n  const g = quintet(s, ps++)\n\n  out[pb++] = ((e & 0b1) << 7) | (f << 2) | (g >>> 3)\n\n  if (r <= 7) return out.subarray(0, pb)\n\n  const h = quintet(s, ps++)\n\n  out[pb++] = ((g & 0b111) << 5) | h\n\n  return out.subarray(0, pb)\n}\n\nfunction encode (buf) {\n  if (typeof buf === 'string') buf = b4a.from(buf)\n\n  const max = buf.byteLength * 8\n\n  let s = ''\n\n  for (let p = 0; p < max; p += 5) {\n    const i = p >>> 3\n    const j = p & 7\n\n    if (j <= 3) {\n      s += ALPHABET[(buf[i] >>> (3 - j)) & 0b11111]\n      continue\n    }\n\n    const of = j - 3\n    const h = (buf[i] << of) & 0b11111\n    const l = (i >= buf.byteLength ? 0 : buf[i + 1]) >>> (8 - of)\n\n    s += ALPHABET[h | l]\n  }\n\n  return s\n}\n\nfunction quintet (s, i) {\n  if (i > s.length) {\n    return 0\n  }\n\n  const v = s.charCodeAt(i)\n\n  if (v < MIN || v > MAX) {\n    throw Error('Invalid character in base32 input: \"' + s[i] + '\" at position ' + i)\n  }\n\n  const bits = REVERSE[v - MIN]\n\n  if (bits === -1) {\n    throw Error('Invalid character in base32 input: \"' + s[i] + '\" at position ' + i)\n  }\n\n  return bits\n}\n{\n  \"name\": \"z32\",\n  \"version\": \"1.1.0\",\n  \"description\": \"Encode & decode z-base32\",\n  \"main\": \"index.js\",\n  \"dependencies\": {\n    \"b4a\": \"^1.5.3\"\n  },\n  \"devDependencies\": {\n    \"base-x\": \"^4.0.0\",\n    \"base32\": \"0.0.7\",\n    \"brittle\": \"^3.1.3\",\n    \"nanobench\": \"^3.0.0\",\n    \"rfc4648\": \"^1.5.2\",\n    \"standard\": \"^17.0.0\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/mafintosh/z32.git\"\n  },\n  \"scripts\": {\n    \"test\": \"standard && brittle test.js\",\n    \"bench\": \"node benchmark.js\"\n  },\n  \"author\": \"Mathias Buus (@mafintosh)\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/mafintosh/z32/issues\"\n  },\n  \"homepage\": \"https://github.com/mafintosh/z32\"\n}\n{\n  \"private\": true,\n  \"name\": \"bare-ios\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Example of embedding Bare in an iOS application\",\n  \"scripts\": {\n    \"test\": \"prettier . --check\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"git+https://github.com/holepunchto/bare-ios.git\"\n  },\n  \"author\": \"Holepunch\",\n  \"license\": \"Apache-2.0\",\n  \"bugs\": {\n    \"url\": \"https://github.com/holepunchto/bare-ios/issues\"\n  },\n  \"homepage\": \"https://github.com/holepunchto/bare-ios#readme\",\n  \"devDependencies\": {\n    \"bare-link\": \"^1.0.4\",\n    \"bare-pack\": \"^1.2.1\",\n    \"prettier\": \"^3.4.2\",\n    \"prettier-config-standard\": \"^7.0.0\"\n  },\n  \"dependencies\": {\n    \"b4a\": \"^1.6.7\",\n    \"hyperbee\": \"^2.21.2\",\n    \"hypercore\": \"^10.38.2\",\n    \"hyperswarm\": \"^4.8.4\",\n    \"sodium-native\": \"^4.3.1\",\n    \"udx-native\": \"^1.17.2\"\n  }\n}\nconst { IPC } = BareKit\nconst Hyperswarm = require('hyperswarm');\nconst Hyperbee = require('hyperbee');\nconst Hypercore = require('hypercore');\nconst sodium = require('sodium-native');\nconst b4a = require('b4a');\n\nlet swarm = null;\nlet db = null;\nconst conns = []\n\nIPC.setEncoding('utf8');\n\n\nIPC.on('data', async (data) => {\n    try {\n        const message = JSON.parse(data);\n\n        switch (message.action) {\n            case 'startHyperswarm':\n                await startHyperswarm(message.data);\n                break;\n            case 'requestPublicKey':\n                await getPublicKey();\n                break;\n            case 'joinPeer':\n                await addPeer(message.data);\n                break;\n            case 'locationUpdate':\n                await sendUserLocation(data)\n                break;\n\n        }\n    } catch (error) {\n        console.error(\"Erorr handling IPC message: \", error);\n    }\n});\n\nasync function getPublicKey() {\n    const publicKeyBase64 = await db.get('publicKey');\n    const message = {\n        action: 'requestPublicKey',\n        data: {\n            publicKey: publicKeyBase64.value\n        }\n    };\n    IPC.write(JSON.stringify(message))\n}\n\n\nasync function startHyperswarm(documentsPath) {\n    try {\n        const core = new Hypercore(documentsPath, { valueEncoding: 'json' });\n        db = new Hyperbee(core, { keyEncoding: 'utf-8', valueEncoding: 'json' });\n\n        const { publicKey, secretKey } = await getOrCreateKeys();\n\n        if (!swarm) {\n            swarm = new Hyperswarm({\n                keyPair: { publicKey, secretKey }\n            });\n            swarm.listen();\n            swarm.on('connection', handleConnection);\n\n        }\n    } catch (error) {\n        console.error(\"Error initializing Hyperswarm:\", error);\n    }\n}\n\nasync function handleConnection(conn) {\n    conns.push(conn);\n    conn.once('close', () => conns.splice(conns.indexOf(conn), 1));\n\n    conn.on('data', (data) => {\n        IPC.write(data)\n    });\n\n    conn.on('error', e => console.log(`Connection error: ${e}`));\n\n\n}\n\nasync function getOrCreateKeys() {\n    try {\n        const publicKeyBase64 = await db.get('publicKey');\n        const secretKeyBase64 = await db.get('secretKey');\n\n        if (publicKeyBase64 && secretKeyBase64) {\n            return {\n                publicKey: b4a.from(publicKeyBase64.value, 'base64'),\n                secretKey: b4a.from(secretKeyBase64.value, 'base64')\n            };\n        }\n\n        const publicKey = b4a.alloc(32); // 32-byte public key\n        const secretKey = b4a.alloc(64); // 64-byte secret key\n        sodium.crypto_sign_keypair(publicKey, secretKey);\n\n        await db.put('publicKey', b4a.toString(publicKey, 'base64'));\n        await db.put('secretKey', b4a.toString(secretKey, 'base64'));\n\n        console.log(\"Generated new key pair.\");\n        return { publicKey, secretKey };\n\n    } catch (error) {\n        console.error(\"Error retrieving or generating keys:\", error);\n    }\n}\n\nasync function addPeer(peerPublicKey) {\n    swarm.joinPeer(b4a.from(peerPublicKey, 'base64'));\n\n}\n\nasync function sendUserLocation(locationData) {\n    for (const conn of conns) {\n        conn.write(locationData);\n    }\n}\n\n\n\n"
